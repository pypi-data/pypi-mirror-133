{"version":3,"file":"node_modules_educational-technology-collective_etc_smartboard_dist_index_js.751eb7fc32a28e79664b.js","mappings":";;;;;;;;;;;;;AAAA;AACO;AACP,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wCAAwC;AAC9E;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,2BAA2B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,2BAA2B;AAClG;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG,6EAA6E,cAAc;AAC3F;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA,cAAc,6BAA6B;AAC3C,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,oCAAoC,iBAAiB,EAAE,gBAAgB;AACvE;AACA,qBAAqB,iBAAiB,EAAE,gBAAgB;AACxD;AACA;AACA","sources":["webpack://@educational-technology-collective/etc_jupyterlab_distribution/./node_modules/@educational-technology-collective/etc_smartboard/dist/index.js"],"sourcesContent":["const XMLNS = 'http://www.w3.org/2000/svg';\nexport class SmartBoard {\n    constructor({ parent }) {\n        this.x = 0;\n        this.y = 0;\n        this.target = new EventTarget();\n        const svg = document.createElementNS(XMLNS, 'svg');\n        svg.setAttributeNS(null, 'width', '100%');\n        svg.setAttributeNS(null, 'height', '100%');\n        parent.appendChild(svg);\n        svg.addEventListener('mousemove', this);\n        svg.addEventListener('mousedown', this);\n        this.svg = svg;\n    }\n    dispose() {\n    }\n    handleEvent(event) {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        switch (event.type) {\n            case 'mousemove':\n                this.updateCoords(event.offsetX, event.offsetY);\n                this.target.dispatchEvent(new CustomEvent('xy', { detail: event }));\n                break;\n            case 'mousedown':\n                this.handleMouseDown(event);\n                break;\n            default:\n                break;\n        }\n    }\n    updateCoords(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    handleMouseDown(event) {\n        if (!this.x || !this.y) {\n            this.updateCoords(event.offsetX, event.offsetY);\n        }\n        let entity = new PathEntity({ smartBoard: this, x: this.x, y: this.y });\n    }\n}\nclass PathEntity {\n    constructor({ smartBoard, x, y }) {\n        this.path = [];\n        this.handleXyDraw = this.handleXyDraw.bind(this);\n        this.handleXyMove = this.handleXyMove.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUpDraw = this.handleMouseUpDraw.bind(this);\n        this.handleMouseUpMove = this.handleMouseUpMove.bind(this);\n        this.smartBoard = smartBoard;\n        let element = this.element = document.createElementNS(XMLNS, 'path');\n        element.setAttributeNS(null, 'stroke', 'black');\n        element.setAttributeNS(null, 'fill', 'none');\n        element.setAttributeNS(null, 'stroke-width', '2');\n        this.smartBoard.svg.appendChild(element);\n        this.path.push([x, y]);\n        smartBoard.target.addEventListener('xy', this.handleXyDraw);\n        document.addEventListener('mouseup', this.handleMouseUpDraw, { capture: true, once: true });\n    }\n    dispose() { }\n    handleMouseDown(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.smartBoard.target.addEventListener('xy', this.handleXyMove);\n        document.addEventListener('mouseup', this.handleMouseUpMove, { capture: true, once: true });\n    }\n    handleMouseUpMove(event) {\n        this.smartBoard.target.removeEventListener('xy', this.handleXyMove);\n        this.element.addEventListener('mousedown', this.handleMouseDown, { capture: true, once: true });\n    }\n    handleMouseUpDraw(event) {\n        this.smartBoard.target.removeEventListener('xy', this.handleXyDraw);\n        this.element.addEventListener('mousedown', this.handleMouseDown, { capture: true, once: true });\n        this.smartBoard.target.dispatchEvent(new CustomEvent('new_entity', { detail: this }));\n    }\n    handleXyDraw(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        let { offsetX: x, offsetY: y } = event.detail;\n        this.path.push([x, y]);\n        this.render();\n    }\n    handleXyMove(event) {\n        let { movementX: x, movementY: y } = event.detail;\n        for (let i = 0; i < this.path.length; i++) {\n            this.path[i][0] = this.path[i][0] + x;\n            this.path[i][1] = this.path[i][1] + y;\n        }\n        this.render();\n    }\n    render() {\n        let lineTo = '';\n        for (let i = 1; i < this.path.length; i++) {\n            lineTo = lineTo + ` L ${this.path[i][0]} ${this.path[i][1]}`;\n        }\n        let d = `M ${this.path[0][0]} ${this.path[0][1]}` + lineTo;\n        this.element.setAttributeNS(null, 'd', d);\n    }\n}\n"],"names":[],"sourceRoot":""}