"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPolygon(object):
    """
    https://doc.qt.io/qt-5/qpolygon.html

    **Detailed Description**

    A QPolygon object is a **QVector** <**QPoint** >. The easiest way to add
    points to a QPolygon is to use **QVector** 's streaming operator, as
    illustrated below:

    **QPolygon**  polygon;
                polygon << **QPoint** (10, 20) <<
    **QPoint** (20, 30);

    In addition to the functions provided by **QVector** , QPolygon provides
    some point-specific functions.

    Each point in a polygon can be retrieved by passing its index to the
    **point** () function. To populate the polygon, QPolygon provides the
    **setPoint** () function to set the point at a given index, the
    **setPoints** () function to set all the points in the polygon (resizing it
    to the given number of points), and the **putPoints** () function which
    copies a number of given points into the polygon from a specified index
    (resizing the polygon if necessary).

    QPolygon provides the **boundingRect** () and **translate** () functions for
    geometry functions. Use the **QTransform::map** () function for more general
    transformations of QPolygons.

    The QPolygon class is **implicitly shared** .

    **See also** **QVector** , **QPolygonF** , and **QLine** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#QPolygon

        **QPolygon::QPolygon()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtGui.QPolygon) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#QPolygon

        **QPolygon::QPolygon()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, r: PySide2.QtCore.QRect, closed: bool = ...) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#QPolygon

        **QPolygon::QPolygon()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, size: int) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#QPolygon

        **QPolygon::QPolygon()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, v: typing.List) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#QPolygon

        **QPolygon::QPolygon()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    def __add__(self, l: typing.List) -> typing.List:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __iadd__(self, t: PySide2.QtCore.QPoint) -> typing.List:
        ...

    @typing.overload
    def __lshift__(self, l: typing.List) -> typing.List:
        ...

    @typing.overload
    def __lshift__(
        self, stream: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    @typing.overload
    def __lshift__(self, t: PySide2.QtCore.QPoint) -> typing.List:
        ...

    @typing.overload
    def __mul__(self, m: PySide2.QtGui.QMatrix) -> PySide2.QtGui.QPolygon:
        ...

    @typing.overload
    def __mul__(self, m: PySide2.QtGui.QTransform) -> PySide2.QtGui.QPolygon:
        ...

    def __reduce__(self) -> object:
        ...

    def __rshift__(
        self, stream: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    @typing.overload
    def append(self, l: typing.List) -> None:
        ...

    @typing.overload
    def append(self, t: PySide2.QtCore.QPoint) -> None:
        ...

    def at(self, i: int) -> PySide2.QtCore.QPoint:
        ...

    def back(self) -> PySide2.QtCore.QPoint:
        ...

    def boundingRect(self) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qpolygon.html#boundingRect

        **QRect QPolygon::boundingRect() const**

        Returns the bounding rectangle of the polygon, or **QRect** (0, 0, 0, 0)
        if the polygon is empty.

        **See also** **QVector::isEmpty** ().
        """
        ...

    def capacity(self) -> int:
        ...

    def clear(self) -> None:
        ...

    def constData(self) -> PySide2.QtCore.QPoint:
        ...

    def constFirst(self) -> PySide2.QtCore.QPoint:
        ...

    def constLast(self) -> PySide2.QtCore.QPoint:
        ...

    def contains(self, t: PySide2.QtCore.QPoint) -> bool:
        ...

    def containsPoint(
        self, pt: PySide2.QtCore.QPoint, fillRule: PySide2.QtCore.Qt.FillRule
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qpolygon.html#containsPoint

        **bool QPolygon::containsPoint(const QPoint & point , Qt::FillRule
        fillRule ) const**

        Returns `true` if the given **point** is inside the polygon according to
        the specified **fillRule** ; otherwise returns `false`.

        This function was introduced in Qt 4.3.
        """
        ...

    @typing.overload
    def count(self) -> int:
        ...

    @typing.overload
    def count(self, t: PySide2.QtCore.QPoint) -> int:
        ...

    def data(self) -> PySide2.QtCore.QPoint:
        ...

    def empty(self) -> bool:
        ...

    def endsWith(self, t: PySide2.QtCore.QPoint) -> bool:
        ...

    def fill(self, t: PySide2.QtCore.QPoint, size: int = ...) -> typing.List:
        ...

    def first(self) -> PySide2.QtCore.QPoint:
        ...

    @staticmethod
    def fromList(list: typing.Sequence) -> typing.List:
        ...

    def front(self) -> PySide2.QtCore.QPoint:
        ...

    def indexOf(self, t: PySide2.QtCore.QPoint, from_: int = ...) -> int:
        ...

    @typing.overload
    def insert(self, i: int, n: int, t: PySide2.QtCore.QPoint) -> None:
        ...

    @typing.overload
    def insert(self, i: int, t: PySide2.QtCore.QPoint) -> None:
        ...

    def intersected(self, r: PySide2.QtGui.QPolygon) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qpolygon.html#intersected

        **QPolygon QPolygon::intersected(const QPolygon & r ) const**

        Returns a polygon which is the intersection of this polygon and **r**.

        Set operations on polygons will treat the polygons as areas. Non-closed
        polygons will be treated as implicitly closed.

        This function was introduced in Qt 4.3.

        **See also** **intersects** ().
        """
        ...

    def intersects(self, r: PySide2.QtGui.QPolygon) -> bool:
        """
        https://doc.qt.io/qt-5/qpolygon.html#intersects

        **bool QPolygon::intersects(const QPolygon & p ) const**

        Returns `true` if the current polygon intersects at any point the given
        polygon **p**. Also returns `true` if the current polygon contains or is
        contained by any part of **p**.

        Set operations on polygons will treat the polygons as areas. Non-closed
        polygons will be treated as implicitly closed.

        This function was introduced in Qt 5.10.

        **See also** **intersected** ().
        """
        ...

    def isEmpty(self) -> bool:
        ...

    def isSharedWith(self, other: typing.List) -> bool:
        ...

    def last(self) -> PySide2.QtCore.QPoint:
        ...

    def lastIndexOf(self, t: PySide2.QtCore.QPoint, from_: int = ...) -> int:
        ...

    def length(self) -> int:
        ...

    def mid(self, pos: int, len: int = ...) -> typing.List:
        ...

    def move(self, from_: int, to: int) -> None:
        ...

    def pop_back(self) -> None:
        ...

    def pop_front(self) -> None:
        ...

    def prepend(self, t: PySide2.QtCore.QPoint) -> None:
        ...

    def push_back(self, t: PySide2.QtCore.QPoint) -> None:
        ...

    def push_front(self, t: PySide2.QtCore.QPoint) -> None:
        ...

    @typing.overload
    def remove(self, i: int) -> None:
        ...

    @typing.overload
    def remove(self, i: int, n: int) -> None:
        ...

    def removeAll(self, t: PySide2.QtCore.QPoint) -> int:
        ...

    def removeAt(self, i: int) -> None:
        ...

    def removeFirst(self) -> None:
        ...

    def removeLast(self) -> None:
        ...

    def removeOne(self, t: PySide2.QtCore.QPoint) -> bool:
        ...

    def replace(self, i: int, t: PySide2.QtCore.QPoint) -> None:
        ...

    def reserve(self, size: int) -> None:
        ...

    def resize(self, size: int) -> None:
        ...

    def setSharable(self, sharable: bool) -> None:
        ...

    def shrink_to_fit(self) -> None:
        ...

    def size(self) -> int:
        ...

    def squeeze(self) -> None:
        ...

    def startsWith(self, t: PySide2.QtCore.QPoint) -> bool:
        ...

    def subtracted(self, r: PySide2.QtGui.QPolygon) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qpolygon.html#subtracted

        **QPolygon QPolygon::subtracted(const QPolygon & r ) const**

        Returns a polygon which is **r** subtracted from this polygon.

        Set operations on polygons will treat the polygons as areas. Non-closed
        polygons will be treated as implicitly closed.

        This function was introduced in Qt 4.3.
        """
        ...

    def swap(self, other: PySide2.QtGui.QPolygon) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#swap

        **void QPolygon::swap(QPolygon & other )**

        Swaps polygon **other** with this polygon. This operation is very fast
        and never fails.

        This function was introduced in Qt 4.8.
        """
        ...

    def swapItemsAt(self, i: int, j: int) -> None:
        ...

    def takeAt(self, i: int) -> PySide2.QtCore.QPoint:
        ...

    def takeFirst(self) -> PySide2.QtCore.QPoint:
        ...

    def takeLast(self) -> PySide2.QtCore.QPoint:
        ...

    def toList(self) -> typing.List:
        ...

    @typing.overload
    def translate(self, dx: int, dy: int) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#translate

        **void QPolygon::translate(int dx , int dy )**

        Translates all points in the polygon by ( **dx** , **dy** ).

        **See also** **translated** ().
        """
        ...

    @typing.overload
    def translate(self, offset: PySide2.QtCore.QPoint) -> None:
        """
        https://doc.qt.io/qt-5/qpolygon.html#translate

        **void QPolygon::translate(int dx , int dy )**

        Translates all points in the polygon by ( **dx** , **dy** ).

        **See also** **translated** ().
        """
        ...

    @typing.overload
    def translated(self, dx: int, dy: int) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qpolygon.html#translated

        **QPolygon QPolygon::translated(int dx , int dy ) const**

        Returns a copy of the polygon that is translated by ( **dx** , **dy** ).

        This function was introduced in Qt 4.6.

        **See also** **translate** ().
        """
        ...

    @typing.overload
    def translated(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qpolygon.html#translated

        **QPolygon QPolygon::translated(int dx , int dy ) const**

        Returns a copy of the polygon that is translated by ( **dx** , **dy** ).

        This function was introduced in Qt 4.6.

        **See also** **translate** ().
        """
        ...

    def united(self, r: PySide2.QtGui.QPolygon) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qpolygon.html#united

        **QPolygon QPolygon::united(const QPolygon & r ) const**

        Returns a polygon which is the union of this polygon and **r**.

        Set operations on polygons, will treat the polygons as areas, and
        implicitly close the polygon.

        This function was introduced in Qt 4.3.

        **See also** **intersected** () and **subtracted** ().
        """
        ...

    @typing.overload
    def value(self, i: int) -> PySide2.QtCore.QPoint:
        ...

    @typing.overload
    def value(
        self, i: int, defaultValue: PySide2.QtCore.QPoint
    ) -> PySide2.QtCore.QPoint:
        ...
