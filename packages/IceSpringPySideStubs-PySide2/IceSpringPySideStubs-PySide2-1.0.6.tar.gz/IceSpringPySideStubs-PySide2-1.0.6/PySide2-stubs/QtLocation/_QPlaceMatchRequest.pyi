"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning
import PySide2.QtLocation

bytes = str


class QPlaceMatchRequest(object):
    """
    https://doc.qt.io/qt-5/qplacematchrequest.html

    **Detailed Description**

    Places from another manager that may have corresponding/matching places in
    the current manager are assigned using **setPlaces** () or **setResults**
    (). A set of further parameters are specified which determines the criteria
    for matching.

    The typical key for matching is the **QPlaceMatchRequest::AlternativeId** ,
    the value is an alternative identifier attribute type of the format
    x_id_<provider name> for example x_id_here. The provider name is name
    supplied to the **QGeoServiceProvider**  instance.

    See **Matching places between managers**  for an example on how to use a
    match request.

    **See also** **QPlaceMatchReply**  and **QPlaceManager** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#QPlaceMatchRequest

        **QPlaceMatchRequest::QPlaceMatchRequest()**

        Default constructor. Constructs a new request object.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtLocation.QPlaceMatchRequest) -> None:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#QPlaceMatchRequest

        **QPlaceMatchRequest::QPlaceMatchRequest()**

        Default constructor. Constructs a new request object.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def clear(self) -> None:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#clear

        **void QPlaceMatchRequest::clear()**

        Clears the match request.
        """
        ...

    def parameters(self) -> typing.Dict:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#parameters

        **QVariantMap QPlaceMatchRequest::parameters() const**

        Returns the parameters for matching places.

        **See also** **setParameters** ().
        """
        ...

    def places(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#places

        **QList<QPlace> QPlaceMatchRequest::places() const**

        Returns a list of places which are to be matched.

        **See also** **setPlaces** ().
        """
        ...

    def setParameters(self, parameters: typing.Dict) -> None:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#setParameters

        **void QPlaceMatchRequest::setParameters(const QVariantMap & parameters
        )**

        Sets the **parameters** for matching places.

        **See also** **parameters** ().
        """
        ...

    def setPlaces(self, places: typing.Sequence) -> None:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#setPlaces

        **void QPlaceMatchRequest::setPlaces(const QList<QPlace> places )**

        Sets a list of **places** which are to be matched.

        **See also** **places** () and **setResults** ().
        """
        ...

    def setResults(self, results: typing.Sequence) -> None:
        """
        https://doc.qt.io/qt-5/qplacematchrequest.html#setResults

        **void QPlaceMatchRequest::setResults(const QList<QPlaceSearchResult> &
        results )**

        Convenience function which uses a set of search **results** to set the
        places which should be matched.

        **See also** **setPlaces** ().
        """
        ...
