"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

Licence: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtMultimedia, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QCameraImageCapture(
    PySide2.QtCore.QObject, PySide2.QtMultimedia.QMediaBindableInterface
):
    """
    https://doc.qt.io/qt-5/qcameraimagecapture.html

    **Detailed Description**

    The QCameraImageCapture class is a high level images recording class. It's
    not intended to be used alone but for accessing the media recording
    functions of other media objects, like **QCamera** .

    camera = new **QCamera** ;

        viewfinder = new **QCameraViewfinder**
    ();
        viewfinder->show();

        camera->setViewfinder(viewfinder);
    imageCapture = new **QCameraImageCapture** (camera);
    camera->setCaptureMode(**QCamera** ::CaptureStillImage);
    camera->start();
        //on half pressed shutter button
    camera->searchAndLock();

        //on shutter button pressed
    imageCapture->capture();

        //on shutter button released
    camera->unlock();

    **See also** **QCamera** .
    """

    NoError: QCameraImageCapture = ...
    SingleImageCapture: QCameraImageCapture = ...
    CaptureToFile: QCameraImageCapture = ...
    NotReadyError: QCameraImageCapture = ...
    CaptureToBuffer: QCameraImageCapture = ...
    ResourceError: QCameraImageCapture = ...
    OutOfSpaceError: QCameraImageCapture = ...
    NotSupportedFeatureError: QCameraImageCapture = ...
    FormatError: QCameraImageCapture = ...

    class CaptureDestination(object):
        CaptureToFile: QCameraImageCapture.CaptureDestination = ...
        CaptureToBuffer: QCameraImageCapture.CaptureDestination = ...

    class CaptureDestinations(object):
        ...

    class DriveMode(object):
        SingleImageCapture: QCameraImageCapture.DriveMode = ...

    class Error(object):
        NoError: QCameraImageCapture.Error = ...
        NotReadyError: QCameraImageCapture.Error = ...
        ResourceError: QCameraImageCapture.Error = ...
        OutOfSpaceError: QCameraImageCapture.Error = ...
        NotSupportedFeatureError: QCameraImageCapture.Error = ...
        FormatError: QCameraImageCapture.Error = ...

    def __init__(
        self,
        mediaObject: PySide2.QtMultimedia.QMediaObject,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#QCameraImageCapture

        **QCameraImageCapture::QCameraImageCapture(QMediaObject * mediaObject ,
        QObject * parent = nullptr)**

        Constructs a media recorder which records the media produced by
        **mediaObject**.

        The **parent** is passed to **QMediaObject** .
        """
        ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#availability

        **QMultimedia::AvailabilityStatus QCameraImageCapture::availability()
        const**

        Returns the availability of this functionality.
        """
        ...

    def bufferFormat(self) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#bufferFormat

        **QVideoFrame::PixelFormat QCameraImageCapture::bufferFormat() const**

        Returns the buffer image capture format being used.

        **See also** **supportedBufferFormats** () and **setBufferFormat** ().
        """
        ...

    def cancelCapture(self) -> None:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#cancelCapture

        **[slot] void QCameraImageCapture::cancelCapture()**

        Cancel incomplete capture requests. Already captured and queused for
        proicessing images may be discarded.
        """
        ...

    def capture(self, location: str = ...) -> int:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#capture

        **[slot] int QCameraImageCapture::capture(const QString & file =
        QString())**

        Capture the image and save it to **file**. This operation is
        asynchronous in majority of cases, followed by signals
        **QCameraImageCapture::imageExposed** (),
        **QCameraImageCapture::imageCaptured** (),
        **QCameraImageCapture::imageSaved** () or **QCameraImageCapture::error**
        ().

        If an empty **file** is passed, the camera backend choses the default
        location and naming scheme for photos on the system, if only file name
        without full path is specified, the image will be saved to the default
        directory, with a full path reported with **imageCaptured** () and
        **imageSaved** () signals.

        **QCamera**  saves all the capture parameters like exposure settings or
        image processing parameters, so changes to camera parameters after
        capture() is called do not affect previous capture requests.

        QCameraImageCapture::capture returns the capture Id parameter, used with
        **imageExposed** (), **imageCaptured** () and **imageSaved** () signals.

        **See also** **isReadyForCapture** ().
        """
        ...

    def captureDestination(
        self,
    ) -> PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#captureDestination

        **QCameraImageCapture::CaptureDestinations
        QCameraImageCapture::captureDestination() const**

        Returns the image capture destination being used.

        **See also** **isCaptureDestinationSupported** () and
        **setCaptureDestination** ().
        """
        ...

    def encodingSettings(self) -> PySide2.QtMultimedia.QImageEncoderSettings:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#encodingSettings

        **QImageEncoderSettings QCameraImageCapture::encodingSettings() const**

        Returns the image encoder settings being used.

        **See also** **setEncodingSettings** ().
        """
        ...

    def errorString(self) -> str:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#errorString

        **QString QCameraImageCapture::errorString() const**

        Returns a string describing the current error state.

        **See also** **error** ().
        """
        ...

    def imageCodecDescription(self, codecName: str) -> str:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#imageCodecDescription

        **QString QCameraImageCapture::imageCodecDescription(const QString &
        codec ) const**

        Returns a description of an image **codec**.
        """
        ...

    def isAvailable(self) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#isAvailable

        **bool QCameraImageCapture::isAvailable() const**

        Returns true if the images capture service ready to use.
        """
        ...

    def isCaptureDestinationSupported(
        self, destination: PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#isCaptureDestinationSupp
        orted

        **bool QCameraImageCapture::isCaptureDestinationSupported(QCameraImageCa
        pture::CaptureDestinations destination ) const**

        Returns true if the image capture **destination** is supported;
        otherwise returns false.

        **See also** **captureDestination** () and **setCaptureDestination** ().
        """
        ...

    def isReadyForCapture(self) -> bool:
        ...

    def mediaObject(self) -> PySide2.QtMultimedia.QMediaObject:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#mediaObject

        **[override virtual] QMediaObject *QCameraImageCapture::mediaObject()
        const**

        Reimplements: **QMediaBindableInterface::mediaObject** () const.

        **See also** **setMediaObject** ().
        """
        ...

    def setBufferFormat(
        self, format: PySide2.QtMultimedia.QVideoFrame.PixelFormat
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#setBufferFormat

        **void QCameraImageCapture::setBufferFormat(const
        QVideoFrame::PixelFormat format )**

        Sets the buffer image capture **format** to be used.

        **See also** **bufferFormat** (), **supportedBufferFormats** (), and
        **captureDestination** ().
        """
        ...

    def setCaptureDestination(
        self, destination: PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#setCaptureDestination

        **void QCameraImageCapture::setCaptureDestination(QCameraImageCapture::C
        aptureDestinations destination )**

        Sets the capture **destination** to be used.

        **See also** **isCaptureDestinationSupported** () and
        **captureDestination** ().
        """
        ...

    def setEncodingSettings(
        self, settings: PySide2.QtMultimedia.QImageEncoderSettings
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#setEncodingSettings

        **void QCameraImageCapture::setEncodingSettings(const
        QImageEncoderSettings & settings )**

        Sets the image encoding **settings**.

        If some parameters are not specified, or null settings are passed, the
        encoder choose the default encoding parameters.

        **See also** **encodingSettings** ().
        """
        ...

    def setMediaObject(self, arg__1: PySide2.QtMultimedia.QMediaObject) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#setMediaObject

        **[override virtual protected] bool
        QCameraImageCapture::setMediaObject(QMediaObject * mediaObject )**

        Reimplements: **QMediaBindableInterface::setMediaObject** (QMediaObject
        *object).

        **See also** **mediaObject** ().
        """
        ...

    def supportedBufferFormats(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#supportedBufferFormats

        **QList<QVideoFrame::PixelFormat>
        QCameraImageCapture::supportedBufferFormats() const**

        Returns the list of supported buffer image capture formats.

        **See also** **bufferFormat** () and **setBufferFormat** ().
        """
        ...

    def supportedImageCodecs(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#supportedImageCodecs

        **QStringList QCameraImageCapture::supportedImageCodecs() const**

        Returns a list of supported image codecs.
        """
        ...

    @property
    def bufferFormatChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#bufferFormatChanged

        **[signal] void
        QCameraImageCapture::bufferFormatChanged(QVideoFrame::PixelFormat format
        )**

        Signal emitted when the buffer **format** for the buffer image capture
        has changed.
        """
        ...

    @property
    def captureDestinationChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#captureDestinationChange
        d

        **[signal] void QCameraImageCapture::captureDestinationChanged(QCameraIm
        ageCapture::CaptureDestinations destination )**

        Signal emitted when the capture **destination** has changed.
        """
        ...

    @property
    def error(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#error

        **QCameraImageCapture::Error QCameraImageCapture::error() const**

        Returns the current error state.

        **See also** **errorString** ().
        """
        ...

    @property
    def imageAvailable(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#imageAvailable

        **[signal] void QCameraImageCapture::imageAvailable(int id , const
        QVideoFrame & frame )**

        Signal emitted when **QCameraImageCapture::CaptureToBuffer**  is set and
        the **frame** with request **id** is available.
        """
        ...

    @property
    def imageCaptured(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#imageCaptured

        **[signal] void QCameraImageCapture::imageCaptured(int id , const QImage
        & preview )**

        Signal emitted when **QAbstractVideoSurface**  is used as a viewfinder
        and the frame with request **id** was captured, but not processed and
        saved yet. Frame **preview** can be displayed to user.
        """
        ...

    @property
    def imageExposed(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#imageExposed

        **[signal] void QCameraImageCapture::imageExposed(int id )**

        Signal emitted when the frame with request **id** was exposed.
        """
        ...

    @property
    def imageMetadataAvailable(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#imageMetadataAvailable

        **[signal] void QCameraImageCapture::imageMetadataAvailable(int id ,
        const QString & key , const QVariant & value )**

        Signals that a metadata for an image with request **id** is available.
        Also includes the **key** and **value** of the metadata.

        This signal is emitted between **imageExposed**  and **imageSaved**
        signals.
        """
        ...

    @property
    def imageSaved(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#imageSaved

        **[signal] void QCameraImageCapture::imageSaved(int id , const QString &
        fileName )**

        Signal emitted when **QCameraImageCapture::CaptureToFile**  is set and
        the frame with request **id** was saved to **fileName**.
        """
        ...

    @property
    def readyForCaptureChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraimagecapture.html#readyForCaptureChanged

        **[signal] void QCameraImageCapture::readyForCaptureChanged(bool ready
        )**

        Signals that a camera's **ready** for capture state has changed.

        **Note:** Notifier signal for property **readyForCapture** .
        """
        ...
