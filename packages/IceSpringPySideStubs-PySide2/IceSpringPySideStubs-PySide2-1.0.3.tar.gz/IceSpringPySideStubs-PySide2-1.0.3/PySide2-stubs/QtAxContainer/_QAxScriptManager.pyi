"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtAxContainer

bytes = str


class QAxScriptManager(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qaxscriptmanager.html

    **Detailed Description**

    The QAxScriptManager acts as a bridge between the COM objects embedded in the Qt application through **QAxObject**  or **QAxWidget** , and the scripting languages available through the Windows Script technologies, usually JScript and VBScript.

    Create one QAxScriptManager for each separate document in your application, and add the COM objects the scripts need to access using **addObject** (). Then **load** () the script sources and invoke the functions using **call** ().

    **Warning:** This class is not available with the bcc5.5 compiler.

    **See also** **QAxScript** , **QAxScriptEngine** , **QAxBase** , and **ActiveQt Framework** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#QAxScriptManager

        **QAxScriptManager::QAxScriptManager(QObject * parent = nullptr)**

        Creates a QAxScriptManager object. **parent** is passed on to the **QObject**  constructor.

        It is usual to create one QAxScriptManager for each document in an application.
        """
        ...

    def addObject(self, object: PySide2.QtAxContainer.QAxBase) -> None:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#addObject

        **void QAxScriptManager::addObject(QAxBase * object )**

        Adds **object** to the manager. Scripts handled by this manager can access the object in the code using the object's **objectName**  property.

        You must add all the necessary objects before loading any scripts.
        """
        ...

    @typing.overload
    def call(self, function: str, arguments: typing.Sequence) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#call

        **QVariant QAxScriptManager::call(const QString & function , const QVariant & var1 = QVariant(), const QVariant & var2 = QVariant(), const QVariant & var3 = QVariant(), const QVariant & var4 = QVariant(), const QVariant & var5 = QVariant(), const QVariant & var6 = QVariant(), const QVariant & var7 = QVariant(), const QVariant & var8 = QVariant())**

        Calls **function** , passing the parameters **var1** , **var1** , **var2** , **var3** , **var4** , **var5** , **var6** , **var7** and **var8** as arguments and returns the value returned by the function, or an invalid **QVariant**  if the function does not return a value or when the function call failed. The call returns when the script\'s execution has finished.

        In most script engines the only supported parameter type is "const **QVariant** &", for example, to call a JavaScript function

        function setNumber(number)
            {
                n = number;
            }

        use

        QValueList args;
            args << 5;
            script->call("setNumber(const QVariant&)", args);

        As with **dynamicCall**  the parameters can directly be embedded in the function string.

        script->call("setNumber(5)");

        However, this is slower.

        Functions provided by script engines that don\'t support introspection are not available and must be called directly using **QAxScript::call** () on the respective **script**  object.

        Note that calling this function can be significantely slower than using call() on the respective **QAxScript**  directly.
        """
        ...

    @typing.overload
    def call(
        self,
        function: str,
        v1: typing.Any = ...,
        v2: typing.Any = ...,
        v3: typing.Any = ...,
        v4: typing.Any = ...,
        v5: typing.Any = ...,
        v6: typing.Any = ...,
        v7: typing.Any = ...,
        v8: typing.Any = ...,
    ) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#call

        **QVariant QAxScriptManager::call(const QString & function , const QVariant & var1 = QVariant(), const QVariant & var2 = QVariant(), const QVariant & var3 = QVariant(), const QVariant & var4 = QVariant(), const QVariant & var5 = QVariant(), const QVariant & var6 = QVariant(), const QVariant & var7 = QVariant(), const QVariant & var8 = QVariant())**

        Calls **function** , passing the parameters **var1** , **var1** , **var2** , **var3** , **var4** , **var5** , **var6** , **var7** and **var8** as arguments and returns the value returned by the function, or an invalid **QVariant**  if the function does not return a value or when the function call failed. The call returns when the script\'s execution has finished.

        In most script engines the only supported parameter type is "const **QVariant** &", for example, to call a JavaScript function

        function setNumber(number)
            {
                n = number;
            }

        use

        QValueList args;
            args << 5;
            script->call("setNumber(const QVariant&)", args);

        As with **dynamicCall**  the parameters can directly be embedded in the function string.

        script->call("setNumber(5)");

        However, this is slower.

        Functions provided by script engines that don\'t support introspection are not available and must be called directly using **QAxScript::call** () on the respective **script**  object.

        Note that calling this function can be significantely slower than using call() on the respective **QAxScript**  directly.
        """
        ...

    def functions(
        self, arg__1: PySide2.QtAxContainer.QAxScript.FunctionFlags = ...
    ) -> typing.List:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#functions

        **QStringList QAxScriptManager::functions(QAxScript::FunctionFlags flags = QAxScript::FunctionNames) const**

        Returns a list with all the functions that are available. Functions provided by script engines that don't support introspection are not included in the list. The functions are either provided with full prototypes or only as names, depending on the value of **flags**.
        """
        ...

    @typing.overload
    def load(
        self, code: str, name: str, language: str
    ) -> PySide2.QtAxContainer.QAxScript:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#load

        **QAxScript *QAxScriptManager::load(const QString & code , const QString & name , const QString & language )**

        Loads the script source **code** using the script engine for **language**. The script can later be referred to using its **name** which should not be empty.

        The function returns a pointer to the script for the given **code** if the **code** was loaded successfully; otherwise it returns 0.

        If **language** is empty it will be determined heuristically. If **code** contains the string "End Sub" it will be interpreted as VBScript, otherwise as JScript. Additional script engines can be registered using **registerEngine** ().

        You must add all the objects necessary (using **addObject** ()) **before** loading any scripts. If **code** declares a function that is already available (no matter in which language) the first function is overloaded and can no longer be called via **call** (); but it will still be available by calling its **script**  directly.

        **See also** **addObject** (), **scriptNames** (), and **functions** ().
        """
        ...

    @typing.overload
    def load(self, file: str, name: str) -> PySide2.QtAxContainer.QAxScript:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#load

        **QAxScript *QAxScriptManager::load(const QString & code , const QString & name , const QString & language )**

        Loads the script source **code** using the script engine for **language**. The script can later be referred to using its **name** which should not be empty.

        The function returns a pointer to the script for the given **code** if the **code** was loaded successfully; otherwise it returns 0.

        If **language** is empty it will be determined heuristically. If **code** contains the string "End Sub" it will be interpreted as VBScript, otherwise as JScript. Additional script engines can be registered using **registerEngine** ().

        You must add all the objects necessary (using **addObject** ()) **before** loading any scripts. If **code** declares a function that is already available (no matter in which language) the first function is overloaded and can no longer be called via **call** (); but it will still be available by calling its **script**  directly.

        **See also** **addObject** (), **scriptNames** (), and **functions** ().
        """
        ...

    @staticmethod
    def registerEngine(name: str, extension: str, code: str = ...) -> bool:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#registerEngine

        **[static] bool QAxScriptManager::registerEngine(const QString & name , const QString & extension , const QString & code = QString())**

        Registers the script engine called **name** and returns true if the engine was found; otherwise does nothing and returns false.

        The script engine will be used when loading files with the given **extension** , or when loading source code that contains the string **code**.
        """
        ...

    def script(self, name: str) -> PySide2.QtAxContainer.QAxScript:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#script

        **QAxScript *QAxScriptManager::script(const QString & name ) const**

        Returns the script called **name**.

        You can use the returned pointer to call functions directly through **QAxScript::call** (), to access the script engine directly, or to delete and thus unload the script.
        """
        ...

    @staticmethod
    def scriptFileFilter() -> str:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#scriptFileFilter

        **[static] QString QAxScriptManager::scriptFileFilter()**

        Returns a file filter listing all the supported script languages. This filter string is convenient for use with **QFileDialog** .
        """
        ...

    def scriptNames(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#scriptNames

        **QStringList QAxScriptManager::scriptNames() const**

        Returns a list with the names of all the scripts.
        """
        ...

    @property
    def error(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qaxscriptmanager.html#error

        **[signal] void QAxScriptManager::error(QAxScript * script , int code , const QString & description , int sourcePosition , const QString & sourceText )**

        This signal is emitted when an execution error occurred while running **script**.

        **code** , **description** , **sourcePosition** and **sourceText** contain information about the execution error.

        **Warning:** Do not delete **script** in a slot connected to this signal. Use **deleteLater** () instead.
        """
        ...
