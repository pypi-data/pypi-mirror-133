"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPointingDeviceUniqueId(object):
    """
    https://doc.qt.io/qt-5/qpointingdeviceuniqueid.html

    **Detailed Description**

    QPointingDeviceUniqueIds can be compared for equality, and can be used as keys in a **QHash** . You get access to the numerical ID via **numericId** (), if the device supports such IDs. For future extensions, though, you should not use that function, but compare objects of this type using the equality operator.

    This class is a thin wrapper around an integer ID. You pass it into and out of functions by value.

    This type actively prevents you from holding it in a **QList** , because doing so would be very inefficient. Use a **QVector**  instead, which has the same API as **QList** , but more efficient storage.

    **See also** **QTouchEvent::TouchPoint** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qpointingdeviceuniqueid.html#QPointingDeviceUniqueId

        **QPointingDeviceUniqueId::QPointingDeviceUniqueId()**

        Constructs an invalid unique pointer ID.
        """
        ...

    @typing.overload
    def __init__(
        self, QPointingDeviceUniqueId: PySide2.QtGui.QPointingDeviceUniqueId
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpointingdeviceuniqueid.html#QPointingDeviceUniqueId

        **QPointingDeviceUniqueId::QPointingDeviceUniqueId()**

        Constructs an invalid unique pointer ID.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    @staticmethod
    def fromNumericId(id: int) -> PySide2.QtGui.QPointingDeviceUniqueId:
        """
        https://doc.qt.io/qt-5/qpointingdeviceuniqueid.html#fromNumericId

        **[static] QPointingDeviceUniqueId QPointingDeviceUniqueId::fromNumericId(qint64 id )**

        Constructs a unique pointer ID from numeric ID **id**.
        """
        ...

    def isValid(self) -> bool:
        """
        https://doc.qt.io/qt-5/qpointingdeviceuniqueid.html#isValid

        **bool QPointingDeviceUniqueId::isValid() const**

        Returns whether this unique pointer ID is valid, that is, it represents an actual pointer.
        """
        ...

    def numericId(self) -> int:
        """
        https://doc.qt.io/qt-5/qpointingdeviceuniqueid.html#numericId-prop

        **numericId : const qint64**

        This property holds the numeric unique ID of the token represented by a touchpoint

        If the device provides a numeric ID, **isValid** () returns true, and this property provides the numeric ID; otherwise it is -1.

        You should not use the value of this property in portable code, but instead rely on equality to identify pointers.

        **Access functions:**

        qint64 **numericId** () const

        **See also** **isValid** ().

        **Member Function Documentation**
        """
        ...
