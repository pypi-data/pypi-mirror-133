"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QTextDocumentWriter(object):
    """
    https://doc.qt.io/qt-5/qtextdocumentwriter.html

    **Detailed Description**

    To write a document, construct a QTextDocumentWriter object with either a file name or a device object, and specify the document format to be written. You can construct a writer and set the format using **setFormat** () later.

    Call **write** () to write the document to the device. If the document is successfully written, this function returns `true`. However, if an error occurs when writing the document, it will return false.

    Call **supportedDocumentFormats** () for a list of formats that QTextDocumentWriter can write.

    Since the capabilities of the supported output formats vary considerably, the writer simply outputs the appropriate subset of objects for each format. This typically includes the formatted text and images contained in a document.
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#QTextDocumentWriter

        **QTextDocumentWriter::QTextDocumentWriter()**

        Constructs an empty QTextDocumentWriter object. Before writing, you must call **setFormat** () to set a document format, then **setDevice** () or **setFileName** ().
        """
        ...

    @typing.overload
    def __init__(
        self, device: PySide2.QtCore.QIODevice, format: PySide2.QtCore.QByteArray
    ) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#QTextDocumentWriter

        **QTextDocumentWriter::QTextDocumentWriter()**

        Constructs an empty QTextDocumentWriter object. Before writing, you must call **setFormat** () to set a document format, then **setDevice** () or **setFileName** ().
        """
        ...

    @typing.overload
    def __init__(self, fileName: str, format: PySide2.QtCore.QByteArray = ...) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#QTextDocumentWriter

        **QTextDocumentWriter::QTextDocumentWriter()**

        Constructs an empty QTextDocumentWriter object. Before writing, you must call **setFormat** () to set a document format, then **setDevice** () or **setFileName** ().
        """
        ...

    def codec(self) -> PySide2.QtCore.QTextCodec:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#codec

        **QTextCodec *QTextDocumentWriter::codec() const**

        Returns the codec that is currently assigned to the writer.

        **See also** **setCodec** ().
        """
        ...

    def device(self) -> PySide2.QtCore.QIODevice:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#device

        **QIODevice *QTextDocumentWriter::device() const**

        Returns the device currently assigned, or `nullptr` if no device has been assigned.

        **See also** **setDevice** ().
        """
        ...

    def fileName(self) -> str:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#fileName

        **QString QTextDocumentWriter::fileName() const**

        If the currently assigned device is a **QFile** , or if **setFileName** () has been called, this function returns the name of the file to be written to. In all other cases, it returns an empty string.

        **See also** **setFileName** () and **setDevice** ().
        """
        ...

    def format(self) -> PySide2.QtCore.QByteArray:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#format

        **QByteArray QTextDocumentWriter::format() const**

        Returns the format used for writing documents.

        **See also** **setFormat** ().
        """
        ...

    def setCodec(self, codec: PySide2.QtCore.QTextCodec) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#setCodec

        **void QTextDocumentWriter::setCodec(QTextCodec * codec )**

        Sets the codec for this stream to **codec**. The codec is used for encoding any data that is written. By default, **QTextDocumentWriter**  uses UTF-8.

        **See also** **codec** ().
        """
        ...

    def setDevice(self, device: PySide2.QtCore.QIODevice) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#setDevice

        **void QTextDocumentWriter::setDevice(QIODevice * device )**

        Sets the writer's device to the **device** specified. If a device has already been set, the old device is removed but otherwise left unchanged.

        If the device is not already open, **QTextDocumentWriter**  will attempt to open the device in **QIODevice::WriteOnly**  mode by calling open().

        **Note:** This will not work for certain devices, such as **QProcess** , **QTcpSocket**  and **QUdpSocket** , where some configuration is required before the device can be opened.

        **See also** **device** () and **setFileName** ().
        """
        ...

    def setFileName(self, fileName: str) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#setFileName

        **void QTextDocumentWriter::setFileName(const QString & fileName )**

        Sets the name of the file to be written to **fileName**. Internally, **QTextDocumentWriter**  will create a **QFile**  and open it in **QIODevice::WriteOnly**  mode, and use this file when writing the document.

        **See also** **fileName** () and **setDevice** ().
        """
        ...

    def setFormat(self, format: PySide2.QtCore.QByteArray) -> None:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#setFormat

        **void QTextDocumentWriter::setFormat(const QByteArray & format )**

        Sets the format used to write documents to the **format** specified. **format** is a case insensitive text string. For example:

        **QTextDocumentWriter**  writer;
                    writer.setFormat("odf"); // same as writer.setFormat("ODF");

        You can call **supportedDocumentFormats** () for the full list of formats **QTextDocumentWriter**  supports.

        **See also** **format** ().
        """
        ...

    @staticmethod
    def supportedDocumentFormats() -> typing.List:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#supportedDocumentFormats

        **[static] QList<QByteArray> QTextDocumentWriter::supportedDocumentFormats()**

        Returns the list of document formats supported by **QTextDocumentWriter** .

        By default, Qt can write the following formats:

        FormatDescription
        plaintextPlain text
        HTMLHyperText Markup Language
        markdownMarkdown (CommonMark or GitHub dialects)
        ODFOpenDocument Format

        **See also** **setFormat** ().
        """
        ...

    @typing.overload
    def write(self, document: PySide2.QtGui.QTextDocument) -> bool:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#write

        **bool QTextDocumentWriter::write(const QTextDocument * document )**

        Writes the given **document** to the assigned device or file and returns `true` if successful; otherwise returns `false`.
        """
        ...

    @typing.overload
    def write(self, fragment: PySide2.QtGui.QTextDocumentFragment) -> bool:
        """
        https://doc.qt.io/qt-5/qtextdocumentwriter.html#write

        **bool QTextDocumentWriter::write(const QTextDocument * document )**

        Writes the given **document** to the assigned device or file and returns `true` if successful; otherwise returns `false`.
        """
        ...
