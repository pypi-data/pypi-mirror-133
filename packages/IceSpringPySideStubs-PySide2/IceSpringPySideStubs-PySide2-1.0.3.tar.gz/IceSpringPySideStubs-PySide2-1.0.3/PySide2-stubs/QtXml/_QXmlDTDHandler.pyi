"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtXml

bytes = str


class QXmlDTDHandler(object):
    """
    https://doc.qt.io/qt-5/qxmldtdhandler.html

    **Detailed Description**

    If an application needs information about notations and unparsed entities, it can implement this interface and register an instance with **QXmlReader::setDTDHandler** ().

    Note that this interface includes only those DTD events that the XML recommendation requires processors to report, i.e. notation and unparsed entity declarations using **notationDecl** () and **unparsedEntityDecl** () respectively.

    **See also** **QXmlDeclHandler** , **QXmlContentHandler** , **QXmlEntityResolver** , **QXmlErrorHandler** , **QXmlLexicalHandler** , and Introduction to SAX2.
    """

    def __init__(self) -> None:
        ...

    def errorString(self) -> str:
        """
        https://doc.qt.io/qt-5/qxmldtdhandler.html#errorString

        **[pure virtual] QString QXmlDTDHandler::errorString() const**

        The reader calls this function to get an error string if any of the handler functions returns `false`.
        """
        ...

    def notationDecl(self, name: str, publicId: str, systemId: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldtdhandler.html#notationDecl

        **[pure virtual] bool QXmlDTDHandler::notationDecl(const QString & name , const QString & publicId , const QString & systemId )**

        The reader calls this function when it has parsed a notation declaration.

        The argument **name** is the notation name, **publicId** is the notation's public identifier and **systemId** is the notation's system identifier.

        If this function returns `false` the reader stops parsing and reports an error. The reader uses the function **errorString** () to get the error message.
        """
        ...

    def unparsedEntityDecl(
        self, name: str, publicId: str, systemId: str, notationName: str
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldtdhandler.html#unparsedEntityDecl

        **[pure virtual] bool QXmlDTDHandler::unparsedEntityDecl(const QString & name , const QString & publicId , const QString & systemId , const QString & notationName )**

        The reader calls this function when it finds an unparsed entity declaration.

        The argument **name** is the unparsed entity's name, **publicId** is the entity's public identifier, **systemId** is the entity's system identifier and **notationName** is the name of the associated notation.

        If this function returns `false` the reader stops parsing and reports an error. The reader uses the function **errorString** () to get the error message.
        """
        ...
