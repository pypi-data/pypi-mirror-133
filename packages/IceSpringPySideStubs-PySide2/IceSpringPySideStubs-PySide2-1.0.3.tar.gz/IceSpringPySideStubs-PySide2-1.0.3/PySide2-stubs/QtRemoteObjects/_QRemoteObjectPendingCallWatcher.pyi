"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtRemoteObjects

bytes = str


class QRemoteObjectPendingCallWatcher(
    PySide2.QtCore.QObject, PySide2.QtRemoteObjects.QRemoteObjectPendingCall
):
    """
    https://doc.qt.io/qt-5/qremoteobjectpendingcallwatcher.html

    **Detailed Description**

    QRemoteObjectPendingCallWatcher provides a signal indicating when a **QRemoteObjectPendingCall**  has finished, allowing for convenient, non-blocking handling of the call.
    """

    def __init__(
        self,
        call: PySide2.QtRemoteObjects.QRemoteObjectPendingCall,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        ...

    def isFinished(self) -> bool:
        """
        https://doc.qt.io/qt-5/qremoteobjectpendingcallwatcher.html#isFinished

        **bool QRemoteObjectPendingCallWatcher::isFinished() const**

        Returns true if the remote call has finished, false otherwise.

        A finished call will include a **returnValue**  or error.
        """
        ...

    def waitForFinished(self) -> None:
        """
        https://doc.qt.io/qt-5/qremoteobjectpendingcallwatcher.html#waitForFinished

        **void QRemoteObjectPendingCallWatcher::waitForFinished()**

        Blocks until the remote call has finished.
        """
        ...

    @property
    def finished(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qremoteobjectpendingcallwatcher.html#finished

        **[signal] void QRemoteObjectPendingCallWatcher::finished(QRemoteObjectPendingCallWatcher * self )**

        This signal is emitted when the remote call has finished. **self** is the pointer to the watcher object that emitted the signal. A finished call will include a **returnValue**  or error.
        """
        ...
