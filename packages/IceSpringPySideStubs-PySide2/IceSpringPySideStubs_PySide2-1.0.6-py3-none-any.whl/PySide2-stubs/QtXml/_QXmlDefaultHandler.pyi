"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtXml

bytes = str


class QXmlDefaultHandler(
    PySide2.QtXml.QXmlContentHandler,
    PySide2.QtXml.QXmlErrorHandler,
    PySide2.QtXml.QXmlDTDHandler,
    PySide2.QtXml.QXmlEntityResolver,
    PySide2.QtXml.QXmlLexicalHandler,
    PySide2.QtXml.QXmlDeclHandler,
):
    """
    https://doc.qt.io/qt-5/qxmldefaulthandler.html

    **Detailed Description**

    This class gathers together the features of the specialized handler classes,
    making it a convenient starting point when implementing custom handlers for
    subclasses of **QXmlReader** , particularly **QXmlSimpleReader** . The
    virtual functions from each of the base classes are reimplemented in this
    class, providing sensible default behavior for many common cases. By
    subclassing this class, and overriding these functions, you can concentrate
    on implementing the parts of the handler relevant to your application.

    The XML reader must be told which handler to use for different kinds of
    events during parsing. This means that, although QXmlDefaultHandler provides
    default implementations of functions inherited from all its base classes, we
    can still use specialized handlers for particular kinds of events.

    For example, QXmlDefaultHandler subclasses both **QXmlContentHandler**  and
    **QXmlErrorHandler** , so by subclassing it we can use the same handler for
    both of the following reader functions:

    xmlReader.setContentHandler(handler);
    xmlReader.setErrorHandler(handler);

    Since the reader will inform the handler of parsing errors, it is necessary
    to reimplement **QXmlErrorHandler::fatalError** () if, for example, we want
    to stop parsing when such an error occurs:

    bool Handler::fatalError (const **QXmlParseException**  & exception)
        {
    **qWarning** () << "Fatal error on line" << exception.lineNumber()
    << ", column" << exception.columnNumber() << \':\'
                       <<
    exception.message();

            return false;
        }

    The above function returns `false`, which tells the reader to stop parsing.
    To continue to use the same reader, it is necessary to create a new handler
    instance, and set up the reader to use it in the manner described above.

    It is useful to examine some of the functions inherited by
    QXmlDefaultHandler, and consider why they might be reimplemented in a custom
    handler. Custom handlers will typically reimplement
    **QXmlContentHandler::startDocument** () to prepare the handler for new
    content. Document elements and the text within them can be processed by
    reimplementing **QXmlContentHandler::startElement** (),
    **QXmlContentHandler::endElement** (), and
    **QXmlContentHandler::characters** (). You may want to reimplement
    **QXmlContentHandler::endDocument** () to perform some finalization or
    validation on the content once the document has been read completely.

    **See also** **QXmlDTDHandler** , **QXmlDeclHandler** ,
    **QXmlContentHandler** , **QXmlEntityResolver** , **QXmlErrorHandler** ,
    **QXmlLexicalHandler** , and Introduction to SAX2.
    """

    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#QXmlDefaultHandler

        **QXmlDefaultHandler::QXmlDefaultHandler()**

        Constructs a handler for use with subclasses of QXmlReader.
        """
        ...

    def attributeDecl(
        self, eName: str, aName: str, type: str, valueDefault: str, value: str
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#attributeDecl

        **[override virtual] bool QXmlDefaultHandler::attributeDecl(const
        QString & eName , const QString & aName , const QString & type , const
        QString & valueDefault , const QString & value )**

        Reimplements: **QXmlDeclHandler::attributeDecl** (const QString &eName,
        const QString &aName, const QString &type, const QString &valueDefault,
        const QString &value).

        This reimplementation does nothing.
        """
        ...

    def characters(self, ch: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#characters

        **[override virtual] bool QXmlDefaultHandler::characters(const QString &
        ch )**

        Reimplements: **QXmlContentHandler::characters** (const QString &ch).

        This reimplementation does nothing.
        """
        ...

    def comment(self, ch: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#comment

        **[override virtual] bool QXmlDefaultHandler::comment(const QString & ch
        )**

        Reimplements: **QXmlLexicalHandler::comment** (const QString &ch).

        This reimplementation does nothing.
        """
        ...

    def endCDATA(self) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#endCDATA

        **[override virtual] bool QXmlDefaultHandler::endCDATA()**

        Reimplements: **QXmlLexicalHandler::endCDATA** ().

        This reimplementation does nothing.
        """
        ...

    def endDTD(self) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#endDTD

        **[override virtual] bool QXmlDefaultHandler::endDTD()**

        Reimplements: **QXmlLexicalHandler::endDTD** ().

        This reimplementation does nothing.
        """
        ...

    def endDocument(self) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#endDocument

        **[override virtual] bool QXmlDefaultHandler::endDocument()**

        Reimplements: **QXmlContentHandler::endDocument** ().

        This reimplementation does nothing.
        """
        ...

    def endElement(self, namespaceURI: str, localName: str, qName: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#endElement

        **[override virtual] bool QXmlDefaultHandler::endElement(const QString &
        namespaceURI , const QString & localName , const QString & qName )**

        Reimplements: **QXmlContentHandler::endElement** (const QString
        &namespaceURI, const QString &localName, const QString &qName).

        This reimplementation does nothing.
        """
        ...

    def endEntity(self, name: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#endEntity

        **[override virtual] bool QXmlDefaultHandler::endEntity(const QString &
        name )**

        Reimplements: **QXmlLexicalHandler::endEntity** (const QString &name).

        This reimplementation does nothing.
        """
        ...

    def endPrefixMapping(self, prefix: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#endPrefixMapping

        **[override virtual] bool QXmlDefaultHandler::endPrefixMapping(const
        QString & prefix )**

        Reimplements: **QXmlContentHandler::endPrefixMapping** (const QString
        &prefix).

        This reimplementation does nothing.
        """
        ...

    def error(self, exception: PySide2.QtXml.QXmlParseException) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#error

        **[override virtual] bool QXmlDefaultHandler::error(const
        QXmlParseException & exception )**

        Reimplements: **QXmlErrorHandler::error** (const QXmlParseException
        &exception).

        This reimplementation does nothing.
        """
        ...

    def errorString(self) -> str:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#errorString

        **[override virtual] QString QXmlDefaultHandler::errorString() const**

        Reimplements: **QXmlContentHandler::errorString** () const.

        Returns the default error string.
        """
        ...

    def externalEntityDecl(self, name: str, publicId: str, systemId: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#externalEntityDecl

        **[override virtual] bool QXmlDefaultHandler::externalEntityDecl(const
        QString & name , const QString & publicId , const QString & systemId )**

        Reimplements: **QXmlDeclHandler::externalEntityDecl** (const QString
        &name, const QString &publicId, const QString &systemId).

        This reimplementation does nothing.
        """
        ...

    def fatalError(self, exception: PySide2.QtXml.QXmlParseException) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#fatalError

        **[override virtual] bool QXmlDefaultHandler::fatalError(const
        QXmlParseException & exception )**

        Reimplements: **QXmlErrorHandler::fatalError** (const QXmlParseException
        &exception).

        This reimplementation does nothing.
        """
        ...

    def ignorableWhitespace(self, ch: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#ignorableWhitespace

        **[override virtual] bool QXmlDefaultHandler::ignorableWhitespace(const
        QString & ch )**

        Reimplements: **QXmlContentHandler::ignorableWhitespace** (const QString
        &ch).

        This reimplementation does nothing.
        """
        ...

    def internalEntityDecl(self, name: str, value: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#internalEntityDecl

        **[override virtual] bool QXmlDefaultHandler::internalEntityDecl(const
        QString & name , const QString & value )**

        Reimplements: **QXmlDeclHandler::internalEntityDecl** (const QString
        &name, const QString &value).

        This reimplementation does nothing.
        """
        ...

    def notationDecl(self, name: str, publicId: str, systemId: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#notationDecl

        **[override virtual] bool QXmlDefaultHandler::notationDecl(const QString
        & name , const QString & publicId , const QString & systemId )**

        Reimplements: **QXmlDTDHandler::notationDecl** (const QString &name,
        const QString &publicId, const QString &systemId).

        This reimplementation does nothing.
        """
        ...

    def processingInstruction(self, target: str, data: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#processingInstruction

        **[override virtual] bool
        QXmlDefaultHandler::processingInstruction(const QString & target , const
        QString & data )**

        Reimplements: **QXmlContentHandler::processingInstruction** (const
        QString &target, const QString &data).

        This reimplementation does nothing.
        """
        ...

    def resolveEntity(
        self, publicId: str, systemId: str, ret: PySide2.QtXml.QXmlInputSource
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#resolveEntity

        **[override virtual] bool QXmlDefaultHandler::resolveEntity(const
        QString & publicId , const QString & systemId , QXmlInputSource *& ret
        )**

        Reimplements: **QXmlEntityResolver::resolveEntity** (const QString
        &publicId, const QString &systemId, QXmlInputSource *&ret).

        Sets **ret** to `nullptr`, so that the reader uses the system identifier
        provided in the XML document.
        """
        ...

    def setDocumentLocator(self, locator: PySide2.QtXml.QXmlLocator) -> None:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#setDocumentLocator

        **[override virtual] void
        QXmlDefaultHandler::setDocumentLocator(QXmlLocator * locator )**

        Reimplements: **QXmlContentHandler::setDocumentLocator** (QXmlLocator
        *locator).

        This reimplementation does nothing.
        """
        ...

    def skippedEntity(self, name: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#skippedEntity

        **[override virtual] bool QXmlDefaultHandler::skippedEntity(const
        QString & name )**

        Reimplements: **QXmlContentHandler::skippedEntity** (const QString
        &name).

        This reimplementation does nothing.
        """
        ...

    def startCDATA(self) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#startCDATA

        **[override virtual] bool QXmlDefaultHandler::startCDATA()**

        Reimplements: **QXmlLexicalHandler::startCDATA** ().

        This reimplementation does nothing.
        """
        ...

    def startDTD(self, name: str, publicId: str, systemId: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#startDTD

        **[override virtual] bool QXmlDefaultHandler::startDTD(const QString &
        name , const QString & publicId , const QString & systemId )**

        Reimplements: **QXmlLexicalHandler::startDTD** (const QString &name,
        const QString &publicId, const QString &systemId).

        This reimplementation does nothing.
        """
        ...

    def startDocument(self) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#startDocument

        **[override virtual] bool QXmlDefaultHandler::startDocument()**

        Reimplements: **QXmlContentHandler::startDocument** ().

        This reimplementation does nothing.
        """
        ...

    def startElement(
        self,
        namespaceURI: str,
        localName: str,
        qName: str,
        atts: PySide2.QtXml.QXmlAttributes,
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#startElement

        **[override virtual] bool QXmlDefaultHandler::startElement(const QString
        & namespaceURI , const QString & localName , const QString & qName ,
        const QXmlAttributes & atts )**

        Reimplements: **QXmlContentHandler::startElement** (const QString
        &namespaceURI, const QString &localName, const QString &qName, const
        QXmlAttributes &atts).

        This reimplementation does nothing.
        """
        ...

    def startEntity(self, name: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#startEntity

        **[override virtual] bool QXmlDefaultHandler::startEntity(const QString
        & name )**

        Reimplements: **QXmlLexicalHandler::startEntity** (const QString &name).

        This reimplementation does nothing.
        """
        ...

    def startPrefixMapping(self, prefix: str, uri: str) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#startPrefixMapping

        **[override virtual] bool QXmlDefaultHandler::startPrefixMapping(const
        QString & prefix , const QString & uri )**

        Reimplements: **QXmlContentHandler::startPrefixMapping** (const QString
        &prefix, const QString &uri).

        This reimplementation does nothing.
        """
        ...

    def unparsedEntityDecl(
        self, name: str, publicId: str, systemId: str, notationName: str
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#unparsedEntityDecl

        **[override virtual] bool QXmlDefaultHandler::unparsedEntityDecl(const
        QString & name , const QString & publicId , const QString & systemId ,
        const QString & notationName )**

        Reimplements: **QXmlDTDHandler::unparsedEntityDecl** (const QString
        &name, const QString &publicId, const QString &systemId, const QString
        &notationName).

        This reimplementation does nothing.
        """
        ...

    def warning(self, exception: PySide2.QtXml.QXmlParseException) -> bool:
        """
        https://doc.qt.io/qt-5/qxmldefaulthandler.html#warning

        **[override virtual] bool QXmlDefaultHandler::warning(const
        QXmlParseException & exception )**

        Reimplements: **QXmlErrorHandler::warning** (const QXmlParseException
        &exception).

        This reimplementation does nothing.
        """
        ...
