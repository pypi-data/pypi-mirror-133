"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtSensors

bytes = str


class QSensorGestureManager(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qsensorgesturemanager.html

    **Detailed Description**

    Sensor Gesture plugins register their recognizers using the
    **registerSensorGestureRecognizer** () function.

    // Create a QSensorGestureManager
             **QSensorGestureManager**
    gestureManager;

         // Get a list of known recognizers
    **QStringList**  recognizersList = gestureManager.gestureIds();

         //
    Create a QSensorGeture object for each of those gesture recognizers
    **QSensorGesture**  *gesture = new **QSensorGesture** (
    gestureManager.gestureIds(), this);
         // Connect the known signals up.
    connect(gesture, SIGNAL(detected(**QString** )), this,
    SLOT(gestureDetected(**QString** )));
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qsensorgesturemanager.html#QSensorGestureManager

        **QSensorGestureManager::QSensorGestureManager(QObject * parent =
        Q_NULLPTR)**

        Constructs the QSensorGestureManager as a child of **parent**
        """
        ...

    def gestureIds(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qsensorgesturemanager.html#gestureIds

        **QStringList QSensorGestureManager::gestureIds() const**

        Returns the list of the currently registered gestures. Includes all the
        standard built-ins as well as available plugins.
        """
        ...

    def recognizerSignals(self, recognizerId: str) -> typing.List:
        """
        https://doc.qt.io/qt-5/qsensorgesturemanager.html#recognizerSignals

        **QStringList QSensorGestureManager::recognizerSignals(const QString &
        gestureId ) const**

        Returns the list of all the gesture signals for the registered
        **gestureId** gesture recognizer id.
        """
        ...

    def registerSensorGestureRecognizer(
        self, recognizer: PySide2.QtSensors.QSensorGestureRecognizer
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qsensorgesturemanager.html#registerSensorGestureR
        ecognizer

        **bool QSensorGestureManager::registerSensorGestureRecognizer(QSensorGes
        tureRecognizer * recognizer )**

        Registers the sensor recognizer **recognizer** for use.
        **QSensorGestureManager**  retains ownership of the recognizer object.
        Returns true unless the gesture has already been registered, in which
        case the object is deleted.
        """
        ...

    @staticmethod
    def sensorGestureRecognizer(id: str) -> PySide2.QtSensors.QSensorGestureRecognizer:
        """
        https://doc.qt.io/qt-5/qsensorgesturemanager.html#sensorGestureRecognize
        r

        **[static] QSensorGestureRecognizer
        *QSensorGestureManager::sensorGestureRecognizer(const QString & id )**

        Returns the sensor gesture object for the recognizer **id**.
        """
        ...

    @property
    def newSensorGestureAvailable(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qsensorgesturemanager.html#newSensorGestureAvaila
        ble

        **[signal] void QSensorGestureManager::newSensorGestureAvailable()**

        Signals when a new sensor gesture becomes available for use.
        """
        ...
