"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QCameraLocksControl(PySide2.QtMultimedia.QMediaControl):
    """
    https://doc.qt.io/qt-5/qcameralockscontrol.html

    **Detailed Description**

    This service is provided by a **QMediaService**  object via
    QMediaService::control(). It is used by **QCamera** .

    The interface name of QCameraLocksControl is `org.qt-
    project.qt.cameralockscontrol/5.0` as defined in **QCameraLocksControl_iid**
    .

    **See also** **QMediaService::requestControl** () and **QCamera** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qcameralockscontrol.html#QCameraLocksControl

        **[protected] QCameraLocksControl::QCameraLocksControl(QObject * parent
        = nullptr)**

        Constructs a camera locks control object with **parent**.
        """
        ...

    def lockStatus(
        self, lock: PySide2.QtMultimedia.QCamera.LockType
    ) -> PySide2.QtMultimedia.QCamera.LockStatus:
        """
        https://doc.qt.io/qt-5/qcameralockscontrol.html#lockStatus

        **[pure virtual] QCamera::LockStatus
        QCameraLocksControl::lockStatus(QCamera::LockType lock ) const**

        Returns the camera **lock** status.
        """
        ...

    def searchAndLock(self, locks: PySide2.QtMultimedia.QCamera.LockTypes) -> None:
        """
        https://doc.qt.io/qt-5/qcameralockscontrol.html#searchAndLock

        **[pure virtual] void
        QCameraLocksControl::searchAndLock(QCamera::LockTypes locks )**

        Request camera **locks**.
        """
        ...

    def supportedLocks(self) -> PySide2.QtMultimedia.QCamera.LockTypes:
        """
        https://doc.qt.io/qt-5/qcameralockscontrol.html#supportedLocks

        **[pure virtual] QCamera::LockTypes
        QCameraLocksControl::supportedLocks() const**

        Returns the lock types, the camera supports.
        """
        ...

    def unlock(self, locks: PySide2.QtMultimedia.QCamera.LockTypes) -> None:
        """
        https://doc.qt.io/qt-5/qcameralockscontrol.html#unlock

        **[pure virtual] void QCameraLocksControl::unlock(QCamera::LockTypes
        locks )**

        Unlock camera **locks**.
        """
        ...

    @property
    def lockStatusChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameralockscontrol.html#lockStatusChanged

        **[signal] void QCameraLocksControl::lockStatusChanged(QCamera::LockType
        type , QCamera::LockStatus status , QCamera::LockChangeReason reason )**

        Signals the lock **type** **status** was changed with the specified
        **reason**.
        """
        ...
