"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
"""
This file contains the exact signatures for all functions in module
PySide2.Qt3DInput, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.Qt3DCore
import PySide2.Qt3DInput

bytes = str


class Qt3DInput(object):
    """
    https://doc.qt.io/qt-5/qt3dinput.html

    **Detailed Description**
    """

    class QAbstractActionInput(PySide2.Qt3DCore.QNode):
        ...

    class QAbstractAxisInput(PySide2.Qt3DCore.QNode):
        def setSourceDevice(
            self, sourceDevice: PySide2.Qt3DInput.Qt3DInput.QAbstractPhysicalDevice
        ) -> None:
            ...

        def sourceDevice(self) -> PySide2.Qt3DInput.Qt3DInput.QAbstractPhysicalDevice:
            ...

    class QAbstractPhysicalDevice(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addAxisSetting(
            self, axisSetting: PySide2.Qt3DInput.Qt3DInput.QAxisSetting
        ) -> None:
            ...

        def axisCount(self) -> int:
            ...

        def axisIdentifier(self, name: str) -> int:
            ...

        def axisNames(self) -> typing.List:
            ...

        def axisSettings(self) -> typing.List:
            ...

        def buttonCount(self) -> int:
            ...

        def buttonIdentifier(self, name: str) -> int:
            ...

        def buttonNames(self) -> typing.List:
            ...

        def removeAxisSetting(
            self, axisSetting: PySide2.Qt3DInput.Qt3DInput.QAxisSetting
        ) -> None:
            ...

    class QAction(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addInput(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractActionInput
        ) -> None:
            ...

        def inputs(self) -> typing.List:
            ...

        def isActive(self) -> bool:
            ...

        def removeInput(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractActionInput
        ) -> None:
            ...

    class QActionInput(PySide2.Qt3DInput.QAbstractActionInput):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def buttons(self) -> typing.List:
            ...

        def setButtons(self, buttons: typing.List) -> None:
            ...

        def setSourceDevice(
            self, sourceDevice: PySide2.Qt3DInput.Qt3DInput.QAbstractPhysicalDevice
        ) -> None:
            ...

        def sourceDevice(self) -> PySide2.Qt3DInput.Qt3DInput.QAbstractPhysicalDevice:
            ...

    class QAnalogAxisInput(PySide2.Qt3DInput.QAbstractAxisInput):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def axis(self) -> int:
            ...

        def setAxis(self, axis: int) -> None:
            ...

    class QAxis(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addInput(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractAxisInput
        ) -> None:
            ...

        def inputs(self) -> typing.List:
            ...

        def removeInput(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractAxisInput
        ) -> None:
            ...

        def value(self) -> float:
            ...

    class QAxisAccumulator(PySide2.Qt3DCore.QComponent):
        Velocity: Qt3DInput.QAxisAccumulator = ...
        Acceleration: Qt3DInput.QAxisAccumulator = ...

        class SourceAxisType(object):
            Velocity: Qt3DInput.QAxisAccumulator.SourceAxisType = ...
            Acceleration: Qt3DInput.QAxisAccumulator.SourceAxisType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def scale(self) -> float:
            ...

        def setScale(self, scale: float) -> None:
            ...

        def setSourceAxis(self, sourceAxis: PySide2.Qt3DInput.Qt3DInput.QAxis) -> None:
            ...

        def setSourceAxisType(
            self,
            sourceAxisType: PySide2.Qt3DInput.Qt3DInput.QAxisAccumulator.SourceAxisType,
        ) -> None:
            ...

        def sourceAxis(self) -> PySide2.Qt3DInput.Qt3DInput.QAxis:
            ...

        def sourceAxisType(
            self,
        ) -> PySide2.Qt3DInput.Qt3DInput.QAxisAccumulator.SourceAxisType:
            ...

        def value(self) -> float:
            ...

        def velocity(self) -> float:
            ...

    class QAxisSetting(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def axes(self) -> typing.List:
            ...

        def deadZoneRadius(self) -> float:
            ...

        def isSmoothEnabled(self) -> bool:
            ...

        def setAxes(self, axes: typing.List) -> None:
            ...

        def setDeadZoneRadius(self, deadZoneRadius: float) -> None:
            ...

        def setSmoothEnabled(self, enabled: bool) -> None:
            ...

    class QButtonAxisInput(PySide2.Qt3DInput.QAbstractAxisInput):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def acceleration(self) -> float:
            ...

        def buttons(self) -> typing.List:
            ...

        def deceleration(self) -> float:
            ...

        def scale(self) -> float:
            ...

        def setAcceleration(self, acceleration: float) -> None:
            ...

        def setButtons(self, buttons: typing.List) -> None:
            ...

        def setDeceleration(self, deceleration: float) -> None:
            ...

        def setScale(self, scale: float) -> None:
            ...

    class QInputAspect(PySide2.Qt3DCore.QAbstractAspect):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def availablePhysicalDevices(self) -> typing.List:
            ...

        def createPhysicalDevice(
            self, name: str
        ) -> PySide2.Qt3DInput.Qt3DInput.QAbstractPhysicalDevice:
            ...

    class QInputChord(PySide2.Qt3DInput.QAbstractActionInput):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addChord(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractActionInput
        ) -> None:
            ...

        def chords(self) -> typing.List:
            ...

        def removeChord(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractActionInput
        ) -> None:
            ...

        def setTimeout(self, timeout: int) -> None:
            ...

        def timeout(self) -> int:
            ...

    class QInputSequence(PySide2.Qt3DInput.QAbstractActionInput):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addSequence(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractActionInput
        ) -> None:
            ...

        def buttonInterval(self) -> int:
            ...

        def removeSequence(
            self, input: PySide2.Qt3DInput.Qt3DInput.QAbstractActionInput
        ) -> None:
            ...

        def sequences(self) -> typing.List:
            ...

        def setButtonInterval(self, buttonInterval: int) -> None:
            ...

        def setTimeout(self, timeout: int) -> None:
            ...

        def timeout(self) -> int:
            ...

    class QInputSettings(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def eventSource(self) -> PySide2.QtCore.QObject:
            ...

        def setEventSource(self, eventSource: PySide2.QtCore.QObject) -> None:
            ...

    class QKeyEvent(PySide2.QtCore.QObject):
        def __init__(
            self,
            type: PySide2.QtCore.QEvent.Type,
            key: int,
            modifiers: PySide2.QtCore.Qt.KeyboardModifiers,
            text: str = ...,
            autorep: bool = ...,
            count: int = ...,
        ) -> None:
            ...

        def count(self) -> int:
            ...

        def isAccepted(self) -> bool:
            ...

        def isAutoRepeat(self) -> bool:
            ...

        def key(self) -> int:
            ...

        def matches(self, key_: PySide2.QtGui.QKeySequence.StandardKey) -> bool:
            ...

        def modifiers(self) -> int:
            ...

        def nativeScanCode(self) -> int:
            ...

        def setAccepted(self, accepted: bool) -> None:
            ...

        def text(self) -> str:
            ...

        def type(self) -> PySide2.QtCore.QEvent.Type:
            ...

    class QKeyboardDevice(PySide2.Qt3DInput.QAbstractPhysicalDevice):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def activeInput(self) -> PySide2.Qt3DInput.Qt3DInput.QKeyboardHandler:
            ...

        def axisCount(self) -> int:
            ...

        def axisIdentifier(self, name: str) -> int:
            ...

        def axisNames(self) -> typing.List:
            ...

        def buttonCount(self) -> int:
            ...

        def buttonIdentifier(self, name: str) -> int:
            ...

        def buttonNames(self) -> typing.List:
            ...

    class QKeyboardHandler(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def focus(self) -> bool:
            ...

        def setFocus(self, focus: bool) -> None:
            ...

        def setSourceDevice(
            self, keyboardDevice: PySide2.Qt3DInput.Qt3DInput.QKeyboardDevice
        ) -> None:
            ...

        def sourceDevice(self) -> PySide2.Qt3DInput.Qt3DInput.QKeyboardDevice:
            ...

    class QLogicalDevice(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def actions(self) -> typing.List:
            ...

        def addAction(self, action: PySide2.Qt3DInput.Qt3DInput.QAction) -> None:
            ...

        def addAxis(self, axis: PySide2.Qt3DInput.Qt3DInput.QAxis) -> None:
            ...

        def axes(self) -> typing.List:
            ...

        def removeAction(self, action: PySide2.Qt3DInput.Qt3DInput.QAction) -> None:
            ...

        def removeAxis(self, axis: PySide2.Qt3DInput.Qt3DInput.QAxis) -> None:
            ...

    class QMouseDevice(PySide2.Qt3DInput.QAbstractPhysicalDevice):
        X: Qt3DInput.QMouseDevice = ...
        Y: Qt3DInput.QMouseDevice = ...
        WheelX: Qt3DInput.QMouseDevice = ...
        WheelY: Qt3DInput.QMouseDevice = ...

        class Axis(object):
            X: Qt3DInput.QMouseDevice.Axis = ...
            Y: Qt3DInput.QMouseDevice.Axis = ...
            WheelX: Qt3DInput.QMouseDevice.Axis = ...
            WheelY: Qt3DInput.QMouseDevice.Axis = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def axisCount(self) -> int:
            ...

        def axisIdentifier(self, name: str) -> int:
            ...

        def axisNames(self) -> typing.List:
            ...

        def buttonCount(self) -> int:
            ...

        def buttonIdentifier(self, name: str) -> int:
            ...

        def buttonNames(self) -> typing.List:
            ...

        def sensitivity(self) -> float:
            ...

        def setSensitivity(self, value: float) -> None:
            ...

        def setUpdateAxesContinuously(self, updateAxesContinuously: bool) -> None:
            ...

        def updateAxesContinuously(self) -> bool:
            ...

    class QMouseEvent(PySide2.QtCore.QObject):
        NoButton: Qt3DInput.QMouseEvent = ...
        NoModifier: Qt3DInput.QMouseEvent = ...
        LeftButton: Qt3DInput.QMouseEvent = ...
        RightButton: Qt3DInput.QMouseEvent = ...
        MiddleButton: Qt3DInput.QMouseEvent = ...
        BackButton: Qt3DInput.QMouseEvent = ...
        ShiftModifier: Qt3DInput.QMouseEvent = ...
        ControlModifier: Qt3DInput.QMouseEvent = ...
        AltModifier: Qt3DInput.QMouseEvent = ...
        MetaModifier: Qt3DInput.QMouseEvent = ...
        KeypadModifier: Qt3DInput.QMouseEvent = ...

        class Buttons(object):
            NoButton: Qt3DInput.QMouseEvent.Buttons = ...
            LeftButton: Qt3DInput.QMouseEvent.Buttons = ...
            RightButton: Qt3DInput.QMouseEvent.Buttons = ...
            MiddleButton: Qt3DInput.QMouseEvent.Buttons = ...
            BackButton: Qt3DInput.QMouseEvent.Buttons = ...

        class Modifiers(object):
            NoModifier: Qt3DInput.QMouseEvent.Modifiers = ...
            ShiftModifier: Qt3DInput.QMouseEvent.Modifiers = ...
            ControlModifier: Qt3DInput.QMouseEvent.Modifiers = ...
            AltModifier: Qt3DInput.QMouseEvent.Modifiers = ...
            MetaModifier: Qt3DInput.QMouseEvent.Modifiers = ...
            KeypadModifier: Qt3DInput.QMouseEvent.Modifiers = ...

        def button(self) -> PySide2.Qt3DInput.Qt3DInput.QMouseEvent.Buttons:
            ...

        def buttons(self) -> int:
            ...

        def isAccepted(self) -> bool:
            ...

        def modifiers(self) -> PySide2.Qt3DInput.Qt3DInput.QMouseEvent.Modifiers:
            ...

        def setAccepted(self, accepted: bool) -> None:
            ...

        def type(self) -> PySide2.QtCore.QEvent.Type:
            ...

        def wasHeld(self) -> bool:
            ...

        def x(self) -> int:
            ...

        def y(self) -> int:
            ...

    class QMouseHandler(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def containsMouse(self) -> bool:
            ...

        def setContainsMouse(self, contains: bool) -> None:
            ...

        def setSourceDevice(
            self, mouseDevice: PySide2.Qt3DInput.Qt3DInput.QMouseDevice
        ) -> None:
            ...

        def sourceDevice(self) -> PySide2.Qt3DInput.Qt3DInput.QMouseDevice:
            ...

    class QWheelEvent(PySide2.QtCore.QObject):
        NoButton: Qt3DInput.QWheelEvent = ...
        NoModifier: Qt3DInput.QWheelEvent = ...
        LeftButton: Qt3DInput.QWheelEvent = ...
        RightButton: Qt3DInput.QWheelEvent = ...
        MiddleButton: Qt3DInput.QWheelEvent = ...
        BackButton: Qt3DInput.QWheelEvent = ...
        ShiftModifier: Qt3DInput.QWheelEvent = ...
        ControlModifier: Qt3DInput.QWheelEvent = ...
        AltModifier: Qt3DInput.QWheelEvent = ...
        MetaModifier: Qt3DInput.QWheelEvent = ...
        KeypadModifier: Qt3DInput.QWheelEvent = ...

        class Buttons(object):
            NoButton: Qt3DInput.QWheelEvent.Buttons = ...
            LeftButton: Qt3DInput.QWheelEvent.Buttons = ...
            RightButton: Qt3DInput.QWheelEvent.Buttons = ...
            MiddleButton: Qt3DInput.QWheelEvent.Buttons = ...
            BackButton: Qt3DInput.QWheelEvent.Buttons = ...

        class Modifiers(object):
            NoModifier: Qt3DInput.QWheelEvent.Modifiers = ...
            ShiftModifier: Qt3DInput.QWheelEvent.Modifiers = ...
            ControlModifier: Qt3DInput.QWheelEvent.Modifiers = ...
            AltModifier: Qt3DInput.QWheelEvent.Modifiers = ...
            MetaModifier: Qt3DInput.QWheelEvent.Modifiers = ...
            KeypadModifier: Qt3DInput.QWheelEvent.Modifiers = ...

        def angleDelta(self) -> PySide2.QtCore.QPoint:
            ...

        def buttons(self) -> int:
            ...

        def isAccepted(self) -> bool:
            ...

        def modifiers(self) -> PySide2.Qt3DInput.Qt3DInput.QWheelEvent.Modifiers:
            ...

        def setAccepted(self, accepted: bool) -> None:
            ...

        def type(self) -> PySide2.QtCore.QEvent.Type:
            ...

        def x(self) -> int:
            ...

        def y(self) -> int:
            ...
