"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
"""
This file contains the exact signatures for all functions in module
PySide2.Qt3DCore, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.Qt3DCore

bytes = str


class Qt3DCore(object):
    """
    https://doc.qt.io/qt-5/qt3dcore.html

    **Detailed Description**
    """

    AllChanges: Qt3DCore = ...
    NodeCreated: Qt3DCore = ...
    NodeDeleted: Qt3DCore = ...
    PropertyUpdated: Qt3DCore = ...
    PropertyValueAdded: Qt3DCore = ...
    PropertyValueRemoved: Qt3DCore = ...
    ComponentAdded: Qt3DCore = ...
    ComponentRemoved: Qt3DCore = ...
    CommandRequested: Qt3DCore = ...
    CallbackTriggered: Qt3DCore = ...

    class ChangeFlag(object):
        AllChanges: Qt3DCore.ChangeFlag = ...
        NodeCreated: Qt3DCore.ChangeFlag = ...
        NodeDeleted: Qt3DCore.ChangeFlag = ...
        PropertyUpdated: Qt3DCore.ChangeFlag = ...
        PropertyValueAdded: Qt3DCore.ChangeFlag = ...
        PropertyValueRemoved: Qt3DCore.ChangeFlag = ...
        ComponentAdded: Qt3DCore.ChangeFlag = ...
        ComponentRemoved: Qt3DCore.ChangeFlag = ...
        CommandRequested: Qt3DCore.ChangeFlag = ...
        CallbackTriggered: Qt3DCore.ChangeFlag = ...

    class ChangeFlags(object):
        ...

    class QAbstractAspect(PySide2.QtCore.QObject):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def rootEntityId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def unregisterBackendType(self, arg__1: PySide2.QtCore.QMetaObject) -> None:
            ...

    class QAbstractSkeleton(PySide2.Qt3DCore.QNode):
        def jointCount(self) -> int:
            ...

    class QArmature(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setSkeleton(
            self, skeleton: PySide2.Qt3DCore.Qt3DCore.QAbstractSkeleton
        ) -> None:
            ...

        def skeleton(self) -> PySide2.Qt3DCore.Qt3DCore.QAbstractSkeleton:
            ...

    class QAspectEngine(PySide2.QtCore.QObject):
        Manual: Qt3DCore.QAspectEngine = ...
        Automatic: Qt3DCore.QAspectEngine = ...

        class RunMode(object):
            Manual: Qt3DCore.QAspectEngine.RunMode = ...
            Automatic: Qt3DCore.QAspectEngine.RunMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def aspects(self) -> typing.List:
            ...

        def executeCommand(self, command: str) -> typing.Any:
            ...

        def processFrame(self) -> None:
            ...

        @typing.overload
        def registerAspect(
            self, aspect: PySide2.Qt3DCore.Qt3DCore.QAbstractAspect
        ) -> None:
            ...

        @typing.overload
        def registerAspect(self, name: str) -> None:
            ...

        def runMode(self) -> PySide2.Qt3DCore.Qt3DCore.QAspectEngine.RunMode:
            ...

        def setRunMode(
            self, mode: PySide2.Qt3DCore.Qt3DCore.QAspectEngine.RunMode
        ) -> None:
            ...

        @typing.overload
        def unregisterAspect(
            self, aspect: PySide2.Qt3DCore.Qt3DCore.QAbstractAspect
        ) -> None:
            ...

        @typing.overload
        def unregisterAspect(self, name: str) -> None:
            ...

    class QAspectJob(object):
        def __init__(self) -> None:
            ...

        def run(self) -> None:
            ...

    class QBackendNode(object):
        ReadOnly: Qt3DCore.QBackendNode = ...
        ReadWrite: Qt3DCore.QBackendNode = ...

        class Mode(object):
            ReadOnly: Qt3DCore.QBackendNode.Mode = ...
            ReadWrite: Qt3DCore.QBackendNode.Mode = ...

        def __init__(
            self, mode: PySide2.Qt3DCore.Qt3DCore.QBackendNode.Mode = ...
        ) -> None:
            ...

        def isEnabled(self) -> bool:
            ...

        def mode(self) -> PySide2.Qt3DCore.Qt3DCore.QBackendNode.Mode:
            ...

        def peerId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def setEnabled(self, enabled: bool) -> None:
            ...

    class QComponent(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def entities(self) -> typing.List:
            ...

        def isShareable(self) -> bool:
            ...

        def setShareable(self, isShareable: bool) -> None:
            ...

    class QComponentAddedChange(PySide2.Qt3DCore.QSceneChange):
        @typing.overload
        def __init__(
            self,
            component: PySide2.Qt3DCore.Qt3DCore.QComponent,
            entity: PySide2.Qt3DCore.Qt3DCore.QEntity,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            entity: PySide2.Qt3DCore.Qt3DCore.QEntity,
            component: PySide2.Qt3DCore.Qt3DCore.QComponent,
        ) -> None:
            ...

        def componentId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def componentMetaObject(self) -> PySide2.QtCore.QMetaObject:
            ...

        def entityId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

    class QComponentRemovedChange(PySide2.Qt3DCore.QSceneChange):
        @typing.overload
        def __init__(
            self,
            component: PySide2.Qt3DCore.Qt3DCore.QComponent,
            entity: PySide2.Qt3DCore.Qt3DCore.QEntity,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            entity: PySide2.Qt3DCore.Qt3DCore.QEntity,
            component: PySide2.Qt3DCore.Qt3DCore.QComponent,
        ) -> None:
            ...

        def componentId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def componentMetaObject(self) -> PySide2.QtCore.QMetaObject:
            ...

        def entityId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

    class QDynamicPropertyUpdatedChange(PySide2.Qt3DCore.QPropertyUpdatedChangeBase):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def propertyName(self) -> PySide2.QtCore.QByteArray:
            ...

        def setPropertyName(self, name: PySide2.QtCore.QByteArray) -> None:
            ...

        def setValue(self, value: typing.Any) -> None:
            ...

        def value(self) -> typing.Any:
            ...

    class QEntity(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addComponent(self, comp: PySide2.Qt3DCore.Qt3DCore.QComponent) -> None:
            ...

        def components(self) -> typing.List:
            ...

        def parentEntity(self) -> PySide2.Qt3DCore.Qt3DCore.QEntity:
            ...

        def removeComponent(self, comp: PySide2.Qt3DCore.Qt3DCore.QComponent) -> None:
            ...

    class QJoint(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addChildJoint(self, joint: PySide2.Qt3DCore.Qt3DCore.QJoint) -> None:
            ...

        def childJoints(self) -> typing.List:
            ...

        def inverseBindMatrix(self) -> PySide2.QtGui.QMatrix4x4:
            ...

        def name(self) -> str:
            ...

        def removeChildJoint(self, joint: PySide2.Qt3DCore.Qt3DCore.QJoint) -> None:
            ...

        def rotation(self) -> PySide2.QtGui.QQuaternion:
            ...

        def rotationX(self) -> float:
            ...

        def rotationY(self) -> float:
            ...

        def rotationZ(self) -> float:
            ...

        def scale(self) -> PySide2.QtGui.QVector3D:
            ...

        def setInverseBindMatrix(
            self, inverseBindMatrix: PySide2.QtGui.QMatrix4x4
        ) -> None:
            ...

        def setName(self, name: str) -> None:
            ...

        def setRotation(self, rotation: PySide2.QtGui.QQuaternion) -> None:
            ...

        def setRotationX(self, rotationX: float) -> None:
            ...

        def setRotationY(self, rotationY: float) -> None:
            ...

        def setRotationZ(self, rotationZ: float) -> None:
            ...

        def setScale(self, scale: PySide2.QtGui.QVector3D) -> None:
            ...

        def setToIdentity(self) -> None:
            ...

        def setTranslation(self, translation: PySide2.QtGui.QVector3D) -> None:
            ...

        def translation(self) -> PySide2.QtGui.QVector3D:
            ...

    class QNode(PySide2.QtCore.QObject):
        TrackFinalValues: Qt3DCore.QNode = ...
        DontTrackValues: Qt3DCore.QNode = ...
        TrackAllValues: Qt3DCore.QNode = ...

        class PropertyTrackingMode(object):
            TrackFinalValues: Qt3DCore.QNode.PropertyTrackingMode = ...
            DontTrackValues: Qt3DCore.QNode.PropertyTrackingMode = ...
            TrackAllValues: Qt3DCore.QNode.PropertyTrackingMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def blockNotifications(self, block: bool) -> bool:
            ...

        def childNodes(self) -> typing.List:
            ...

        def clearPropertyTracking(self, propertyName: str) -> None:
            ...

        def clearPropertyTrackings(self) -> None:
            ...

        def defaultPropertyTrackingMode(
            self,
        ) -> PySide2.Qt3DCore.Qt3DCore.QNode.PropertyTrackingMode:
            ...

        def id(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def isEnabled(self) -> bool:
            ...

        def notificationsBlocked(self) -> bool:
            ...

        def parentNode(self) -> PySide2.Qt3DCore.Qt3DCore.QNode:
            ...

        def propertyTracking(
            self, propertyName: str
        ) -> PySide2.Qt3DCore.Qt3DCore.QNode.PropertyTrackingMode:
            ...

        def setDefaultPropertyTrackingMode(
            self, mode: PySide2.Qt3DCore.Qt3DCore.QNode.PropertyTrackingMode
        ) -> None:
            ...

        def setEnabled(self, isEnabled: bool) -> None:
            ...

        @typing.overload
        def setParent(self, parent: PySide2.Qt3DCore.Qt3DCore.QNode) -> None:
            ...

        @typing.overload
        def setParent(self, parent: PySide2.QtCore.QObject) -> None:
            ...

        def setPropertyTracking(
            self,
            propertyName: str,
            trackMode: PySide2.Qt3DCore.Qt3DCore.QNode.PropertyTrackingMode,
        ) -> None:
            ...

    class QNodeCommand(PySide2.Qt3DCore.QSceneChange):
        def __init__(self, id: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def commandId(self) -> int:
            ...

        def data(self) -> typing.Any:
            ...

        def inReplyTo(self) -> int:
            ...

        def name(self) -> str:
            ...

        def setData(self, data: typing.Any) -> None:
            ...

        def setName(self, name: str) -> None:
            ...

        def setReplyToCommandId(self, id: int) -> None:
            ...

    class QNodeCreatedChangeBase(PySide2.Qt3DCore.QSceneChange):
        def __init__(self, node: PySide2.Qt3DCore.Qt3DCore.QNode) -> None:
            ...

        def isNodeEnabled(self) -> bool:
            ...

        def parentId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

    class QNodeDestroyedChange(PySide2.Qt3DCore.QSceneChange):
        def __init__(
            self, node: PySide2.Qt3DCore.Qt3DCore.QNode, subtreeIdsAndTypes: typing.List
        ) -> None:
            ...

        def subtreeIdsAndTypes(self) -> typing.List:
            ...

    class QNodeId(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(self, QNodeId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        @staticmethod
        def createId() -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def id(self) -> int:
            ...

        def isNull(self) -> bool:
            ...

    class QNodeIdTypePair(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, QNodeIdTypePair: PySide2.Qt3DCore.Qt3DCore.QNodeIdTypePair
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            _id: PySide2.Qt3DCore.Qt3DCore.QNodeId,
            _type: PySide2.QtCore.QMetaObject,
        ) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

    class QPropertyNodeAddedChange(
        PySide2.Qt3DCore.QStaticPropertyValueAddedChangeBase
    ):
        def __init__(
            self,
            subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId,
            node: PySide2.Qt3DCore.Qt3DCore.QNode,
        ) -> None:
            ...

        def addedNodeId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

    class QPropertyNodeRemovedChange(
        PySide2.Qt3DCore.QStaticPropertyValueRemovedChangeBase
    ):
        def __init__(
            self,
            subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId,
            node: PySide2.Qt3DCore.Qt3DCore.QNode,
        ) -> None:
            ...

        def removedNodeId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

    class QPropertyUpdatedChange(PySide2.Qt3DCore.QStaticPropertyUpdatedChangeBase):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def setValue(self, value: typing.Any) -> None:
            ...

        def value(self) -> typing.Any:
            ...

    class QPropertyUpdatedChangeBase(PySide2.Qt3DCore.QSceneChange):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

    class QPropertyValueAddedChange(
        PySide2.Qt3DCore.QStaticPropertyValueAddedChangeBase
    ):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def addedValue(self) -> typing.Any:
            ...

        def setAddedValue(self, value: typing.Any) -> None:
            ...

    class QPropertyValueAddedChangeBase(PySide2.Qt3DCore.QSceneChange):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

    class QPropertyValueRemovedChange(
        PySide2.Qt3DCore.QStaticPropertyValueRemovedChangeBase
    ):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def removedValue(self) -> typing.Any:
            ...

        def setRemovedValue(self, value: typing.Any) -> None:
            ...

    class QPropertyValueRemovedChangeBase(PySide2.Qt3DCore.QSceneChange):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

    class QSceneChange(object):
        BackendNodes: Qt3DCore.QSceneChange = ...
        Nodes: Qt3DCore.QSceneChange = ...
        DeliverToAll: Qt3DCore.QSceneChange = ...

        class DeliveryFlag(object):
            BackendNodes: Qt3DCore.QSceneChange.DeliveryFlag = ...
            Nodes: Qt3DCore.QSceneChange.DeliveryFlag = ...
            DeliverToAll: Qt3DCore.QSceneChange.DeliveryFlag = ...

        class DeliveryFlags(object):
            ...

        def __init__(
            self,
            type: PySide2.Qt3DCore.Qt3DCore.ChangeFlag,
            subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId,
        ) -> None:
            ...

        def deliveryFlags(self) -> PySide2.Qt3DCore.Qt3DCore.QSceneChange.DeliveryFlags:
            ...

        def setDeliveryFlags(
            self, flags: PySide2.Qt3DCore.Qt3DCore.QSceneChange.DeliveryFlags
        ) -> None:
            ...

        def subjectId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def type(self) -> PySide2.Qt3DCore.Qt3DCore.ChangeFlag:
            ...

    class QSkeleton(PySide2.Qt3DCore.QAbstractSkeleton):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def rootJoint(self) -> PySide2.Qt3DCore.Qt3DCore.QJoint:
            ...

        def setRootJoint(self, rootJoint: PySide2.Qt3DCore.Qt3DCore.QJoint) -> None:
            ...

    class QSkeletonLoader(PySide2.Qt3DCore.QAbstractSkeleton):
        NotReady: Qt3DCore.QSkeletonLoader = ...
        Ready: Qt3DCore.QSkeletonLoader = ...
        Error: Qt3DCore.QSkeletonLoader = ...

        class Status(object):
            NotReady: Qt3DCore.QSkeletonLoader.Status = ...
            Ready: Qt3DCore.QSkeletonLoader.Status = ...
            Error: Qt3DCore.QSkeletonLoader.Status = ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            source: PySide2.QtCore.QUrl,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        def isCreateJointsEnabled(self) -> bool:
            ...

        def rootJoint(self) -> PySide2.Qt3DCore.Qt3DCore.QJoint:
            ...

        def setCreateJointsEnabled(self, enabled: bool) -> None:
            ...

        def setSource(self, source: PySide2.QtCore.QUrl) -> None:
            ...

        def source(self) -> PySide2.QtCore.QUrl:
            ...

        def status(self) -> PySide2.Qt3DCore.Qt3DCore.QSkeletonLoader.Status:
            ...

    class QStaticPropertyUpdatedChangeBase(PySide2.Qt3DCore.QPropertyUpdatedChangeBase):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def propertyName(self) -> bytes:
            ...

        def setPropertyName(self, name: bytes) -> None:
            ...

    class QStaticPropertyValueAddedChangeBase(
        PySide2.Qt3DCore.QPropertyValueAddedChangeBase
    ):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def propertyName(self) -> bytes:
            ...

        def setPropertyName(self, name: bytes) -> None:
            ...

    class QStaticPropertyValueRemovedChangeBase(
        PySide2.Qt3DCore.QPropertyValueRemovedChangeBase
    ):
        def __init__(self, subjectId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def propertyName(self) -> bytes:
            ...

        def setPropertyName(self, name: bytes) -> None:
            ...

    class QTransform(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        @staticmethod
        def fromAxes(
            xAxis: PySide2.QtGui.QVector3D,
            yAxis: PySide2.QtGui.QVector3D,
            zAxis: PySide2.QtGui.QVector3D,
        ) -> PySide2.QtGui.QQuaternion:
            ...

        @typing.overload
        @staticmethod
        def fromAxesAndAngles(
            axis1: PySide2.QtGui.QVector3D,
            angle1: float,
            axis2: PySide2.QtGui.QVector3D,
            angle2: float,
        ) -> PySide2.QtGui.QQuaternion:
            ...

        @typing.overload
        @staticmethod
        def fromAxesAndAngles(
            axis1: PySide2.QtGui.QVector3D,
            angle1: float,
            axis2: PySide2.QtGui.QVector3D,
            angle2: float,
            axis3: PySide2.QtGui.QVector3D,
            angle3: float,
        ) -> PySide2.QtGui.QQuaternion:
            ...

        @typing.overload
        @staticmethod
        def fromAxisAndAngle(
            axis: PySide2.QtGui.QVector3D, angle: float
        ) -> PySide2.QtGui.QQuaternion:
            ...

        @typing.overload
        @staticmethod
        def fromAxisAndAngle(
            x: float, y: float, z: float, angle: float
        ) -> PySide2.QtGui.QQuaternion:
            ...

        @typing.overload
        @staticmethod
        def fromEulerAngles(
            eulerAngles: PySide2.QtGui.QVector3D,
        ) -> PySide2.QtGui.QQuaternion:
            ...

        @typing.overload
        @staticmethod
        def fromEulerAngles(
            pitch: float, yaw: float, roll: float
        ) -> PySide2.QtGui.QQuaternion:
            ...

        def matrix(self) -> PySide2.QtGui.QMatrix4x4:
            ...

        @staticmethod
        def rotateAround(
            point: PySide2.QtGui.QVector3D, angle: float, axis: PySide2.QtGui.QVector3D
        ) -> PySide2.QtGui.QMatrix4x4:
            ...

        @staticmethod
        def rotateFromAxes(
            xAxis: PySide2.QtGui.QVector3D,
            yAxis: PySide2.QtGui.QVector3D,
            zAxis: PySide2.QtGui.QVector3D,
        ) -> PySide2.QtGui.QMatrix4x4:
            ...

        def rotation(self) -> PySide2.QtGui.QQuaternion:
            ...

        def rotationX(self) -> float:
            ...

        def rotationY(self) -> float:
            ...

        def rotationZ(self) -> float:
            ...

        def scale(self) -> float:
            ...

        def scale3D(self) -> PySide2.QtGui.QVector3D:
            ...

        def setMatrix(self, matrix: PySide2.QtGui.QMatrix4x4) -> None:
            ...

        def setRotation(self, rotation: PySide2.QtGui.QQuaternion) -> None:
            ...

        def setRotationX(self, rotationX: float) -> None:
            ...

        def setRotationY(self, rotationY: float) -> None:
            ...

        def setRotationZ(self, rotationZ: float) -> None:
            ...

        def setScale(self, scale: float) -> None:
            ...

        def setScale3D(self, scale: PySide2.QtGui.QVector3D) -> None:
            ...

        def setTranslation(self, translation: PySide2.QtGui.QVector3D) -> None:
            ...

        def translation(self) -> PySide2.QtGui.QVector3D:
            ...

        def worldMatrix(self) -> PySide2.QtGui.QMatrix4x4:
            ...

    @staticmethod
    def qHash(id: PySide2.Qt3DCore.Qt3DCore.QNodeId, seed: int = ...) -> int:
        """
        https://doc.qt.io/qt-5/qt3dcore.html#qHash

        **uint qHash(Qt3DCore::QNodeId id , uint seed = 0)**

        Returns hash of node with **id** and optional **seed**.
        """
        ...

    @staticmethod
    def qIdForNode(
        node: PySide2.Qt3DCore.Qt3DCore.QNode,
    ) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
        """
        https://doc.qt.io/qt-5/qt3dcore.html#qIdForNode

        **Qt3DCore::QNodeId qIdForNode(Qt3DCore::QNode * node )**

        Returns node id for **node**.
        """
        ...
