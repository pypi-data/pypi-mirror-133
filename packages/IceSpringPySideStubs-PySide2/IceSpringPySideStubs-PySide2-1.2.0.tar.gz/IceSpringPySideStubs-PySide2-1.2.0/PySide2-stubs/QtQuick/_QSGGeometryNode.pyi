"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtQuick, except for defaults which are replaced by "...".
"""
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtQml
import PySide2.QtQuick

bytes = str


class QSGGeometryNode(PySide2.QtQuick.QSGBasicGeometryNode):
    """
    https://doc.qt.io/qt-5/qsggeometrynode.html

    **Detailed Description**

    The QSGGeometryNode consists of geometry and material. The geometry defines
    the mesh, the vertices and their structure, to be drawn. The Material
    defines how the shape is filled.

    The following is a code snippet illustrating how to create a red line using
    a QSGGeometryNode:

    **QSGGeometry**  *geometry = new **QSGGeometry** (**QSGGeometry**
    ::defaultAttributes_Point2D(), 2);
        geometry->setDrawingMode(GL_LINES);
    geometry->setLineWidth(3);
        geometry->vertexDataAsPoint2D()[0].set(0, 0);
    geometry->vertexDataAsPoint2D()[1].set(width(), height());
    **QSGFlatColorMaterial**  *material = new **QSGFlatColorMaterial** ;
    material->setColor(**QColor** (255, 0, 0));

        **QSGGeometryNode**
    *node = new **QSGGeometryNode** ;
        node->setGeometry(geometry);
    node->setFlag(**QSGNode** ::OwnsGeometry);
        node->setMaterial(material);
    node->setFlag(**QSGNode** ::OwnsMaterial);

    A geometry node must have both geometry and a normal material before it is
    added to the scene graph. When the geometry and materials are changed after
    the node has been added to the scene graph, the user should also mark them
    as dirty using **QSGNode::markDirty** ().

    The geometry node supports two types of materials, the **opaqueMaterial**
    and the normal material. The **opaqueMaterial**  is used when the
    accumulated scene graph opacity at the time of rendering is 1. The primary
    use case is to special case opaque rendering to avoid an extra operation in
    the fragment shader can have significant performance impact on embedded
    graphics chips. The opaque material is optional.

    **Note:** All classes with QSG prefix should be used solely on the scene
    graph's rendering thread. See **Scene Graph and Rendering**  for more
    information.

    **See also** **QSGGeometry** , **QSGMaterial** , and **QSGSimpleMaterial** .
    """

    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qsggeometrynode.html#QSGGeometryNode

        **QSGGeometryNode::QSGGeometryNode()**

        Creates a new geometry node without geometry and material.
        """
        ...

    def inheritedOpacity(self) -> float:
        ...

    def renderOrder(self) -> int:
        ...

    def setInheritedOpacity(self, opacity: float) -> None:
        ...

    def setRenderOrder(self, order: int) -> None:
        ...
