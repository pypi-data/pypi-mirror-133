"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtWebEngineWidgets, except for defaults which are replaced by "...".
"""
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtPrintSupport
import PySide2.QtWebChannel
import PySide2.QtWebEngineCore
import PySide2.QtWebEngineWidgets

bytes = str


class QWebEngineDownloadItem(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qwebenginedownloaditem.html

    **Detailed Description**

    QWebEngineDownloadItem models a download throughout its life cycle, starting
    with a pending download request and finishing with a completed download. It
    can be used, for example, to get information about new downloads, to monitor
    progress, and to pause, resume, and cancel downloads.

    Downloads are usually triggered by user interaction on a web page. It is the
    **QWebEngineProfile** 's responsibility to notify the application of new
    download requests, which it does by emitting the **downloadRequested**
    signal together with a newly created QWebEngineDownloadItem. The application
    can then examine this item and decide whether to accept it or not. A signal
    handler must explicitly call **accept** () on the item for Qt WebEngine to
    actually start downloading and writing data to disk. If no signal handler
    calls **accept** (), then the download request will be automatically
    rejected and nothing will be written to disk.

    **Note:** Some properties, such as setting the path and file name where the
    file will be saved (see **downloadDirectory** () and **downloadFileName**
    ()), can only be changed before calling **accept** ().

    **Object Life Cycle**

    All items are guaranteed to be valid during the emission of the
    **downloadRequested**  signal. If **accept** () is **not** called by any
    signal handler, then the item will be deleted **immediately** after signal
    emission. This means that the application **must not** keep references to
    rejected download items. It also means the application should not use a
    queued connection to this signal.

    If **accept** () **is** called by a signal handler, then the
    **QWebEngineProfile**  will take ownership of the item. However, it is safe
    for the application to delete the item at any time, except during the
    handling of the **downloadRequested**  signal. The **QWebEngineProfile**
    being a long-lived object, it is in fact recommended that the application
    delete any items it is no longer interested in.

    **Note:** Deleting an item will also automatically cancel a download since
    5.12.2, but it is recommended to cancel manually before deleting for
    portability.

    **Web Page Downloads**

    In addition to normal file downloads, which consist simply of retrieving
    some raw bytes from the network and writing them to disk, Qt WebEngine also
    supports saving complete web pages, which involves parsing the page's HTML,
    downloading any dependent resources, and potentially packaging everything
    into a special file format (**savePageFormat** ). To check if a download is
    for a file or a web page, use **isSavePageDownload** .

    **See also** **QWebEngineProfile** ,
    **QWebEngineProfile::downloadRequested** , **QWebEnginePage::download** ,
    and **QWebEnginePage::save** .
    """

    UnknownSaveFormat: QWebEngineDownloadItem = ...
    Attachment: QWebEngineDownloadItem = ...
    DownloadRequested: QWebEngineDownloadItem = ...
    NoReason: QWebEngineDownloadItem = ...
    SingleHtmlSaveFormat: QWebEngineDownloadItem = ...
    CompleteHtmlSaveFormat: QWebEngineDownloadItem = ...
    DownloadAttribute: QWebEngineDownloadItem = ...
    DownloadInProgress: QWebEngineDownloadItem = ...
    FileFailed: QWebEngineDownloadItem = ...
    DownloadCompleted: QWebEngineDownloadItem = ...
    FileAccessDenied: QWebEngineDownloadItem = ...
    MimeHtmlSaveFormat: QWebEngineDownloadItem = ...
    UserRequested: QWebEngineDownloadItem = ...
    DownloadCancelled: QWebEngineDownloadItem = ...
    FileNoSpace: QWebEngineDownloadItem = ...
    SavePage: QWebEngineDownloadItem = ...
    DownloadInterrupted: QWebEngineDownloadItem = ...
    FileNameTooLong: QWebEngineDownloadItem = ...
    FileTooLarge: QWebEngineDownloadItem = ...
    FileVirusInfected: QWebEngineDownloadItem = ...
    FileTransientError: QWebEngineDownloadItem = ...
    FileBlocked: QWebEngineDownloadItem = ...
    FileSecurityCheckFailed: QWebEngineDownloadItem = ...
    FileTooShort: QWebEngineDownloadItem = ...
    FileHashMismatch: QWebEngineDownloadItem = ...
    NetworkFailed: QWebEngineDownloadItem = ...
    NetworkTimeout: QWebEngineDownloadItem = ...
    NetworkDisconnected: QWebEngineDownloadItem = ...
    NetworkServerDown: QWebEngineDownloadItem = ...
    NetworkInvalidRequest: QWebEngineDownloadItem = ...
    ServerFailed: QWebEngineDownloadItem = ...
    ServerBadContent: QWebEngineDownloadItem = ...
    ServerUnauthorized: QWebEngineDownloadItem = ...
    ServerCertProblem: QWebEngineDownloadItem = ...
    ServerForbidden: QWebEngineDownloadItem = ...
    ServerUnreachable: QWebEngineDownloadItem = ...
    UserCanceled: QWebEngineDownloadItem = ...

    class DownloadInterruptReason(object):
        NoReason: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileFailed: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileAccessDenied: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileNoSpace: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileNameTooLong: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileTooLarge: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileVirusInfected: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileTransientError: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileBlocked: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileSecurityCheckFailed: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileTooShort: QWebEngineDownloadItem.DownloadInterruptReason = ...
        FileHashMismatch: QWebEngineDownloadItem.DownloadInterruptReason = ...
        NetworkFailed: QWebEngineDownloadItem.DownloadInterruptReason = ...
        NetworkTimeout: QWebEngineDownloadItem.DownloadInterruptReason = ...
        NetworkDisconnected: QWebEngineDownloadItem.DownloadInterruptReason = ...
        NetworkServerDown: QWebEngineDownloadItem.DownloadInterruptReason = ...
        NetworkInvalidRequest: QWebEngineDownloadItem.DownloadInterruptReason = ...
        ServerFailed: QWebEngineDownloadItem.DownloadInterruptReason = ...
        ServerBadContent: QWebEngineDownloadItem.DownloadInterruptReason = ...
        ServerUnauthorized: QWebEngineDownloadItem.DownloadInterruptReason = ...
        ServerCertProblem: QWebEngineDownloadItem.DownloadInterruptReason = ...
        ServerForbidden: QWebEngineDownloadItem.DownloadInterruptReason = ...
        ServerUnreachable: QWebEngineDownloadItem.DownloadInterruptReason = ...
        UserCanceled: QWebEngineDownloadItem.DownloadInterruptReason = ...

    class DownloadState(object):
        DownloadRequested: QWebEngineDownloadItem.DownloadState = ...
        DownloadInProgress: QWebEngineDownloadItem.DownloadState = ...
        DownloadCompleted: QWebEngineDownloadItem.DownloadState = ...
        DownloadCancelled: QWebEngineDownloadItem.DownloadState = ...
        DownloadInterrupted: QWebEngineDownloadItem.DownloadState = ...

    class DownloadType(object):
        Attachment: QWebEngineDownloadItem.DownloadType = ...
        DownloadAttribute: QWebEngineDownloadItem.DownloadType = ...
        UserRequested: QWebEngineDownloadItem.DownloadType = ...
        SavePage: QWebEngineDownloadItem.DownloadType = ...

    class SavePageFormat(object):
        UnknownSaveFormat: QWebEngineDownloadItem.SavePageFormat = ...
        SingleHtmlSaveFormat: QWebEngineDownloadItem.SavePageFormat = ...
        CompleteHtmlSaveFormat: QWebEngineDownloadItem.SavePageFormat = ...
        MimeHtmlSaveFormat: QWebEngineDownloadItem.SavePageFormat = ...

    def accept(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#accept

        **[slot] void QWebEngineDownloadItem::accept()**

        Accepts the current download request, which will start the download.

        If the item is in the **DownloadRequested**  state, then it will
        transition into the **DownloadInProgress**  state and the downloading
        will begin. If the item is in any other state, then nothing will happen.

        **See also** **finished** () and **stateChanged** ().
        """
        ...

    def cancel(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#cancel

        **[slot] void QWebEngineDownloadItem::cancel()**

        Cancels the current download.

        If the item is in the **DownloadInProgress**  state, then it will
        transition into the **DownloadCancelled**  state, the downloading will
        stop, and partially downloaded files will be deleted from disk.

        If the item is in the **DownloadCompleted**  state, then nothing will
        happen. If the item is in any other state, then it will transition into
        the **DownloadCancelled**  state without further effect.

        **See also** **finished** () and **stateChanged** ().
        """
        ...

    def downloadDirectory(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#downloadDirectory

        **QString QWebEngineDownloadItem::downloadDirectory() const**

        Returns the download directory path.

        This function was introduced in Qt 5.14.

        **See also** **setDownloadDirectory** ().
        """
        ...

    def downloadFileName(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#downloadFileName

        **QString QWebEngineDownloadItem::downloadFileName() const**

        Returns the file name to download the file to.

        This function was introduced in Qt 5.14.

        **See also** **setDownloadFileName** ().
        """
        ...

    def id(self) -> int:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#id

        **quint32 QWebEngineDownloadItem::id() const**

        Returns the download item's ID.
        """
        ...

    def interruptReason(
        self,
    ) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.DownloadInterruptReason:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#interruptReason

        **QWebEngineDownloadItem::DownloadInterruptReason
        QWebEngineDownloadItem::interruptReason() const**

        Returns the reason why the download was interrupted.

        This function was introduced in Qt 5.9.

        **See also** **interruptReasonString** ().
        """
        ...

    def interruptReasonString(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#interruptReasonString

        **QString QWebEngineDownloadItem::interruptReasonString() const**

        Returns a human-readable description of the reason for interrupting the
        download.

        This function was introduced in Qt 5.9.

        **See also** **interruptReason** ().
        """
        ...

    def isFinished(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#isFinished

        **bool QWebEngineDownloadItem::isFinished() const**

        Returns whether this download is finished (completed, cancelled, or non-
        resumable interrupted state).

        **See also** **finished** () and **state** ().
        """
        ...

    def isPaused(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#isPaused

        **bool QWebEngineDownloadItem::isPaused() const**

        Returns whether this download is paused.

        **See also** **pause** () and **resume** ().
        """
        ...

    def isSavePageDownload(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#isSavePageDownload

        **bool QWebEngineDownloadItem::isSavePageDownload() const**

        Returns `true` if this is a download request for saving a web page.

        This function was introduced in Qt 5.11.

        **See also** **savePageFormat** () and **setSavePageFormat** ().
        """
        ...

    def mimeType(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#mimeType

        **QString QWebEngineDownloadItem::mimeType() const**

        Returns the MIME type of the download.

        This function was introduced in Qt 5.6.
        """
        ...

    def page(self) -> PySide2.QtWebEngineWidgets.QWebEnginePage:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#page

        **QWebEnginePage *QWebEngineDownloadItem::page() const**

        Returns the page the download was requested on. If the download was not
        triggered by content in a page, `nullptr` is returned.

        This function was introduced in Qt 5.12.
        """
        ...

    def path(self) -> str:
        ...

    def pause(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#pause

        **[slot] void QWebEngineDownloadItem::pause()**

        Pauses the download.

        Has no effect if the state is not **DownloadInProgress** . Does not
        change the state.

        This function was introduced in Qt 5.10.

        **See also** **resume** () and **isPaused** ().
        """
        ...

    def receivedBytes(self) -> int:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#receivedBytes

        **qint64 QWebEngineDownloadItem::receivedBytes() const**

        Returns the amount of data in bytes that has been downloaded so far.

        `-1` means the size is unknown.
        """
        ...

    def resume(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#resume

        **[slot] void QWebEngineDownloadItem::resume()**

        Resumes the current download if it was paused or interrupted.

        Has no effect if the state is not **DownloadInProgress**  or
        **DownloadInterrupted** . Does not change the state.

        This function was introduced in Qt 5.10.

        **See also** **pause** (), **isPaused** (), and **state** ().
        """
        ...

    def savePageFormat(
        self,
    ) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.SavePageFormat:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#savePageFormat

        **QWebEngineDownloadItem::SavePageFormat
        QWebEngineDownloadItem::savePageFormat() const**

        Returns the format the web page will be saved in if this is a download
        request for a web page.

        This function was introduced in Qt 5.7.

        **See also** **setSavePageFormat** () and **isSavePageDownload** ().
        """
        ...

    def setDownloadDirectory(self, directory: str) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#setDownloadDirectory

        **void QWebEngineDownloadItem::setDownloadDirectory(const QString &
        directory )**

        Sets **directory** as the directory path to download the file to.

        The download directory path can only be set in response to the
        **QWebEngineProfile::downloadRequested** () signal before the download
        is accepted. Past that point, this function has no effect on the
        download item's state.

        This function was introduced in Qt 5.14.

        **See also** **downloadDirectory** ().
        """
        ...

    def setDownloadFileName(self, fileName: str) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#setDownloadFileName

        **void QWebEngineDownloadItem::setDownloadFileName(const QString &
        fileName )**

        Sets **fileName** as the file name to download the file to.

        The download file name can only be set in response to the
        **QWebEngineProfile::downloadRequested** () signal before the download
        is accepted. Past that point, this function has no effect on the
        download item's state.

        This function was introduced in Qt 5.14.

        **See also** **downloadFileName** ().
        """
        ...

    def setPath(self, path: str) -> None:
        ...

    def setSavePageFormat(
        self, format: PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.SavePageFormat
    ) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#setSavePageFormat

        **void QWebEngineDownloadItem::setSavePageFormat(QWebEngineDownloadItem:
        :SavePageFormat format )**

        Sets the **format** the web page will be saved in if this is a download
        request for a web page.

        This function was introduced in Qt 5.7.

        **See also** **savePageFormat** () and **isSavePageDownload** ().
        """
        ...

    def state(self) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.DownloadState:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#state

        **QWebEngineDownloadItem::DownloadState QWebEngineDownloadItem::state()
        const**

        Returns the download item's current state.

        **See also** **DownloadState** .
        """
        ...

    def suggestedFileName(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#suggestedFileName

        **QString QWebEngineDownloadItem::suggestedFileName() const**

        Returns the suggested file name.

        This function was introduced in Qt 5.14.
        """
        ...

    def totalBytes(self) -> int:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#totalBytes

        **qint64 QWebEngineDownloadItem::totalBytes() const**

        Returns the the total amount of data to download in bytes.

        `-1` means the size is unknown.
        """
        ...

    def type(self) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.DownloadType:
        ...

    def url(self) -> PySide2.QtCore.QUrl:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#url

        **QUrl QWebEngineDownloadItem::url() const**

        Returns the download's origin URL.
        """
        ...

    @property
    def downloadProgress(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#downloadProgress

        **[signal] void QWebEngineDownloadItem::downloadProgress(qint64
        bytesReceived , qint64 bytesTotal )**

        This signal is emitted to indicate the progress of the download request.

        The **bytesReceived** parameter indicates the number of bytes received,
        while **bytesTotal** indicates the total number of bytes expected to be
        downloaded. If the size of the file to be downloaded is not known,
        `bytesTotal` will be 0.

        **See also** **totalBytes** () and **receivedBytes** ().
        """
        ...

    @property
    def finished(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#finished

        **[signal] void QWebEngineDownloadItem::finished()**

        This signal is emitted when the download finishes.

        **See also** **state** () and **isFinished** ().
        """
        ...

    @property
    def isPausedChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#isPausedChanged

        **[signal] void QWebEngineDownloadItem::isPausedChanged(bool isPaused
        )**

        This signal is emitted whenever **isPaused** changes.

        This function was introduced in Qt 5.10.

        **See also** **pause** () and **isPaused** ().
        """
        ...

    @property
    def stateChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qwebenginedownloaditem.html#stateChanged

        **[signal] void QWebEngineDownloadItem::stateChanged(QWebEngineDownloadI
        tem::DownloadState state )**

        This signal is emitted whenever the download's **state** changes.

        **See also** **state** () and **DownloadState** .
        """
        ...
