"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QAudioBuffer(object):
    """
    **Detailed Description**
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QAudioBuffer::QAudioBuffer()**

        Create a new, empty, invalid buffer.
        """
        ...

    @typing.overload
    def __init__(
        self,
        data: PySide2.QtCore.QByteArray,
        format: PySide2.QtMultimedia.QAudioFormat,
        startTime: int = ...,
    ) -> None:
        """
        **QAudioBuffer::QAudioBuffer()**

        Create a new, empty, invalid buffer.
        """
        ...

    @typing.overload
    def __init__(
        self,
        numFrames: int,
        format: PySide2.QtMultimedia.QAudioFormat,
        startTime: int = ...,
    ) -> None:
        """
        **QAudioBuffer::QAudioBuffer()**

        Create a new, empty, invalid buffer.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtMultimedia.QAudioBuffer) -> None:
        """
        **QAudioBuffer::QAudioBuffer()**

        Create a new, empty, invalid buffer.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def byteCount(self) -> int:
        """
        **int QAudioBuffer::byteCount() const**

        Returns the size of this buffer, in bytes.
        """
        ...

    def constData(self) -> int:
        """
        **const void *QAudioBuffer::constData() const**

        Returns a pointer to this buffer's data. You can only read it.

        This method is preferred over the const version of **data** () to prevent unnecessary copying.

        There is also a templatized version of this constData() function that allows you to retrieve a specific type of read-only pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.

        // With a 16bit sample buffer:
            const **quint16**  *data = buffer->constData<**quint16** >();
        """
        ...

    def data(self) -> int:
        """
        **const void *QAudioBuffer::data() const**

        Returns a pointer to this buffer's data. You can only read it.

        You should use the **constData** () function rather than this to prevent accidental deep copying.

        There is also a templatized version of this data() function that allows you to retrieve a specific type of read-only pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.

        // With a 16bit sample const buffer:
            const **quint16**  *data = buffer->data<**quint16** >();
        """
        ...

    def duration(self) -> int:
        """
        **qint64 QAudioBuffer::duration() const**

        Returns the duration of audio in this buffer, in microseconds.

        This depends on the **format** (), and the **frameCount** ().
        """
        ...

    def format(self) -> PySide2.QtMultimedia.QAudioFormat:
        """
        **QAudioFormat QAudioBuffer::format() const**

        Returns the **format**  of this buffer.

        Several properties of this format influence how the **duration** () or **byteCount** () are calculated from the **frameCount** ().
        """
        ...

    def frameCount(self) -> int:
        """
        **int QAudioBuffer::frameCount() const**

        Returns the number of complete audio frames in this buffer.

        An audio frame is an interleaved set of one sample per channel for the same instant in time.
        """
        ...

    def isValid(self) -> bool:
        """
        **bool QAudioBuffer::isValid() const**

        Returns true if this is a valid buffer. A valid buffer has more than zero frames in it and a valid format.
        """
        ...

    def sampleCount(self) -> int:
        """
        **int QAudioBuffer::sampleCount() const**

        Returns the number of samples in this buffer.

        If the format of this buffer has multiple channels, then this count includes all channels. This means that a stereo buffer with 1000 samples in total will have 500 left samples and 500 right samples (interleaved), and this function will return 1000.

        **See also** **frameCount** ().
        """
        ...

    def startTime(self) -> int:
        """
        **qint64 QAudioBuffer::startTime() const**

        Returns the time in a stream that this buffer starts at (in microseconds).

        If this buffer is not part of a stream, this will return -1.
        """
        ...
