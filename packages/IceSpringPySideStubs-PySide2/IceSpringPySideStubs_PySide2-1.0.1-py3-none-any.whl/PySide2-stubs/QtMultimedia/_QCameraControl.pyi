"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QCameraControl(PySide2.QtMultimedia.QMediaControl):
    """
    **Detailed Description**

    This service is provided by a **QMediaService**  object via QMediaService::control(). It is used by **QCamera** .

    The interface name of QCameraControl is `org.qt-project.qt.cameracontrol/5.0` as defined in **QCameraControl_iid** .

    **See also** **QMediaService::requestControl** () and **QCamera** .
    """

    CaptureMode: QCameraControl = ...
    ImageEncodingSettings: QCameraControl = ...
    VideoEncodingSettings: QCameraControl = ...
    Viewfinder: QCameraControl = ...
    ViewfinderSettings: QCameraControl = ...

    class PropertyChangeType(object):
        CaptureMode: QCameraControl.PropertyChangeType = ...
        ImageEncodingSettings: QCameraControl.PropertyChangeType = ...
        VideoEncodingSettings: QCameraControl.PropertyChangeType = ...
        Viewfinder: QCameraControl.PropertyChangeType = ...
        ViewfinderSettings: QCameraControl.PropertyChangeType = ...

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **[protected] QCameraControl::QCameraControl(QObject * parent = nullptr)**

        Constructs a camera control object with **parent**.
        """
        ...

    def canChangeProperty(
        self,
        changeType: PySide2.QtMultimedia.QCameraControl.PropertyChangeType,
        status: PySide2.QtMultimedia.QCamera.Status,
    ) -> bool:
        """
        **[pure virtual] bool QCameraControl::canChangeProperty(QCameraControl::PropertyChangeType changeType , QCamera::Status status ) const**

        Returns true if backend can effectively apply changing camera properties of **changeType** type while the camera state is QCamera::Active and camera status matches **status** parameter.

        If backend doesn't support applying this change in the active state, it will be stopped before the settings are changed and restarted after. Otherwise the backend should apply the change in the current state, with the camera status indicating the progress, if necessary.
        """
        ...

    def captureMode(self) -> PySide2.QtMultimedia.QCamera.CaptureModes:
        """
        **[pure virtual] QCamera::CaptureModes QCameraControl::captureMode() const**

        Returns the current capture mode.

        **See also** **setCaptureMode** ().
        """
        ...

    def isCaptureModeSupported(
        self, mode: PySide2.QtMultimedia.QCamera.CaptureModes
    ) -> bool:
        """
        **[pure virtual] bool QCameraControl::isCaptureModeSupported(QCamera::CaptureModes mode ) const**

        Returns true if the capture **mode** is suported.
        """
        ...

    def setCaptureMode(self, arg__1: PySide2.QtMultimedia.QCamera.CaptureModes) -> None:
        """
        **[pure virtual] void QCameraControl::setCaptureMode(QCamera::CaptureModes mode )**

        Sets the current capture **mode**.

        The capture mode changes are synchronous and allowed in any camera state.

        If the capture mode is changed while camera is active, it's recommended to change status to **QCamera::LoadedStatus**  and start activating the camera in the next event loop with the status changed to **QCamera::StartingStatus** . This allows the capture settings to be applied before camera is started. Than change the status to QCamera::StartedStatus when the capture mode change is done.

        **See also** **captureMode** ().
        """
        ...

    def setState(self, state: PySide2.QtMultimedia.QCamera.State) -> None:
        """
        **[pure virtual] void QCameraControl::setState(QCamera::State state )**

        Sets the camera **state**.

        State changes are synchronous and indicate user intention, while camera status is used as a feedback mechanism to inform application about backend status. Status changes are reported asynchronously with **QCameraControl::statusChanged** () signal.

        **See also** **state** () and **QCamera::State** .
        """
        ...

    def state(self) -> PySide2.QtMultimedia.QCamera.State:
        """
        **[pure virtual] QCamera::State QCameraControl::state() const**

        Returns the state of the camera service.

        **See also** **setState** () and **QCamera::state** .
        """
        ...

    def status(self) -> PySide2.QtMultimedia.QCamera.Status:
        """
        **[pure virtual] QCamera::Status QCameraControl::status() const**

        Returns the status of the camera service.

        **See also** **QCamera::state** .
        """
        ...

    @property
    def captureModeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCameraControl::captureModeChanged(QCamera::CaptureModes mode )**

        Signal emitted when the camera capture **mode** changes.
        """
        ...

    @property
    def error(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCameraControl::error(int error , const QString & errorString )**

        Signal emitted when an error occurs with error code **error** and a description of the error **errorString**.
        """
        ...

    @property
    def stateChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCameraControl::stateChanged(QCamera::State state )**

        Signal emitted when the camera **state** changes.

        In most cases the state chage is caused by **QCameraControl::setState** (), but if critical error has occurred the state changes to **QCamera::UnloadedState** .
        """
        ...

    @property
    def statusChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCameraControl::statusChanged(QCamera::Status status )**

        Signal emitted when the camera **status** changes.
        """
        ...
