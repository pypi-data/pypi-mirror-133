"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QVideoEncoderSettings(object):
    """
    **Detailed Description**

    A video encoder settings object is used to specify the video encoder settings used by **QMediaRecorder** . Video encoder settings are selected by constructing a QVideoEncoderSettings object, setting the desired properties and then passing it to a **QMediaRecorder**  instance using the **QMediaRecorder::setEncodingSettings** () function.

    **QVideoEncoderSettings**  videoSettings;
        videoSettings.setCodec("video/mpeg2");
        videoSettings.setResolution(640, 480);

        recorder->setVideoSettings(videoSettings);

    **See also** **QMediaRecorder**  and **QVideoEncoderSettingsControl** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QVideoEncoderSettings::QVideoEncoderSettings()**

        Constructs a null video encoder settings object.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtMultimedia.QVideoEncoderSettings) -> None:
        """
        **QVideoEncoderSettings::QVideoEncoderSettings()**

        Constructs a null video encoder settings object.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def bitRate(self) -> int:
        """
        **int QVideoEncoderSettings::bitRate() const**

        Returns bit rate of the encoded video stream in bits per second.

        **See also** **setBitRate** ().
        """
        ...

    def codec(self) -> str:
        """
        **QString QVideoEncoderSettings::codec() const**

        Returns the video codec.

        **See also** **setCodec** ().
        """
        ...

    def encodingMode(self) -> PySide2.QtMultimedia.QMultimedia.EncodingMode:
        """
        **QMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const**

        Returns the video encoding mode.

        **See also** **setEncodingMode** () and **QMultimedia::EncodingMode** .
        """
        ...

    def encodingOption(self, option: str) -> typing.Any:
        """
        **QVariant QVideoEncoderSettings::encodingOption(const QString & option ) const**

        Returns the value of encoding **option**.

        **See also** **setEncodingOption** () and **encodingOptions** ().
        """
        ...

    def encodingOptions(self) -> typing.Dict:
        """
        **QVariantMap QVideoEncoderSettings::encodingOptions() const**

        Returns the all the encoding options as **QVariantMap** .

        **See also** **encodingOption** () and **setEncodingOptions** ().
        """
        ...

    def frameRate(self) -> float:
        """
        **qreal QVideoEncoderSettings::frameRate() const**

        Returns the video frame rate.

        **See also** **setFrameRate** ().
        """
        ...

    def isNull(self) -> bool:
        """
        **bool QVideoEncoderSettings::isNull() const**

        Identifies if a video encoder settings object is uninitalized.

        Returns true if the settings are null, and false if they are not.
        """
        ...

    def quality(self) -> PySide2.QtMultimedia.QMultimedia.EncodingQuality:
        """
        **QMultimedia::EncodingQuality QVideoEncoderSettings::quality() const**

        Returns the video encoding quality.

        **See also** **setQuality** ().
        """
        ...

    def resolution(self) -> PySide2.QtCore.QSize:
        """
        **QSize QVideoEncoderSettings::resolution() const**

        Returns the resolution of the encoded video.

        **See also** **setResolution** ().
        """
        ...

    def setBitRate(self, bitrate: int) -> None:
        """
        **void QVideoEncoderSettings::setBitRate(int value )**

        Sets the bit rate of the encoded video stream to **value**.

        **See also** **bitRate** ().
        """
        ...

    def setCodec(self, arg__1: str) -> None:
        """
        **void QVideoEncoderSettings::setCodec(const QString & codec )**

        Sets the video **codec**.

        **See also** **codec** ().
        """
        ...

    def setEncodingMode(
        self, arg__1: PySide2.QtMultimedia.QMultimedia.EncodingMode
    ) -> None:
        """
        **void QVideoEncoderSettings::setEncodingMode(QMultimedia::EncodingMode mode )**

        Sets the video encoding **mode**.

        If **QMultimedia::ConstantQualityEncoding**  is set, the quality encoding parameter is used and bit rate is ignored, otherwise the bitrate is used.

        The rest of encoding settings are respected regardless of encoding mode.

        **See also** **encodingMode** () and **QMultimedia::EncodingMode** .
        """
        ...

    def setEncodingOption(self, option: str, value: typing.Any) -> None:
        """
        **void QVideoEncoderSettings::setEncodingOption(const QString & option , const QVariant & value )**

        Set the encoding **option** **value**.

        The supported set and meaning of encoding options are system and selected codec specific.

        **See also** **encodingOption** () and **setEncodingOptions** ().
        """
        ...

    def setEncodingOptions(self, options: typing.Dict) -> None:
        """
        **void QVideoEncoderSettings::setEncodingOptions(const QVariantMap & options )**

        Replace all the encoding options with **options**.

        The supported set and meaning of encoding options are system and selected codec specific.

        **See also** **encodingOptions** (), **encodingOption** (), and **setEncodingOption** ().
        """
        ...

    def setFrameRate(self, rate: float) -> None:
        """
        **void QVideoEncoderSettings::setFrameRate(qreal rate )**

        Sets the video frame **rate**.

        A value of 0 indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.

        **See also** **frameRate** ().
        """
        ...

    def setQuality(
        self, quality: PySide2.QtMultimedia.QMultimedia.EncodingQuality
    ) -> None:
        """
        **void QVideoEncoderSettings::setQuality(QMultimedia::EncodingQuality quality )**

        Sets the video encoding **quality**.

        Setting the video quality parameter allows backend to choose the balanced set of encoding parameters to achieve the desired quality level.

        The **quality** settings parameter is only used in the **constant quality**  **encoding mode** . The **quality** settings parameter is only used in the **constant quality**  **encoding mode** .

        **See also** **quality** ().
        """
        ...

    @typing.overload
    def setResolution(self, arg__1: PySide2.QtCore.QSize) -> None:
        """
        **void QVideoEncoderSettings::setResolution(const QSize & resolution )**

        Sets the **resolution** of the encoded video.

        An empty **QSize**  indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.

        **See also** **resolution** ().
        """
        ...

    @typing.overload
    def setResolution(self, width: int, height: int) -> None:
        """
        **void QVideoEncoderSettings::setResolution(const QSize & resolution )**

        Sets the **resolution** of the encoded video.

        An empty **QSize**  indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.

        **See also** **resolution** ().
        """
        ...
