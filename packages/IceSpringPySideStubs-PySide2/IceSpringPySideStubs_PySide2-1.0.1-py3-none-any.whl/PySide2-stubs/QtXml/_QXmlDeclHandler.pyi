"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtXml

bytes = str


class QXmlDeclHandler(object):
    """
    **Detailed Description**

    You can set the declaration handler with **QXmlReader::setDeclHandler** ().

    This interface is based on the SAX2 extension DeclHandler.

    The interface provides **attributeDecl** (), **internalEntityDecl** () and **externalEntityDecl** () functions.

    **See also** **QXmlDTDHandler** , **QXmlContentHandler** , **QXmlEntityResolver** , **QXmlErrorHandler** , **QXmlLexicalHandler** , and Introduction to SAX2.
    """

    def __init__(self) -> None:
        ...

    def attributeDecl(
        self, eName: str, aName: str, type: str, valueDefault: str, value: str
    ) -> bool:
        """
        **[pure virtual] bool QXmlDeclHandler::attributeDecl(const QString & eName , const QString & aName , const QString & type , const QString & valueDefault , const QString & value )**

        The reader calls this function to report an attribute type declaration. Only the effective (first) declaration for an attribute is reported.

        The reader passes the name of the associated element in **eName** and the name of the attribute in **aName**. It passes a string that represents the attribute type in **type** and a string that represents the attribute default in **valueDefault**. This string is one of "#IMPLIED", "#REQUIRED", "#FIXED" or an empty string (if none of the others applies). The reader passes the attribute\'s default value in **value**. If no default value is specified in the XML file, **value** is an empty string.

        If this function returns `false` the reader stops parsing and reports an error. The reader uses the function **errorString** () to get the error message.
        """
        ...

    def errorString(self) -> str:
        """
        **[pure virtual] QString QXmlDeclHandler::errorString() const**

        The reader calls this function to get an error string if any of the handler functions returns `false`.
        """
        ...

    def externalEntityDecl(self, name: str, publicId: str, systemId: str) -> bool:
        """
        **[pure virtual] bool QXmlDeclHandler::externalEntityDecl(const QString & name , const QString & publicId , const QString & systemId )**

        The reader calls this function to report a parsed external entity declaration. Only the effective (first) declaration for each entity is reported.

        The reader passes the name of the entity in **name** , the public identifier in **publicId** and the system identifier in **systemId**. If there is no public identifier specified, it passes an empty string in **publicId**.

        If this function returns `false` the reader stops parsing and reports an error. The reader uses the function **errorString** () to get the error message.
        """
        ...

    def internalEntityDecl(self, name: str, value: str) -> bool:
        """
        **[pure virtual] bool QXmlDeclHandler::internalEntityDecl(const QString & name , const QString & value )**

        The reader calls this function to report an internal entity declaration. Only the effective (first) declaration is reported.

        The reader passes the name of the entity in **name** and the value of the entity in **value**.

        If this function returns `false` the reader stops parsing and reports an error. The reader uses the function **errorString** () to get the error message.
        """
        ...
