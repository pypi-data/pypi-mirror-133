"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning
import PySide2.QtLocation

bytes = str


class QGeoRouteRequest(object):
    """
    **Detailed Description**

    The default state of a QGeoRouteRequest instance will result in a request for basic route segment and navigation maneuvers describing the fastest route by car which covers the given waypoints.

    There may be significant variation in the features supported by different providers of routing information, or even in the features supported by the same provider if different levels of authorization are used.

    There are several functions in **QGeoRoutingManager**  which can be used to check which features are supported with the current provider and authorization level.

    **See also** **QGeoRoutingManager** .
    """

    NeutralFeatureWeight: QGeoRouteRequest = ...
    NoFeature: QGeoRouteRequest = ...
    NoManeuvers: QGeoRouteRequest = ...
    NoSegmentData: QGeoRouteRequest = ...
    BasicManeuvers: QGeoRouteRequest = ...
    BasicSegmentData: QGeoRouteRequest = ...
    CarTravel: QGeoRouteRequest = ...
    PreferFeatureWeight: QGeoRouteRequest = ...
    ShortestRoute: QGeoRouteRequest = ...
    TollFeature: QGeoRouteRequest = ...
    FastestRoute: QGeoRouteRequest = ...
    HighwayFeature: QGeoRouteRequest = ...
    PedestrianTravel: QGeoRouteRequest = ...
    RequireFeatureWeight: QGeoRouteRequest = ...
    AvoidFeatureWeight: QGeoRouteRequest = ...
    BicycleTravel: QGeoRouteRequest = ...
    MostEconomicRoute: QGeoRouteRequest = ...
    PublicTransitFeature: QGeoRouteRequest = ...
    DisallowFeatureWeight: QGeoRouteRequest = ...
    FerryFeature: QGeoRouteRequest = ...
    MostScenicRoute: QGeoRouteRequest = ...
    PublicTransitTravel: QGeoRouteRequest = ...
    TruckTravel: QGeoRouteRequest = ...
    TunnelFeature: QGeoRouteRequest = ...
    DirtRoadFeature: QGeoRouteRequest = ...
    ParksFeature: QGeoRouteRequest = ...
    MotorPoolLaneFeature: QGeoRouteRequest = ...
    TrafficFeature: QGeoRouteRequest = ...

    class FeatureType(object):
        NoFeature: QGeoRouteRequest.FeatureType = ...
        TollFeature: QGeoRouteRequest.FeatureType = ...
        HighwayFeature: QGeoRouteRequest.FeatureType = ...
        PublicTransitFeature: QGeoRouteRequest.FeatureType = ...
        FerryFeature: QGeoRouteRequest.FeatureType = ...
        TunnelFeature: QGeoRouteRequest.FeatureType = ...
        DirtRoadFeature: QGeoRouteRequest.FeatureType = ...
        ParksFeature: QGeoRouteRequest.FeatureType = ...
        MotorPoolLaneFeature: QGeoRouteRequest.FeatureType = ...
        TrafficFeature: QGeoRouteRequest.FeatureType = ...

    class FeatureTypes(object):
        ...

    class FeatureWeight(object):
        NeutralFeatureWeight: QGeoRouteRequest.FeatureWeight = ...
        PreferFeatureWeight: QGeoRouteRequest.FeatureWeight = ...
        RequireFeatureWeight: QGeoRouteRequest.FeatureWeight = ...
        AvoidFeatureWeight: QGeoRouteRequest.FeatureWeight = ...
        DisallowFeatureWeight: QGeoRouteRequest.FeatureWeight = ...

    class FeatureWeights(object):
        ...

    class ManeuverDetail(object):
        NoManeuvers: QGeoRouteRequest.ManeuverDetail = ...
        BasicManeuvers: QGeoRouteRequest.ManeuverDetail = ...

    class ManeuverDetails(object):
        ...

    class RouteOptimization(object):
        ShortestRoute: QGeoRouteRequest.RouteOptimization = ...
        FastestRoute: QGeoRouteRequest.RouteOptimization = ...
        MostEconomicRoute: QGeoRouteRequest.RouteOptimization = ...
        MostScenicRoute: QGeoRouteRequest.RouteOptimization = ...

    class RouteOptimizations(object):
        ...

    class SegmentDetail(object):
        NoSegmentData: QGeoRouteRequest.SegmentDetail = ...
        BasicSegmentData: QGeoRouteRequest.SegmentDetail = ...

    class SegmentDetails(object):
        ...

    class TravelMode(object):
        CarTravel: QGeoRouteRequest.TravelMode = ...
        PedestrianTravel: QGeoRouteRequest.TravelMode = ...
        BicycleTravel: QGeoRouteRequest.TravelMode = ...
        PublicTransitTravel: QGeoRouteRequest.TravelMode = ...
        TruckTravel: QGeoRouteRequest.TravelMode = ...

    class TravelModes(object):
        ...

    @typing.overload
    def __init__(
        self,
        origin: PySide2.QtPositioning.QGeoCoordinate,
        destination: PySide2.QtPositioning.QGeoCoordinate,
    ) -> None:
        """
        **QGeoRouteRequest::QGeoRouteRequest(const QList<QGeoCoordinate> & waypoints = QList<QGeoCoordinate>())**

        Constructs a request to calculate a route through the coordinates **waypoints**.

        The route will traverse the objects of **waypoints** in order.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtLocation.QGeoRouteRequest) -> None:
        """
        **QGeoRouteRequest::QGeoRouteRequest(const QList<QGeoCoordinate> & waypoints = QList<QGeoCoordinate>())**

        Constructs a request to calculate a route through the coordinates **waypoints**.

        The route will traverse the objects of **waypoints** in order.
        """
        ...

    @typing.overload
    def __init__(self, waypoints: typing.Sequence = ...) -> None:
        """
        **QGeoRouteRequest::QGeoRouteRequest(const QList<QGeoCoordinate> & waypoints = QList<QGeoCoordinate>())**

        Constructs a request to calculate a route through the coordinates **waypoints**.

        The route will traverse the objects of **waypoints** in order.
        """
        ...

    def departureTime(self) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QGeoRouteRequest::departureTime() const**

        Returns the departure time in the request.

        This function was introduced in Qt 5.13.

        **See also** **setDepartureTime** ().
        """
        ...

    def excludeAreas(self) -> typing.List:
        """
        **QList<QGeoRectangle> QGeoRouteRequest::excludeAreas() const**

        Returns areas the route must not cross.

        **See also** **setExcludeAreas** ().
        """
        ...

    def extraParameters(self) -> typing.Dict:
        """
        **QVariantMap QGeoRouteRequest::extraParameters() const**

        Returns the extra parameters set for this route request.

        This function was introduced in Qt 5.11.

        **See also** **setExtraParameters** ().
        """
        ...

    def featureTypes(self) -> typing.List:
        """
        **QList<QGeoRouteRequest::FeatureType> QGeoRouteRequest::featureTypes() const**

        Returns the list of features that will be considered when planning the route. Features with a weight of **NeutralFeatureWeight**  will not be returned.
        """
        ...

    def featureWeight(
        self, featureType: PySide2.QtLocation.QGeoRouteRequest.FeatureType
    ) -> PySide2.QtLocation.QGeoRouteRequest.FeatureWeight:
        """
        **QGeoRouteRequest::FeatureWeight QGeoRouteRequest::featureWeight(QGeoRouteRequest::FeatureType featureType ) const**

        Returns the weight assigned to **featureType** in the planning of the route.

        If no feature weight has been specified for **featureType** then **NeutralFeatureWeight**  will be returned.

        **See also** **setFeatureWeight** ().
        """
        ...

    def maneuverDetail(self) -> PySide2.QtLocation.QGeoRouteRequest.ManeuverDetail:
        """
        **QGeoRouteRequest::ManeuverDetail QGeoRouteRequest::maneuverDetail() const**

        Returns the level of detail which will be used in the representation of routing maneuvers.

        **See also** **setManeuverDetail** ().
        """
        ...

    def numberAlternativeRoutes(self) -> int:
        """
        **int QGeoRouteRequest::numberAlternativeRoutes() const**

        Returns the number of alternative routes which will be requested.

        **See also** **setNumberAlternativeRoutes** ().
        """
        ...

    def routeOptimization(
        self,
    ) -> PySide2.QtLocation.QGeoRouteRequest.RouteOptimizations:
        """
        **QGeoRouteRequest::RouteOptimizations QGeoRouteRequest::routeOptimization() const**

        Returns the optimization criteria which this request specifies should be used while planning the route.

        **See also** **setRouteOptimization** ().
        """
        ...

    def segmentDetail(self) -> PySide2.QtLocation.QGeoRouteRequest.SegmentDetail:
        """
        **QGeoRouteRequest::SegmentDetail QGeoRouteRequest::segmentDetail() const**

        Returns the level of detail which will be used in the representation of routing segments.

        **See also** **setSegmentDetail** ().
        """
        ...

    def setDepartureTime(self, departureTime: PySide2.QtCore.QDateTime) -> None:
        """
        **void QGeoRouteRequest::setDepartureTime(const QDateTime & departureTime )**

        Sets the departure time **departureTime** for the route calculation. This information can be used by the backend to calculate a faster route, for example, by avoiding traffic congestion during rush hour.

        The default value is an invalid **QDateTime** .

        This function was introduced in Qt 5.13.

        **See also** **departureTime** ().
        """
        ...

    def setExcludeAreas(self, areas: typing.Sequence) -> None:
        """
        **void QGeoRouteRequest::setExcludeAreas(const QList<QGeoRectangle> & areas )**

        Sets **areas** as excluded areas that the route must not cross.

        **See also** **excludeAreas** ().
        """
        ...

    def setExtraParameters(self, extraParameters: typing.Dict) -> None:
        """
        **void QGeoRouteRequest::setExtraParameters(const QVariantMap & extraParameters )**

        Sets the extra parameters **extraParameters** for the route request. The format of the extra parameters is plugin specific, and documented per plugin.

        This function was introduced in Qt 5.11.

        **See also** **extraParameters** ().
        """
        ...

    def setFeatureWeight(
        self,
        featureType: PySide2.QtLocation.QGeoRouteRequest.FeatureType,
        featureWeight: PySide2.QtLocation.QGeoRouteRequest.FeatureWeight,
    ) -> None:
        """
        **void QGeoRouteRequest::setFeatureWeight(QGeoRouteRequest::FeatureType featureType , QGeoRouteRequest::FeatureWeight featureWeight )**

        Assigns the weight **featureWeight** to the feature **featureType** during the planning of the route.

        By default all features are assigned a weight of **NeutralFeatureWeight** .

        It is impossible to assign a weight to **QGeoRouteRequest::NoFeature** .

        **See also** **featureWeight** ().
        """
        ...

    def setManeuverDetail(
        self, maneuverDetail: PySide2.QtLocation.QGeoRouteRequest.ManeuverDetail
    ) -> None:
        """
        **void QGeoRouteRequest::setManeuverDetail(QGeoRouteRequest::ManeuverDetail maneuverDetail )**

        Sets the level of detail to use when representing routing maneuvers to **maneuverDetail**.

        The default value is **QGeoRouteRequest::BasicManeuvers** .

        **See also** **maneuverDetail** ().
        """
        ...

    def setNumberAlternativeRoutes(self, alternatives: int) -> None:
        """
        **void QGeoRouteRequest::setNumberAlternativeRoutes(int alternatives )**

        Sets the number of alternative routes to request to **alternatives**. If **alternatives** is negative the number of alternative routes is set to 0.

        The default value is 0.

        **See also** **numberAlternativeRoutes** ().
        """
        ...

    def setRouteOptimization(
        self, optimization: PySide2.QtLocation.QGeoRouteRequest.RouteOptimizations
    ) -> None:
        """
        **void QGeoRouteRequest::setRouteOptimization(QGeoRouteRequest::RouteOptimizations optimization )**

        Sets the optimization criteria to use while planning the route to **optimization**.

        The default value is **QGeoRouteRequest::FastestRoute** .

        **See also** **routeOptimization** ().
        """
        ...

    def setSegmentDetail(
        self, segmentDetail: PySide2.QtLocation.QGeoRouteRequest.SegmentDetail
    ) -> None:
        """
        **void QGeoRouteRequest::setSegmentDetail(QGeoRouteRequest::SegmentDetail segmentDetail )**

        Sets the level of detail to use when representing routing segments to **segmentDetail**.

        **See also** **segmentDetail** ().
        """
        ...

    def setTravelModes(
        self, travelModes: PySide2.QtLocation.QGeoRouteRequest.TravelModes
    ) -> None:
        """
        **void QGeoRouteRequest::setTravelModes(QGeoRouteRequest::TravelModes travelModes )**

        Sets the travel modes which should be considered during the planning of the route to **travelModes**.

        The default value is **QGeoRouteRequest::CarTravel** .

        **See also** **travelModes** ().
        """
        ...

    def setWaypoints(self, waypoints: typing.Sequence) -> None:
        """
        **void QGeoRouteRequest::setWaypoints(const QList<QGeoCoordinate> & waypoints )**

        Sets **waypoints** as the waypoints that the route should pass through.

        The waypoints should be given in order from origin to destination.

        This request will be invalid until the waypoints have been set to a list containing two or more coordinates.

        **See also** **waypoints** ().
        """
        ...

    def setWaypointsMetadata(self, waypointMetadata: typing.Sequence) -> None:
        """
        **void QGeoRouteRequest::setWaypointsMetadata(const QList<QVariantMap> & waypointMetadata )**

        Sets **waypointMetadata** as the metadata for the waypoints set in this request. The metadata are intended as one **QVariantMap**  per waypoint, given in the same order as the waypoints.

        The content of the **QVariantMap**  is somehow backend-specific, but properties that can be specified using **Waypoint**  elements in QML can be assumed to be named and to work the same way across plugins, where supported.

        **See also** **waypointsMetadata** ().
        """
        ...

    def travelModes(self) -> PySide2.QtLocation.QGeoRouteRequest.TravelModes:
        """
        **QGeoRouteRequest::TravelModes QGeoRouteRequest::travelModes() const**

        Returns the travel modes which this request specifies should be considered during the planning of the route.

        **See also** **setTravelModes** ().
        """
        ...

    def waypoints(self) -> typing.List:
        """
        **QList<QGeoCoordinate> QGeoRouteRequest::waypoints() const**

        Returns the waypoints that the route will pass through.

        **See also** **setWaypoints** ().
        """
        ...

    def waypointsMetadata(self) -> typing.List:
        """
        **QList<QVariantMap> QGeoRouteRequest::waypointsMetadata() const**

        Returns the metadata for the waypoints in this request.

        **See also** **setWaypointsMetadata** ().
        """
        ...
