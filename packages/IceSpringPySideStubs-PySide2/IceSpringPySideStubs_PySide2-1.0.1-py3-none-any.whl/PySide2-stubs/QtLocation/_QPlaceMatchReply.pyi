"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning
import PySide2.QtLocation

bytes = str


class QPlaceMatchReply(PySide2.QtLocation.QPlaceReply):
    """
    **Detailed Description**

    If the operation is successful, the number of places in the reply matches those in the request. If a particular place in the request is not found, a default constructed place is used as a place holder in the reply. In this way, there is always a one is to one relationship between input places in the request, and output places in the reply.

    If the operation is not successful the number of places is always zero.

    See **Matching places between managers**  for an example on how to use a match reply.

    **See also** **QPlaceMatchRequest**  and **QPlaceManager** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **QPlaceMatchReply::QPlaceMatchReply(QObject * parent = nullptr)**

        Constructs a match reply with a given **parent**.
        """
        ...

    def places(self) -> typing.List:
        """
        **QList<QPlace> QPlaceMatchReply::places() const**

        Returns a list of matching places;

        **See also** **setPlaces** ().
        """
        ...

    def request(self) -> PySide2.QtLocation.QPlaceMatchRequest:
        """
        **QPlaceMatchRequest QPlaceMatchReply::request() const**

        Returns the match request that was used to generate this reply.

        **See also** **setRequest** ().
        """
        ...

    def setPlaces(self, results: typing.Sequence) -> None:
        """
        **[protected] void QPlaceMatchReply::setPlaces(const QList<QPlace> & places )**

        Sets the list of matching **places**.

        **See also** **places** ().
        """
        ...

    def setRequest(self, request: PySide2.QtLocation.QPlaceMatchRequest) -> None:
        """
        **[protected] void QPlaceMatchReply::setRequest(const QPlaceMatchRequest & request )**

        Sets the match **request** used to generate this reply.

        **See also** **request** ().
        """
        ...

    def type(self) -> PySide2.QtLocation.QPlaceReply.Type:
        """
        **[override virtual] QPlaceReply::Type QPlaceMatchReply::type() const**

        Reimplements: **QPlaceReply::type** () const.

        Returns the type of reply.
        """
        ...
