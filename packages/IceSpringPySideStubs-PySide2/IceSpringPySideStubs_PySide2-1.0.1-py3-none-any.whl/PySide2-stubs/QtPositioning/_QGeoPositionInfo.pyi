"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoPositionInfo(object):
    """
    **Detailed Description**

    A QGeoPositionInfo contains, at a minimum, a geographical coordinate and a timestamp. It may also have heading and speed measurements as well as estimates of the accuracy of the provided data.

    **See also** **QGeoPositionInfoSource** .
    """

    Direction: QGeoPositionInfo = ...
    GroundSpeed: QGeoPositionInfo = ...
    VerticalSpeed: QGeoPositionInfo = ...
    MagneticVariation: QGeoPositionInfo = ...
    HorizontalAccuracy: QGeoPositionInfo = ...
    VerticalAccuracy: QGeoPositionInfo = ...

    class Attribute(object):
        Direction: QGeoPositionInfo.Attribute = ...
        GroundSpeed: QGeoPositionInfo.Attribute = ...
        VerticalSpeed: QGeoPositionInfo.Attribute = ...
        MagneticVariation: QGeoPositionInfo.Attribute = ...
        HorizontalAccuracy: QGeoPositionInfo.Attribute = ...
        VerticalAccuracy: QGeoPositionInfo.Attribute = ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QGeoPositionInfo::QGeoPositionInfo()**

        Creates an invalid QGeoPositionInfo object.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        coordinate: PySide2.QtPositioning.QGeoCoordinate,
        updateTime: PySide2.QtCore.QDateTime,
    ) -> None:
        """
        **QGeoPositionInfo::QGeoPositionInfo()**

        Creates an invalid QGeoPositionInfo object.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoPositionInfo) -> None:
        """
        **QGeoPositionInfo::QGeoPositionInfo()**

        Creates an invalid QGeoPositionInfo object.

        **See also** **isValid** ().
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __lshift__(
        self, stream: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(
        self, stream: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def attribute(
        self, attribute: PySide2.QtPositioning.QGeoPositionInfo.Attribute
    ) -> float:
        """
        **qreal QGeoPositionInfo::attribute(QGeoPositionInfo::Attribute attribute ) const**

        Returns the value of the specified **attribute** as a qreal value.

        Returns NaN if the value has not been set.

        The function **hasAttribute** () should be used to determine whether or not a value has been set for an attribute.

        **See also** **hasAttribute** () and **setAttribute** ().
        """
        ...

    def coordinate(self) -> PySide2.QtPositioning.QGeoCoordinate:
        """
        **QGeoCoordinate QGeoPositionInfo::coordinate() const**

        Returns the coordinate for this position.

        Returns an invalid coordinate if no coordinate has been set.

        **See also** **setCoordinate** ().
        """
        ...

    def hasAttribute(
        self, attribute: PySide2.QtPositioning.QGeoPositionInfo.Attribute
    ) -> bool:
        """
        **bool QGeoPositionInfo::hasAttribute(QGeoPositionInfo::Attribute attribute ) const**

        Returns true if the specified **attribute** is present for this **QGeoPositionInfo**  object.
        """
        ...

    def isValid(self) -> bool:
        """
        **bool QGeoPositionInfo::isValid() const**

        Returns true if the **timestamp** () and **coordinate** () values are both valid.

        **See also** **QGeoCoordinate::isValid** () and **QDateTime::isValid** ().
        """
        ...

    def removeAttribute(
        self, attribute: PySide2.QtPositioning.QGeoPositionInfo.Attribute
    ) -> None:
        """
        **void QGeoPositionInfo::removeAttribute(QGeoPositionInfo::Attribute attribute )**

        Removes the specified **attribute** and its value.
        """
        ...

    def setAttribute(
        self, attribute: PySide2.QtPositioning.QGeoPositionInfo.Attribute, value: float
    ) -> None:
        """
        **void QGeoPositionInfo::setAttribute(QGeoPositionInfo::Attribute attribute , qreal value )**

        Sets the value for **attribute** to **value**.

        **See also** **attribute** ().
        """
        ...

    def setCoordinate(self, coordinate: PySide2.QtPositioning.QGeoCoordinate) -> None:
        """
        **void QGeoPositionInfo::setCoordinate(const QGeoCoordinate & coordinate )**

        Sets the coordinate for this position to **coordinate**.

        **See also** **coordinate** ().
        """
        ...

    def setTimestamp(self, timestamp: PySide2.QtCore.QDateTime) -> None:
        """
        **void QGeoPositionInfo::setTimestamp(const QDateTime & timestamp )**

        Sets the date and time at which this position was reported to **timestamp**.

        The **timestamp** must be in UTC time.

        **See also** **timestamp** ().
        """
        ...

    def timestamp(self) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QGeoPositionInfo::timestamp() const**

        Returns the date and time at which this position was reported, in UTC time.

        Returns an invalid **QDateTime**  if no date/time value has been set.

        **See also** **setTimestamp** ().
        """
        ...
