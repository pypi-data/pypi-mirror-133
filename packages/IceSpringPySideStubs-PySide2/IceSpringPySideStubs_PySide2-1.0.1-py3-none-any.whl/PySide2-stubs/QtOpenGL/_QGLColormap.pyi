"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtOpenGL

bytes = str


class QGLColormap(object):
    """
    **Detailed Description**

    QGLColormap provides a platform independent way of specifying and installing indexed colormaps for a **QGLWidget** . QGLColormap is especially useful when using the OpenGL color-index mode.

    Under X11 you must use an X server that supports either a `PseudoColor` or `DirectColor` visual class. If your X server currently only provides a `GrayScale`, `TrueColor`, `StaticColor` or `StaticGray` visual, you will not be able to allocate colorcells for writing. If this is the case, try setting your X server to 8 bit mode. It should then provide you with at least a `PseudoColor` visual. Note that you may experience colormap flashing if your X server is running in 8 bit mode.

    The **size** () of the colormap is always set to 256 colors. Note that under Windows you can also install colormaps in child widgets.

    This class uses **implicit sharing**  as a memory and speed optimization.

    Example of use:

    #include <QApplication>
        #include <QGLColormap>

        int main()
        {
            **QApplication**  app(argc, argv);

            MySuperGLWidget widget;     // a QGLWidget in color-index mode
            **QGLColormap**  colormap;

            // This will fill the colormap with colors ranging from
            // black to white.
            for (int i = 0; i < colormap.size(); i++)
                colormap.setEntry(i, **qRgb** (i, i, i));

            widget.setColormap(colormap);
            widget.show();
            return app.exec();
        }

    **See also** **QGLWidget::setColormap** () and **QGLWidget::colormap** ().
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QGLColormap::QGLColormap()**

        Construct a QGLColormap.
        """
        ...

    @typing.overload
    def __init__(self, arg__1: PySide2.QtOpenGL.QGLColormap) -> None:
        """
        **QGLColormap::QGLColormap()**

        Construct a QGLColormap.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def entryColor(self, idx: int) -> PySide2.QtGui.QColor:
        """
        **QColor QGLColormap::entryColor(int idx ) const**

        Returns the **QRgb**  value in the colorcell with index **idx**.
        """
        ...

    def entryRgb(self, idx: int) -> int:
        """
        **QRgb QGLColormap::entryRgb(int idx ) const**

        Returns the **QRgb**  value in the colorcell with index **idx**.
        """
        ...

    def find(self, color: int) -> int:
        """
        **int QGLColormap::find(QRgb color ) const**

        Returns the index of the color **color**. If **color** is not in the map, -1 is returned.
        """
        ...

    def findNearest(self, color: int) -> int:
        """
        **int QGLColormap::findNearest(QRgb color ) const**

        Returns the index of the color that is the closest match to color **color**.
        """
        ...

    def handle(self) -> int:
        ...

    def isEmpty(self) -> bool:
        """
        **bool QGLColormap::isEmpty() const**

        Returns `true` if the colormap is empty or it is not in use by a QGLWidget; otherwise returns `false`.

        A colormap with no color values set is considered to be empty. For historical reasons, a colormap that has color values set but which is not in use by a QGLWidget is also considered empty.

        Compare **size** () with zero to determine if the colormap is empty regardless of whether it is in use by a QGLWidget or not.

        **See also** **size** ().
        """
        ...

    @typing.overload
    def setEntry(self, idx: int, color: PySide2.QtGui.QColor) -> None:
        """
        **void QGLColormap::setEntry(int idx , QRgb color )**

        Set cell at index **idx** in the colormap to color **color**.
        """
        ...

    @typing.overload
    def setEntry(self, idx: int, color: int) -> None:
        """
        **void QGLColormap::setEntry(int idx , QRgb color )**

        Set cell at index **idx** in the colormap to color **color**.
        """
        ...

    def setHandle(self, ahandle: int) -> None:
        ...

    def size(self) -> int:
        """
        **int QGLColormap::size() const**

        Returns the number of colorcells in the colormap.
        """
        ...
