"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtHelp

bytes = str


class QHelpFilterEngine(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    The filter engine allows the management of filters associated with a **QHelpEngineCore**  instance. The help engine internally creates an instance of the filter engine, which can be accessed by calling **QHelpEngineCore::filterEngine** (). Therefore, the public constructor of this class is disabled.

    The filters are identified by a filter name string. Filter details are described by the **QHelpFilterData**  class.

    The filter engine allows for adding new filters and changing the existing filters' data through the **setFilterData** () method. An existing filter can be removed through the **removeFilter** () method.

    Out of the registered filters one can be marked as the active one. The active filter will be used by the associated help engine for returning filtered results of many different functions, such as content, index, or search results. If no filter is marked active, the help engine returns the full results list available.

    The active filter is returned by **activeFilter** () and it can be changed by **setActiveFilter** ().

    **See also** **QHelpEngineCore** .
    """

    def __init__(self, helpEngine: PySide2.QtHelp.QHelpEngineCore) -> None:
        ...

    def activeFilter(self) -> str:
        """
        **QString QHelpFilterEngine::activeFilter() const**

        Returns the name of the currently active filter.

        **See also** **setActiveFilter** ().
        """
        ...

    def availableComponents(self) -> typing.List:
        """
        **QStringList QHelpFilterEngine::availableComponents() const**

        Returns the list of all available components defined in all registered documentation files.
        """
        ...

    def availableVersions(self) -> typing.List:
        """
        **QList<QVersionNumber> QHelpFilterEngine::availableVersions() const**

        Returns the list of all available versions defined in all registered documentation files.

        This function was introduced in Qt 5.15.
        """
        ...

    def filterData(self, filterName: str) -> PySide2.QtHelp.QHelpFilterData:
        """
        **QHelpFilterData QHelpFilterEngine::filterData(const QString & filterName ) const**

        Returns the filter details associated with **filterName**.

        **See also** **setFilterData** ().
        """
        ...

    def filters(self) -> typing.List:
        """
        **QStringList QHelpFilterEngine::filters() const**

        Returns the list of all filter names defined inside the filter engine.
        """
        ...

    @typing.overload
    def indices(self) -> typing.List:
        """
        **QStringList QHelpFilterEngine::indices() const**

        Returns a sorted list of available indices. The returned list contents depend on the active filter, and therefore only the indices registered for the active filter will be returned.

        This function was introduced in Qt 5.15.
        """
        ...

    @typing.overload
    def indices(self, filterName: str) -> typing.List:
        """
        **QStringList QHelpFilterEngine::indices() const**

        Returns a sorted list of available indices. The returned list contents depend on the active filter, and therefore only the indices registered for the active filter will be returned.

        This function was introduced in Qt 5.15.
        """
        ...

    def namespaceToComponent(self) -> typing.Dict:
        """
        **QMap<QString, QString> QHelpFilterEngine::namespaceToComponent() const**

        Returns the map of all the available namespaces as keys together with their associated components as values.
        """
        ...

    def namespaceToVersion(self) -> typing.Dict:
        """
        **QMap<QString, QVersionNumber> QHelpFilterEngine::namespaceToVersion() const**

        Returns the map of all the available namespaces as keys together with their associated versions as values.
        """
        ...

    def namespacesForFilter(self, filterName: str) -> typing.List:
        """
        **QStringList QHelpFilterEngine::namespacesForFilter(const QString & filterName ) const**

        Returns the list of all registered documentation namespaces that match the filter identified by **filterName**.
        """
        ...

    def removeFilter(self, filterName: str) -> bool:
        """
        **bool QHelpFilterEngine::removeFilter(const QString & filterName )**

        Removes the filter identified by **filterName**.

        Returns `true` if removing the filter succeeded, otherwise returns `false`.
        """
        ...

    def setActiveFilter(self, filterName: str) -> bool:
        """
        **bool QHelpFilterEngine::setActiveFilter(const QString & filterName )**

        Changes the currently active filter to **filterName**.

        Returns `true` if changing the filter succeeded, otherwise returns `false`.

        **See also** **activeFilter** ().
        """
        ...

    def setFilterData(
        self, filterName: str, filterData: PySide2.QtHelp.QHelpFilterData
    ) -> bool:
        """
        **bool QHelpFilterEngine::setFilterData(const QString & filterName , const QHelpFilterData & filterData )**

        Changes the existing filter details of the filter identified by **filterName** to **filterData**. If the filter does not exist, a new filter is created.

        Returns `true` if setting the filter succeeded, otherwise returns `false`.

        **See also** **filterData** ().
        """
        ...

    @property
    def filterActivated(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QHelpFilterEngine::filterActivated(const QString & newFilter )**

        This signal is emitted when the active filter is set. **newFilter** specifies the name of the filter.

        **See also** **setActiveFilter** ().
        """
        ...
