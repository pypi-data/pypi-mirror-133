"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScxml

bytes = str


class QScxmlTableData(object):
    """
    **Detailed Description**

    QScxmlTableData is the interface to the compiled representation of SCXML state machines. It should only be used internally and by state machines compiled from SCXML documents.
    """

    def __init__(self) -> None:
        ...

    def assignmentInfo(
        self, assignmentId: int
    ) -> PySide2.QtScxml.QScxmlExecutableContent.AssignmentInfo:
        """
        **[pure virtual] QScxmlExecutableContent::AssignmentInfo QScxmlTableData::assignmentInfo(QScxmlExecutableContent::EvaluatorId assignmentId ) const**

        Returns the **QScxmlExecutableContent::AssignmentInfo**  object for the given **assignmentId**.
        """
        ...

    def dataNames(self) -> typing.Tuple:
        """
        **[pure virtual] QScxmlExecutableContent::StringId *QScxmlTableData::dataNames(int * count ) const**

        Retrieves the string IDs for the names of data items in the data model. The number of strings is saved into **count** and a pointer to an array of string IDs is returned.

        Returns a pointer to an array of string IDs.
        """
        ...

    def evaluatorInfo(
        self, evaluatorId: int
    ) -> PySide2.QtScxml.QScxmlExecutableContent.EvaluatorInfo:
        """
        **[pure virtual] QScxmlExecutableContent::EvaluatorInfo QScxmlTableData::evaluatorInfo(QScxmlExecutableContent::EvaluatorId evaluatorId ) const**

        Returns the **QScxmlExecutableContent::EvaluatorInfo**  object for the given **evaluatorId**.
        """
        ...

    def foreachInfo(
        self, foreachId: int
    ) -> PySide2.QtScxml.QScxmlExecutableContent.ForeachInfo:
        """
        **[pure virtual] QScxmlExecutableContent::ForeachInfo QScxmlTableData::foreachInfo(QScxmlExecutableContent::EvaluatorId foreachId ) const**

        Returns the **QScxmlExecutableContent::ForeachInfo**  object for the given **foreachId**.
        """
        ...

    def initialSetup(self) -> int:
        """
        **[pure virtual] QScxmlExecutableContent::ContainerId QScxmlTableData::initialSetup() const**

        Initializes the table data. Returns the ID of the container with instructions to be executed when initializing the state machine.
        """
        ...

    def instructions(self) -> typing.List:
        """
        **[pure virtual] QScxmlExecutableContent::InstructionId *QScxmlTableData::instructions() const**

        Returns a pointer to the instructions of executable content contained in the state machine.
        """
        ...

    def name(self) -> str:
        """
        **[pure virtual] QString QScxmlTableData::name() const**

        Returns the name of the state machine.
        """
        ...

    def serviceFactory(self, id: int) -> PySide2.QtScxml.QScxmlInvokableServiceFactory:
        """
        **[pure virtual] QScxmlInvokableServiceFactory *QScxmlTableData::serviceFactory(int id ) const**

        Returns the service factory that creates invokable services for the state with the ID **id**.
        """
        ...

    def stateMachineTable(self) -> typing.List:
        """
        **[pure virtual] const qint32 *QScxmlTableData::stateMachineTable() const**

        Returns a pointer to the complete state table, expressed as an opaque sequence of integers.
        """
        ...

    def string(self, id: int) -> str:
        """
        **[pure virtual] QString QScxmlTableData::string(QScxmlExecutableContent::StringId id ) const**

        Returns a **QString**  for the given **id**.
        """
        ...
