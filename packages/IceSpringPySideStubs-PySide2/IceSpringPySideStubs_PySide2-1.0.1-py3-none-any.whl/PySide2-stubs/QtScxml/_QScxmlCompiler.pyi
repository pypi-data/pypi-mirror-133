"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScxml

bytes = str


class QScxmlCompiler(object):
    """
    **Detailed Description**

    Parses an **SCXML**  file and dynamically instantiates a state machine for a successfully parsed SCXML file. If parsing fails, the new state machine cannot start. All errors are returned by **QScxmlStateMachine::parseErrors** ().

    To load an SCXML file, **QScxmlStateMachine::fromFile**  or **QScxmlStateMachine::fromData**  should be used. Using QScxmlCompiler directly is only needed when the compiler needs to use a custom **QScxmlCompiler::Loader** .
    """

    class Loader(object):
        def __init__(self) -> None:
            ...

        def load(self, name: str, baseDir: str) -> typing.Tuple:
            ...

    def __init__(self, xmlReader: PySide2.QtCore.QXmlStreamReader) -> None:
        """
        **QScxmlCompiler::QScxmlCompiler(QXmlStreamReader * reader )**

        Creates a new SCXML compiler for the specified **reader**.
        """
        ...

    def compile(self) -> PySide2.QtScxml.QScxmlStateMachine:
        """
        **QScxmlStateMachine *QScxmlCompiler::compile()**

        Parses an SCXML file and creates a new state machine from it.

        If parsing is successful, the returned state machine can be initialized and started. If parsing fails, **QScxmlStateMachine::parseErrors** () can be used to retrieve a list of errors.
        """
        ...

    def errors(self) -> typing.List:
        """
        **QVector<QScxmlError> QScxmlCompiler::errors() const**

        Returns the list of parse errors.
        """
        ...

    def fileName(self) -> str:
        """
        **QString QScxmlCompiler::fileName() const**

        Returns the file name associated with the current input.

        **See also** **setFileName** ().
        """
        ...

    def loader(self) -> PySide2.QtScxml.QScxmlCompiler.Loader:
        """
        **QScxmlCompiler::Loader *QScxmlCompiler::loader() const**

        Returns the loader that is currently used to resolve and load URIs for the SCXML compiler.

        **See also** **setLoader** ().
        """
        ...

    def setFileName(self, fileName: str) -> None:
        """
        **void QScxmlCompiler::setFileName(const QString & fileName )**

        Sets the file name for the current input to **fileName**.

        The file name is used for error reporting and for resolving relative path URIs.

        **See also** **fileName** ().
        """
        ...

    def setLoader(self, newLoader: PySide2.QtScxml.QScxmlCompiler.Loader) -> None:
        """
        **void QScxmlCompiler::setLoader(QScxmlCompiler::Loader * newLoader )**

        Sets **newLoader** to be used for resolving and loading URIs for the SCXML compiler.

        **See also** **loader** ().
        """
        ...
