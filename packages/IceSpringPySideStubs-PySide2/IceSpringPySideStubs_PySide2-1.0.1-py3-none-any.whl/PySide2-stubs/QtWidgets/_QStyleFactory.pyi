"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QStyleFactory(object):
    """
    **Detailed Description**

    The **QStyle**  class is an abstract base class that encapsulates the look and feel of a GUI. QStyleFactory creates a **QStyle**  object using the **create** () function and a key identifying the style. The styles are either built-in or dynamically loaded from a style plugin (see **QStylePlugin** ).

    The valid keys can be retrieved using the **keys** () function. Typically they include "windows" and "fusion". Depending on the platform, "windowsvista" and "macintosh" may be available. Note that keys are case insensitive.

    **See also** **QStyle** .
    """

    def __init__(self) -> None:
        ...

    @staticmethod
    def create(arg__1: str) -> PySide2.QtWidgets.QStyle:
        """
        **[static] QStyle *QStyleFactory::create(const QString & key )**

        Creates and returns a **QStyle**  object that matches the given **key** , or returns `nullptr` if no matching style is found.

        Both built-in styles and styles from style plugins are queried for a matching style.

        **Note:** The keys used are case insensitive.

        **See also** **keys** ().
        """
        ...

    @staticmethod
    def keys() -> typing.List:
        """
        **[static] QStringList QStyleFactory::keys()**

        Returns the list of valid keys, i.e. the keys this factory can create styles for.

        **See also** **create** ().
        """
        ...
