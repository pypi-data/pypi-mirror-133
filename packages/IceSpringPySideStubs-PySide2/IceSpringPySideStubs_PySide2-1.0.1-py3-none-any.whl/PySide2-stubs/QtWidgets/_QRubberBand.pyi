"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QRubberBand(PySide2.QtWidgets.QWidget):
    """
    **Detailed Description**

    A rubber band is often used to show a new bounding area (as in a **QSplitter**  or a **QDockWidget**  that is undocking). Historically this has been implemented using a **QPainter**  and XOR, but this approach doesn\'t always work properly since rendering can happen in the window below the rubber band, but before the rubber band has been "erased".

    You can create a QRubberBand whenever you need to render a rubber band around a given area (or to represent a single line), then call **setGeometry** (), **move** () or **resize** () to position and size it. A common pattern is to do this in conjunction with mouse events. For example:

    void Widget::mousePressEvent(**QMouseEvent**  *event)
        {
            origin = event->pos();
            if (!rubberBand)
                rubberBand = new **QRubberBand** (**QRubberBand** ::Rectangle, this);
            rubberBand->setGeometry(**QRect** (origin, **QSize** ()));
            rubberBand->show();
        }

        void Widget::mouseMoveEvent(**QMouseEvent**  *event)
        {
            rubberBand->setGeometry(**QRect** (origin, event->pos()).normalized());
        }

        void Widget::mouseReleaseEvent(**QMouseEvent**  *event)
        {
            rubberBand->hide();
            // determine selection, for example using QRect::intersects()
            // and QRect::contains().
        }

    If you pass a parent to QRubberBand\'s constructor, the rubber band will display only inside its parent, but stays on top of other child widgets. If no parent is passed, QRubberBand will act as a top-level widget.

    Call **show** () to make the rubber band visible; also when the rubber band is not a top-level. Hiding or destroying the widget will make the rubber band disappear. The rubber band can be a **Rectangle**  or a **Line**  (vertical or horizontal), depending on the **shape** () it was given when constructed.
    """

    Line: QRubberBand = ...
    Rectangle: QRubberBand = ...

    class Shape(object):
        Line: QRubberBand.Shape = ...
        Rectangle: QRubberBand.Shape = ...

    def __init__(
        self,
        arg__1: PySide2.QtWidgets.QRubberBand.Shape,
        parent: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        **QRubberBand::QRubberBand(QRubberBand::Shape s , QWidget * p = nullptr)**

        Constructs a rubber band of shape **s** , with parent **p**.

        By default a rectangular rubber band ( **s** is `Rectangle`) will use a mask, so that a small border of the rectangle is all that is visible. Some styles (e.g., native macOS) will change this and call **QWidget::setWindowOpacity** () to make a semi-transparent filled selection rectangle.
        """
        ...

    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None:
        """
        **[override virtual protected] void QRubberBand::changeEvent(QEvent * e )**

        Reimplements: **QWidget::changeEvent** (QEvent *event).
        """
        ...

    def event(self, e: PySide2.QtCore.QEvent) -> bool:
        """
        **[override virtual protected] bool QRubberBand::event(QEvent * e )**

        Reimplements: **QWidget::event** (QEvent *event).
        """
        ...

    def initStyleOption(self, option: PySide2.QtWidgets.QStyleOptionRubberBand) -> None:
        """
        **[protected] void QRubberBand::initStyleOption(QStyleOptionRubberBand * option ) const**

        Initialize **option** with the values from this **QRubberBand** . This method is useful for subclasses when they need a **QStyleOptionRubberBand** , but don't want to fill in all the information themselves.

        **See also** **QStyleOption::initFrom** ().
        """
        ...

    @typing.overload
    def move(self, p: PySide2.QtCore.QPoint) -> None:
        """
        **void QRubberBand::move(int x , int y )**

        Moves the rubberband to point ( **x** , **y** ).

        **See also** **resize** ().
        """
        ...

    @typing.overload
    def move(self, x: int, y: int) -> None:
        """
        **void QRubberBand::move(int x , int y )**

        Moves the rubberband to point ( **x** , **y** ).

        **See also** **resize** ().
        """
        ...

    def moveEvent(self, arg__1: PySide2.QtGui.QMoveEvent) -> None:
        """
        **[override virtual protected] void QRubberBand::moveEvent( QMoveEvent * )**

        Reimplements: **QWidget::moveEvent** (QMoveEvent *event).
        """
        ...

    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None:
        """
        **[override virtual protected] void QRubberBand::paintEvent( QPaintEvent * )**

        Reimplements: **QWidget::paintEvent** (QPaintEvent *event).
        """
        ...

    @typing.overload
    def resize(self, s: PySide2.QtCore.QSize) -> None:
        """
        **void QRubberBand::resize(int width , int height )**

        Resizes the rubberband so that its width is **width** , and its height is **height**.

        **See also** **move** ().
        """
        ...

    @typing.overload
    def resize(self, w: int, h: int) -> None:
        """
        **void QRubberBand::resize(int width , int height )**

        Resizes the rubberband so that its width is **width** , and its height is **height**.

        **See also** **move** ().
        """
        ...

    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None:
        """
        **[override virtual protected] void QRubberBand::resizeEvent( QResizeEvent * )**

        Reimplements: **QWidget::resizeEvent** (QResizeEvent *event).
        """
        ...

    @typing.overload
    def setGeometry(self, r: PySide2.QtCore.QRect) -> None:
        """
        **void QRubberBand::setGeometry(const QRect & rect )**

        Sets the geometry of the rubber band to **rect** , specified in the coordinate system of its parent widget.

        **See also** **QWidget::geometry** .
        """
        ...

    @typing.overload
    def setGeometry(self, x: int, y: int, w: int, h: int) -> None:
        """
        **void QRubberBand::setGeometry(const QRect & rect )**

        Sets the geometry of the rubber band to **rect** , specified in the coordinate system of its parent widget.

        **See also** **QWidget::geometry** .
        """
        ...

    def shape(self) -> PySide2.QtWidgets.QRubberBand.Shape:
        """
        **QRubberBand::Shape QRubberBand::shape() const**

        Returns the shape of this rubber band. The shape can only be set upon construction.
        """
        ...

    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None:
        """
        **[override virtual protected] void QRubberBand::showEvent(QShowEvent * e )**

        Reimplements: **QWidget::showEvent** (QShowEvent *event).
        """
        ...
