"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QGraphicsTextItem(PySide2.QtWidgets.QGraphicsObject):
    """
    **Detailed Description**

    If you only need to show plain text in an item, consider using **QGraphicsSimpleTextItem**  instead.

    To set the item's text, pass a **QString**  to QGraphicsTextItem's constructor, or call **setHtml** ()/**setPlainText** ().

    QGraphicsTextItem uses the text's formatted size and the associated font to provide a reasonable implementation of **boundingRect** (), **shape** (), and **contains** (). You can set the font by calling **setFont** ().

    It is possible to make the item editable by setting the **Qt::TextEditorInteraction**  flag using **setTextInteractionFlags** ().

    The item's preferred text width can be set using **setTextWidth** () and obtained using **textWidth** ().

    **Note:** In order to align HTML text in the center, the item's text width must be set. Otherwise, you can call **adjustSize** () after setting the item's text.

    ![](images/graphicsview-textitem.png)

    **Note:** QGraphicsTextItem accepts **hover events**  by default. You can change this with **setAcceptHoverEvents()** .

    **See also** **QGraphicsSimpleTextItem** , **QGraphicsPathItem** , **QGraphicsRectItem** , **QGraphicsEllipseItem** , **QGraphicsPixmapItem** , **QGraphicsPolygonItem** , **QGraphicsLineItem** , and **Graphics View Framework** .
    """

    @typing.overload
    def __init__(
        self, parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...
    ) -> None:
        """
        **QGraphicsTextItem::QGraphicsTextItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsTextItem. **parent** is passed to **QGraphicsItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    @typing.overload
    def __init__(
        self, text: str, parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...
    ) -> None:
        """
        **QGraphicsTextItem::QGraphicsTextItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsTextItem. **parent** is passed to **QGraphicsItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    def adjustSize(self) -> None:
        """
        **void QGraphicsTextItem::adjustSize()**

        Adjusts the text item to a reasonable size.
        """
        ...

    def boundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **[override virtual] QRectF QGraphicsTextItem::boundingRect() const**

        Reimplements: **QGraphicsItem::boundingRect** () const.
        """
        ...

    def contains(self, point: PySide2.QtCore.QPointF) -> bool:
        """
        **[override virtual] bool QGraphicsTextItem::contains(const QPointF & point ) const**

        Reimplements: **QGraphicsItem::contains** (const QPointF &point) const.
        """
        ...

    def contextMenuEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneContextMenuEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::contextMenuEvent(QGraphicsSceneContextMenuEvent * event )**

        Reimplements: **QGraphicsItem::contextMenuEvent** (QGraphicsSceneContextMenuEvent *event).
        """
        ...

    def defaultTextColor(self) -> PySide2.QtGui.QColor:
        """
        **QColor QGraphicsTextItem::defaultTextColor() const**

        Returns the default text color that is used for unformatted text.

        **See also** **setDefaultTextColor** ().
        """
        ...

    def document(self) -> PySide2.QtGui.QTextDocument:
        """
        **QTextDocument *QGraphicsTextItem::document() const**

        Returns the item's text document.

        **See also** **setDocument** ().
        """
        ...

    def dragEnterEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneDragDropEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::dragEnterEvent(QGraphicsSceneDragDropEvent * event )**

        Reimplements: **QGraphicsItem::dragEnterEvent** (QGraphicsSceneDragDropEvent *event).
        """
        ...

    def dragLeaveEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneDragDropEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::dragLeaveEvent(QGraphicsSceneDragDropEvent * event )**

        Reimplements: **QGraphicsItem::dragLeaveEvent** (QGraphicsSceneDragDropEvent *event).
        """
        ...

    def dragMoveEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneDragDropEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::dragMoveEvent(QGraphicsSceneDragDropEvent * event )**

        Reimplements: **QGraphicsItem::dragMoveEvent** (QGraphicsSceneDragDropEvent *event).
        """
        ...

    def dropEvent(self, event: PySide2.QtWidgets.QGraphicsSceneDragDropEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::dropEvent(QGraphicsSceneDragDropEvent * event )**

        Reimplements: **QGraphicsItem::dropEvent** (QGraphicsSceneDragDropEvent *event).
        """
        ...

    def extension(self, variant: typing.Any) -> typing.Any:
        ...

    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::focusInEvent(QFocusEvent * event )**

        Reimplements: **QGraphicsItem::focusInEvent** (QFocusEvent *event).
        """
        ...

    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::focusOutEvent(QFocusEvent * event )**

        Reimplements: **QGraphicsItem::focusOutEvent** (QFocusEvent *event).
        """
        ...

    def font(self) -> PySide2.QtGui.QFont:
        """
        **QFont QGraphicsTextItem::font() const**

        Returns the item's font, which is used to render the text.

        **See also** **setFont** ().
        """
        ...

    def hoverEnterEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneHoverEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::hoverEnterEvent(QGraphicsSceneHoverEvent * event )**

        Reimplements: **QGraphicsItem::hoverEnterEvent** (QGraphicsSceneHoverEvent *event).
        """
        ...

    def hoverLeaveEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneHoverEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::hoverLeaveEvent(QGraphicsSceneHoverEvent * event )**

        Reimplements: **QGraphicsItem::hoverLeaveEvent** (QGraphicsSceneHoverEvent *event).
        """
        ...

    def hoverMoveEvent(self, event: PySide2.QtWidgets.QGraphicsSceneHoverEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::hoverMoveEvent(QGraphicsSceneHoverEvent * event )**

        Reimplements: **QGraphicsItem::hoverMoveEvent** (QGraphicsSceneHoverEvent *event).
        """
        ...

    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::inputMethodEvent(QInputMethodEvent * event )**

        Reimplements: **QGraphicsItem::inputMethodEvent** (QInputMethodEvent *event).
        """
        ...

    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any:
        """
        **[override virtual protected] QVariant QGraphicsTextItem::inputMethodQuery(Qt::InputMethodQuery query ) const**

        Reimplements: **QGraphicsItem::inputMethodQuery** (Qt::InputMethodQuery query) const.
        """
        ...

    def isObscuredBy(self, item: PySide2.QtWidgets.QGraphicsItem) -> bool:
        """
        **[override virtual] bool QGraphicsTextItem::isObscuredBy(const QGraphicsItem * item ) const**

        Reimplements: **QGraphicsItem::isObscuredBy** (const QGraphicsItem *item) const.
        """
        ...

    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::keyPressEvent(QKeyEvent * event )**

        Reimplements: **QGraphicsItem::keyPressEvent** (QKeyEvent *event).
        """
        ...

    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::keyReleaseEvent(QKeyEvent * event )**

        Reimplements: **QGraphicsItem::keyReleaseEvent** (QKeyEvent *event).
        """
        ...

    def mouseDoubleClickEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneMouseEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::mouseDoubleClickEvent(QGraphicsSceneMouseEvent * event )**

        Reimplements: **QGraphicsItem::mouseDoubleClickEvent** (QGraphicsSceneMouseEvent *event).
        """
        ...

    def mouseMoveEvent(self, event: PySide2.QtWidgets.QGraphicsSceneMouseEvent) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::mouseMoveEvent(QGraphicsSceneMouseEvent * event )**

        Reimplements: **QGraphicsItem::mouseMoveEvent** (QGraphicsSceneMouseEvent *event).
        """
        ...

    def mousePressEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneMouseEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::mousePressEvent(QGraphicsSceneMouseEvent * event )**

        Reimplements: **QGraphicsItem::mousePressEvent** (QGraphicsSceneMouseEvent *event).
        """
        ...

    def mouseReleaseEvent(
        self, event: PySide2.QtWidgets.QGraphicsSceneMouseEvent
    ) -> None:
        """
        **[override virtual protected] void QGraphicsTextItem::mouseReleaseEvent(QGraphicsSceneMouseEvent * event )**

        Reimplements: **QGraphicsItem::mouseReleaseEvent** (QGraphicsSceneMouseEvent *event).
        """
        ...

    def opaqueArea(self) -> PySide2.QtGui.QPainterPath:
        """
        **[override virtual] QPainterPath QGraphicsTextItem::opaqueArea() const**

        Reimplements: **QGraphicsItem::opaqueArea** () const.
        """
        ...

    def openExternalLinks(self) -> bool:
        """
        **openExternalLinks : bool**

        Specifies whether **QGraphicsTextItem**  should automatically open links using **QDesktopServices::openUrl** () instead of emitting the **linkActivated**  signal.

        The default value is false.

        **Access functions:**

        bool **openExternalLinks** () const
        void **setOpenExternalLinks** (bool **open** )
        """
        ...

    def paint(
        self,
        painter: PySide2.QtGui.QPainter,
        option: PySide2.QtWidgets.QStyleOptionGraphicsItem,
        widget: PySide2.QtWidgets.QWidget,
    ) -> None:
        """
        **[override virtual] void QGraphicsTextItem::paint(QPainter * painter , const QStyleOptionGraphicsItem * option , QWidget * widget )**

        Reimplements: **QGraphicsItem::paint** (QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget).
        """
        ...

    def sceneEvent(self, event: PySide2.QtCore.QEvent) -> bool:
        """
        **[override virtual protected] bool QGraphicsTextItem::sceneEvent(QEvent * event )**

        Reimplements: **QGraphicsItem::sceneEvent** (QEvent *event).
        """
        ...

    def setDefaultTextColor(self, c: PySide2.QtGui.QColor) -> None:
        """
        **void QGraphicsTextItem::setDefaultTextColor(const QColor & col )**

        Sets the color for unformatted text to **col**.

        **See also** **defaultTextColor** ().
        """
        ...

    def setDocument(self, document: PySide2.QtGui.QTextDocument) -> None:
        """
        **void QGraphicsTextItem::setDocument(QTextDocument * document )**

        Sets the text document **document** on the item.

        **See also** **document** ().
        """
        ...

    def setExtension(
        self, extension: PySide2.QtWidgets.QGraphicsItem.Extension, variant: typing.Any
    ) -> None:
        ...

    def setFont(self, font: PySide2.QtGui.QFont) -> None:
        """
        **void QGraphicsTextItem::setFont(const QFont & font )**

        Sets the font used to render the text item to **font**.

        **See also** **font** ().
        """
        ...

    def setHtml(self, html: str) -> None:
        """
        **void QGraphicsTextItem::setHtml(const QString & text )**

        Sets the item's text to **text** , assuming that text is HTML formatted. If the item has keyboard input focus, this function will also call **ensureVisible** () to ensure that the text is visible in all viewports.

        **See also** **toHtml** (), **hasFocus** (), and **QGraphicsSimpleTextItem** .
        """
        ...

    def setOpenExternalLinks(self, open: bool) -> None:
        """
        **openExternalLinks : bool**

        Specifies whether **QGraphicsTextItem**  should automatically open links using **QDesktopServices::openUrl** () instead of emitting the **linkActivated**  signal.

        The default value is false.

        **Access functions:**

        bool **openExternalLinks** () const
        void **setOpenExternalLinks** (bool **open** )
        """
        ...

    def setPlainText(self, text: str) -> None:
        """
        **void QGraphicsTextItem::setPlainText(const QString & text )**

        Sets the item's text to **text**. If the item has keyboard input focus, this function will also call **ensureVisible** () to ensure that the text is visible in all viewports.

        **See also** **toHtml** () and **hasFocus** ().
        """
        ...

    def setTabChangesFocus(self, b: bool) -> None:
        """
        **void QGraphicsTextItem::setTabChangesFocus(bool b )**

        If **b** is true, the **Tab** key will cause the widget to change focus; otherwise, the tab key will insert a tab into the document.

        In some occasions text edits should not allow the user to input tabulators or change indentation using the **Tab** key, as this breaks the focus chain. The default is false.

        This function was introduced in Qt 4.5.

        **See also** **tabChangesFocus** (), **ItemIsFocusable** , and **textInteractionFlags** ().
        """
        ...

    def setTextCursor(self, cursor: PySide2.QtGui.QTextCursor) -> None:
        """
        **textCursor : QTextCursor**

        This property represents the visible text cursor in an editable text item.

        By default, if the item's text has not been set, this property contains a null text cursor; otherwise it contains a text cursor placed at the start of the item's document.

        **Access functions:**

        QTextCursor **textCursor** () const
        void **setTextCursor** (const QTextCursor & **cursor** )

        **Member Function Documentation**
        """
        ...

    def setTextInteractionFlags(
        self, flags: PySide2.QtCore.Qt.TextInteractionFlags
    ) -> None:
        """
        **void QGraphicsTextItem::setTextInteractionFlags(Qt::TextInteractionFlags flags )**

        Sets the flags **flags** to specify how the text item should react to user input.

        The default for a **QGraphicsTextItem**  is **Qt::NoTextInteraction** . This function also affects the **ItemIsFocusable**  **QGraphicsItem**  flag by setting it if **flags** is different from **Qt::NoTextInteraction**  and clearing it otherwise.

        By default, the text is read-only. To transform the item into an editor, set the **Qt::TextEditable**  flag.

        **See also** **textInteractionFlags** ().
        """
        ...

    def setTextWidth(self, width: float) -> None:
        """
        **void QGraphicsTextItem::setTextWidth(qreal width )**

        Sets the preferred width for the item's text. If the actual text is wider than the specified width then it will be broken into multiple lines.

        If **width** is set to -1 then the text will not be broken into multiple lines unless it is enforced through an explicit line break or a new paragraph.

        The default value is -1.

        Note that **QGraphicsTextItem**  keeps a **QTextDocument**  internally, which is used to calculate the text width.

        **See also** **textWidth** () and **QTextDocument::setTextWidth** ().
        """
        ...

    def shape(self) -> PySide2.QtGui.QPainterPath:
        """
        **[override virtual] QPainterPath QGraphicsTextItem::shape() const**

        Reimplements: **QGraphicsItem::shape** () const.
        """
        ...

    def supportsExtension(
        self, extension: PySide2.QtWidgets.QGraphicsItem.Extension
    ) -> bool:
        ...

    def tabChangesFocus(self) -> bool:
        """
        **bool QGraphicsTextItem::tabChangesFocus() const**

        Returns `true` if the **Tab** key will cause the widget to change focus; otherwise, false is returned.

        By default, this behavior is disabled, and this function will return false.

        This function was introduced in Qt 4.5.

        **See also** **setTabChangesFocus** ().
        """
        ...

    def textCursor(self) -> PySide2.QtGui.QTextCursor:
        """
        **textCursor : QTextCursor**

        This property represents the visible text cursor in an editable text item.

        By default, if the item's text has not been set, this property contains a null text cursor; otherwise it contains a text cursor placed at the start of the item's document.

        **Access functions:**

        QTextCursor **textCursor** () const
        void **setTextCursor** (const QTextCursor & **cursor** )

        **Member Function Documentation**
        """
        ...

    def textInteractionFlags(self) -> PySide2.QtCore.Qt.TextInteractionFlags:
        """
        **Qt::TextInteractionFlags QGraphicsTextItem::textInteractionFlags() const**

        Returns the current text interaction flags.

        **See also** **setTextInteractionFlags** ().
        """
        ...

    def textWidth(self) -> float:
        """
        **qreal QGraphicsTextItem::textWidth() const**

        Returns the text width.

        The width is calculated with the **QTextDocument**  that **QGraphicsTextItem**  keeps internally.

        **See also** **setTextWidth** () and **QTextDocument::textWidth** ().
        """
        ...

    def toHtml(self) -> str:
        """
        **QString QGraphicsTextItem::toHtml() const**

        Returns the item's text converted to HTML, or an empty **QString**  if no text has been set.

        **See also** **setHtml** ().
        """
        ...

    def toPlainText(self) -> str:
        """
        **QString QGraphicsTextItem::toPlainText() const**

        Returns the item's text converted to plain text, or an empty **QString**  if no text has been set.

        **See also** **setPlainText** ().
        """
        ...

    def type(self) -> int:
        """
        **[override virtual] int QGraphicsTextItem::type() const**

        Reimplements: **QGraphicsItem::type** () const.
        """
        ...

    @property
    def linkActivated(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGraphicsTextItem::linkActivated(const QString & link )**

        This signal is emitted when the user clicks on a link on a text item that enables **Qt::LinksAccessibleByMouse**  or **Qt::LinksAccessibleByKeyboard** . **link** is the link that was clicked.

        **See also** **setTextInteractionFlags** ().
        """
        ...

    @property
    def linkHovered(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGraphicsTextItem::linkHovered(const QString & link )**

        This signal is emitted when the user hovers over a link on a text item that enables **Qt::LinksAccessibleByMouse** . **link** is the link that was hovered over.

        **See also** **setTextInteractionFlags** ().
        """
        ...
