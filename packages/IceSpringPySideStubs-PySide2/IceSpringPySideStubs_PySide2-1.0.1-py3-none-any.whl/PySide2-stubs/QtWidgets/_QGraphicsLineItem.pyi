"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QGraphicsLineItem(PySide2.QtWidgets.QGraphicsItem):
    """
    **Detailed Description**

    To set the item's line, pass a **QLineF**  to QGraphicsLineItem's constructor, or call the **setLine** () function. The **line** () function returns the current line. By default the line is black with a width of 0, but you can change this by calling **setPen** ().

    ![](images/graphicsview-lineitem.png)

    QGraphicsLineItem uses the line and the pen width to provide a reasonable implementation of **boundingRect** (), **shape** (), and **contains** (). The **paint** () function draws the line using the item's associated pen.

    **See also** **QGraphicsPathItem** , **QGraphicsRectItem** , **QGraphicsEllipseItem** , **QGraphicsTextItem** , **QGraphicsPolygonItem** , **QGraphicsPixmapItem** , and **Graphics View Framework** .
    """

    @typing.overload
    def __init__(
        self,
        line: PySide2.QtCore.QLineF,
        parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...,
    ) -> None:
        """
        **QGraphicsLineItem::QGraphicsLineItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsLineItem. **parent** is passed to **QGraphicsItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    @typing.overload
    def __init__(
        self, parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...
    ) -> None:
        """
        **QGraphicsLineItem::QGraphicsLineItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsLineItem. **parent** is passed to **QGraphicsItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        x1: float,
        y1: float,
        x2: float,
        y2: float,
        parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...,
    ) -> None:
        """
        **QGraphicsLineItem::QGraphicsLineItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsLineItem. **parent** is passed to **QGraphicsItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    def boundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **[override virtual] QRectF QGraphicsLineItem::boundingRect() const**

        Reimplements: **QGraphicsItem::boundingRect** () const.
        """
        ...

    def contains(self, point: PySide2.QtCore.QPointF) -> bool:
        """
        **[override virtual] bool QGraphicsLineItem::contains(const QPointF & point ) const**

        Reimplements: **QGraphicsItem::contains** (const QPointF &point) const.
        """
        ...

    def extension(self, variant: typing.Any) -> typing.Any:
        ...

    def isObscuredBy(self, item: PySide2.QtWidgets.QGraphicsItem) -> bool:
        """
        **[override virtual] bool QGraphicsLineItem::isObscuredBy(const QGraphicsItem * item ) const**

        Reimplements: **QGraphicsItem::isObscuredBy** (const QGraphicsItem *item) const.
        """
        ...

    def line(self) -> PySide2.QtCore.QLineF:
        """
        **QLineF QGraphicsLineItem::line() const**

        Returns the item's line, or a null line if no line has been set.

        **See also** **setLine** ().
        """
        ...

    def opaqueArea(self) -> PySide2.QtGui.QPainterPath:
        """
        **[override virtual] QPainterPath QGraphicsLineItem::opaqueArea() const**

        Reimplements: **QGraphicsItem::opaqueArea** () const.
        """
        ...

    def paint(
        self,
        painter: PySide2.QtGui.QPainter,
        option: PySide2.QtWidgets.QStyleOptionGraphicsItem,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        **[override virtual] void QGraphicsLineItem::paint(QPainter * painter , const QStyleOptionGraphicsItem * option , QWidget * widget = nullptr)**

        Reimplements: **QGraphicsItem::paint** (QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget).
        """
        ...

    def pen(self) -> PySide2.QtGui.QPen:
        """
        **QPen QGraphicsLineItem::pen() const**

        Returns the item's pen, or a black solid 0-width pen if no pen has been set.

        **See also** **setPen** ().
        """
        ...

    @typing.overload
    def setLine(self, line: PySide2.QtCore.QLineF) -> None:
        """
        **void QGraphicsLineItem::setLine(const QLineF & line )**

        Sets the item's line to be the given **line**.

        **See also** **line** ().
        """
        ...

    @typing.overload
    def setLine(self, x1: float, y1: float, x2: float, y2: float) -> None:
        """
        **void QGraphicsLineItem::setLine(const QLineF & line )**

        Sets the item's line to be the given **line**.

        **See also** **line** ().
        """
        ...

    def setPen(self, pen: PySide2.QtGui.QPen) -> None:
        """
        **void QGraphicsLineItem::setPen(const QPen & pen )**

        Sets the item's pen to **pen**. If no pen is set, the line will be painted using a black solid 0-width pen.

        **See also** **pen** ().
        """
        ...

    def shape(self) -> PySide2.QtGui.QPainterPath:
        """
        **[override virtual] QPainterPath QGraphicsLineItem::shape() const**

        Reimplements: **QGraphicsItem::shape** () const.
        """
        ...

    def type(self) -> int:
        """
        **[override virtual] int QGraphicsLineItem::type() const**

        Reimplements: **QGraphicsItem::type** () const.
        """
        ...
