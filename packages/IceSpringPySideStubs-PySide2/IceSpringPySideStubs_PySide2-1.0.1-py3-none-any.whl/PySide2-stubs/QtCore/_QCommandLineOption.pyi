"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QCommandLineOption(object):
    """
    **Detailed Description**

    This class is used to describe an option on the command line. It allows different ways of defining the same option with multiple aliases possible. It is also used to describe how the option is used - it may be a flag (e.g. `-v`) or take a value (e.g. `-o file`).

    Examples:

    **QCommandLineOption**  verboseOption("verbose", "Verbose mode. Prints out more information.");
        **QCommandLineOption**  outputOption(**QStringList** () << "o" << "output", "Write generated data into <file>.", "file");

    **See also** **QCommandLineParser** .
    """

    HiddenFromHelp: QCommandLineOption = ...
    ShortOptionStyle: QCommandLineOption = ...

    class Flag(object):
        HiddenFromHelp: QCommandLineOption.Flag = ...
        ShortOptionStyle: QCommandLineOption.Flag = ...

    class Flags(object):
        ...

    @typing.overload
    def __init__(self, name: str) -> None:
        """
        **QCommandLineOption::QCommandLineOption(const QString & name )**

        Constructs a command line option object with the name **name**.

        The name can be either short or long. If the name is one character in length, it is considered a short name. Option names must not be empty, must not start with a dash or a slash character, must not contain a `=` and cannot be repeated.

        **See also** **setDescription** (), **setValueName** (), and **setDefaultValues** ().
        """
        ...

    @typing.overload
    def __init__(
        self, name: str, description: str, valueName: str = ..., defaultValue: str = ...
    ) -> None:
        """
        **QCommandLineOption::QCommandLineOption(const QString & name )**

        Constructs a command line option object with the name **name**.

        The name can be either short or long. If the name is one character in length, it is considered a short name. Option names must not be empty, must not start with a dash or a slash character, must not contain a `=` and cannot be repeated.

        **See also** **setDescription** (), **setValueName** (), and **setDefaultValues** ().
        """
        ...

    @typing.overload
    def __init__(self, names: typing.Sequence) -> None:
        """
        **QCommandLineOption::QCommandLineOption(const QString & name )**

        Constructs a command line option object with the name **name**.

        The name can be either short or long. If the name is one character in length, it is considered a short name. Option names must not be empty, must not start with a dash or a slash character, must not contain a `=` and cannot be repeated.

        **See also** **setDescription** (), **setValueName** (), and **setDefaultValues** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        names: typing.Sequence,
        description: str,
        valueName: str = ...,
        defaultValue: str = ...,
    ) -> None:
        """
        **QCommandLineOption::QCommandLineOption(const QString & name )**

        Constructs a command line option object with the name **name**.

        The name can be either short or long. If the name is one character in length, it is considered a short name. Option names must not be empty, must not start with a dash or a slash character, must not contain a `=` and cannot be repeated.

        **See also** **setDescription** (), **setValueName** (), and **setDefaultValues** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QCommandLineOption) -> None:
        """
        **QCommandLineOption::QCommandLineOption(const QString & name )**

        Constructs a command line option object with the name **name**.

        The name can be either short or long. If the name is one character in length, it is considered a short name. Option names must not be empty, must not start with a dash or a slash character, must not contain a `=` and cannot be repeated.

        **See also** **setDescription** (), **setValueName** (), and **setDefaultValues** ().
        """
        ...

    def defaultValues(self) -> typing.List:
        """
        **QStringList QCommandLineOption::defaultValues() const**

        Returns the default values set for this option.

        **See also** **setDefaultValues** ().
        """
        ...

    def description(self) -> str:
        """
        **QString QCommandLineOption::description() const**

        Returns the description set for this option.

        **See also** **setDescription** ().
        """
        ...

    def flags(self) -> PySide2.QtCore.QCommandLineOption.Flags:
        """
        **QCommandLineOption::Flags QCommandLineOption::flags() const**

        Returns a set of flags that affect this command-line option.

        This function was introduced in Qt 5.8.

        **See also** **setFlags** () and **QCommandLineOption::Flags** .
        """
        ...

    def isHidden(self) -> bool:
        ...

    def names(self) -> typing.List:
        """
        **QStringList QCommandLineOption::names() const**

        Returns the names set for this option.
        """
        ...

    def setDefaultValue(self, defaultValue: str) -> None:
        """
        **void QCommandLineOption::setDefaultValue(const QString & defaultValue )**

        Sets the default value used for this option to **defaultValue**.

        The default value is used if the user of the application does not specify the option on the command line.

        If **defaultValue** is empty, the option has no default values.

        **See also** **defaultValues** () and **setDefaultValues** ().
        """
        ...

    def setDefaultValues(self, defaultValues: typing.Sequence) -> None:
        """
        **void QCommandLineOption::setDefaultValues(const QStringList & defaultValues )**

        Sets the list of default values used for this option to **defaultValues**.

        The default values are used if the user of the application does not specify the option on the command line.

        **See also** **defaultValues** () and **setDefaultValue** ().
        """
        ...

    def setDescription(self, description: str) -> None:
        """
        **void QCommandLineOption::setDescription(const QString & description )**

        Sets the description used for this option to **description**.

        It is customary to add a "." at the end of the description.

        The description is used by **QCommandLineParser::showHelp** ().

        **See also** **description** ().
        """
        ...

    def setFlags(self, aflags: PySide2.QtCore.QCommandLineOption.Flags) -> None:
        """
        **void QCommandLineOption::setFlags(QCommandLineOption::Flags flags )**

        Set the set of flags that affect this command-line option to **flags**.

        This function was introduced in Qt 5.8.

        **See also** **flags** () and **QCommandLineOption::Flags** .
        """
        ...

    def setHidden(self, hidden: bool) -> None:
        ...

    def setValueName(self, name: str) -> None:
        """
        **void QCommandLineOption::setValueName(const QString & valueName )**

        Sets the name of the expected value, for the documentation, to **valueName**.

        Options without a value assigned have a boolean-like behavior: either the user specifies --option or they don't.

        Options with a value assigned need to set a name for the expected value, for the documentation of the option in the help output. An option with names `o` and `output`, and a value name of `file` will appear as `-o, --output <file>`.

        Call **QCommandLineParser::value** () if you expect the option to be present only once, and **QCommandLineParser::values** () if you expect that option to be present multiple times.

        **See also** **valueName** ().
        """
        ...

    def swap(self, other: PySide2.QtCore.QCommandLineOption) -> None:
        """
        **void QCommandLineOption::swap(QCommandLineOption & other )**

        Swaps option **other** with this option. This operation is very fast and never fails.
        """
        ...

    def valueName(self) -> str:
        """
        **QString QCommandLineOption::valueName() const**

        Returns the name of the expected value.

        If empty, the option doesn't take a value.

        **See also** **setValueName** ().
        """
        ...
