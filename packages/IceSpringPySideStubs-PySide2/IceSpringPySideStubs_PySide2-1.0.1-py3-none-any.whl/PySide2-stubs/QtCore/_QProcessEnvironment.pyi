"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QProcessEnvironment(object):
    """
    **Detailed Description**

    A process's environment is composed of a set of key=value pairs known as environment variables. The QProcessEnvironment class wraps that concept and allows easy manipulation of those variables. It's meant to be used along with **QProcess** , to set the environment for child processes. It cannot be used to change the current process's environment.

    The environment of the calling process can be obtained using **QProcessEnvironment::systemEnvironment** ().

    On Unix systems, the variable names are case-sensitive. Note that the Unix environment allows both variable names and contents to contain arbitrary binary data (except for the NUL character). QProcessEnvironment will preserve such variables, but does not support manipulating variables whose names or values cannot be encoded by the current locale settings (see **QTextCodec::codecForLocale** ).

    On Windows, the variable names are case-insensitive, but case-preserving. QProcessEnvironment behaves accordingly.

    **See also** **QProcess** , **QProcess::systemEnvironment** (), and **QProcess::setProcessEnvironment** ().
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QProcessEnvironment::QProcessEnvironment()**

        Creates a new QProcessEnvironment object. This constructor creates an empty environment. If set on a **QProcess** , this will cause the current environment variables to be removed.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QProcessEnvironment) -> None:
        """
        **QProcessEnvironment::QProcessEnvironment()**

        Creates a new QProcessEnvironment object. This constructor creates an empty environment. If set on a **QProcess** , this will cause the current environment variables to be removed.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def clear(self) -> None:
        """
        **void QProcessEnvironment::clear()**

        Removes all key=value pairs from this **QProcessEnvironment**  object, making it empty.

        **See also** **isEmpty** () and **systemEnvironment** ().
        """
        ...

    def contains(self, name: str) -> bool:
        """
        **bool QProcessEnvironment::contains(const QString & name ) const**

        Returns `true` if the environment variable of name **name** is found in this **QProcessEnvironment**  object.

        **See also** **insert** () and **value** ().
        """
        ...

    @typing.overload
    def insert(self, e: PySide2.QtCore.QProcessEnvironment) -> None:
        """
        **void QProcessEnvironment::insert(const QString & name , const QString & value )**

        Inserts the environment variable of name **name** and contents **value** into this **QProcessEnvironment**  object. If that variable already existed, it is replaced by the new value.

        On most systems, inserting a variable with no contents will have the same effect for applications as if the variable had not been set at all. However, to guarantee that there are no incompatibilities, to remove a variable, please use the **remove** () function.

        **See also** **contains** (), **remove** (), and **value** ().
        """
        ...

    @typing.overload
    def insert(self, name: str, value: str) -> None:
        """
        **void QProcessEnvironment::insert(const QString & name , const QString & value )**

        Inserts the environment variable of name **name** and contents **value** into this **QProcessEnvironment**  object. If that variable already existed, it is replaced by the new value.

        On most systems, inserting a variable with no contents will have the same effect for applications as if the variable had not been set at all. However, to guarantee that there are no incompatibilities, to remove a variable, please use the **remove** () function.

        **See also** **contains** (), **remove** (), and **value** ().
        """
        ...

    def isEmpty(self) -> bool:
        """
        **bool QProcessEnvironment::isEmpty() const**

        Returns `true` if this **QProcessEnvironment**  object is empty: that is there are no key=value pairs set.

        **See also** **clear** (), **systemEnvironment** (), and **insert** ().
        """
        ...

    def keys(self) -> typing.List:
        """
        **QStringList QProcessEnvironment::keys() const**

        Returns a list containing all the variable names in this **QProcessEnvironment**  object.

        This function was introduced in Qt 4.8.
        """
        ...

    def remove(self, name: str) -> None:
        """
        **void QProcessEnvironment::remove(const QString & name )**

        Removes the environment variable identified by **name** from this **QProcessEnvironment**  object. If that variable did not exist before, nothing happens.

        **See also** **contains** (), **insert** (), and **value** ().
        """
        ...

    def swap(self, other: PySide2.QtCore.QProcessEnvironment) -> None:
        """
        **void QProcessEnvironment::swap(QProcessEnvironment & other )**

        Swaps this process environment instance with **other**. This function is very fast and never fails.

        This function was introduced in Qt 5.0.
        """
        ...

    @staticmethod
    def systemEnvironment() -> PySide2.QtCore.QProcessEnvironment:
        """
        **[static] QProcessEnvironment QProcessEnvironment::systemEnvironment()**

        The systemEnvironment function returns the environment of the calling process.

        It is returned as a **QProcessEnvironment** . This function does not cache the system environment. Therefore, it's possible to obtain an updated version of the environment if low-level C library functions like `setenv` or `putenv` have been called.

        However, note that repeated calls to this function will recreate the **QProcessEnvironment**  object, which is a non-trivial operation.

        This function was introduced in Qt 4.6.

        **See also** **QProcess::systemEnvironment** ().
        """
        ...

    def toStringList(self) -> typing.List:
        """
        **QStringList QProcessEnvironment::toStringList() const**

        Converts this **QProcessEnvironment**  object into a list of strings, one for each environment variable that is set. The environment variable's name and its value are separated by an equal character ('=').

        The **QStringList**  contents returned by this function are suitable for presentation. Use with the QProcess::setEnvironment function is not recommended due to potential encoding problems under Unix, and worse performance.

        **See also** **systemEnvironment** (), **QProcess::systemEnvironment** (), and **QProcess::setProcessEnvironment** ().
        """
        ...

    def value(self, name: str, defaultValue: str = ...) -> str:
        """
        **QString QProcessEnvironment::value(const QString & name , const QString & defaultValue = QString()) const**

        Searches this **QProcessEnvironment**  object for a variable identified by **name** and returns its value. If the variable is not found in this object, then **defaultValue** is returned instead.

        **See also** **contains** (), **insert** (), and **remove** ().
        """
        ...
