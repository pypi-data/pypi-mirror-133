"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QByteArrayMatcher(object):
    """
    **Detailed Description**

    This class is useful when you have a sequence of bytes that you want to repeatedly match against some byte arrays (perhaps in a loop), or when you want to search for the same sequence of bytes multiple times in the same byte array. Using a matcher object and **indexIn** () is faster than matching a plain **QByteArray**  with **QByteArray::indexOf** () if repeated matching takes place. This class offers no benefit if you are doing one-off byte array matches.

    Create the QByteArrayMatcher with the **QByteArray**  you want to search for. Then call **indexIn** () on the **QByteArray**  that you want to search.

    **See also** **QByteArray**  and **QStringMatcher** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QByteArrayMatcher::QByteArrayMatcher()**

        Constructs an empty byte array matcher that won't match anything. Call **setPattern** () to give it a pattern to match.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QByteArrayMatcher) -> None:
        """
        **QByteArrayMatcher::QByteArrayMatcher()**

        Constructs an empty byte array matcher that won't match anything. Call **setPattern** () to give it a pattern to match.
        """
        ...

    @typing.overload
    def __init__(self, pattern: PySide2.QtCore.QByteArray) -> None:
        """
        **QByteArrayMatcher::QByteArrayMatcher()**

        Constructs an empty byte array matcher that won't match anything. Call **setPattern** () to give it a pattern to match.
        """
        ...

    @typing.overload
    def __init__(self, pattern: bytes, length: int) -> None:
        """
        **QByteArrayMatcher::QByteArrayMatcher()**

        Constructs an empty byte array matcher that won't match anything. Call **setPattern** () to give it a pattern to match.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    @typing.overload
    def indexIn(self, ba: PySide2.QtCore.QByteArray, from_: int = ...) -> int:
        """
        **int QByteArrayMatcher::indexIn(const QByteArray & ba , int from = 0) const**

        Searches the byte array **ba** , from byte position **from** (default 0, i.e. from the first byte), for the byte array **pattern** () that was set in the constructor or in the most recent call to **setPattern** (). Returns the position where the **pattern** () matched in **ba** , or -1 if no match was found.
        """
        ...

    @typing.overload
    def indexIn(self, str: bytes, len: int, from_: int = ...) -> int:
        """
        **int QByteArrayMatcher::indexIn(const QByteArray & ba , int from = 0) const**

        Searches the byte array **ba** , from byte position **from** (default 0, i.e. from the first byte), for the byte array **pattern** () that was set in the constructor or in the most recent call to **setPattern** (). Returns the position where the **pattern** () matched in **ba** , or -1 if no match was found.
        """
        ...

    def pattern(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QByteArrayMatcher::pattern() const**

        Returns the byte array pattern that this byte array matcher will search for.

        **See also** **setPattern** ().
        """
        ...

    def setPattern(self, pattern: PySide2.QtCore.QByteArray) -> None:
        """
        **void QByteArrayMatcher::setPattern(const QByteArray & pattern )**

        Sets the byte array that this byte array matcher will search for to **pattern**.

        **See also** **pattern** () and **indexIn** ().
        """
        ...
