"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QEventTransition(PySide2.QtCore.QAbstractTransition):
    """
    **Detailed Description**

    A QEventTransition object binds an event to a particular **QObject** . QEventTransition is part of **The State Machine Framework** .

    Example:

    **QPushButton**  *button = ...;
        **QState**  *s1 = ...;
        **QState**  *s2 = ...;
        // If in s1 and the button receives an Enter event, transition to s2
        **QEventTransition**  *enterTransition = new **QEventTransition** (button, **QEvent** ::Enter);
        enterTransition->setTargetState(s2);
        s1->addTransition(enterTransition);
        // If in s2 and the button receives an Exit event, transition back to s1
        **QEventTransition**  *leaveTransition = new **QEventTransition** (button, **QEvent** ::Leave);
        leaveTransition->setTargetState(s1);
        s2->addTransition(leaveTransition);

    **Subclassing**

    When reimplementing the **eventTest** () function, you should first call the base implementation to verify that the event is a **QStateMachine::WrappedEvent**  for the proper object and event type. You may then cast the event to a **QStateMachine::WrappedEvent**  and get the original event by calling **QStateMachine::WrappedEvent::event** (), and perform additional checks on that object.

    **See also** **QState::addTransition** ().
    """

    @typing.overload
    def __init__(
        self,
        object: PySide2.QtCore.QObject,
        type: PySide2.QtCore.QEvent.Type,
        sourceState: typing.Optional[PySide2.QtCore.QState] = ...,
    ) -> None:
        """
        **QEventTransition::QEventTransition(QState * sourceState = nullptr)**

        Constructs a new QEventTransition object with the given **sourceState**.
        """
        ...

    @typing.overload
    def __init__(
        self, sourceState: typing.Optional[PySide2.QtCore.QState] = ...
    ) -> None:
        """
        **QEventTransition::QEventTransition(QState * sourceState = nullptr)**

        Constructs a new QEventTransition object with the given **sourceState**.
        """
        ...

    def event(self, e: PySide2.QtCore.QEvent) -> bool:
        """
        **[override virtual protected] bool QEventTransition::event(QEvent * e )**

        Reimplements: **QAbstractTransition::event** (QEvent *e).
        """
        ...

    def eventSource(self) -> PySide2.QtCore.QObject:
        """
        **QObject *QEventTransition::eventSource() const**

        Returns the event source associated with this event transition.

        **Note:** Getter function for property eventSource.

        **See also** **setEventSource** ().
        """
        ...

    def eventTest(self, event: PySide2.QtCore.QEvent) -> bool:
        """
        **[override virtual protected] bool QEventTransition::eventTest(QEvent * event )**

        Reimplements: **QAbstractTransition::eventTest** (QEvent *event).
        """
        ...

    def eventType(self) -> PySide2.QtCore.QEvent.Type:
        """
        **QEvent::Type QEventTransition::eventType() const**

        Returns the event type that this event transition is associated with.

        **Note:** Getter function for property eventType.

        **See also** **setEventType** ().
        """
        ...

    def onTransition(self, event: PySide2.QtCore.QEvent) -> None:
        """
        **[override virtual protected] void QEventTransition::onTransition(QEvent * event )**

        Reimplements: **QAbstractTransition::onTransition** (QEvent *event).
        """
        ...

    def setEventSource(self, object: PySide2.QtCore.QObject) -> None:
        """
        **void QEventTransition::setEventSource(QObject * object )**

        Sets the event source associated with this event transition to be the given **object**.

        **Note:** Setter function for property **eventSource** .

        **See also** **eventSource** ().
        """
        ...

    def setEventType(self, type: PySide2.QtCore.QEvent.Type) -> None:
        """
        **void QEventTransition::setEventType(QEvent::Type type )**

        Sets the event **type** that this event transition is associated with.

        **Note:** Setter function for property **eventType** .

        **See also** **eventType** ().
        """
        ...
