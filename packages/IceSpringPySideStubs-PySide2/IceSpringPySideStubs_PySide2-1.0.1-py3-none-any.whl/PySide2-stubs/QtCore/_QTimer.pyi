"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QTimer(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    The QTimer class provides a high-level programming interface for timers. To use it, create a QTimer, connect its **timeout** () signal to the appropriate slots, and call **start** (). From then on, it will emit the **timeout** () signal at constant intervals.

    Example for a one second (1000 millisecond) timer (from the **Analog Clock**  example):

    **QTimer**  *timer = new **QTimer** (this);
            connect(timer, &**QTimer** ::timeout, this, QOverload<>::of(&AnalogClock::update));
            timer->start(1000);

    From then on, the `update()` slot is called every second.

    You can set a timer to time out only once by calling **setSingleShot** (true). You can also use the static **QTimer::singleShot** () function to call a slot after a specified interval:

    **QTimer** ::singleShot(200, this, &Foo::updateCaption);

    In multithreaded applications, you can use QTimer in any thread that has an event loop. To start an event loop from a non-GUI thread, use **QThread::exec** (). Qt uses the timer's **thread affinity**  to determine which thread will emit the **timeout()**  signal. Because of this, you must start and stop the timer in its thread; it is not possible to start a timer from another thread.

    As a special case, a QTimer with a timeout of 0 will time out as soon as possible, though the ordering between zero timers and other sources of events is unspecified. Zero timers can be used to do some work while still providing a snappy user interface:

    **QTimer**  *timer = new **QTimer** (this);
            connect(timer, &**QTimer** ::timeout, this, &Foo::processOneThing);
            timer->start();

    From then on, `processOneThing()` will be called repeatedly. It should be written in such a way that it always returns quickly (typically after processing one data item) so that Qt can deliver events to the user interface and stop the timer as soon as it has done all its work. This is the traditional way of implementing heavy work in GUI applications, but as multithreading is nowadays becoming available on more and more platforms, we expect that zero-millisecond QTimer objects will gradually be replaced by **QThread** s.

    **Accuracy and Timer Resolution**

    The accuracy of timers depends on the underlying operating system and hardware. Most platforms support a resolution of 1 millisecond, though the accuracy of the timer will not equal this resolution in many real-world situations.

    The accuracy also depends on the **timer type** . For **Qt::PreciseTimer** , QTimer will try to keep the accuracy at 1 millisecond. Precise timers will also never time out earlier than expected.

    For **Qt::CoarseTimer**  and **Qt::VeryCoarseTimer**  types, QTimer may wake up earlier than expected, within the margins for those types: 5% of the interval for **Qt::CoarseTimer**  and 500 ms for **Qt::VeryCoarseTimer** .

    All timer types may time out later than expected if the system is busy or unable to provide the requested accuracy. In such a case of timeout overrun, Qt will emit **timeout** () only once, even if multiple timeouts have expired, and then will resume the original interval.

    **Alternatives to QTimer**

    An alternative to using QTimer is to call **QObject::startTimer** () for your object and reimplement the **QObject::timerEvent** () event handler in your class (which must inherit **QObject** ). The disadvantage is that **timerEvent** () does not support such high-level features as single-shot timers or signals.

    Another alternative is **QBasicTimer** . It is typically less cumbersome than using **QObject::startTimer** () directly. See **Timers**  for an overview of all three approaches.

    Some operating systems limit the number of timers that may be used; Qt tries to work around these limitations.

    **See also** **QBasicTimer** , **QTimerEvent** , **QObject::timerEvent** (), **Timers** , **Analog Clock Example** , and **Wiggly Example** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **QTimer::QTimer(QObject * parent = nullptr)**

        Constructs a timer with the given **parent**.
        """
        ...

    def interval(self) -> int:
        """
        **interval : int**

        This property holds the timeout interval in milliseconds

        The default value for this property is 0. A **QTimer**  with a timeout interval of 0 will time out as soon as all the events in the window system's event queue have been processed.

        Setting the interval of an active timer changes its **timerId** ().

        **Access functions:**

        int **interval** () const
        void **setInterval** (int **msec** )
        void **setInterval** (std::chrono::milliseconds **value** )

        **See also** **singleShot** .
        """
        ...

    def isActive(self) -> bool:
        """
        **bool QTimer::isActive() const**

        Returns `true` if the timer is running (pending); otherwise returns false.

        **Note:** Getter function for property **active** .
        """
        ...

    def isSingleShot(self) -> bool:
        ...

    def killTimer(self, arg__1: int) -> None:
        ...

    def remainingTime(self) -> int:
        """
        **remainingTime : const int**

        This property holds the remaining time in milliseconds

        Returns the timer's remaining value in milliseconds left until the timeout. If the timer is inactive, the returned value will be -1. If the timer is overdue, the returned value will be 0.

        This property was introduced in Qt 5.0.

        **Access functions:**

        int **remainingTime** () const

        **See also** **interval** .
        """
        ...

    def setInterval(self, msec: int) -> None:
        """
        **interval : int**

        This property holds the timeout interval in milliseconds

        The default value for this property is 0. A **QTimer**  with a timeout interval of 0 will time out as soon as all the events in the window system's event queue have been processed.

        Setting the interval of an active timer changes its **timerId** ().

        **Access functions:**

        int **interval** () const
        void **setInterval** (int **msec** )
        void **setInterval** (std::chrono::milliseconds **value** )

        **See also** **singleShot** .
        """
        ...

    def setSingleShot(self, singleShot: bool) -> None:
        """
        **[static] void QTimer::singleShot(int msec , const QObject * receiver , const char * member )**

        This static function calls a slot after a given time interval.

        It is very convenient to use this function because you do not need to bother with a **timerEvent**  or create a local **QTimer**  object.

        Example:

        #include <QApplication>
            #include <QTimer>

            int main(int argc, char *argv[])
            {
                **QApplication**  app(argc, argv);
                **QTimer** ::singleShot(600000, &app, SLOT(quit()));
                ...
                return app.exec();
            }

        This sample program automatically terminates after 10 minutes (600,000 milliseconds).

        The **receiver** is the receiving object and the **member** is the slot. The time interval is **msec** milliseconds.

        **Note:** This function is **reentrant** .

        **See also** **setSingleShot** () and **start** ().
        """
        ...

    def setTimerType(self, atype: PySide2.QtCore.Qt.TimerType) -> None:
        """
        **timerType : Qt::TimerType**

        controls the accuracy of the timer

        The default value for this property is `Qt::CoarseTimer`.

        **Access functions:**

        Qt::TimerType **timerType** () const
        void **setTimerType** (Qt::TimerType **atype** )

        **See also** **Qt::TimerType** .

        **Member Function Documentation**
        """
        ...

    @typing.overload
    @staticmethod
    def singleShot(arg__1: int, arg__2: typing.Callable) -> None:
        """
        **[static] void QTimer::singleShot(int msec , const QObject * receiver , const char * member )**

        This static function calls a slot after a given time interval.

        It is very convenient to use this function because you do not need to bother with a **timerEvent**  or create a local **QTimer**  object.

        Example:

        #include <QApplication>
            #include <QTimer>

            int main(int argc, char *argv[])
            {
                **QApplication**  app(argc, argv);
                **QTimer** ::singleShot(600000, &app, SLOT(quit()));
                ...
                return app.exec();
            }

        This sample program automatically terminates after 10 minutes (600,000 milliseconds).

        The **receiver** is the receiving object and the **member** is the slot. The time interval is **msec** milliseconds.

        **Note:** This function is **reentrant** .

        **See also** **setSingleShot** () and **start** ().
        """
        ...

    @typing.overload
    @staticmethod
    def singleShot(msec: int, receiver: PySide2.QtCore.QObject, member: bytes) -> None:
        """
        **[static] void QTimer::singleShot(int msec , const QObject * receiver , const char * member )**

        This static function calls a slot after a given time interval.

        It is very convenient to use this function because you do not need to bother with a **timerEvent**  or create a local **QTimer**  object.

        Example:

        #include <QApplication>
            #include <QTimer>

            int main(int argc, char *argv[])
            {
                **QApplication**  app(argc, argv);
                **QTimer** ::singleShot(600000, &app, SLOT(quit()));
                ...
                return app.exec();
            }

        This sample program automatically terminates after 10 minutes (600,000 milliseconds).

        The **receiver** is the receiving object and the **member** is the slot. The time interval is **msec** milliseconds.

        **Note:** This function is **reentrant** .

        **See also** **setSingleShot** () and **start** ().
        """
        ...

    @typing.overload
    @staticmethod
    def singleShot(
        msec: int,
        timerType: PySide2.QtCore.Qt.TimerType,
        receiver: PySide2.QtCore.QObject,
        member: bytes,
    ) -> None:
        """
        **[static] void QTimer::singleShot(int msec , const QObject * receiver , const char * member )**

        This static function calls a slot after a given time interval.

        It is very convenient to use this function because you do not need to bother with a **timerEvent**  or create a local **QTimer**  object.

        Example:

        #include <QApplication>
            #include <QTimer>

            int main(int argc, char *argv[])
            {
                **QApplication**  app(argc, argv);
                **QTimer** ::singleShot(600000, &app, SLOT(quit()));
                ...
                return app.exec();
            }

        This sample program automatically terminates after 10 minutes (600,000 milliseconds).

        The **receiver** is the receiving object and the **member** is the slot. The time interval is **msec** milliseconds.

        **Note:** This function is **reentrant** .

        **See also** **setSingleShot** () and **start** ().
        """
        ...

    @typing.overload
    def start(self) -> None:
        """
        **[slot] void QTimer::start(int msec )**

        Starts or restarts the timer with a timeout interval of **msec** milliseconds.

        If the timer is already running, it will be **stopped**  and restarted.

        If **singleShot**  is true, the timer will be activated only once.
        """
        ...

    @typing.overload
    def start(self, msec: int) -> None:
        """
        **[slot] void QTimer::start(int msec )**

        Starts or restarts the timer with a timeout interval of **msec** milliseconds.

        If the timer is already running, it will be **stopped**  and restarted.

        If **singleShot**  is true, the timer will be activated only once.
        """
        ...

    def stop(self) -> None:
        """
        **[slot] void QTimer::stop()**

        Stops the timer.

        **See also** **start** ().
        """
        ...

    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None:
        """
        **[override virtual protected] void QTimer::timerEvent(QTimerEvent * e )**

        Reimplements: **QObject::timerEvent** (QTimerEvent *event).
        """
        ...

    def timerId(self) -> int:
        """
        **int QTimer::timerId() const**

        Returns the ID of the timer if the timer is running; otherwise returns -1.
        """
        ...

    def timerType(self) -> PySide2.QtCore.Qt.TimerType:
        """
        **timerType : Qt::TimerType**

        controls the accuracy of the timer

        The default value for this property is `Qt::CoarseTimer`.

        **Access functions:**

        Qt::TimerType **timerType** () const
        void **setTimerType** (Qt::TimerType **atype** )

        **See also** **Qt::TimerType** .

        **Member Function Documentation**
        """
        ...

    @property
    def timeout(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QTimer::timeout()**

        This signal is emitted when the timer times out.

        **Note:** This is a private signal. It can be used in signal connections but cannot be emitted by the user.

        **See also** **interval** , **start** (), and **stop** ().
        """
        ...
