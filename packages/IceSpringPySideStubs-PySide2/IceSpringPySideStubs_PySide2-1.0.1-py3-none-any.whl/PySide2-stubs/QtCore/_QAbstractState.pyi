"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QAbstractState(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    The QAbstractState class is the abstract base class of states that are part of a **QStateMachine** . It defines the interface that all state objects have in common. QAbstractState is part of **The State Machine Framework** .

    The **entered** () signal is emitted when the state has been entered. The **exited** () signal is emitted when the state has been exited.

    The **parentState** () function returns the state's parent state. The **machine** () function returns the state machine that the state is part of.

    **Subclassing**

    The **onEntry** () function is called when the state is entered; reimplement this function to perform custom processing when the state is entered.

    The **onExit** () function is called when the state is exited; reimplement this function to perform custom processing when the state is exited.
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QState] = ...) -> None:
        """
        **[protected] QAbstractState::QAbstractState(QState * parent = nullptr)**

        Constructs a new state with the given **parent** state.
        """
        ...

    def active(self) -> bool:
        """
        **bool QAbstractState::active() const**

        Returns whether this state is active.

        **Note:** Getter function for property active.

        **See also** **activeChanged** (bool), **entered** (), and **exited** ().
        """
        ...

    def event(self, e: PySide2.QtCore.QEvent) -> bool:
        """
        **[override virtual protected] bool QAbstractState::event(QEvent * e )**

        Reimplements: **QObject::event** (QEvent *e).
        """
        ...

    def machine(self) -> PySide2.QtCore.QStateMachine:
        """
        **QStateMachine *QAbstractState::machine() const**

        Returns the state machine that this state is part of, or `nullptr` if the state is not part of a state machine.
        """
        ...

    def onEntry(self, event: PySide2.QtCore.QEvent) -> None:
        """
        **[pure virtual protected] void QAbstractState::onEntry(QEvent * event )**

        This function is called when the state is entered. The given **event** is what caused the state to be entered. Reimplement this function to perform custom processing when the state is entered.
        """
        ...

    def onExit(self, event: PySide2.QtCore.QEvent) -> None:
        """
        **[pure virtual protected] void QAbstractState::onExit(QEvent * event )**

        This function is called when the state is exited. The given **event** is what caused the state to be exited. Reimplement this function to perform custom processing when the state is exited.
        """
        ...

    def parentState(self) -> PySide2.QtCore.QState:
        """
        **QState *QAbstractState::parentState() const**

        Returns this state's parent state, or `nullptr` if the state has no parent state.
        """
        ...

    @property
    def activeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractState::activeChanged(bool active )**

        This signal is emitted when the active property is changed with **active** as argument.

        **Note:** Notifier signal for property **active** .

        This function was introduced in Qt 5.4.

        **See also** **QAbstractState::active** , **entered** (), and **exited** ().
        """
        ...

    @property
    def entered(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractState::entered()**

        This signal is emitted when the state has been entered (after **onEntry** () has been called).

        **Note:** This is a private signal. It can be used in signal connections but cannot be emitted by the user.
        """
        ...

    @property
    def exited(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractState::exited()**

        This signal is emitted when the state has been exited (after **onExit** () has been called).

        **Note:** This is a private signal. It can be used in signal connections but cannot be emitted by the user.
        """
        ...
