"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QVersionNumber(object):
    """
    **Detailed Description**

    **QVersionNumber**  version(1, 2, 3);  // 1.2.3
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QVersionNumber::QVersionNumber()**

        Produces a null version.

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, maj: int) -> None:
        """
        **QVersionNumber::QVersionNumber()**

        Produces a null version.

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, maj: int, min: int) -> None:
        """
        **QVersionNumber::QVersionNumber()**

        Produces a null version.

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, maj: int, min: int, mic: int) -> None:
        """
        **QVersionNumber::QVersionNumber()**

        Produces a null version.

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, seg: typing.List) -> None:
        """
        **QVersionNumber::QVersionNumber()**

        Produces a null version.

        **See also** **isNull** ().
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    @staticmethod
    def commonPrefix(
        v1: PySide2.QtCore.QVersionNumber, v2: PySide2.QtCore.QVersionNumber
    ) -> PySide2.QtCore.QVersionNumber:
        """
        **[static] QVersionNumber QVersionNumber::commonPrefix(const QVersionNumber & v1 , const QVersionNumber & v2 )**

        **QVersionNumber**  QVersionNumber::commonPrefix(const **QVersionNumber**  &v1, const **QVersionNumber**  &v2)

        Returns a version number that is a parent version of both **v1** and **v2**.

        **See also** **isPrefixOf** ().
        """
        ...

    @staticmethod
    def compare(
        v1: PySide2.QtCore.QVersionNumber, v2: PySide2.QtCore.QVersionNumber
    ) -> int:
        """
        **[static] int QVersionNumber::compare(const QVersionNumber & v1 , const QVersionNumber & v2 )**

        Compares **v1** with **v2** and returns an integer less than, equal to, or greater than zero, depending on whether **v1** is less than, equal to, or greater than **v2** , respectively.

        Comparisons are performed by comparing the segments of **v1** and **v2** starting at index 0 and working towards the end of the longer list.

        **QVersionNumber**  v1(1, 2);
            **QVersionNumber**  v2(1, 2, 0);
            int compare = **QVersionNumber** ::compare(v1, v2); // compare == -1
        """
        ...

    @staticmethod
    def fromString(string: str) -> typing.Tuple:
        """
        **[static] QVersionNumber QVersionNumber::fromString(const QString & string , int * suffixIndex = nullptr)**

        Constructs a **QVersionNumber**  from a specially formatted **string** of non-negative decimal numbers delimited by a period (`.`).

        Once the numerical segments have been parsed, the remainder of the string is considered to be the suffix string. The start index of that string will be stored in **suffixIndex** if it is not null.

        **QString**  string("5.4.0-alpha");
            int suffixIndex;
            **QVersionNumber**  version = **QVersionNumber** ::fromString(string, &suffixIndex);
            // version is 5.4.0
            // suffixIndex is 5

        **See also** **isNull** ().
        """
        ...

    def isNormalized(self) -> bool:
        """
        **bool QVersionNumber::isNormalized() const**

        Returns `true` if the version number does not contain any trailing zeros, otherwise returns `false`.

        **See also** **normalized** ().
        """
        ...

    def isNull(self) -> bool:
        """
        **bool QVersionNumber::isNull() const**

        Returns `true` if there are zero numerical segments, otherwise returns `false`.

        **See also** **segments** ().
        """
        ...

    def isPrefixOf(self, other: PySide2.QtCore.QVersionNumber) -> bool:
        """
        **bool QVersionNumber::isPrefixOf(const QVersionNumber & other ) const**

        Returns `true` if the current version number is contained in the **other** version number, otherwise returns `false`.

        **QVersionNumber**  v1(5, 3);
            **QVersionNumber**  v2(5, 3, 1);
            bool value = v1.isPrefixOf(v2); // true

        **See also** **commonPrefix** ().
        """
        ...

    def majorVersion(self) -> int:
        """
        **int QVersionNumber::majorVersion() const**

        Returns the major version number, that is, the first segment. This function is equivalent to **segmentAt** (0). If this **QVersionNumber**  object is null, this function returns 0.

        **See also** **isNull** () and **segmentAt** ().
        """
        ...

    def microVersion(self) -> int:
        """
        **int QVersionNumber::microVersion() const**

        Returns the micro version number, that is, the third segment. This function is equivalent to **segmentAt** (2). If this **QVersionNumber**  object does not contain a micro number, this function returns 0.

        **See also** **isNull** () and **segmentAt** ().
        """
        ...

    def minorVersion(self) -> int:
        """
        **int QVersionNumber::minorVersion() const**

        Returns the minor version number, that is, the second segment. This function is equivalent to **segmentAt** (1). If this **QVersionNumber**  object does not contain a minor number, this function returns 0.

        **See also** **isNull** () and **segmentAt** ().
        """
        ...

    def normalized(self) -> PySide2.QtCore.QVersionNumber:
        """
        **QVersionNumber QVersionNumber::normalized() const**

        Returns an equivalent version number but with all trailing zeros removed.

        To check if two numbers are equivalent, use normalized() on both version numbers before performing the compare.

        **QVersionNumber**  v1(5, 4);
            **QVersionNumber**  v2(5, 4, 0);
            bool equivalent = v1.normalized() == v2.normalized();
            bool equal = v1 == v2;
            // equivalent is true
            // equal is false
        """
        ...

    def segmentAt(self, index: int) -> int:
        """
        **int QVersionNumber::segmentAt(int index ) const**

        Returns the segement value at **index**. If the index does not exist, returns 0.

        **See also** **segments** () and **segmentCount** ().
        """
        ...

    def segmentCount(self) -> int:
        """
        **int QVersionNumber::segmentCount() const**

        Returns the number of integers stored in **segments** ().

        **See also** **segments** ().
        """
        ...

    def segments(self) -> typing.List:
        """
        **QVector<int> QVersionNumber::segments() const**

        Returns all of the numerical segments.

        **See also** **majorVersion** (), **minorVersion** (), and **microVersion** ().
        """
        ...

    def toString(self) -> str:
        """
        **QString QVersionNumber::toString() const**

        Returns a string with all of the segments delimited by a period (`.`).

        **See also** **majorVersion** (), **minorVersion** (), **microVersion** (), and **segments** ().
        """
        ...
