"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QItemSelectionModel(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    A QItemSelectionModel keeps track of the selected items in a view, or in several views onto the same model. It also keeps track of the currently selected item in a view.

    The QItemSelectionModel class is one of the **Model/View Classes**  and is part of Qt's **model/view framework** .

    The selected items are stored using ranges. Whenever you want to modify the selected items use **select** () and provide either a **QItemSelection** , or a **QModelIndex**  and a **QItemSelectionModel::SelectionFlag** .

    The QItemSelectionModel takes a two layer approach to selection management, dealing with both selected items that have been committed and items that are part of the current selection. The current selected items are part of the current interactive selection (for example with rubber-band selection or keyboard-shift selections).

    To update the currently selected items, use the bitwise OR of **QItemSelectionModel::Current**  and any of the other **SelectionFlags** . If you omit the **QItemSelectionModel::Current**  command, a new current selection will be created, and the previous one added to the whole selection. All functions operate on both layers; for example, **selecteditems()**  will return items from both layers.

    **Note:** Since 5.5, **model** , **hasSelection** , and **currentIndex**  are meta-object properties.

    **See also** **Model/View Programming** , **QAbstractItemModel** , and **Chart Example** .
    """

    NoUpdate: QItemSelectionModel = ...
    Clear: QItemSelectionModel = ...
    Select: QItemSelectionModel = ...
    ClearAndSelect: QItemSelectionModel = ...
    Deselect: QItemSelectionModel = ...
    Toggle: QItemSelectionModel = ...
    Current: QItemSelectionModel = ...
    SelectCurrent: QItemSelectionModel = ...
    ToggleCurrent: QItemSelectionModel = ...
    Rows: QItemSelectionModel = ...
    Columns: QItemSelectionModel = ...

    class SelectionFlag(object):
        NoUpdate: QItemSelectionModel.SelectionFlag = ...
        Clear: QItemSelectionModel.SelectionFlag = ...
        Select: QItemSelectionModel.SelectionFlag = ...
        ClearAndSelect: QItemSelectionModel.SelectionFlag = ...
        Deselect: QItemSelectionModel.SelectionFlag = ...
        Toggle: QItemSelectionModel.SelectionFlag = ...
        Current: QItemSelectionModel.SelectionFlag = ...
        SelectCurrent: QItemSelectionModel.SelectionFlag = ...
        ToggleCurrent: QItemSelectionModel.SelectionFlag = ...
        Rows: QItemSelectionModel.SelectionFlag = ...
        Columns: QItemSelectionModel.SelectionFlag = ...

    class SelectionFlags(object):
        ...

    @typing.overload
    def __init__(
        self, model: PySide2.QtCore.QAbstractItemModel, parent: PySide2.QtCore.QObject
    ) -> None:
        """
        **QItemSelectionModel::QItemSelectionModel(QAbstractItemModel * model = nullptr)**

        Constructs a selection model that operates on the specified item **model**.
        """
        ...

    @typing.overload
    def __init__(
        self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel] = ...
    ) -> None:
        """
        **QItemSelectionModel::QItemSelectionModel(QAbstractItemModel * model = nullptr)**

        Constructs a selection model that operates on the specified item **model**.
        """
        ...

    def clear(self) -> None:
        """
        **[virtual slot] void QItemSelectionModel::clear()**

        Clears the selection model. Emits **selectionChanged** () and **currentChanged** ().
        """
        ...

    def clearCurrentIndex(self) -> None:
        """
        **[virtual slot] void QItemSelectionModel::clearCurrentIndex()**

        Clears the current index. Emits **currentChanged** ().
        """
        ...

    def clearSelection(self) -> None:
        """
        **[slot] void QItemSelectionModel::clearSelection()**

        Clears the selection in the selection model. Emits **selectionChanged** ().

        This function was introduced in Qt 4.2.
        """
        ...

    def columnIntersectsSelection(
        self, column: int, parent: PySide2.QtCore.QModelIndex = ...
    ) -> bool:
        """
        **bool QItemSelectionModel::columnIntersectsSelection(int column , const QModelIndex & parent = QModelIndex()) const**

        Returns `true` if there are any items selected in the **column** with the given **parent**.

        **Note:** Since Qt 5.15, the default argument for **parent** is an empty model index.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def currentIndex(self) -> PySide2.QtCore.QModelIndex:
        """
        **QModelIndex QItemSelectionModel::currentIndex() const**

        Returns the model item index for the current item, or an invalid index if there is no current item.

        **See also** **setCurrentIndex** ().
        """
        ...

    def emitSelectionChanged(
        self,
        newSelection: PySide2.QtCore.QItemSelection,
        oldSelection: PySide2.QtCore.QItemSelection,
    ) -> None:
        """
        **[protected] void QItemSelectionModel::emitSelectionChanged(const QItemSelection & newSelection , const QItemSelection & oldSelection )**

        Compares the two selections **newSelection** and **oldSelection** and emits **selectionChanged** () with the deselected and selected items.
        """
        ...

    def hasSelection(self) -> bool:
        """
        **bool QItemSelectionModel::hasSelection() const**

        Returns `true` if the selection model contains any selection ranges; otherwise returns `false`.

        This function was introduced in Qt 4.2.
        """
        ...

    def isColumnSelected(
        self, column: int, parent: PySide2.QtCore.QModelIndex = ...
    ) -> bool:
        """
        **bool QItemSelectionModel::isColumnSelected(int column , const QModelIndex & parent = QModelIndex()) const**

        Returns `true` if all items are selected in the **column** with the given **parent**.

        Note that this function is usually faster than calling **isSelected** () on all items in the same column and that unselectable items are ignored.

        **Note:** Since Qt 5.15, the default argument for **parent** is an empty model index.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def isRowSelected(self, row: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool:
        """
        **bool QItemSelectionModel::isRowSelected(int row , const QModelIndex & parent = QModelIndex()) const**

        Returns `true` if all items are selected in the **row** with the given **parent**.

        Note that this function is usually faster than calling **isSelected** () on all items in the same row and that unselectable items are ignored.

        **Note:** Since Qt 5.15, the default argument for **parent** is an empty model index.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def isSelected(self, index: PySide2.QtCore.QModelIndex) -> bool:
        """
        **bool QItemSelectionModel::isSelected(const QModelIndex & index ) const**

        Returns `true` if the given model item **index** is selected.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def model(self) -> PySide2.QtCore.QAbstractItemModel:
        """
        **const QAbstractItemModel *QItemSelectionModel::model() const**

        Returns the item model operated on by the selection model.

        **See also** **setModel** ().
        """
        ...

    def reset(self) -> None:
        """
        **[virtual slot] void QItemSelectionModel::reset()**

        Clears the selection model. Does not emit any signals.
        """
        ...

    def rowIntersectsSelection(
        self, row: int, parent: PySide2.QtCore.QModelIndex = ...
    ) -> bool:
        """
        **bool QItemSelectionModel::rowIntersectsSelection(int row , const QModelIndex & parent = QModelIndex()) const**

        Returns `true` if there are any items selected in the **row** with the given **parent**.

        **Note:** Since Qt 5.15, the default argument for **parent** is an empty model index.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    @typing.overload
    def select(
        self,
        index: PySide2.QtCore.QModelIndex,
        command: PySide2.QtCore.QItemSelectionModel.SelectionFlags,
    ) -> None:
        """
        **[virtual slot] void QItemSelectionModel::select(const QModelIndex & index , QItemSelectionModel::SelectionFlags command )**

        Selects the model item **index** using the specified **command** , and emits **selectionChanged** ().

        **See also** **QItemSelectionModel::SelectionFlags** .
        """
        ...

    @typing.overload
    def select(
        self,
        selection: PySide2.QtCore.QItemSelection,
        command: PySide2.QtCore.QItemSelectionModel.SelectionFlags,
    ) -> None:
        """
        **[virtual slot] void QItemSelectionModel::select(const QModelIndex & index , QItemSelectionModel::SelectionFlags command )**

        Selects the model item **index** using the specified **command** , and emits **selectionChanged** ().

        **See also** **QItemSelectionModel::SelectionFlags** .
        """
        ...

    def selectedColumns(self, row: int = ...) -> typing.List:
        """
        **QModelIndexList QItemSelectionModel::selectedColumns(int row = 0) const**

        Returns the indexes in the given **row** for columns where all rows are selected.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        This function was introduced in Qt 4.2.

        **See also** **selectedIndexes** () and **selectedRows** ().
        """
        ...

    def selectedIndexes(self) -> typing.List:
        """
        **QModelIndexList QItemSelectionModel::selectedIndexes() const**

        Returns a list of all selected model item indexes. The list contains no duplicates, and is not sorted.

        **Note:** Getter function for property selectedIndexes.
        """
        ...

    def selectedRows(self, column: int = ...) -> typing.List:
        """
        **QModelIndexList QItemSelectionModel::selectedRows(int column = 0) const**

        Returns the indexes in the given **column** for the rows where all columns are selected.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        This function was introduced in Qt 4.2.

        **See also** **selectedIndexes** () and **selectedColumns** ().
        """
        ...

    def selection(self) -> PySide2.QtCore.QItemSelection:
        """
        **const QItemSelection QItemSelectionModel::selection() const**

        Returns the selection ranges stored in the selection model.
        """
        ...

    def setCurrentIndex(
        self,
        index: PySide2.QtCore.QModelIndex,
        command: PySide2.QtCore.QItemSelectionModel.SelectionFlags,
    ) -> None:
        """
        **[virtual slot] void QItemSelectionModel::setCurrentIndex(const QModelIndex & index , QItemSelectionModel::SelectionFlags command )**

        Sets the model item **index** to be the current item, and emits **currentChanged** (). The current item is used for keyboard navigation and focus indication; it is independent of any selected items, although a selected item can also be the current item.

        Depending on the specified **command** , the **index** can also become part of the current selection.

        **See also** **currentIndex** () and **select** ().
        """
        ...

    def setModel(self, model: PySide2.QtCore.QAbstractItemModel) -> None:
        """
        **void QItemSelectionModel::setModel(QAbstractItemModel * model )**

        Sets the model to **model**. The **modelChanged** () signal will be emitted.

        This function was introduced in Qt 5.5.

        **See also** **model** () and **modelChanged** ().
        """
        ...

    @property
    def currentChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QItemSelectionModel::currentChanged(const QModelIndex & current , const QModelIndex & previous )**

        This signal is emitted whenever the current item changes. The **previous** model item index is replaced by the **current** index as the selection's current item.

        Note that this signal will not be emitted when the item model is reset.

        **See also** **currentIndex** (), **setCurrentIndex** (), and **selectionChanged** ().
        """
        ...

    @property
    def currentColumnChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QItemSelectionModel::currentColumnChanged(const QModelIndex & current , const QModelIndex & previous )**

        This signal is emitted if the **current** item changes and its column is different to the column of the **previous** current item.

        Note that this signal will not be emitted when the item model is reset.

        **See also** **currentChanged** (), **currentRowChanged** (), **currentIndex** (), and **setCurrentIndex** ().
        """
        ...

    @property
    def currentRowChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QItemSelectionModel::currentRowChanged(const QModelIndex & current , const QModelIndex & previous )**

        This signal is emitted if the **current** item changes and its row is different to the row of the **previous** current item.

        Note that this signal will not be emitted when the item model is reset.

        **See also** **currentChanged** (), **currentColumnChanged** (), **currentIndex** (), and **setCurrentIndex** ().
        """
        ...

    @property
    def modelChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QItemSelectionModel::modelChanged(QAbstractItemModel * model )**

        This signal is emitted when the **model** is successfully set with **setModel** ().

        This function was introduced in Qt 5.5.

        **See also** **model** () and **setModel** ().
        """
        ...

    @property
    def selectionChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QItemSelectionModel::selectionChanged(const QItemSelection & selected , const QItemSelection & deselected )**

        This signal is emitted whenever the selection changes. The change in the selection is represented as an item selection of **deselected** items and an item selection of **selected** items.

        Note the that the current index changes independently from the selection. Also note that this signal will not be emitted when the item model is reset.

        **Note:** Notifier signal for property **selectedIndexes** .

        **See also** **select** () and **currentChanged** ().
        """
        ...
