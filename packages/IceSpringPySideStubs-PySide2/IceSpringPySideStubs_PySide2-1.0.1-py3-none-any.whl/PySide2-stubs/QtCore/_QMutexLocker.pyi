"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QMutexLocker(object):
    """
    **Detailed Description**

    Locking and unlocking a **QMutex**  in complex functions and statements or in exception handling code is error-prone and difficult to debug. QMutexLocker can be used in such situations to ensure that the state of the mutex is always well-defined.

    QMutexLocker should be created within a function where a **QMutex**  needs to be locked. The mutex is locked when QMutexLocker is created. You can unlock and relock the mutex with `unlock()` and `relock()`. If locked, the mutex will be unlocked when the QMutexLocker is destroyed.

    For example, this complex function locks a **QMutex**  upon entering the function and unlocks the mutex at all the exit points:

    int complexFunction(int flag)
        {
            mutex.lock();

            int retVal = 0;

            switch (flag) {
            case 0:
            case 1:
                retVal = moreComplexFunction(flag);
                break;
            case 2:
                {
                    int status = anotherFunction();
                    if (status < 0) {
                        mutex.unlock();
                        return -2;
                    }
                    retVal = status + flag;
                }
                break;
            default:
                if (flag > 10) {
                    mutex.unlock();
                    return -1;
                }
                break;
            }

            mutex.unlock();
            return retVal;
        }

    This example function will get more complicated as it is developed, which increases the likelihood that errors will occur.

    Using QMutexLocker greatly simplifies the code, and makes it more readable:

    int complexFunction(int flag)
        {
            **QMutexLocker**  locker(&mutex);

            int retVal = 0;

            switch (flag) {
            case 0:
            case 1:
                return moreComplexFunction(flag);
            case 2:
                {
                    int status = anotherFunction();
                    if (status < 0)
                        return -2;
                    retVal = status + flag;
                }
                break;
            default:
                if (flag > 10)
                    return -1;
                break;
            }

            return retVal;
        }

    Now, the mutex will always be unlocked when the QMutexLocker object is destroyed (when the function returns since `locker` is an auto variable).

    The same principle applies to code that throws and catches exceptions. An exception that is not caught in the function that has locked the mutex has no way of unlocking the mutex before the exception is passed up the stack to the calling function.

    QMutexLocker also provides a `mutex()` member function that returns the mutex on which the QMutexLocker is operating. This is useful for code that needs access to the mutex, such as **QWaitCondition::wait** (). For example:

    class SignalWaiter
        {
        private:
            **QMutexLocker**  locker;

        public:
            SignalWaiter(**QMutex**  *mutex)
                : locker(mutex)
            {
            }

            void waitForSignal()
            {
                ...
                while (!signalled)
                    waitCondition.wait(locker.mutex());
                ...
            }
        };

    **See also** **QReadLocker** , **QWriteLocker** , and **QMutex** .
    """

    @typing.overload
    def __init__(self, m: PySide2.QtCore.QBasicMutex) -> None:
        """
        **QMutexLocker::QMutexLocker(QMutex * mutex )**

        Constructs a QMutexLocker and locks **mutex**. The mutex will be unlocked when the QMutexLocker is destroyed. If **mutex** is `nullptr`, QMutexLocker does nothing.

        **See also** **QMutex::lock** ().
        """
        ...

    @typing.overload
    def __init__(self, m: PySide2.QtCore.QRecursiveMutex) -> None:
        """
        **QMutexLocker::QMutexLocker(QMutex * mutex )**

        Constructs a QMutexLocker and locks **mutex**. The mutex will be unlocked when the QMutexLocker is destroyed. If **mutex** is `nullptr`, QMutexLocker does nothing.

        **See also** **QMutex::lock** ().
        """
        ...

    def __enter__(self) -> None:
        ...

    def __exit__(self, arg__1: object, arg__2: object, arg__3: object) -> None:
        ...

    def mutex(self) -> PySide2.QtCore.QMutex:
        """
        **QMutex *QMutexLocker::mutex() const**

        Returns the mutex on which the **QMutexLocker**  is operating.
        """
        ...

    def relock(self) -> None:
        """
        **void QMutexLocker::relock()**

        Relocks an unlocked mutex locker.

        **See also** **unlock** ().
        """
        ...

    def unlock(self) -> None:
        """
        **void QMutexLocker::unlock()**

        Unlocks this mutex locker. You can use `relock()` to lock it again. It does not need to be locked when destroyed.

        **See also** **relock** ().
        """
        ...
