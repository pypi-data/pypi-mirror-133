"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QCryptographicHash(object):
    """
    **Detailed Description**

    QCryptographicHash can be used to generate cryptographic hashes of binary or text data.

    Refer to the documentation of the **QCryptographicHash::Algorithm**  enum for a list of the supported algorithms.
    """

    Md4: QCryptographicHash = ...
    Md5: QCryptographicHash = ...
    Sha1: QCryptographicHash = ...
    Sha224: QCryptographicHash = ...
    Sha256: QCryptographicHash = ...
    Sha384: QCryptographicHash = ...
    Sha512: QCryptographicHash = ...
    Keccak_224: QCryptographicHash = ...
    Keccak_256: QCryptographicHash = ...
    Keccak_384: QCryptographicHash = ...
    Keccak_512: QCryptographicHash = ...
    RealSha3_224: QCryptographicHash = ...
    Sha3_224: QCryptographicHash = ...
    RealSha3_256: QCryptographicHash = ...
    Sha3_256: QCryptographicHash = ...
    RealSha3_384: QCryptographicHash = ...
    Sha3_384: QCryptographicHash = ...
    RealSha3_512: QCryptographicHash = ...
    Sha3_512: QCryptographicHash = ...

    class Algorithm(object):
        Md4: QCryptographicHash.Algorithm = ...
        Md5: QCryptographicHash.Algorithm = ...
        Sha1: QCryptographicHash.Algorithm = ...
        Sha224: QCryptographicHash.Algorithm = ...
        Sha256: QCryptographicHash.Algorithm = ...
        Sha384: QCryptographicHash.Algorithm = ...
        Sha512: QCryptographicHash.Algorithm = ...
        Keccak_224: QCryptographicHash.Algorithm = ...
        Keccak_256: QCryptographicHash.Algorithm = ...
        Keccak_384: QCryptographicHash.Algorithm = ...
        Keccak_512: QCryptographicHash.Algorithm = ...
        RealSha3_224: QCryptographicHash.Algorithm = ...
        Sha3_224: QCryptographicHash.Algorithm = ...
        RealSha3_256: QCryptographicHash.Algorithm = ...
        Sha3_256: QCryptographicHash.Algorithm = ...
        RealSha3_384: QCryptographicHash.Algorithm = ...
        Sha3_384: QCryptographicHash.Algorithm = ...
        RealSha3_512: QCryptographicHash.Algorithm = ...
        Sha3_512: QCryptographicHash.Algorithm = ...

    def __init__(self, method: PySide2.QtCore.QCryptographicHash.Algorithm) -> None:
        """
        **QCryptographicHash::QCryptographicHash(QCryptographicHash::Algorithm method )**

        Constructs an object that can be used to create a cryptographic hash from data using **method**.
        """
        ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray) -> None:
        """
        **void QCryptographicHash::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the cryptographic hash.
        """
        ...

    @typing.overload
    def addData(self, data: bytes, length: int) -> None:
        """
        **void QCryptographicHash::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the cryptographic hash.
        """
        ...

    @typing.overload
    def addData(self, device: PySide2.QtCore.QIODevice) -> bool:
        """
        **void QCryptographicHash::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the cryptographic hash.
        """
        ...

    @staticmethod
    def hash(
        data: PySide2.QtCore.QByteArray,
        method: PySide2.QtCore.QCryptographicHash.Algorithm,
    ) -> PySide2.QtCore.QByteArray:
        """
        **[static] QByteArray QCryptographicHash::hash(const QByteArray & data , QCryptographicHash::Algorithm method )**

        Returns the hash of **data** using **method**.
        """
        ...

    @staticmethod
    def hashLength(method: PySide2.QtCore.QCryptographicHash.Algorithm) -> int:
        """
        **[static] int QCryptographicHash::hashLength(QCryptographicHash::Algorithm method )**

        Returns the size of the output of the selected hash **method** in bytes.

        This function was introduced in Qt 5.12.
        """
        ...

    def reset(self) -> None:
        """
        **void QCryptographicHash::reset()**

        Resets the object.
        """
        ...

    def result(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QCryptographicHash::result() const**

        Returns the final hash value.

        **See also** **QByteArray::toHex** ().
        """
        ...
