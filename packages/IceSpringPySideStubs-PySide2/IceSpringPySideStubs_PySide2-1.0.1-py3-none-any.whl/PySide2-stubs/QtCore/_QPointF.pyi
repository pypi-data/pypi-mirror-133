"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QPointF(object):
    """
    **Detailed Description**

    A point is specified by a x coordinate and an y coordinate which can be accessed using the **x** () and **y** () functions. The coordinates of the point are specified using floating point numbers for accuracy. The **isNull** () function returns `true` if both x and y are set to 0.0. The coordinates can be set (or altered) using the **setX** () and **setY** () functions, or alternatively the **rx** () and **ry** () functions which return references to the coordinates (allowing direct manipulation).

    Given a point **p** , the following statements are all equivalent:

    **QPointF**  p;

        p.setX(p.x() + 1.0);
        p += **QPointF** (1.0, 0.0);
        p.rx()++;

    A QPointF object can also be used as a vector: Addition and subtraction are defined as for vectors (each component is added separately). A QPointF object can also be divided or multiplied by an `int` or a `qreal`.

    In addition, the QPointF class provides a constructor converting a **QPoint**  object into a QPointF object, and a corresponding **toPoint** () function which returns a **QPoint**  copy of **this** point. Finally, QPointF objects can be streamed as well as compared.

    **See also** **QPoint**  and **QPolygonF** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QPointF::QPointF()**

        Constructs a null point, i.e. with coordinates (0.0, 0.0)

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, QPointF: PySide2.QtCore.QPointF) -> None:
        """
        **QPointF::QPointF()**

        Constructs a null point, i.e. with coordinates (0.0, 0.0)

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, p: PySide2.QtCore.QPoint) -> None:
        """
        **QPointF::QPointF()**

        Constructs a null point, i.e. with coordinates (0.0, 0.0)

        **See also** **isNull** ().
        """
        ...

    @typing.overload
    def __init__(self, xpos: float, ypos: float) -> None:
        """
        **QPointF::QPointF()**

        Constructs a null point, i.e. with coordinates (0.0, 0.0)

        **See also** **isNull** ().
        """
        ...

    def __add__(self, p2: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __iadd__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF:
        ...

    def __imul__(self, c: float) -> PySide2.QtCore.QPointF:
        ...

    def __isub__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF:
        ...

    def __mul__(self, c: float) -> PySide2.QtCore.QPointF:
        ...

    def __neg__(self) -> PySide2.QtCore.QPointF:
        ...

    def __pos__(self) -> PySide2.QtCore.QPointF:
        ...

    def __reduce__(self) -> object:
        ...

    def __repr__(self) -> object:
        ...

    def __sub__(self, p2: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF:
        ...

    @staticmethod
    def dotProduct(p1: PySide2.QtCore.QPointF, p2: PySide2.QtCore.QPointF) -> float:
        """
        **[static] qreal QPointF::dotProduct(const QPointF & p1 , const QPointF & p2 )**

        **QPointF**  p( 3.1, 7.1);
            **QPointF**  q(-1.0, 4.1);
            int lengthSquared = **QPointF** ::dotProduct(p, q);   // lengthSquared becomes 26.01

        Returns the dot product of **p1** and **p2**.

        This function was introduced in Qt 5.1.
        """
        ...

    def isNull(self) -> bool:
        """
        **bool QPointF::isNull() const**

        Returns `true` if both the x and y coordinates are set to 0.0 (ignoring the sign); otherwise returns `false`.
        """
        ...

    def manhattanLength(self) -> float:
        """
        **qreal QPointF::manhattanLength() const**

        Returns the sum of the absolute values of **x** () and **y** (), traditionally known as the "Manhattan length" of the vector from the origin to the point.

        This function was introduced in Qt 4.6.

        **See also** **QPoint::manhattanLength** ().
        """
        ...

    def setX(self, x: float) -> None:
        """
        **void QPointF::setX(qreal x )**

        Sets the x coordinate of this point to the given **x** coordinate.

        **See also** **x** () and **setY** ().
        """
        ...

    def setY(self, y: float) -> None:
        """
        **void QPointF::setY(qreal y )**

        Sets the y coordinate of this point to the given **y** coordinate.

        **See also** **y** () and **setX** ().
        """
        ...

    def toPoint(self) -> PySide2.QtCore.QPoint:
        """
        **QPoint QPointF::toPoint() const**

        Rounds the coordinates of this point to the nearest integer, and returns a **QPoint**  object with the rounded coordinates.

        **See also** **QPointF** ().
        """
        ...

    def toTuple(self) -> object:
        ...

    def transposed(self) -> PySide2.QtCore.QPointF:
        """
        **QPointF QPointF::transposed() const**

        Returns a point with x and y coordinates exchanged:

        **QPointF** {1.0, 2.0}.transposed() // {2.0, 1.0}

        This function was introduced in Qt 5.14.

        **See also** **x** (), **y** (), **setX** (), and **setY** ().
        """
        ...

    def x(self) -> float:
        """
        **qreal QPointF::x() const**

        Returns the x coordinate of this point.

        **See also** **setX** () and **rx** ().
        """
        ...

    def y(self) -> float:
        """
        **qreal QPointF::y() const**

        Returns the y coordinate of this point.

        **See also** **setY** () and **ry** ().
        """
        ...
