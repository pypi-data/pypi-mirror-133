"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QDateTime(object):
    """
    **Detailed Description**

    A QDateTime object encodes a calendar date and a clock time (a "datetime"). It combines features of the **QDate**  and **QTime**  classes. It can read the current datetime from the system clock. It provides functions for comparing datetimes and for manipulating a datetime by adding a number of seconds, days, months, or years.

    QDateTime can describe datetimes with respect to **local time** , to **UTC** , to a specified **offset from UTC**  or to a specified **time zone** , in conjunction with the **QTimeZone**  class. For example, a time zone of "Europe/Berlin" will apply the daylight-saving rules as used in Germany since 1970. In contrast, an offset from UTC of +3600 seconds is one hour ahead of UTC (usually written in ISO standard notation as "UTC+01:00"), with no daylight-saving offset or changes. When using either local time or a specified time zone, time-zone transitions such as the starts and ends of daylight-saving time (DST; but see below) are taken into account. The choice of system used to represent a datetime is described as its "timespec".

    A QDateTime object is typically created either by giving a date and time explicitly in the constructor, or by using a static function such as **currentDateTime** () or **fromMSecsSinceEpoch** (). The date and time can be changed with **setDate** () and **setTime** (). A datetime can also be set using the **setMSecsSinceEpoch** () function that takes the time, in milliseconds, since 00:00:00 on January 1, 1970. The **fromString** () function returns a QDateTime, given a string and a date format used to interpret the date within the string.

    **QDateTime::currentDateTime** () returns a QDateTime that expresses the current time with respect to local time. **QDateTime::currentDateTimeUtc** () returns a QDateTime that expresses the current time with respect to UTC.

    The **date** () and **time** () functions provide access to the date and time parts of the datetime. The same information is provided in textual format by the **toString** () function.

    QDateTime provides a full set of operators to compare two QDateTime objects, where smaller means earlier and larger means later.

    You can increment (or decrement) a datetime by a given number of milliseconds using **addMSecs** (), seconds using **addSecs** (), or days using **addDays** (). Similarly, you can use **addMonths** () and **addYears** (). The **daysTo** () function returns the number of days between two datetimes, **secsTo** () returns the number of seconds between two datetimes, and **msecsTo** () returns the number of milliseconds between two datetimes. These operations are aware of daylight-saving time (DST) and other time-zone transitions, where applicable.

    Use **toTimeSpec** () to express a datetime in local time or UTC, **toOffsetFromUtc** () to express in terms of an offset from UTC, or **toTimeZone** () to express it with respect to a general time zone. You can use **timeSpec** () to find out what time-spec a QDateTime object stores its time relative to. When that is **Qt::TimeZone** , you can use **timeZone** () to find out which zone it is using.

    **Note:** QDateTime does not account for leap seconds.

    **Remarks**

    **No Year 0**

    There is no year 0. Dates in that year are considered invalid. The year -1 is the year "1 before Christ" or "1 before current era." The day before 1 January 1 CE is 31 December 1 BCE.

    **Range of Valid Dates**

    The range of values that QDateTime can represent is dependent on the internal storage implementation. QDateTime is currently stored in a qint64 as a serial msecs value encoding the date and time. This restricts the date range to about +/- 292 million years, compared to the **QDate**  range of +/- 2 billion years. Care must be taken when creating a QDateTime with extreme values that you do not overflow the storage. The exact range of supported values varies depending on the **Qt::TimeSpec**  and time zone.

    **Use of Timezones**

    QDateTime uses the system\'s time zone information to determine the current local time zone and its offset from UTC. If the system is not configured correctly or not up-to-date, QDateTime will give wrong results.

    QDateTime likewise uses system-provided information to determine the offsets of other timezones from UTC. If this information is incomplete or out of date, QDateTime will give wrong results. See the **QTimeZone**  documentation for more details.

    On modern Unix systems, this means QDateTime usually has accurate information about historical transitions (including DST, see below) whenever possible. On Windows, where the system doesn\'t support historical timezone data, historical accuracy is not maintained with respect to timezone transitions, notably including DST.

    **Daylight-Saving Time (DST)**

    QDateTime takes into account transitions between Standard Time and Daylight-Saving Time. For example, if the transition is at 2am and the clock goes forward to 3am, then there is a "missing" hour from 02:00:00 to 02:59:59.999 which QDateTime considers to be invalid. Any date arithmetic performed will take this missing hour into account and return a valid result. For example, adding one minute to 01:59:59 will get 03:00:00.

    The range of valid dates taking DST into account is 1970-01-01 to the present, and rules are in place for handling DST correctly until 2037-12-31, but these could change. For dates after 2037, QDateTime makes a **best guess** using the rules for year 2037, but we can\'t guarantee accuracy; indeed, for **any** future date, the time-zone may change its rules before that date comes around. For dates before 1970, QDateTime doesn\'t take DST changes into account, even if the system\'s time zone database provides that information, although it does take into account changes to the time-zone\'s standard offset, where this information is available.

    **Offsets From UTC**

    There is no explicit size restriction on an offset from UTC, but there is an implicit limit imposed when using the **toString** () and **fromString** () methods which use a [+|-]hh:mm format, effectively limiting the range to +/- 99 hours and 59 minutes and whole minutes only. Note that currently no time zone lies outside the range of +/- 14 hours.

    **See also** **QDate** , **QTime** , **QDateTimeEdit** , and **QTimeZone** .
    """

    class YearRange(object):
        First: QDateTime.YearRange = ...
        Last: QDateTime.YearRange = ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QDate) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        arg__1: PySide2.QtCore.QDate,
        arg__2: PySide2.QtCore.QTime,
        spec: PySide2.QtCore.Qt.TimeSpec = ...,
    ) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        arg__1: int,
        arg__2: int,
        arg__3: int,
        arg__4: int,
        arg__5: int,
        arg__6: int,
    ) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        arg__1: int,
        arg__2: int,
        arg__3: int,
        arg__4: int,
        arg__5: int,
        arg__6: int,
        arg__7: int,
        arg__8: int = ...,
    ) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        date: PySide2.QtCore.QDate,
        time: PySide2.QtCore.QTime,
        spec: PySide2.QtCore.Qt.TimeSpec,
        offsetSeconds: int,
    ) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        date: PySide2.QtCore.QDate,
        time: PySide2.QtCore.QTime,
        timeZone: PySide2.QtCore.QTimeZone,
    ) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QDateTime) -> None:
        """
        **QDateTime::QDateTime()**

        Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.

        **See also** **isValid** ().
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __reduce__(self) -> object:
        ...

    def __repr__(self) -> object:
        ...

    def addDays(self, days: int) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::addDays(qint64 ndays ) const**

        Returns a **QDateTime**  object containing a datetime **ndays** days later than the datetime of this object (or earlier if **ndays** is negative).

        If the **timeSpec** () is **Qt::LocalTime**  and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.

        **See also** **daysTo** (), **addMonths** (), **addYears** (), and **addSecs** ().
        """
        ...

    def addMSecs(self, msecs: int) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::addMSecs(qint64 msecs ) const**

        Returns a **QDateTime**  object containing a datetime **msecs** miliseconds later than the datetime of this object (or earlier if **msecs** is negative).

        If this datetime is invalid, an invalid datetime will be returned.

        **See also** **addSecs** (), **msecsTo** (), **addDays** (), **addMonths** (), and **addYears** ().
        """
        ...

    def addMonths(self, months: int) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::addMonths(int nmonths ) const**

        Returns a **QDateTime**  object containing a datetime **nmonths** months later than the datetime of this object (or earlier if **nmonths** is negative).

        If the **timeSpec** () is **Qt::LocalTime**  and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.

        **See also** **daysTo** (), **addDays** (), **addYears** (), and **addSecs** ().
        """
        ...

    def addSecs(self, secs: int) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::addSecs(qint64 s ) const**

        Returns a **QDateTime**  object containing a datetime **s** seconds later than the datetime of this object (or earlier if **s** is negative).

        If this datetime is invalid, an invalid datetime will be returned.

        **See also** **addMSecs** (), **secsTo** (), **addDays** (), **addMonths** (), and **addYears** ().
        """
        ...

    def addYears(self, years: int) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::addYears(int nyears ) const**

        Returns a **QDateTime**  object containing a datetime **nyears** years later than the datetime of this object (or earlier if **nyears** is negative).

        If the **timeSpec** () is **Qt::LocalTime**  and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.

        **See also** **daysTo** (), **addDays** (), **addMonths** (), and **addSecs** ().
        """
        ...

    @staticmethod
    def currentDateTime() -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::currentDateTime()**

        Returns the current datetime, as reported by the system clock, in the local time zone.

        **See also** **currentDateTimeUtc** (), **QDate::currentDate** (), **QTime::currentTime** (), and **toTimeSpec** ().
        """
        ...

    @staticmethod
    def currentDateTimeUtc() -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::currentDateTimeUtc()**

        Returns the current datetime, as reported by the system clock, in UTC.

        This function was introduced in Qt 4.7.

        **See also** **currentDateTime** (), **QDate::currentDate** (), **QTime::currentTime** (), and **toTimeSpec** ().
        """
        ...

    @staticmethod
    def currentMSecsSinceEpoch() -> int:
        """
        **[static] qint64 QDateTime::currentMSecsSinceEpoch()**

        Returns the number of milliseconds since 1970-01-01T00:00:00 Universal Coordinated Time. This number is like the POSIX time_t variable, but expressed in milliseconds instead.

        This function was introduced in Qt 4.7.

        **See also** **currentDateTime** (), **currentDateTimeUtc** (), **toTime_t** (), and **toTimeSpec** ().
        """
        ...

    @staticmethod
    def currentSecsSinceEpoch() -> int:
        """
        **[static] qint64 QDateTime::currentSecsSinceEpoch()**

        Returns the number of seconds since 1970-01-01T00:00:00 Universal Coordinated Time.

        This function was introduced in Qt 5.8.

        **See also** **currentMSecsSinceEpoch** ().
        """
        ...

    def date(self) -> PySide2.QtCore.QDate:
        """
        **QDate QDateTime::date() const**

        Returns the date part of the datetime.

        **See also** **setDate** (), **time** (), and **timeSpec** ().
        """
        ...

    def daysTo(self, arg__1: PySide2.QtCore.QDateTime) -> int:
        """
        **qint64 QDateTime::daysTo(const QDateTime & other ) const**

        Returns the number of days from this datetime to the **other** datetime. The number of days is counted as the number of times midnight is reached between this datetime to the **other** datetime. This means that a 10 minute difference from 23:55 to 0:05 the next day counts as one day.

        If the **other** datetime is earlier than this datetime, the value returned is negative.

        Example:

        **QDateTime**  startDate(**QDate** (2012, 7, 6), **QTime** (8, 30, 0));
            **QDateTime**  endDate(**QDate** (2012, 7, 7), **QTime** (16, 30, 0));
            **qDebug** () << "Days from startDate to endDate: " << startDate.daysTo(endDate);

            startDate = **QDateTime** (**QDate** (2012, 7, 6), **QTime** (23, 55, 0));
            endDate = **QDateTime** (**QDate** (2012, 7, 7), **QTime** (0, 5, 0));
            **qDebug** () << "Days from startDate to endDate: " << startDate.daysTo(endDate);

            **qSwap** (startDate, endDate); // Make endDate before startDate.
            **qDebug** () << "Days from startDate to endDate: " << startDate.daysTo(endDate);

        **See also** **addDays** (), **secsTo** (), and **msecsTo** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(msecs: int) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecs )**

        Returns a datetime whose date and time are the number of milliseconds, **msecs** , that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ), and converted to **Qt::LocalTime** . On systems that do not support time zones, the time will be set as if local time were **Qt::UTC** .

        Note that there are possible values for **msecs** that lie outside the valid range of **QDateTime** , both negative and positive. The behavior of this function is undefined for those values.

        This function was introduced in Qt 4.7.

        **See also** **toMSecsSinceEpoch** () and **setMSecsSinceEpoch** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(
        msecs: int, spec: PySide2.QtCore.Qt.TimeSpec, offsetFromUtc: int = ...
    ) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecs )**

        Returns a datetime whose date and time are the number of milliseconds, **msecs** , that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ), and converted to **Qt::LocalTime** . On systems that do not support time zones, the time will be set as if local time were **Qt::UTC** .

        Note that there are possible values for **msecs** that lie outside the valid range of **QDateTime** , both negative and positive. The behavior of this function is undefined for those values.

        This function was introduced in Qt 4.7.

        **See also** **toMSecsSinceEpoch** () and **setMSecsSinceEpoch** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(
        msecs: int, timeZone: PySide2.QtCore.QTimeZone
    ) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecs )**

        Returns a datetime whose date and time are the number of milliseconds, **msecs** , that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ), and converted to **Qt::LocalTime** . On systems that do not support time zones, the time will be set as if local time were **Qt::UTC** .

        Note that there are possible values for **msecs** that lie outside the valid range of **QDateTime** , both negative and positive. The behavior of this function is undefined for those values.

        This function was introduced in Qt 4.7.

        **See also** **toMSecsSinceEpoch** () and **setMSecsSinceEpoch** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromSecsSinceEpoch(
        secs: int, spe: PySide2.QtCore.Qt.TimeSpec = ..., offsetFromUtc: int = ...
    ) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromSecsSinceEpoch(qint64 secs , Qt::TimeSpec spec = Qt::LocalTime, int offsetSeconds = 0)**

        Returns a datetime whose date and time are the number of seconds **secs** that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ) and converted to the given **spec**.

        Note that there are possible values for **secs** that lie outside the valid range of **QDateTime** , both negative and positive. The behavior of this function is undefined for those values.

        If the **spec** is not **Qt::OffsetFromUTC**  then the **offsetSeconds** will be ignored. If the **spec** is **Qt::OffsetFromUTC**  and the **offsetSeconds** is 0 then the spec will be set to **Qt::UTC** , i.e. an offset of 0 seconds.

        If **spec** is **Qt::TimeZone**  then the spec will be set to **Qt::LocalTime** , i.e. the current system time zone.

        This function was introduced in Qt 5.8.

        **See also** **toSecsSinceEpoch** () and **setSecsSinceEpoch** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromSecsSinceEpoch(
        secs: int, timeZone: PySide2.QtCore.QTimeZone
    ) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromSecsSinceEpoch(qint64 secs , Qt::TimeSpec spec = Qt::LocalTime, int offsetSeconds = 0)**

        Returns a datetime whose date and time are the number of seconds **secs** that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ) and converted to the given **spec**.

        Note that there are possible values for **secs** that lie outside the valid range of **QDateTime** , both negative and positive. The behavior of this function is undefined for those values.

        If the **spec** is not **Qt::OffsetFromUTC**  then the **offsetSeconds** will be ignored. If the **spec** is **Qt::OffsetFromUTC**  and the **offsetSeconds** is 0 then the spec will be set to **Qt::UTC** , i.e. an offset of 0 seconds.

        If **spec** is **Qt::TimeZone**  then the spec will be set to **Qt::LocalTime** , i.e. the current system time zone.

        This function was introduced in Qt 5.8.

        **See also** **toSecsSinceEpoch** () and **setSecsSinceEpoch** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromString(
        s: str, f: PySide2.QtCore.Qt.DateFormat = ...
    ) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromString(const QString & string , Qt::DateFormat format = Qt::TextDate)**

        Returns the **QDateTime**  represented by the **string** , using the **format** given, or an invalid datetime if this is not possible.

        Note for **Qt::TextDate** : It is recommended that you use the English short month names (e.g. "Jan"). Although localized month names can also be used in Qt 5, they depend on the user\'s locale settings.

        **Note:** Support for localized dates, including the format options **Qt::SystemLocaleDate** , **Qt::SystemLocaleShortDate** , **Qt::SystemLocaleLongDate** , **Qt::LocaleDate** , **Qt::DefaultLocaleShortDate** , and **Qt::DefaultLocaleLongDate** , shall be removed in Qt 6. Use **QLocale::toDateTime** () instead.

        **See also** **toString** () and **QLocale::toDateTime** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromString(s: str, format: str) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromString(const QString & string , Qt::DateFormat format = Qt::TextDate)**

        Returns the **QDateTime**  represented by the **string** , using the **format** given, or an invalid datetime if this is not possible.

        Note for **Qt::TextDate** : It is recommended that you use the English short month names (e.g. "Jan"). Although localized month names can also be used in Qt 5, they depend on the user\'s locale settings.

        **Note:** Support for localized dates, including the format options **Qt::SystemLocaleDate** , **Qt::SystemLocaleShortDate** , **Qt::SystemLocaleLongDate** , **Qt::LocaleDate** , **Qt::DefaultLocaleShortDate** , and **Qt::DefaultLocaleLongDate** , shall be removed in Qt 6. Use **QLocale::toDateTime** () instead.

        **See also** **toString** () and **QLocale::toDateTime** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromString(
        s: str, format: str, cal: PySide2.QtCore.QCalendar
    ) -> PySide2.QtCore.QDateTime:
        """
        **[static] QDateTime QDateTime::fromString(const QString & string , Qt::DateFormat format = Qt::TextDate)**

        Returns the **QDateTime**  represented by the **string** , using the **format** given, or an invalid datetime if this is not possible.

        Note for **Qt::TextDate** : It is recommended that you use the English short month names (e.g. "Jan"). Although localized month names can also be used in Qt 5, they depend on the user\'s locale settings.

        **Note:** Support for localized dates, including the format options **Qt::SystemLocaleDate** , **Qt::SystemLocaleShortDate** , **Qt::SystemLocaleLongDate** , **Qt::LocaleDate** , **Qt::DefaultLocaleShortDate** , and **Qt::DefaultLocaleLongDate** , shall be removed in Qt 6. Use **QLocale::toDateTime** () instead.

        **See also** **toString** () and **QLocale::toDateTime** ().
        """
        ...

    @typing.overload
    @staticmethod
    def fromTime_t(secsSince1Jan1970UTC: int) -> PySide2.QtCore.QDateTime:
        ...

    @typing.overload
    @staticmethod
    def fromTime_t(
        secsSince1Jan1970UTC: int,
        spec: PySide2.QtCore.Qt.TimeSpec,
        offsetFromUtc: int = ...,
    ) -> PySide2.QtCore.QDateTime:
        ...

    @typing.overload
    @staticmethod
    def fromTime_t(
        secsSince1Jan1970UTC: int, timeZone: PySide2.QtCore.QTimeZone
    ) -> PySide2.QtCore.QDateTime:
        ...

    def isDaylightTime(self) -> bool:
        """
        **bool QDateTime::isDaylightTime() const**

        Returns if this datetime falls in Daylight-Saving Time.

        If the **Qt::TimeSpec**  is not **Qt::LocalTime**  or **Qt::TimeZone**  then will always return false.

        This function was introduced in Qt 5.2.

        **See also** **timeSpec** ().
        """
        ...

    def isNull(self) -> bool:
        """
        **bool QDateTime::isNull() const**

        Returns `true` if both the date and the time are null; otherwise returns `false`. A null datetime is invalid.

        **See also** **QDate::isNull** (), **QTime::isNull** (), and **isValid** ().
        """
        ...

    def isValid(self) -> bool:
        """
        **bool QDateTime::isValid() const**

        Returns `true` if both the date and the time are valid and they are valid in the current **Qt::TimeSpec** , otherwise returns `false`.

        If the **timeSpec** () is **Qt::LocalTime**  or **Qt::TimeZone**  then the date and time are checked to see if they fall in the Standard Time to Daylight-Saving Time transition hour, i.e. if the transition is at 2am and the clock goes forward to 3am then the time from 02:00:00 to 02:59:59.999 is considered to be invalid.

        **See also** **QDateTime::YearRange** , **QDate::isValid** (), and **QTime::isValid** ().
        """
        ...

    def msecsTo(self, arg__1: PySide2.QtCore.QDateTime) -> int:
        """
        **qint64 QDateTime::msecsTo(const QDateTime & other ) const**

        Returns the number of milliseconds from this datetime to the **other** datetime. If the **other** datetime is earlier than this datetime, the value returned is negative.

        Before performing the comparison, the two datetimes are converted to **Qt::UTC**  to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes and but not the other.

        Returns 0 if either datetime is invalid.

        **See also** **addMSecs** (), **daysTo** (), and **QTime::msecsTo** ().
        """
        ...

    def offsetFromUtc(self) -> int:
        """
        **int QDateTime::offsetFromUtc() const**

        Returns this date-time's Offset From UTC in seconds.

        The result depends on **timeSpec** ():

        * `Qt::UTC` The offset is 0.
          * `Qt::OffsetFromUTC` The offset is the value originally set.
          * `Qt::LocalTime` The local time's offset from UTC is returned.
          * `Qt::TimeZone` The offset used by the time-zone is returned.

        For the last two, the offset at this date and time will be returned, taking account of Daylight-Saving Offset unless the date precedes the start of 1970. The offset is the difference between the local time or time in the given time-zone and UTC time; it is positive in time-zones ahead of UTC (East of The Prime Meridian), negative for those behind UTC (West of The Prime Meridian).

        This function was introduced in Qt 5.2.

        **See also** **setOffsetFromUtc** ().
        """
        ...

    def secsTo(self, arg__1: PySide2.QtCore.QDateTime) -> int:
        """
        **qint64 QDateTime::secsTo(const QDateTime & other ) const**

        Returns the number of seconds from this datetime to the **other** datetime. If the **other** datetime is earlier than this datetime, the value returned is negative.

        Before performing the comparison, the two datetimes are converted to **Qt::UTC**  to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes but not the other.

        Returns 0 if either datetime is invalid.

        Example:

        **QDateTime**  now = **QDateTime** ::currentDateTime();
            **QDateTime**  xmas(**QDate** (now.date().year(), 12, 25).startOfDay());
            **qDebug** ("There are %d seconds to Christmas", now.secsTo(xmas));

        **See also** **addSecs** (), **daysTo** (), and **QTime::secsTo** ().
        """
        ...

    def setDate(self, date: PySide2.QtCore.QDate) -> None:
        """
        **void QDateTime::setDate(const QDate & date )**

        Sets the date part of this datetime to **date**. If no time is set yet, it is set to midnight. If **date** is invalid, this **QDateTime**  becomes invalid.

        **See also** **date** (), **setTime** (), and **setTimeSpec** ().
        """
        ...

    def setMSecsSinceEpoch(self, msecs: int) -> None:
        """
        **void QDateTime::setMSecsSinceEpoch(qint64 msecs )**

        Sets the date and time given the number of milliseconds **msecs** that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ). On systems that do not support time zones this function will behave as if local time were **Qt::UTC** .

        Note that passing the minimum of `qint64` (`std::numeric_limits<qint64>::min()`) to **msecs** will result in undefined behavior.

        This function was introduced in Qt 4.7.

        **See also** **toMSecsSinceEpoch** () and **setSecsSinceEpoch** ().
        """
        ...

    def setOffsetFromUtc(self, offsetSeconds: int) -> None:
        """
        **void QDateTime::setOffsetFromUtc(int offsetSeconds )**

        Sets the **timeSpec** () to **Qt::OffsetFromUTC**  and the offset to **offsetSeconds**. The datetime will refer to a different point in time.

        The maximum and minimum offset is 14 positive or negative hours. If **offsetSeconds** is larger or smaller than that, then the result is undefined.

        If **offsetSeconds** is 0 then the **timeSpec** () will be set to **Qt::UTC** .

        This function was introduced in Qt 5.2.

        **See also** **isValid** () and **offsetFromUtc** ().
        """
        ...

    def setSecsSinceEpoch(self, secs: int) -> None:
        """
        **void QDateTime::setSecsSinceEpoch(qint64 secs )**

        Sets the date and time given the number of seconds **secs** that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ). On systems that do not support time zones this function will behave as if local time were **Qt::UTC** .

        This function was introduced in Qt 5.8.

        **See also** **toSecsSinceEpoch** () and **setMSecsSinceEpoch** ().
        """
        ...

    def setTime(self, time: PySide2.QtCore.QTime) -> None:
        """
        **void QDateTime::setTime(const QTime & time )**

        Sets the time part of this datetime to **time**. If **time** is not valid, this function sets it to midnight. Therefore, it's possible to clear any set time in a **QDateTime**  by setting it to a default **QTime** :

        **QDateTime**  dt = **QDateTime** ::currentDateTime();
            dt.setTime(**QTime** ());

        **See also** **time** (), **setDate** (), and **setTimeSpec** ().
        """
        ...

    def setTimeSpec(self, spec: PySide2.QtCore.Qt.TimeSpec) -> None:
        """
        **void QDateTime::setTimeSpec(Qt::TimeSpec spec )**

        Sets the time specification used in this datetime to **spec**. The datetime will refer to a different point in time.

        If **spec** is **Qt::OffsetFromUTC**  then the **timeSpec** () will be set to **Qt::UTC** , i.e. an effective offset of 0.

        If **spec** is **Qt::TimeZone**  then the spec will be set to **Qt::LocalTime** , i.e. the current system time zone.

        Example:

        **QDateTime**  local(**QDateTime** ::currentDateTime());
            **qDebug** () << "Local time is:" << local;

            **QDateTime**  UTC(local);
            UTC.setTimeSpec(Qt::UTC);
            **qDebug** () << "UTC time is:" << UTC;

            **qDebug** () << "There are" << local.secsTo(UTC) << "seconds difference between the datetimes.";

        **See also** **timeSpec** (), **setDate** (), **setTime** (), **setTimeZone** (), and **Qt::TimeSpec** .
        """
        ...

    def setTimeZone(self, toZone: PySide2.QtCore.QTimeZone) -> None:
        """
        **void QDateTime::setTimeZone(const QTimeZone & toZone )**

        Sets the time zone used in this datetime to **toZone**. The datetime will refer to a different point in time.

        If **toZone** is invalid then the datetime will be invalid.

        This function was introduced in Qt 5.2.

        **See also** **timeZone** () and **Qt::TimeSpec** .
        """
        ...

    def setTime_t(self, secsSince1Jan1970UTC: int) -> None:
        ...

    def setUtcOffset(self, seconds: int) -> None:
        ...

    def swap(self, other: PySide2.QtCore.QDateTime) -> None:
        """
        **void QDateTime::swap(QDateTime & other )**

        Swaps this datetime with **other**. This operation is very fast and never fails.

        This function was introduced in Qt 5.0.
        """
        ...

    def time(self) -> PySide2.QtCore.QTime:
        """
        **QTime QDateTime::time() const**

        Returns the time part of the datetime.

        **See also** **setTime** (), **date** (), and **timeSpec** ().
        """
        ...

    def timeSpec(self) -> PySide2.QtCore.Qt.TimeSpec:
        """
        **Qt::TimeSpec QDateTime::timeSpec() const**

        Returns the time specification of the datetime.

        **See also** **setTimeSpec** (), **date** (), **time** (), and **Qt::TimeSpec** .
        """
        ...

    def timeZone(self) -> PySide2.QtCore.QTimeZone:
        """
        **QTimeZone QDateTime::timeZone() const**

        Returns the time zone of the datetime.

        If the **timeSpec** () is **Qt::LocalTime**  then an instance of the current system time zone will be returned. Note however that if you copy this time zone the instance will not remain in sync if the system time zone changes.

        This function was introduced in Qt 5.2.

        **See also** **setTimeZone** () and **Qt::TimeSpec** .
        """
        ...

    def timeZoneAbbreviation(self) -> str:
        """
        **QString QDateTime::timeZoneAbbreviation() const**

        Returns the Time Zone Abbreviation for the datetime.

        If the **timeSpec** () is **Qt::UTC**  this will be "UTC".

        If the **timeSpec** () is **Qt::OffsetFromUTC**  this will be in the format "UTC[+-]00:00".

        If the **timeSpec** () is **Qt::LocalTime**  then the host system is queried for the correct abbreviation.

        Note that abbreviations may or may not be localized.

        Note too that the abbreviation is not guaranteed to be a unique value, i.e. different time zones may have the same abbreviation.

        This function was introduced in Qt 5.2.

        **See also** **timeSpec** ().
        """
        ...

    def toLocalTime(self) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::toLocalTime() const**

        Returns a datetime containing the date and time information in this datetime, but specified using the **Qt::LocalTime**  definition.

        Example:

        **QDateTime**  UTC(**QDateTime** ::currentDateTimeUtc());
            **QDateTime**  local(UTC.toLocalTime());
            **qDebug** () << "UTC time is:" << UTC;
            **qDebug** () << "Local time is:" << local;
            **qDebug** () << "No difference between times:" << UTC.secsTo(local);

        **See also** **toTimeSpec** ().
        """
        ...

    def toMSecsSinceEpoch(self) -> int:
        """
        **qint64 QDateTime::toMSecsSinceEpoch() const**

        Returns the datetime as the number of milliseconds that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ).

        On systems that do not support time zones, this function will behave as if local time were **Qt::UTC** .

        The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.

        This function was introduced in Qt 4.7.

        **See also** **toSecsSinceEpoch** () and **setMSecsSinceEpoch** ().
        """
        ...

    def toOffsetFromUtc(self, offsetSeconds: int) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::toOffsetFromUtc(int offsetSeconds ) const**

        Returns a copy of this datetime converted to a spec of **Qt::OffsetFromUTC**  with the given **offsetSeconds**.

        If the **offsetSeconds** equals 0 then a UTC datetime will be returned

        This function was introduced in Qt 5.2.

        **See also** **setOffsetFromUtc** (), **offsetFromUtc** (), and **toTimeSpec** ().
        """
        ...

    def toPython(self) -> object:
        ...

    def toSecsSinceEpoch(self) -> int:
        """
        **qint64 QDateTime::toSecsSinceEpoch() const**

        Returns the datetime as the number of seconds that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (**Qt::UTC** ).

        On systems that do not support time zones, this function will behave as if local time were **Qt::UTC** .

        The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.

        This function was introduced in Qt 5.8.

        **See also** **toMSecsSinceEpoch** () and **setSecsSinceEpoch** ().
        """
        ...

    @typing.overload
    def toString(self, format: PySide2.QtCore.Qt.DateFormat = ...) -> str:
        """
        **QString QDateTime::toString(Qt::DateFormat format = Qt::TextDate) const**

        This is an overloaded function.

        Returns the datetime as a string in the **format** given.

        If the **format** is **Qt::TextDate** , the string is formatted in the default way. The day and month names will be localized names using the system locale, i.e. **QLocale::system** (). An example of this formatting is "Wed May 20 03:40:13 1998".

        If the **format** is **Qt::ISODate** , the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-ddTHH:mm:ss[Z|[+|-]HH:mm], depending on the **timeSpec** () of the **QDateTime** . If the **timeSpec** () is **Qt::UTC** , Z will be appended to the string; if the **timeSpec** () is **Qt::OffsetFromUTC** , the offset in hours and minutes from UTC will be appended to the string. To include milliseconds in the ISO 8601 date, use the **format** **Qt::ISODateWithMs** , which corresponds to yyyy-MM-ddTHH:mm:ss.zzz[Z|[+|-]HH:mm].

        The **format** options **Qt::SystemLocaleDate** , **Qt::SystemLocaleShortDate**  and **Qt::SystemLocaleLongDate**  shall be removed in Qt 6. Their use should be replaced with **QLocale::system().toString(datetime, QLocale::ShortFormat)**  or **QLocale::system().toString(datetime, QLocale::LongFormat)** .

        The **format** options **Qt::LocaleDate** , **Qt::DefaultLocaleShortDate**  and **Qt::DefaultLocaleLongDate**  shall be removed in Qt 6. Their use should be replaced with **QLocale().toString(datetime, QLocale::ShortFormat)**  or **QLocale().toString(datetime, QLocale::LongFormat)** .

        If the **format** is **Qt::RFC2822Date** , the string is formatted following **RFC 2822** .

        If the datetime is invalid, an empty string will be returned.

        **Warning:** The **Qt::ISODate**  format is only valid for years in the range 0 to 9999.

        **See also** **fromString** (), **QDate::toString** (), **QTime::toString** (), and **QLocale::toString** ().
        """
        ...

    @typing.overload
    def toString(self, format: str) -> str:
        """
        **QString QDateTime::toString(Qt::DateFormat format = Qt::TextDate) const**

        This is an overloaded function.

        Returns the datetime as a string in the **format** given.

        If the **format** is **Qt::TextDate** , the string is formatted in the default way. The day and month names will be localized names using the system locale, i.e. **QLocale::system** (). An example of this formatting is "Wed May 20 03:40:13 1998".

        If the **format** is **Qt::ISODate** , the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-ddTHH:mm:ss[Z|[+|-]HH:mm], depending on the **timeSpec** () of the **QDateTime** . If the **timeSpec** () is **Qt::UTC** , Z will be appended to the string; if the **timeSpec** () is **Qt::OffsetFromUTC** , the offset in hours and minutes from UTC will be appended to the string. To include milliseconds in the ISO 8601 date, use the **format** **Qt::ISODateWithMs** , which corresponds to yyyy-MM-ddTHH:mm:ss.zzz[Z|[+|-]HH:mm].

        The **format** options **Qt::SystemLocaleDate** , **Qt::SystemLocaleShortDate**  and **Qt::SystemLocaleLongDate**  shall be removed in Qt 6. Their use should be replaced with **QLocale::system().toString(datetime, QLocale::ShortFormat)**  or **QLocale::system().toString(datetime, QLocale::LongFormat)** .

        The **format** options **Qt::LocaleDate** , **Qt::DefaultLocaleShortDate**  and **Qt::DefaultLocaleLongDate**  shall be removed in Qt 6. Their use should be replaced with **QLocale().toString(datetime, QLocale::ShortFormat)**  or **QLocale().toString(datetime, QLocale::LongFormat)** .

        If the **format** is **Qt::RFC2822Date** , the string is formatted following **RFC 2822** .

        If the datetime is invalid, an empty string will be returned.

        **Warning:** The **Qt::ISODate**  format is only valid for years in the range 0 to 9999.

        **See also** **fromString** (), **QDate::toString** (), **QTime::toString** (), and **QLocale::toString** ().
        """
        ...

    @typing.overload
    def toString(self, format: str, cal: PySide2.QtCore.QCalendar) -> str:
        """
        **QString QDateTime::toString(Qt::DateFormat format = Qt::TextDate) const**

        This is an overloaded function.

        Returns the datetime as a string in the **format** given.

        If the **format** is **Qt::TextDate** , the string is formatted in the default way. The day and month names will be localized names using the system locale, i.e. **QLocale::system** (). An example of this formatting is "Wed May 20 03:40:13 1998".

        If the **format** is **Qt::ISODate** , the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-ddTHH:mm:ss[Z|[+|-]HH:mm], depending on the **timeSpec** () of the **QDateTime** . If the **timeSpec** () is **Qt::UTC** , Z will be appended to the string; if the **timeSpec** () is **Qt::OffsetFromUTC** , the offset in hours and minutes from UTC will be appended to the string. To include milliseconds in the ISO 8601 date, use the **format** **Qt::ISODateWithMs** , which corresponds to yyyy-MM-ddTHH:mm:ss.zzz[Z|[+|-]HH:mm].

        The **format** options **Qt::SystemLocaleDate** , **Qt::SystemLocaleShortDate**  and **Qt::SystemLocaleLongDate**  shall be removed in Qt 6. Their use should be replaced with **QLocale::system().toString(datetime, QLocale::ShortFormat)**  or **QLocale::system().toString(datetime, QLocale::LongFormat)** .

        The **format** options **Qt::LocaleDate** , **Qt::DefaultLocaleShortDate**  and **Qt::DefaultLocaleLongDate**  shall be removed in Qt 6. Their use should be replaced with **QLocale().toString(datetime, QLocale::ShortFormat)**  or **QLocale().toString(datetime, QLocale::LongFormat)** .

        If the **format** is **Qt::RFC2822Date** , the string is formatted following **RFC 2822** .

        If the datetime is invalid, an empty string will be returned.

        **Warning:** The **Qt::ISODate**  format is only valid for years in the range 0 to 9999.

        **See also** **fromString** (), **QDate::toString** (), **QTime::toString** (), and **QLocale::toString** ().
        """
        ...

    def toTimeSpec(self, spec: PySide2.QtCore.Qt.TimeSpec) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::toTimeSpec(Qt::TimeSpec spec ) const**

        Returns a copy of this datetime converted to the given time **spec**.

        If **spec** is **Qt::OffsetFromUTC**  then it is set to **Qt::UTC** . To set to a spec of **Qt::OffsetFromUTC**  use **toOffsetFromUtc** ().

        If **spec** is **Qt::TimeZone**  then it is set to **Qt::LocalTime** , i.e. the local Time Zone.

        Example:

        **QDateTime**  local(**QDateTime** ::currentDateTime());
            **QDateTime**  UTC(local.toTimeSpec(Qt::UTC));
            **qDebug** () << "Local time is:" << local;
            **qDebug** () << "UTC time is:" << UTC;
            **qDebug** () << "No difference between times:" << local.secsTo(UTC);

        **See also** **timeSpec** (), **toTimeZone** (), and **toOffsetFromUtc** ().
        """
        ...

    def toTimeZone(self, toZone: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::toTimeZone(const QTimeZone & timeZone ) const**

        Returns a copy of this datetime converted to the given **timeZone**

        This function was introduced in Qt 5.2.

        **See also** **timeZone** () and **toTimeSpec** ().
        """
        ...

    def toTime_t(self) -> int:
        ...

    def toUTC(self) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QDateTime::toUTC() const**

        Returns a datetime containing the date and time information in this datetime, but specified using the **Qt::UTC**  definition.

        Example:

        **QDateTime**  local(**QDateTime** ::currentDateTime());
            **QDateTime**  UTC(local.toUTC());
            **qDebug** () << "Local time is:" << local;
            **qDebug** () << "UTC time is:" << UTC;
            **qDebug** () << "No difference between times:" << local.secsTo(UTC);

        **See also** **toTimeSpec** ().
        """
        ...

    def utcOffset(self) -> int:
        ...
