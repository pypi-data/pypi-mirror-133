"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QIconEngine(object):
    """
    **Detailed Description**

    An icon engine provides the rendering functions for a **QIcon** . Each icon has a corresponding icon engine that is responsible for drawing the icon with a requested size, mode and state.

    The icon is rendered by the **paint** () function, and the icon can additionally be obtained as a pixmap with the **pixmap** () function (the default implementation simply uses **paint** () to achieve this). The **addPixmap** () function can be used to add new pixmaps to the icon engine, and is used by **QIcon**  to add specialized custom pixmaps.

    The **paint** (), **pixmap** (), and **addPixmap** () functions are all virtual, and can therefore be reimplemented in subclasses of QIconEngine.

    **See also** **QIconEnginePlugin** .
    """

    AvailableSizesHook: QIconEngine = ...
    IconNameHook: QIconEngine = ...
    IsNullHook: QIconEngine = ...
    ScaledPixmapHook: QIconEngine = ...

    class AvailableSizesArgument(object):
        def __init__(self) -> None:
            ...

    class IconEngineHook(object):
        AvailableSizesHook: QIconEngine.IconEngineHook = ...
        IconNameHook: QIconEngine.IconEngineHook = ...
        IsNullHook: QIconEngine.IconEngineHook = ...
        ScaledPixmapHook: QIconEngine.IconEngineHook = ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QIconEngine::QIconEngine()**

        Constructs the icon engine.

        This function was introduced in Qt 5.6.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtGui.QIconEngine) -> None:
        """
        **QIconEngine::QIconEngine()**

        Constructs the icon engine.

        This function was introduced in Qt 5.6.
        """
        ...

    def actualSize(
        self,
        size: PySide2.QtCore.QSize,
        mode: PySide2.QtGui.QIcon.Mode,
        state: PySide2.QtGui.QIcon.State,
    ) -> PySide2.QtCore.QSize:
        """
        **[virtual] QSize QIconEngine::actualSize(const QSize & size , QIcon::Mode mode , QIcon::State state )**

        Returns the actual size of the icon the engine provides for the requested **size** , **mode** and **state**. The default implementation returns the given **size**.
        """
        ...

    def addFile(
        self,
        fileName: str,
        size: PySide2.QtCore.QSize,
        mode: PySide2.QtGui.QIcon.Mode,
        state: PySide2.QtGui.QIcon.State,
    ) -> None:
        """
        **[virtual] void QIconEngine::addFile(const QString & fileName , const QSize & size , QIcon::Mode mode , QIcon::State state )**

        Called by **QIcon::addFile** (). Adds a specialized pixmap from the file with the given **fileName** , **size** , **mode** and **state**. The default pixmap-based engine stores any supplied file names, and it loads the pixmaps on demand instead of using scaled pixmaps if the size of a pixmap matches the size of icon requested. Custom icon engines that implement scalable vector formats are free to ignores any extra files.
        """
        ...

    def addPixmap(
        self,
        pixmap: PySide2.QtGui.QPixmap,
        mode: PySide2.QtGui.QIcon.Mode,
        state: PySide2.QtGui.QIcon.State,
    ) -> None:
        """
        **[virtual] void QIconEngine::addPixmap(const QPixmap & pixmap , QIcon::Mode mode , QIcon::State state )**

        Called by **QIcon::addPixmap** (). Adds a specialized **pixmap** for the given **mode** and **state**. The default pixmap-based engine stores any supplied pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap matches the size of icon requested. Custom icon engines that implement scalable vector formats are free to ignores any extra pixmaps.
        """
        ...

    def availableSizes(
        self,
        mode: PySide2.QtGui.QIcon.Mode = ...,
        state: PySide2.QtGui.QIcon.State = ...,
    ) -> typing.List:
        """
        **[virtual] QList<QSize> QIconEngine::availableSizes(QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const**

        Returns sizes of all images that are contained in the engine for the specific **mode** and **state**.

        **Note:** This is a helper method and the actual work is done by the **virtual_hook** () method, hence this method depends on icon engine support and may not work with all icon engines.

        This function was introduced in Qt 4.5.
        """
        ...

    def clone(self) -> PySide2.QtGui.QIconEngine:
        """
        **[pure virtual] QIconEngine *QIconEngine::clone() const**

        Reimplement this method to return a clone of this icon engine.
        """
        ...

    def iconName(self) -> str:
        """
        **[virtual] QString QIconEngine::iconName() const**

        Returns the name used to create the engine, if available.

        **Note:** This is a helper method and the actual work is done by the **virtual_hook** () method, hence this method depends on icon engine support and may not work with all icon engines.

        This function was introduced in Qt 4.7.
        """
        ...

    def isNull(self) -> bool:
        """
        **bool QIconEngine::isNull() const**

        Returns true if this icon engine represent a null **QIcon** .

        **Note:** This is a helper method and the actual work is done by the **virtual_hook** () method, hence this method depends on icon engine support and may not work with all icon engines.

        This function was introduced in Qt 5.7.
        """
        ...

    def key(self) -> str:
        """
        **[virtual] QString QIconEngine::key() const**

        Returns a key that identifies this icon engine.
        """
        ...

    def paint(
        self,
        painter: PySide2.QtGui.QPainter,
        rect: PySide2.QtCore.QRect,
        mode: PySide2.QtGui.QIcon.Mode,
        state: PySide2.QtGui.QIcon.State,
    ) -> None:
        """
        **[pure virtual] void QIconEngine::paint(QPainter * painter , const QRect & rect , QIcon::Mode mode , QIcon::State state )**

        Uses the given **painter** to paint the icon with the required **mode** and **state** into the rectangle **rect**.
        """
        ...

    def pixmap(
        self,
        size: PySide2.QtCore.QSize,
        mode: PySide2.QtGui.QIcon.Mode,
        state: PySide2.QtGui.QIcon.State,
    ) -> PySide2.QtGui.QPixmap:
        """
        **[virtual] QPixmap QIconEngine::pixmap(const QSize & size , QIcon::Mode mode , QIcon::State state )**

        Returns the icon as a pixmap with the required **size** , **mode** , and **state**. The default implementation creates a new pixmap and calls **paint** () to fill it.
        """
        ...

    def read(self, in_: PySide2.QtCore.QDataStream) -> bool:
        """
        **[virtual] bool QIconEngine::read(QDataStream & in )**

        Reads icon engine contents from the **QDataStream**  **in**. Returns true if the contents were read; otherwise returns `false`.

        **QIconEngine** 's default implementation always return false.
        """
        ...

    def scaledPixmap(
        self,
        size: PySide2.QtCore.QSize,
        mode: PySide2.QtGui.QIcon.Mode,
        state: PySide2.QtGui.QIcon.State,
        scale: float,
    ) -> PySide2.QtGui.QPixmap:
        """
        **QPixmap QIconEngine::scaledPixmap(const QSize & size , QIcon::Mode mode , QIcon::State state , qreal scale )**

        Returns a pixmap for the given **size** , **mode** , **state** and **scale**.

        The **scale** argument is typically equal to the **device pixel ratio**  of the display.

        **Note:** This is a helper method and the actual work is done by the **virtual_hook** () method, hence this method depends on icon engine support and may not work with all icon engines.

        **Note:** Some engines may cast **scale** to an integer.

        This function was introduced in Qt 5.9.

        **See also** **ScaledPixmapArgument** .
        """
        ...

    def write(self, out: PySide2.QtCore.QDataStream) -> bool:
        """
        **[virtual] bool QIconEngine::write(QDataStream & out ) const**

        Writes the contents of this engine to the **QDataStream**  **out**. Returns `true` if the contents were written; otherwise returns `false`.

        **QIconEngine** 's default implementation always return false.
        """
        ...
