"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QTextLayout(object):
    """
    **Detailed Description**

    It offers many features expected from a modern text layout engine, including Unicode compliant rendering, line breaking and handling of cursor positioning. It can also produce and render device independent layout, something that is important for WYSIWYG applications.

    The class has a rather low level API and unless you intend to implement your own text rendering for some specialized widget, you probably won't need to use it directly.

    QTextLayout can be used with both plain and rich text.

    QTextLayout can be used to create a sequence of **QTextLine**  instances with given widths and can position them independently on the screen. Once the layout is done, these lines can be drawn on a paint device.

    The text to be laid out can be provided in the constructor or set with **setText** ().

    The layout can be seen as a sequence of **QTextLine**  objects; use **createLine** () to create a **QTextLine**  instance, and **lineAt** () or **lineForTextPosition** () to retrieve created lines.

    Here is a code snippet that demonstrates the layout phase:

    int leading = fontMetrics.leading();
        **qreal**  height = 0;
        textLayout.setCacheEnabled(true);
        textLayout.beginLayout();
        while (1) {
            **QTextLine**  line = textLayout.createLine();
            if (!line.isValid())
                break;

            line.setLineWidth(lineWidth);
            height += leading;
            line.setPosition(**QPointF** (0, height));
            height += line.height();
        }
        textLayout.endLayout();

    The text can then be rendered by calling the layout's **draw** () function:

    **QPainter**  painter(this);
        textLayout.draw(&painter, **QPoint** (0, 0));

    For a given position in the text you can find a valid cursor position with **isValidCursorPosition** (), **nextCursorPosition** (), and **previousCursorPosition** ().

    The QTextLayout itself can be positioned with **setPosition** (); it has a **boundingRect** (), and a **minimumWidth** () and a **maximumWidth** ().

    **See also** **QStaticText** .
    """

    SkipCharacters: QTextLayout = ...
    SkipWords: QTextLayout = ...

    class CursorMode(object):
        SkipCharacters: QTextLayout.CursorMode = ...
        SkipWords: QTextLayout.CursorMode = ...

    class FormatRange(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(self, FormatRange: PySide2.QtGui.QTextLayout.FormatRange) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QTextLayout::QTextLayout()**

        Constructs an empty text layout.

        **See also** **setText** ().
        """
        ...

    @typing.overload
    def __init__(self, b: PySide2.QtGui.QTextBlock) -> None:
        """
        **QTextLayout::QTextLayout()**

        Constructs an empty text layout.

        **See also** **setText** ().
        """
        ...

    @typing.overload
    def __init__(self, text: str) -> None:
        """
        **QTextLayout::QTextLayout()**

        Constructs an empty text layout.

        **See also** **setText** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        text: str,
        font: PySide2.QtGui.QFont,
        paintdevice: typing.Optional[PySide2.QtGui.QPaintDevice] = ...,
    ) -> None:
        """
        **QTextLayout::QTextLayout()**

        Constructs an empty text layout.

        **See also** **setText** ().
        """
        ...

    def additionalFormats(self) -> typing.List:
        ...

    def beginLayout(self) -> None:
        """
        **void QTextLayout::beginLayout()**

        Begins the layout process.

        **Warning:** This will invalidate the layout, so all existing **QTextLine**  objects that refer to the previous contents should now be discarded.

        **See also** **endLayout** ().
        """
        ...

    def boundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **QRectF QTextLayout::boundingRect() const**

        The smallest rectangle that contains all the lines in the layout.
        """
        ...

    def cacheEnabled(self) -> bool:
        """
        **bool QTextLayout::cacheEnabled() const**

        Returns `true` if the complete layout information is cached; otherwise returns `false`.

        **See also** **setCacheEnabled** ().
        """
        ...

    def clearAdditionalFormats(self) -> None:
        ...

    def clearFormats(self) -> None:
        """
        **void QTextLayout::clearFormats()**

        Clears the list of additional formats supported by the text layout.

        This function was introduced in Qt 5.6.

        **See also** **formats** () and **setFormats** ().
        """
        ...

    def clearLayout(self) -> None:
        """
        **void QTextLayout::clearLayout()**

        Clears the line information in the layout. After having called this function, **lineCount** () returns 0.

        **Warning:** This will invalidate the layout, so all existing **QTextLine**  objects that refer to the previous contents should now be discarded.

        This function was introduced in Qt 4.4.
        """
        ...

    def createLine(self) -> PySide2.QtGui.QTextLine:
        """
        **QTextLine QTextLayout::createLine()**

        Returns a new text line to be laid out if there is text to be inserted into the layout; otherwise returns an invalid text line.

        The text layout creates a new line object that starts after the last line in the layout, or at the beginning if the layout is empty. The layout maintains an internal cursor, and each line is filled with text from the cursor position onwards when the **QTextLine::setLineWidth** () function is called.

        Once **QTextLine::setLineWidth** () is called, a new line can be created and filled with text. Repeating this process will lay out the whole block of text contained in the **QTextLayout** . If there is no text left to be inserted into the layout, the **QTextLine**  returned will not be valid (isValid() will return false).
        """
        ...

    def cursorMoveStyle(self) -> PySide2.QtCore.Qt.CursorMoveStyle:
        """
        **Qt::CursorMoveStyle QTextLayout::cursorMoveStyle() const**

        The cursor movement style of this **QTextLayout** . The default is **Qt::LogicalMoveStyle** .

        **See also** **setCursorMoveStyle** ().
        """
        ...

    def draw(
        self,
        p: PySide2.QtGui.QPainter,
        pos: PySide2.QtCore.QPointF,
        selections: typing.List = ...,
        clip: PySide2.QtCore.QRectF = ...,
    ) -> None:
        """
        **void QTextLayout::draw(QPainter * p , const QPointF & pos , const QVector<QTextLayout::FormatRange> & selections = QVector<FormatRange>(), const QRectF & clip = QRectF()) const**

        Draws the whole layout on the painter **p** at the position specified by **pos**. The rendered layout includes the given **selections** and is clipped within the rectangle specified by **clip**.
        """
        ...

    @typing.overload
    def drawCursor(
        self,
        p: PySide2.QtGui.QPainter,
        pos: PySide2.QtCore.QPointF,
        cursorPosition: int,
    ) -> None:
        """
        **void QTextLayout::drawCursor(QPainter * painter , const QPointF & position , int cursorPosition , int width ) const**

        Draws a text cursor with the current pen and the specified **width** at the given **position** using the **painter** specified. The corresponding position within the text is specified by **cursorPosition**.
        """
        ...

    @typing.overload
    def drawCursor(
        self,
        p: PySide2.QtGui.QPainter,
        pos: PySide2.QtCore.QPointF,
        cursorPosition: int,
        width: int,
    ) -> None:
        """
        **void QTextLayout::drawCursor(QPainter * painter , const QPointF & position , int cursorPosition , int width ) const**

        Draws a text cursor with the current pen and the specified **width** at the given **position** using the **painter** specified. The corresponding position within the text is specified by **cursorPosition**.
        """
        ...

    def endLayout(self) -> None:
        """
        **void QTextLayout::endLayout()**

        Ends the layout process.

        **See also** **beginLayout** ().
        """
        ...

    def font(self) -> PySide2.QtGui.QFont:
        """
        **QFont QTextLayout::font() const**

        Returns the current font that is used for the layout, or a default font if none is set.

        **See also** **setFont** ().
        """
        ...

    def formats(self) -> typing.List:
        """
        **QVector<QTextLayout::FormatRange> QTextLayout::formats() const**

        Returns the list of additional formats supported by the text layout.

        This function was introduced in Qt 5.6.

        **See also** **setFormats** () and **clearFormats** ().
        """
        ...

    def isValidCursorPosition(self, pos: int) -> bool:
        """
        **bool QTextLayout::isValidCursorPosition(int pos ) const**

        / Returns `true` if position **pos** is a valid cursor position.

        In a Unicode context some positions in the text are not valid cursor positions, because the position is inside a Unicode surrogate or a grapheme cluster.

        A grapheme cluster is a sequence of two or more Unicode characters that form one indivisible entity on the screen. For example the latin character `Ä' can be represented in Unicode by two characters, `A' (0x41), and the combining diaresis (0x308). A text cursor can only validly be positioned before or after these two characters, never between them since that wouldn't make sense. In indic languages every syllable forms a grapheme cluster.
        """
        ...

    def leftCursorPosition(self, oldPos: int) -> int:
        """
        **int QTextLayout::leftCursorPosition(int oldPos ) const**

        Returns the cursor position to the left of **oldPos** , next to it. It's dependent on the visual position of characters, after bi-directional reordering.

        **See also** **rightCursorPosition** () and **previousCursorPosition** ().
        """
        ...

    def lineAt(self, i: int) -> PySide2.QtGui.QTextLine:
        """
        **QTextLine QTextLayout::lineAt(int i ) const**

        Returns the **i** -th line of text in this text layout.

        **See also** **lineCount** () and **lineForTextPosition** ().
        """
        ...

    def lineCount(self) -> int:
        """
        **int QTextLayout::lineCount() const**

        Returns the number of lines in this text layout.

        **See also** **lineAt** ().
        """
        ...

    def lineForTextPosition(self, pos: int) -> PySide2.QtGui.QTextLine:
        """
        **QTextLine QTextLayout::lineForTextPosition(int pos ) const**

        Returns the line that contains the cursor position specified by **pos**.

        **See also** **isValidCursorPosition** () and **lineAt** ().
        """
        ...

    def maximumWidth(self) -> float:
        """
        **qreal QTextLayout::maximumWidth() const**

        The maximum width the layout could expand to; this is essentially the width of the entire text.

        **Warning:** This function only returns a valid value after the layout has been done.

        **See also** **minimumWidth** ().
        """
        ...

    def minimumWidth(self) -> float:
        """
        **qreal QTextLayout::minimumWidth() const**

        The minimum width the layout needs. This is the width of the layout's smallest non-breakable substring.

        **Warning:** This function only returns a valid value after the layout has been done.

        **See also** **maximumWidth** ().
        """
        ...

    def nextCursorPosition(
        self, oldPos: int, mode: PySide2.QtGui.QTextLayout.CursorMode = ...
    ) -> int:
        """
        **int QTextLayout::nextCursorPosition(int oldPos , QTextLayout::CursorMode mode = SkipCharacters) const**

        Returns the next valid cursor position after **oldPos** that respects the given cursor **mode**. Returns value of **oldPos** , if **oldPos** is not a valid cursor position.

        **See also** **isValidCursorPosition** () and **previousCursorPosition** ().
        """
        ...

    def position(self) -> PySide2.QtCore.QPointF:
        """
        **QPointF QTextLayout::position() const**

        The global position of the layout. This is independent of the bounding rectangle and of the layout process.

        This function was introduced in Qt 4.2.

        **See also** **setPosition** ().
        """
        ...

    def preeditAreaPosition(self) -> int:
        """
        **int QTextLayout::preeditAreaPosition() const**

        Returns the position of the area in the text layout that will be processed before editing occurs.

        **See also** **preeditAreaText** ().
        """
        ...

    def preeditAreaText(self) -> str:
        """
        **QString QTextLayout::preeditAreaText() const**

        Returns the text that is inserted in the layout before editing occurs.

        **See also** **preeditAreaPosition** ().
        """
        ...

    def previousCursorPosition(
        self, oldPos: int, mode: PySide2.QtGui.QTextLayout.CursorMode = ...
    ) -> int:
        """
        **int QTextLayout::previousCursorPosition(int oldPos , QTextLayout::CursorMode mode = SkipCharacters) const**

        Returns the first valid cursor position before **oldPos** that respects the given cursor **mode**. Returns value of **oldPos** , if **oldPos** is not a valid cursor position.

        **See also** **isValidCursorPosition** () and **nextCursorPosition** ().
        """
        ...

    def rightCursorPosition(self, oldPos: int) -> int:
        """
        **int QTextLayout::rightCursorPosition(int oldPos ) const**

        Returns the cursor position to the right of **oldPos** , next to it. It's dependent on the visual position of characters, after bi-directional reordering.

        **See also** **leftCursorPosition** () and **nextCursorPosition** ().
        """
        ...

    def setAdditionalFormats(self, overrides: typing.Sequence) -> None:
        ...

    def setCacheEnabled(self, enable: bool) -> None:
        """
        **void QTextLayout::setCacheEnabled(bool enable )**

        Enables caching of the complete layout information if **enable** is true; otherwise disables layout caching. Usually **QTextLayout**  throws most of the layouting information away after a call to **endLayout** () to reduce memory consumption. If you however want to draw the laid out text directly afterwards enabling caching might speed up drawing significantly.

        **See also** **cacheEnabled** ().
        """
        ...

    def setCursorMoveStyle(self, style: PySide2.QtCore.Qt.CursorMoveStyle) -> None:
        """
        **void QTextLayout::setCursorMoveStyle(Qt::CursorMoveStyle style )**

        Sets the visual cursor movement style to the given **style**. If the **QTextLayout**  is backed by a document, you can ignore this and use the option in **QTextDocument** , this option is for widgets like **QLineEdit**  or custom widgets without a **QTextDocument** . Default value is **Qt::LogicalMoveStyle** .

        **See also** **cursorMoveStyle** ().
        """
        ...

    def setFlags(self, flags: int) -> None:
        ...

    def setFont(self, f: PySide2.QtGui.QFont) -> None:
        """
        **void QTextLayout::setFont(const QFont & font )**

        Sets the layout's font to the given **font**. The layout is invalidated and must be laid out again.

        **See also** **font** ().
        """
        ...

    def setFormats(self, overrides: typing.List) -> None:
        """
        **void QTextLayout::setFormats(const QVector<QTextLayout::FormatRange> & formats )**

        Sets the additional formats supported by the text layout to **formats**. The formats are applied with preedit area text in place.

        This function was introduced in Qt 5.6.

        **See also** **formats** () and **clearFormats** ().
        """
        ...

    def setPosition(self, p: PySide2.QtCore.QPointF) -> None:
        """
        **void QTextLayout::setPosition(const QPointF & p )**

        Moves the text layout to point **p**.

        **See also** **position** ().
        """
        ...

    def setPreeditArea(self, position: int, text: str) -> None:
        """
        **void QTextLayout::setPreeditArea(int position , const QString & text )**

        Sets the **position** and **text** of the area in the layout that is processed before editing occurs. The layout is invalidated and must be laid out again.

        **See also** **preeditAreaPosition** () and **preeditAreaText** ().
        """
        ...

    def setRawFont(self, rawFont: PySide2.QtGui.QRawFont) -> None:
        ...

    def setText(self, string: str) -> None:
        """
        **void QTextLayout::setText(const QString & string )**

        Sets the layout's text to the given **string**. The layout is invalidated and must be laid out again.

        Notice that when using this **QTextLayout**  as part of a **QTextDocument**  this method will have no effect.

        **See also** **text** ().
        """
        ...

    def setTextOption(self, option: PySide2.QtGui.QTextOption) -> None:
        """
        **void QTextLayout::setTextOption(const QTextOption & option )**

        Sets the text option structure that controls the layout process to the given **option**.

        **See also** **textOption** ().
        """
        ...

    def text(self) -> str:
        """
        **QString QTextLayout::text() const**

        Returns the layout's text.

        **See also** **setText** ().
        """
        ...

    def textOption(self) -> PySide2.QtGui.QTextOption:
        """
        **const QTextOption &QTextLayout::textOption() const**

        Returns the current text option used to control the layout process.

        **See also** **setTextOption** ().
        """
        ...
