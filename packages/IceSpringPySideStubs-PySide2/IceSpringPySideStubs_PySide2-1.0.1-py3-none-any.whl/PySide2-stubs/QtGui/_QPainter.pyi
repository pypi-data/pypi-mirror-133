"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPainter(object):
    """
    **Detailed Description**

    QPainter provides highly optimized functions to do most of the drawing GUI programs require. It can draw everything from simple lines to complex shapes like pies and chords. It can also draw aligned text and pixmaps. Normally, it draws in a "natural" coordinate system, but it can also do view and world transformation. QPainter can operate on any object that inherits the **QPaintDevice**  class.

    The common use of QPainter is inside a widget\'s paint event: Construct and customize (e.g. set the pen or the brush) the painter. Then draw. Remember to destroy the QPainter object after drawing. For example:

    void SimpleExampleWidget::paintEvent(**QPaintEvent**  *)
        {
            **QPainter**  painter(this);
            painter.setPen(Qt::blue);
            painter.setFont(**QFont** ("Arial", 30));
            painter.drawText(rect(), Qt::AlignCenter, "Qt");
        }

    The core functionality of QPainter is drawing, but the class also provide several functions that allows you to customize QPainter\'s settings and its rendering quality, and others that enable clipping. In addition you can control how different shapes are merged together by specifying the painter\'s composition mode.

    The **isActive** () function indicates whether the painter is active. A painter is activated by the **begin** () function and the constructor that takes a **QPaintDevice**  argument. The **end** () function, and the destructor, deactivates it.

    Together with the **QPaintDevice**  and **QPaintEngine**  classes, QPainter form the basis for Qt\'s paint system. QPainter is the class used to perform drawing operations. **QPaintDevice**  represents a device that can be painted on using a QPainter. **QPaintEngine**  provides the interface that the painter uses to draw onto different types of devices. If the painter is active, **device** () returns the paint device on which the painter paints, and **paintEngine** () returns the paint engine that the painter is currently operating on. For more information, see the **Paint System** .

    Sometimes it is desirable to make someone else paint on an unusual **QPaintDevice** . QPainter supports a static function to do this, setRedirected().

    **Warning:** When the paintdevice is a widget, QPainter can only be used inside a paintEvent() function or in a function called by paintEvent().

    **Settings**

    There are several settings that you can customize to make QPainter draw according to your preferences:

    * **font** () is the font used for drawing text. If the painter **isActive** (), you can retrieve information about the currently set font, and its metrics, using the **fontInfo** () and **fontMetrics** () functions respectively.
      * **brush** () defines the color or pattern that is used for filling shapes.
      * **pen** () defines the color or stipple that is used for drawing lines or boundaries.
      * **backgroundMode** () defines whether there is a **background** () or not, i.e it is either **Qt::OpaqueMode**  or **Qt::TransparentMode** .
      * **background** () only applies when **backgroundMode** () is **Qt::OpaqueMode**  and **pen** () is a stipple. In that case, it describes the color of the background pixels in the stipple.
      * **brushOrigin** () defines the origin of the tiled brushes, normally the origin of widget\'s background.
      * **viewport** (), **window** (), **worldTransform** () make up the painter\'s coordinate transformation system. For more information, see the **Coordinate Transformations**  section and the **Coordinate System**  documentation.
      * **hasClipping** () tells whether the painter clips at all. (The paint device clips, too.) If the painter clips, it clips to **clipRegion** ().
      * **layoutDirection** () defines the layout direction used by the painter when drawing text.
      * **worldMatrixEnabled** () tells whether world transformation is enabled.
      * **viewTransformEnabled** () tells whether view transformation is enabled.

    Note that some of these settings mirror settings in some paint devices, e.g. **QWidget::font** (). The **QPainter::begin** () function (or equivalently the QPainter constructor) copies these attributes from the paint device.

    You can at any time save the QPainter\'s state by calling the **save** () function which saves all the available settings on an internal stack. The **restore** () function pops them back.

    **Drawing**

    QPainter provides functions to draw most primitives: **drawPoint** (), **drawPoints** (), **drawLine** (), **drawRect** (), **drawRoundedRect** (), **drawEllipse** (), **drawArc** (), **drawPie** (), **drawChord** (), **drawPolyline** (), **drawPolygon** (), **drawConvexPolygon** () and drawCubicBezier(). The two convenience functions, **drawRects** () and **drawLines** (), draw the given number of rectangles or lines in the given array of **QRects**  or **QLines**  using the current pen and brush.

    The QPainter class also provides the **fillRect** () function which fills the given **QRect** , with the given **QBrush** , and the **eraseRect** () function that erases the area inside the given rectangle.

    All of these functions have both integer and floating point versions.

    ![](images/qpainter-basicdrawing.png)**Basic Drawing Example**

    The **Basic Drawing**  example shows how to display basic graphics primitives in a variety of styles using the QPainter class.

    If you need to draw a complex shape, especially if you need to do so repeatedly, consider creating a **QPainterPath**  and drawing it using **drawPath** ().

    **Painter Paths example**

    The **QPainterPath**  class provides a container for painting operations, enabling graphical shapes to be constructed and reused.

    The **Painter Paths**  example shows how painter paths can be used to build complex shapes for rendering.

    ![](images/qpainter-painterpaths.png)

    QPainter also provides the **fillPath** () function which fills the given **QPainterPath**  with the given **QBrush** , and the **strokePath** () function that draws the outline of the given path (i.e. strokes the path).

    See also the **Vector Deformation**  example which shows how to use advanced vector techniques to draw text using a **QPainterPath** , the **Gradients**  example which shows the different types of gradients that are available in Qt, and the **Path Stroking**  example which shows Qt\'s built-in dash patterns and shows how custom patterns can be used to extend the range of available patterns.

    **Vector Deformation** **Gradients** **Path Stroking**
    ![](images/qpainter-vectordeformation.png)![](images/qpainter-gradients.png)![](images/qpainter-pathstroking.png)

    Text drawing is done using **drawText** (). When you need fine-grained positioning, **boundingRect** () tells you where a given **drawText** () command will draw.

    **Drawing Pixmaps and Images**

    There are functions to draw pixmaps/images, namely **drawPixmap** (), **drawImage** () and **drawTiledPixmap** (). Both **drawPixmap** () and **drawImage** () produce the same result, except that **drawPixmap** () is faster on-screen while **drawImage** () may be faster on a **QPrinter**  or other devices.

    There is a **drawPicture** () function that draws the contents of an entire **QPicture** . The **drawPicture** () function is the only function that disregards all the painter\'s settings as **QPicture**  has its own settings.

    **Drawing High Resolution Versions of Pixmaps and Images**

    High resolution versions of pixmaps have a **device pixel ratio** value larger than 1 (see **QImageReader** , **QPixmap::devicePixelRatio** ()). Should it match the value of the underlying **QPaintDevice** , it is drawn directly onto the device with no additional transformation applied.

    This is for example the case when drawing a **QPixmap**  of 64x64 pixels size with a device pixel ratio of 2 onto a high DPI screen which also has a device pixel ratio of 2. Note that the pixmap is then effectively 32x32 pixels in **user space**. Code paths in Qt that calculate layout geometry based on the pixmap size will use this size. The net effect of this is that the pixmap is displayed as high DPI pixmap rather than a large pixmap.

    **Rendering Quality**

    To get the optimal rendering result using QPainter, you should use the platform independent **QImage**  as paint device; i.e. using **QImage**  will ensure that the result has an identical pixel representation on any platform.

    The QPainter class also provides a means of controlling the rendering quality through its **RenderHint**  enum and the support for floating point precision: All the functions for drawing primitives has a floating point version. These are often used in combination with the **QPainter::Antialiasing**  render hint.

    ![](images/qpainter-concentriccircles.png)**Concentric Circles Example**

    The **Concentric Circles**  example shows the improved rendering quality that can be obtained using floating point precision and anti-aliasing when drawing custom widgets.

    The application\'s main window displays several widgets which are drawn using the various combinations of precision and anti-aliasing.

    The **RenderHint**  enum specifies flags to QPainter that may or may not be respected by any given engine. **QPainter::Antialiasing**  indicates that the engine should antialias edges of primitives if possible, **QPainter::TextAntialiasing**  indicates that the engine should antialias text if possible, and the **QPainter::SmoothPixmapTransform**  indicates that the engine should use a smooth pixmap transformation algorithm.

    The **renderHints** () function returns a flag that specifies the rendering hints that are set for this painter. Use the **setRenderHint** () function to set or clear the currently set **RenderHints** .

    **Coordinate Transformations**

    Normally, the QPainter operates on the device\'s own coordinate system (usually pixels), but QPainter has good support for coordinate transformations.

    nop**rotate** ()**scale** ()**translate** ()
    ![](images/qpainter-clock.png)![](images/qpainter-rotation.png)![](images/qpainter-scale.png)![](images/qpainter-translation.png)

    The most commonly used transformations are scaling, rotation, translation and shearing. Use the **scale** () function to scale the coordinate system by a given offset, the **rotate** () function to rotate it clockwise and **translate** () to translate it (i.e. adding a given offset to the points). You can also twist the coordinate system around the origin using the **shear** () function. See the **Affine Transformations**  example for a visualization of a sheared coordinate system.

    See also the **Transformations**  example which shows how transformations influence the way that QPainter renders graphics primitives. In particular it shows how the order of transformations affects the result.

    **Affine Transformations Example**

    The **Affine Transformations**  example shows Qt\'s ability to perform affine transformations on painting operations. The demo also allows the user to experiment with the transformation operations and see the results immediately.

    ![](images/qpainter-affinetransformations.png)

    All the tranformation operations operate on the transformation **worldTransform** (). A matrix transforms a point in the plane to another point. For more information about the transformation matrix, see the **Coordinate System**  and **QTransform**  documentation.

    The **setWorldTransform** () function can replace or add to the currently set **worldTransform** (). The **resetTransform** () function resets any transformations that were made using **translate** (), **scale** (), **shear** (), **rotate** (), **setWorldTransform** (), **setViewport** () and **setWindow** () functions. The **deviceTransform** () returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device. The latter function is only needed when using platform painting commands on the platform dependent handle, and the platform does not do transformations nativly.

    When drawing with QPainter, we specify points using logical coordinates which then are converted into the physical coordinates of the paint device. The mapping of the logical coordinates to the physical coordinates are handled by QPainter\'s **combinedTransform** (), a combination of **viewport** () and **window** () and **worldTransform** (). The **viewport** () represents the physical coordinates specifying an arbitrary rectangle, the **window** () describes the same rectangle in logical coordinates, and the **worldTransform** () is identical with the transformation matrix.

    See also **Coordinate System**

    **Clipping**

    QPainter can clip any drawing operation to a rectangle, a region, or a vector path. The current clip is available using the functions **clipRegion** () and **clipPath** (). Whether paths or regions are preferred (faster) depends on the underlying **paintEngine** (). For example, the **QImage**  paint engine prefers paths while the X11 paint engine prefers regions. Setting a clip is done in the painters logical coordinates.

    After QPainter\'s clipping, the paint device may also clip. For example, most widgets clip away the pixels used by child widgets, and most printers clip away an area near the edges of the paper. This additional clipping is not reflected by the return value of **clipRegion** () or **hasClipping** ().

    **Composition Modes**

    QPainter provides the **CompositionMode**  enum which defines the Porter-Duff rules for digital image compositing; it describes a model for combining the pixels in one image, the source, with the pixels in another image, the destination.

    The two most common forms of composition are **Source**  and **SourceOver** . **Source**  is used to draw opaque objects onto a paint device. In this mode, each pixel in the source replaces the corresponding pixel in the destination. In **SourceOver**  composition mode, the source object is transparent and is drawn on top of the destination.

    Note that composition transformation operates pixelwise. For that reason, there is a difference between using the graphic primitive itself and its bounding rectangle: The bounding rect contains pixels with alpha == 0 (i.e the pixels surrounding the primitive). These pixels will overwrite the other image\'s pixels, effectively clearing those, while the primitive only overwrites its own area.

    ![](images/qpainter-compositiondemo.png)**Composition Modes Example**

    The **Composition Modes**  example, available in Qt\'s examples directory, allows you to experiment with the various composition modes and see the results immediately.

    **Limitations**

    If you are using coordinates with Qt\'s raster-based paint engine, it is important to note that, while coordinates greater than +/- 215 can be used, any painting performed with coordinates outside this range is not guaranteed to be shown; the drawing may be clipped. This is due to the use of `short int` in the implementation.

    The outlines generated by Qt\'s stroker are only an approximation when dealing with curved shapes. It is in most cases impossible to represent the outline of a bezier curve segment using another bezier curve segment, and so Qt approximates the curve outlines by using several smaller curves. For performance reasons there is a limit to how many curves Qt uses for these outlines, and thus when using large pen widths or scales the outline error increases. To generate outlines with smaller errors it is possible to use the **QPainterPathStroker**  class, which has the setCurveThreshold member function which let\'s the user specify the error tolerance. Another workaround is to convert the paths to polygons first and then draw the polygons instead.

    **Performance**

    QPainter is a rich framework that allows developers to do a great variety of graphical operations, such as gradients, composition modes and vector graphics. And QPainter can do this across a variety of different hardware and software stacks. Naturally the underlying combination of hardware and software has some implications for performance, and ensuring that every single operation is fast in combination with all the various combinations of composition modes, brushes, clipping, transformation, etc, is close to an impossible task because of the number of permutations. As a compromise we have selected a subset of the QPainter API and backends, where performance is guaranteed to be as good as we can sensibly get it for the given combination of hardware and software.

    The backends we focus on as high-performance engines are:

    * Raster - This backend implements all rendering in pure software and is always used to render into QImages. For optimal performance only use the format types **QImage::Format_ARGB32_Premultiplied** , **QImage::Format_RGB32**  or **QImage::Format_RGB16** . Any other format, including **QImage::Format_ARGB32** , has significantly worse performance. This engine is used by default for **QWidget**  and **QPixmap** .
      * OpenGL 2.0 (ES) - This backend is the primary backend for hardware accelerated graphics. It can be run on desktop machines and embedded devices supporting the OpenGL 2.0 or OpenGL/ES 2.0 specification. This includes most graphics chips produced in the last couple of years. The engine can be enabled by using QPainter onto a **QOpenGLWidget** .

    These operations are:

    * Simple transformations, meaning translation and scaling, pluss 0, 90, 180, 270 degree rotations.
      * `drawPixmap()` in combination with simple transformations and opacity with non-smooth transformation mode (`QPainter::SmoothPixmapTransform` not enabled as a render hint).
      * Rectangle fills with solid color, two-color linear gradients and simple transforms.
      * Rectangular clipping with simple transformations and intersect clip.
      * Composition Modes `QPainter::CompositionMode_Source` and **QPainter::CompositionMode_SourceOver** .
      * Rounded rectangle filling using solid color and two-color linear gradients fills.
      * 3x3 patched pixmaps, via qDrawBorderPixmap.

    This list gives an indication of which features to safely use in an application where performance is critical. For certain setups, other operations may be fast too, but before making extensive use of them, it is recommended to benchmark and verify them on the system where the software will run in the end. There are also cases where expensive operations are ok to use, for instance when the result is cached in a **QPixmap** .

    **See also** **QPaintDevice** , **QPaintEngine** , **Qt SVG** , **Basic Drawing Example** , and **Drawing Utility Functions** .
    """

    CompositionMode_SourceOver: QPainter = ...
    Antialiasing: QPainter = ...
    CompositionMode_DestinationOver: QPainter = ...
    OpaqueHint: QPainter = ...
    CompositionMode_Clear: QPainter = ...
    TextAntialiasing: QPainter = ...
    CompositionMode_Source: QPainter = ...
    CompositionMode_Destination: QPainter = ...
    SmoothPixmapTransform: QPainter = ...
    CompositionMode_SourceIn: QPainter = ...
    CompositionMode_DestinationIn: QPainter = ...
    CompositionMode_SourceOut: QPainter = ...
    CompositionMode_DestinationOut: QPainter = ...
    HighQualityAntialiasing: QPainter = ...
    CompositionMode_SourceAtop: QPainter = ...
    CompositionMode_DestinationAtop: QPainter = ...
    CompositionMode_Xor: QPainter = ...
    CompositionMode_Plus: QPainter = ...
    CompositionMode_Multiply: QPainter = ...
    CompositionMode_Screen: QPainter = ...
    CompositionMode_Overlay: QPainter = ...
    CompositionMode_Darken: QPainter = ...
    NonCosmeticDefaultPen: QPainter = ...
    CompositionMode_Lighten: QPainter = ...
    CompositionMode_ColorDodge: QPainter = ...
    CompositionMode_ColorBurn: QPainter = ...
    CompositionMode_HardLight: QPainter = ...
    CompositionMode_SoftLight: QPainter = ...
    CompositionMode_Difference: QPainter = ...
    CompositionMode_Exclusion: QPainter = ...
    RasterOp_SourceOrDestination: QPainter = ...
    RasterOp_SourceAndDestination: QPainter = ...
    RasterOp_SourceXorDestination: QPainter = ...
    RasterOp_NotSourceAndNotDestination: QPainter = ...
    RasterOp_NotSourceOrNotDestination: QPainter = ...
    RasterOp_NotSourceXorDestination: QPainter = ...
    RasterOp_NotSource: QPainter = ...
    RasterOp_NotSourceAndDestination: QPainter = ...
    Qt4CompatiblePainting: QPainter = ...
    RasterOp_SourceAndNotDestination: QPainter = ...
    RasterOp_NotSourceOrDestination: QPainter = ...
    RasterOp_SourceOrNotDestination: QPainter = ...
    RasterOp_ClearDestination: QPainter = ...
    RasterOp_SetDestination: QPainter = ...
    RasterOp_NotDestination: QPainter = ...
    LosslessImageRendering: QPainter = ...

    class CompositionMode(object):
        CompositionMode_SourceOver: QPainter.CompositionMode = ...
        CompositionMode_DestinationOver: QPainter.CompositionMode = ...
        CompositionMode_Clear: QPainter.CompositionMode = ...
        CompositionMode_Source: QPainter.CompositionMode = ...
        CompositionMode_Destination: QPainter.CompositionMode = ...
        CompositionMode_SourceIn: QPainter.CompositionMode = ...
        CompositionMode_DestinationIn: QPainter.CompositionMode = ...
        CompositionMode_SourceOut: QPainter.CompositionMode = ...
        CompositionMode_DestinationOut: QPainter.CompositionMode = ...
        CompositionMode_SourceAtop: QPainter.CompositionMode = ...
        CompositionMode_DestinationAtop: QPainter.CompositionMode = ...
        CompositionMode_Xor: QPainter.CompositionMode = ...
        CompositionMode_Plus: QPainter.CompositionMode = ...
        CompositionMode_Multiply: QPainter.CompositionMode = ...
        CompositionMode_Screen: QPainter.CompositionMode = ...
        CompositionMode_Overlay: QPainter.CompositionMode = ...
        CompositionMode_Darken: QPainter.CompositionMode = ...
        CompositionMode_Lighten: QPainter.CompositionMode = ...
        CompositionMode_ColorDodge: QPainter.CompositionMode = ...
        CompositionMode_ColorBurn: QPainter.CompositionMode = ...
        CompositionMode_HardLight: QPainter.CompositionMode = ...
        CompositionMode_SoftLight: QPainter.CompositionMode = ...
        CompositionMode_Difference: QPainter.CompositionMode = ...
        CompositionMode_Exclusion: QPainter.CompositionMode = ...
        RasterOp_SourceOrDestination: QPainter.CompositionMode = ...
        RasterOp_SourceAndDestination: QPainter.CompositionMode = ...
        RasterOp_SourceXorDestination: QPainter.CompositionMode = ...
        RasterOp_NotSourceAndNotDestination: QPainter.CompositionMode = ...
        RasterOp_NotSourceOrNotDestination: QPainter.CompositionMode = ...
        RasterOp_NotSourceXorDestination: QPainter.CompositionMode = ...
        RasterOp_NotSource: QPainter.CompositionMode = ...
        RasterOp_NotSourceAndDestination: QPainter.CompositionMode = ...
        RasterOp_SourceAndNotDestination: QPainter.CompositionMode = ...
        RasterOp_NotSourceOrDestination: QPainter.CompositionMode = ...
        RasterOp_SourceOrNotDestination: QPainter.CompositionMode = ...
        RasterOp_ClearDestination: QPainter.CompositionMode = ...
        RasterOp_SetDestination: QPainter.CompositionMode = ...
        RasterOp_NotDestination: QPainter.CompositionMode = ...

    class PixmapFragment(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, PixmapFragment: PySide2.QtGui.QPainter.PixmapFragment
        ) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        @staticmethod
        def create(
            pos: PySide2.QtCore.QPointF,
            sourceRect: PySide2.QtCore.QRectF,
            scaleX: float = ...,
            scaleY: float = ...,
            rotation: float = ...,
            opacity: float = ...,
        ) -> PySide2.QtGui.QPainter.PixmapFragment:
            ...

    class PixmapFragmentHint(object):
        OpaqueHint: QPainter.PixmapFragmentHint = ...

    class PixmapFragmentHints(object):
        ...

    class RenderHint(object):
        Antialiasing: QPainter.RenderHint = ...
        TextAntialiasing: QPainter.RenderHint = ...
        SmoothPixmapTransform: QPainter.RenderHint = ...
        HighQualityAntialiasing: QPainter.RenderHint = ...
        NonCosmeticDefaultPen: QPainter.RenderHint = ...
        Qt4CompatiblePainting: QPainter.RenderHint = ...
        LosslessImageRendering: QPainter.RenderHint = ...

    class RenderHints(object):
        ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QPainter::QPainter()**

        Constructs a painter.

        **See also** **begin** () and **end** ().
        """
        ...

    @typing.overload
    def __init__(self, arg__1: PySide2.QtGui.QPaintDevice) -> None:
        """
        **QPainter::QPainter()**

        Constructs a painter.

        **See also** **begin** () and **end** ().
        """
        ...

    def background(self) -> PySide2.QtGui.QBrush:
        """
        **const QBrush &QPainter::background() const**

        Returns the current background brush.

        **See also** **setBackground** () and **Settings** .
        """
        ...

    def backgroundMode(self) -> PySide2.QtCore.Qt.BGMode:
        """
        **Qt::BGMode QPainter::backgroundMode() const**

        Returns the current background mode.

        **See also** **setBackgroundMode** () and **Settings** .
        """
        ...

    def begin(self, arg__1: PySide2.QtGui.QPaintDevice) -> bool:
        """
        **bool QPainter::begin(QPaintDevice * device )**

        Begins painting the paint **device** and returns `true` if successful; otherwise returns `false`.

        Notice that all painter settings (**setPen** (), **setBrush** () etc.) are reset to default values when begin() is called.

        The errors that can occur are serious problems, such as these:

        painter->begin(0); // impossible - paint device cannot be 0

            **QPixmap**  image(0, 0);
            painter->begin(&image); // impossible - image.isNull() == true;

            painter->begin(myWidget);
            painter2->begin(myWidget); // impossible - only one painter at a time

        Note that most of the time, you can use one of the constructors instead of begin(), and that **end** () is automatically done at destruction.

        **Warning:** A paint device can only be painted by one painter at a time.

        **Warning:** Painting on a **QImage**  with the format **QImage::Format_Indexed8**  is not supported.

        **See also** **end** () and **QPainter** ().
        """
        ...

    def beginNativePainting(self) -> None:
        """
        **void QPainter::beginNativePainting()**

        Flushes the painting pipeline and prepares for the user issuing commands directly to the underlying graphics context. Must be followed by a call to **endNativePainting** ().

        Note that only the states the underlying paint engine changes will be reset to their respective default states. The states we reset may change from release to release. The following states are currently reset in the OpenGL 2 engine:

        * blending is disabled
          * the depth, stencil and scissor tests are disabled
          * the active texture unit is reset to 0
          * the depth mask, depth function and the clear depth are reset to their default values
          * the stencil mask, stencil operation and stencil function are reset to their default values
          * the current color is reset to solid white

        If, for example, the OpenGL polygon mode is changed by the user inside a beginNativePaint()/**endNativePainting** () block, it will not be reset to the default state by **endNativePainting** (). Here is an example that shows intermixing of painter commands and raw OpenGL commands:

        **QPainter**  painter(this);
            painter.fillRect(0, 0, 128, 128, Qt::green);
            painter.beginNativePainting();

            glEnable(GL_SCISSOR_TEST);
            glScissor(0, 0, 64, 64);

            glClearColor(1, 0, 0, 1);
            glClear(GL_COLOR_BUFFER_BIT);

            glDisable(GL_SCISSOR_TEST);

            painter.endNativePainting();

        This function was introduced in Qt 4.6.

        **See also** **endNativePainting** ().
        """
        ...

    @typing.overload
    def boundingRect(
        self, rect: PySide2.QtCore.QRect, flags: int, text: str
    ) -> PySide2.QtCore.QRect:
        """
        **QRectF QPainter::boundingRect(const QRectF & rectangle , int flags , const QString & text )**

        Returns the bounding rectangle of the **text** as it will appear when drawn inside the given **rectangle** with the specified **flags** using the currently set **font** (); i.e the function tells you where the **drawText** () function will draw when given the same arguments.

        If the **text** does not fit within the given **rectangle** using the specified **flags** , the function returns the required rectangle.

        The **flags** argument is a bitwise OR of the following flags:

        * **Qt::AlignLeft**
          * **Qt::AlignRight**
          * **Qt::AlignHCenter**
          * **Qt::AlignTop**
          * **Qt::AlignBottom**
          * **Qt::AlignVCenter**
          * **Qt::AlignCenter**
          * **Qt::TextSingleLine**
          * **Qt::TextExpandTabs**
          * **Qt::TextShowMnemonic**
          * **Qt::TextWordWrap**
          * **Qt::TextIncludeTrailingSpaces**

        If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.

        **See also** **drawText** (), **Qt::Alignment** , and **Qt::TextFlag** .
        """
        ...

    @typing.overload
    def boundingRect(
        self, rect: PySide2.QtCore.QRectF, flags: int, text: str
    ) -> PySide2.QtCore.QRectF:
        """
        **QRectF QPainter::boundingRect(const QRectF & rectangle , int flags , const QString & text )**

        Returns the bounding rectangle of the **text** as it will appear when drawn inside the given **rectangle** with the specified **flags** using the currently set **font** (); i.e the function tells you where the **drawText** () function will draw when given the same arguments.

        If the **text** does not fit within the given **rectangle** using the specified **flags** , the function returns the required rectangle.

        The **flags** argument is a bitwise OR of the following flags:

        * **Qt::AlignLeft**
          * **Qt::AlignRight**
          * **Qt::AlignHCenter**
          * **Qt::AlignTop**
          * **Qt::AlignBottom**
          * **Qt::AlignVCenter**
          * **Qt::AlignCenter**
          * **Qt::TextSingleLine**
          * **Qt::TextExpandTabs**
          * **Qt::TextShowMnemonic**
          * **Qt::TextWordWrap**
          * **Qt::TextIncludeTrailingSpaces**

        If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.

        **See also** **drawText** (), **Qt::Alignment** , and **Qt::TextFlag** .
        """
        ...

    @typing.overload
    def boundingRect(
        self, rect: PySide2.QtCore.QRectF, text: str, o: PySide2.QtGui.QTextOption = ...
    ) -> PySide2.QtCore.QRectF:
        """
        **QRectF QPainter::boundingRect(const QRectF & rectangle , int flags , const QString & text )**

        Returns the bounding rectangle of the **text** as it will appear when drawn inside the given **rectangle** with the specified **flags** using the currently set **font** (); i.e the function tells you where the **drawText** () function will draw when given the same arguments.

        If the **text** does not fit within the given **rectangle** using the specified **flags** , the function returns the required rectangle.

        The **flags** argument is a bitwise OR of the following flags:

        * **Qt::AlignLeft**
          * **Qt::AlignRight**
          * **Qt::AlignHCenter**
          * **Qt::AlignTop**
          * **Qt::AlignBottom**
          * **Qt::AlignVCenter**
          * **Qt::AlignCenter**
          * **Qt::TextSingleLine**
          * **Qt::TextExpandTabs**
          * **Qt::TextShowMnemonic**
          * **Qt::TextWordWrap**
          * **Qt::TextIncludeTrailingSpaces**

        If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.

        **See also** **drawText** (), **Qt::Alignment** , and **Qt::TextFlag** .
        """
        ...

    @typing.overload
    def boundingRect(
        self, x: int, y: int, w: int, h: int, flags: int, text: str
    ) -> PySide2.QtCore.QRect:
        """
        **QRectF QPainter::boundingRect(const QRectF & rectangle , int flags , const QString & text )**

        Returns the bounding rectangle of the **text** as it will appear when drawn inside the given **rectangle** with the specified **flags** using the currently set **font** (); i.e the function tells you where the **drawText** () function will draw when given the same arguments.

        If the **text** does not fit within the given **rectangle** using the specified **flags** , the function returns the required rectangle.

        The **flags** argument is a bitwise OR of the following flags:

        * **Qt::AlignLeft**
          * **Qt::AlignRight**
          * **Qt::AlignHCenter**
          * **Qt::AlignTop**
          * **Qt::AlignBottom**
          * **Qt::AlignVCenter**
          * **Qt::AlignCenter**
          * **Qt::TextSingleLine**
          * **Qt::TextExpandTabs**
          * **Qt::TextShowMnemonic**
          * **Qt::TextWordWrap**
          * **Qt::TextIncludeTrailingSpaces**

        If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.

        **See also** **drawText** (), **Qt::Alignment** , and **Qt::TextFlag** .
        """
        ...

    def brush(self) -> PySide2.QtGui.QBrush:
        """
        **const QBrush &QPainter::brush() const**

        Returns the painter's current brush.

        **See also** **QPainter::setBrush** () and **Settings** .
        """
        ...

    def brushOrigin(self) -> PySide2.QtCore.QPoint:
        """
        **QPoint QPainter::brushOrigin() const**

        Returns the currently set brush origin.

        **See also** **setBrushOrigin** () and **Settings** .
        """
        ...

    def clipBoundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **QRectF QPainter::clipBoundingRect() const**

        Returns the bounding rectangle of the current clip if there is a clip; otherwise returns an empty rectangle. Note that the clip region is given in logical coordinates.

        The bounding rectangle is not guaranteed to be tight.

        This function was introduced in Qt 4.8.

        **See also** **setClipRect** (), **setClipPath** (), and **setClipRegion** ().
        """
        ...

    def clipPath(self) -> PySide2.QtGui.QPainterPath:
        """
        **QPainterPath QPainter::clipPath() const**

        Returns the current clip path in logical coordinates.

        **Warning:** **QPainter**  does not store the combined clip explicitly as this is handled by the underlying **QPaintEngine** , so the path is recreated on demand and transformed to the current logical coordinate system. This is potentially an expensive operation.

        **See also** **setClipPath** (), **clipRegion** (), and **setClipping** ().
        """
        ...

    def clipRegion(self) -> PySide2.QtGui.QRegion:
        """
        **QRegion QPainter::clipRegion() const**

        Returns the currently set clip region. Note that the clip region is given in logical coordinates.

        **Warning:** **QPainter**  does not store the combined clip explicitly as this is handled by the underlying **QPaintEngine** , so the path is recreated on demand and transformed to the current logical coordinate system. This is potentially an expensive operation.

        **See also** **setClipRegion** (), **clipPath** (), and **setClipping** ().
        """
        ...

    def combinedMatrix(self) -> PySide2.QtGui.QMatrix:
        ...

    def combinedTransform(self) -> PySide2.QtGui.QTransform:
        """
        **QTransform QPainter::combinedTransform() const**

        Returns the transformation matrix combining the current window/viewport and world transformation.

        **See also** **setWorldTransform** (), **setWindow** (), and **setViewport** ().
        """
        ...

    def compositionMode(self) -> PySide2.QtGui.QPainter.CompositionMode:
        """
        **QPainter::CompositionMode QPainter::compositionMode() const**

        Returns the current composition mode.

        **See also** **CompositionMode**  and **setCompositionMode** ().
        """
        ...

    def device(self) -> PySide2.QtGui.QPaintDevice:
        """
        **QPaintDevice *QPainter::device() const**

        Returns the paint device on which this painter is currently painting, or `nullptr` if the painter is not active.

        **See also** **isActive** ().
        """
        ...

    def deviceMatrix(self) -> PySide2.QtGui.QMatrix:
        ...

    def deviceTransform(self) -> PySide2.QtGui.QTransform:
        """
        **const QTransform &QPainter::deviceTransform() const**

        Returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device.

        This function is **only** needed when using platform painting commands on the platform dependent handle (**Qt::HANDLE** ), and the platform does not do transformations nativly.

        The **QPaintEngine::PaintEngineFeature**  enum can be queried to determine whether the platform performs the transformations or not.

        **See also** **worldTransform** () and **QPaintEngine::hasFeature** ().
        """
        ...

    @typing.overload
    def drawArc(self, arg__1: PySide2.QtCore.QRect, a: int, alen: int) -> None:
        """
        **void QPainter::drawArc(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws the arc defined by the given **rectangle** , **startAngle** and **spanAngle**.

        The **startAngle** and **spanAngle** must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-arc.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawArc(rectangle, startAngle, spanAngle);

        **See also** **drawPie** (), **drawChord** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawArc(self, rect: PySide2.QtCore.QRectF, a: int, alen: int) -> None:
        """
        **void QPainter::drawArc(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws the arc defined by the given **rectangle** , **startAngle** and **spanAngle**.

        The **startAngle** and **spanAngle** must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-arc.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawArc(rectangle, startAngle, spanAngle);

        **See also** **drawPie** (), **drawChord** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawArc(self, x: int, y: int, w: int, h: int, a: int, alen: int) -> None:
        """
        **void QPainter::drawArc(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws the arc defined by the given **rectangle** , **startAngle** and **spanAngle**.

        The **startAngle** and **spanAngle** must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-arc.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawArc(rectangle, startAngle, spanAngle);

        **See also** **drawPie** (), **drawChord** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawChord(self, arg__1: PySide2.QtCore.QRect, a: int, alen: int) -> None:
        """
        **void QPainter::drawChord(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws the chord defined by the given **rectangle** , **startAngle** and **spanAngle**. The chord is filled with the current **brush** ().

        The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-chord.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawChord(rect, startAngle, spanAngle);

        **See also** **drawArc** (), **drawPie** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawChord(self, rect: PySide2.QtCore.QRectF, a: int, alen: int) -> None:
        """
        **void QPainter::drawChord(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws the chord defined by the given **rectangle** , **startAngle** and **spanAngle**. The chord is filled with the current **brush** ().

        The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-chord.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawChord(rect, startAngle, spanAngle);

        **See also** **drawArc** (), **drawPie** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawChord(self, x: int, y: int, w: int, h: int, a: int, alen: int) -> None:
        """
        **void QPainter::drawChord(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws the chord defined by the given **rectangle** , **startAngle** and **spanAngle**. The chord is filled with the current **brush** ().

        The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-chord.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawChord(rect, startAngle, spanAngle);

        **See also** **drawArc** (), **drawPie** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawConvexPolygon(self, arg__1: typing.List) -> None:
        """
        **void QPainter::drawConvexPolygon(const QPointF * points , int pointCount )**

        Draws the convex polygon defined by the first **pointCount** points in the array **points** using the current pen.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawConvexPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** (). If the supplied polygon is not convex, i.e. it contains at least one angle larger than 180 degrees, the results are undefined.

        On some platforms (e.g. X11), the drawConvexPolygon() function can be faster than the **drawPolygon** () function.

        **See also** **drawPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawConvexPolygon(self, arg__1: typing.List) -> None:
        """
        **void QPainter::drawConvexPolygon(const QPointF * points , int pointCount )**

        Draws the convex polygon defined by the first **pointCount** points in the array **points** using the current pen.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawConvexPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** (). If the supplied polygon is not convex, i.e. it contains at least one angle larger than 180 degrees, the results are undefined.

        On some platforms (e.g. X11), the drawConvexPolygon() function can be faster than the **drawPolygon** () function.

        **See also** **drawPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawConvexPolygon(self, polygon: PySide2.QtGui.QPolygon) -> None:
        """
        **void QPainter::drawConvexPolygon(const QPointF * points , int pointCount )**

        Draws the convex polygon defined by the first **pointCount** points in the array **points** using the current pen.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawConvexPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** (). If the supplied polygon is not convex, i.e. it contains at least one angle larger than 180 degrees, the results are undefined.

        On some platforms (e.g. X11), the drawConvexPolygon() function can be faster than the **drawPolygon** () function.

        **See also** **drawPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawConvexPolygon(self, polygon: PySide2.QtGui.QPolygonF) -> None:
        """
        **void QPainter::drawConvexPolygon(const QPointF * points , int pointCount )**

        Draws the convex polygon defined by the first **pointCount** points in the array **points** using the current pen.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawConvexPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** (). If the supplied polygon is not convex, i.e. it contains at least one angle larger than 180 degrees, the results are undefined.

        On some platforms (e.g. X11), the drawConvexPolygon() function can be faster than the **drawPolygon** () function.

        **See also** **drawPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawEllipse(self, center: PySide2.QtCore.QPoint, rx: int, ry: int) -> None:
        """
        **void QPainter::drawEllipse(const QRectF & rectangle )**

        Draws the ellipse defined by the given **rectangle**.

        A filled ellipse has a size of **rectangle**.**size()** . A stroked ellipse has a size of **rectangle**.**size()**  plus the pen width.

        ![](images/qpainter-ellipse.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawEllipse(rectangle);

        **See also** **drawPie** () and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawEllipse(self, center: PySide2.QtCore.QPointF, rx: float, ry: float) -> None:
        """
        **void QPainter::drawEllipse(const QRectF & rectangle )**

        Draws the ellipse defined by the given **rectangle**.

        A filled ellipse has a size of **rectangle**.**size()** . A stroked ellipse has a size of **rectangle**.**size()**  plus the pen width.

        ![](images/qpainter-ellipse.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawEllipse(rectangle);

        **See also** **drawPie** () and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawEllipse(self, r: PySide2.QtCore.QRect) -> None:
        """
        **void QPainter::drawEllipse(const QRectF & rectangle )**

        Draws the ellipse defined by the given **rectangle**.

        A filled ellipse has a size of **rectangle**.**size()** . A stroked ellipse has a size of **rectangle**.**size()**  plus the pen width.

        ![](images/qpainter-ellipse.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawEllipse(rectangle);

        **See also** **drawPie** () and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawEllipse(self, r: PySide2.QtCore.QRectF) -> None:
        """
        **void QPainter::drawEllipse(const QRectF & rectangle )**

        Draws the ellipse defined by the given **rectangle**.

        A filled ellipse has a size of **rectangle**.**size()** . A stroked ellipse has a size of **rectangle**.**size()**  plus the pen width.

        ![](images/qpainter-ellipse.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawEllipse(rectangle);

        **See also** **drawPie** () and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawEllipse(self, x: int, y: int, w: int, h: int) -> None:
        """
        **void QPainter::drawEllipse(const QRectF & rectangle )**

        Draws the ellipse defined by the given **rectangle**.

        A filled ellipse has a size of **rectangle**.**size()** . A stroked ellipse has a size of **rectangle**.**size()**  plus the pen width.

        ![](images/qpainter-ellipse.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawEllipse(rectangle);

        **See also** **drawPie** () and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawImage(self, p: PySide2.QtCore.QPoint, image: PySide2.QtGui.QImage) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(
        self,
        p: PySide2.QtCore.QPoint,
        image: PySide2.QtGui.QImage,
        sr: PySide2.QtCore.QRect,
        flags: PySide2.QtCore.Qt.ImageConversionFlags = ...,
    ) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(self, p: PySide2.QtCore.QPointF, image: PySide2.QtGui.QImage) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(
        self,
        p: PySide2.QtCore.QPointF,
        image: PySide2.QtGui.QImage,
        sr: PySide2.QtCore.QRectF,
        flags: PySide2.QtCore.Qt.ImageConversionFlags = ...,
    ) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(self, r: PySide2.QtCore.QRect, image: PySide2.QtGui.QImage) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(self, r: PySide2.QtCore.QRectF, image: PySide2.QtGui.QImage) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(
        self,
        targetRect: PySide2.QtCore.QRect,
        image: PySide2.QtGui.QImage,
        sourceRect: PySide2.QtCore.QRect,
        flags: PySide2.QtCore.Qt.ImageConversionFlags = ...,
    ) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(
        self,
        targetRect: PySide2.QtCore.QRectF,
        image: PySide2.QtGui.QImage,
        sourceRect: PySide2.QtCore.QRectF,
        flags: PySide2.QtCore.Qt.ImageConversionFlags = ...,
    ) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawImage(
        self,
        x: int,
        y: int,
        image: PySide2.QtGui.QImage,
        sx: int = ...,
        sy: int = ...,
        sw: int = ...,
        sh: int = ...,
        flags: PySide2.QtCore.Qt.ImageConversionFlags = ...,
    ) -> None:
        """
        **void QPainter::drawImage(const QRectF & target , const QImage & image , const QRectF & source , Qt::ImageConversionFlags flags = Qt::AutoColor)**

        Draws the rectangular portion **source** of the given **image** into the **target** rectangle in the paint device.

        **Note:** The image is scaled to fit the rectangle, if both the image and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QImage::devicePixelRatio** ().

        If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the **flags** to specify how you would prefer this to happen.

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QImage**  image(":/images/myImage.png");

            **QPainter**  painter(this);
            painter.drawImage(target, image, source);

        **See also** **drawPixmap** () and **QImage::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawLine(self, line: PySide2.QtCore.QLine) -> None:
        """
        **void QPainter::drawLine(const QLineF & line )**

        Draws a line defined by **line**.

        ![](images/qpainter-line.png)



            **QLineF**  line(10.0, 80.0, 90.0, 20.0);

            **QPainter** (this);
            painter.drawLine(line);

        **See also** **drawLines** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawLine(self, line: PySide2.QtCore.QLineF) -> None:
        """
        **void QPainter::drawLine(const QLineF & line )**

        Draws a line defined by **line**.

        ![](images/qpainter-line.png)



            **QLineF**  line(10.0, 80.0, 90.0, 20.0);

            **QPainter** (this);
            painter.drawLine(line);

        **See also** **drawLines** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawLine(self, p1: PySide2.QtCore.QPoint, p2: PySide2.QtCore.QPoint) -> None:
        """
        **void QPainter::drawLine(const QLineF & line )**

        Draws a line defined by **line**.

        ![](images/qpainter-line.png)



            **QLineF**  line(10.0, 80.0, 90.0, 20.0);

            **QPainter** (this);
            painter.drawLine(line);

        **See also** **drawLines** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawLine(self, p1: PySide2.QtCore.QPointF, p2: PySide2.QtCore.QPointF) -> None:
        """
        **void QPainter::drawLine(const QLineF & line )**

        Draws a line defined by **line**.

        ![](images/qpainter-line.png)



            **QLineF**  line(10.0, 80.0, 90.0, 20.0);

            **QPainter** (this);
            painter.drawLine(line);

        **See also** **drawLines** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawLine(self, x1: int, y1: int, x2: int, y2: int) -> None:
        """
        **void QPainter::drawLine(const QLineF & line )**

        Draws a line defined by **line**.

        ![](images/qpainter-line.png)



            **QLineF**  line(10.0, 80.0, 90.0, 20.0);

            **QPainter** (this);
            painter.drawLine(line);

        **See also** **drawLines** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawLines(self, lines: typing.List) -> None:
        """
        **void QPainter::drawLines(const QLineF * lines , int lineCount )**

        Draws the first **lineCount** lines in the array **lines** using the current pen.

        **See also** **drawLine** () and **drawPolyline** ().
        """
        ...

    @typing.overload
    def drawLines(self, lines: typing.List) -> None:
        """
        **void QPainter::drawLines(const QLineF * lines , int lineCount )**

        Draws the first **lineCount** lines in the array **lines** using the current pen.

        **See also** **drawLine** () and **drawPolyline** ().
        """
        ...

    @typing.overload
    def drawLines(self, pointPairs: typing.List) -> None:
        """
        **void QPainter::drawLines(const QLineF * lines , int lineCount )**

        Draws the first **lineCount** lines in the array **lines** using the current pen.

        **See also** **drawLine** () and **drawPolyline** ().
        """
        ...

    @typing.overload
    def drawLines(self, pointPairs: typing.List) -> None:
        """
        **void QPainter::drawLines(const QLineF * lines , int lineCount )**

        Draws the first **lineCount** lines in the array **lines** using the current pen.

        **See also** **drawLine** () and **drawPolyline** ().
        """
        ...

    def drawPath(self, path: PySide2.QtGui.QPainterPath) -> None:
        """
        **void QPainter::drawPath(const QPainterPath & path )**

        Draws the given painter **path** using the current pen for outline and the current brush for filling.

        ![](images/qpainter-path.png)



            **QPainterPath**  path;
            path.moveTo(20, 80);
            path.lineTo(20, 30);
            path.cubicTo(80, 0, 50, 50, 80, 80);

            **QPainter**  painter(this);
            painter.drawPath(path);

        **See also** **the Painter Paths example**  and **the Vector Deformation example** .
        """
        ...

    @typing.overload
    def drawPicture(
        self, p: PySide2.QtCore.QPoint, picture: PySide2.QtGui.QPicture
    ) -> None:
        """
        **void QPainter::drawPicture(const QPointF & point , const QPicture & picture )**

        Replays the given **picture** at the given **point**.

        The **QPicture**  class is a paint device that records and replays **QPainter**  commands. A picture serializes the painter commands to an IO device in a platform-independent format. Everything that can be painted on a widget or pixmap can also be stored in a picture.

        This function does exactly the same as **QPicture::play** () when called with **point** = **QPoint** (0, 0).

        **QPicture**  picture;
            **QPointF**  point(10.0, 20.0)
            picture.load("drawing.pic");

            **QPainter**  painter(this);
            painter.drawPicture(0, 0, picture);

        **See also** **QPicture::play** ().
        """
        ...

    @typing.overload
    def drawPicture(
        self, p: PySide2.QtCore.QPointF, picture: PySide2.QtGui.QPicture
    ) -> None:
        """
        **void QPainter::drawPicture(const QPointF & point , const QPicture & picture )**

        Replays the given **picture** at the given **point**.

        The **QPicture**  class is a paint device that records and replays **QPainter**  commands. A picture serializes the painter commands to an IO device in a platform-independent format. Everything that can be painted on a widget or pixmap can also be stored in a picture.

        This function does exactly the same as **QPicture::play** () when called with **point** = **QPoint** (0, 0).

        **QPicture**  picture;
            **QPointF**  point(10.0, 20.0)
            picture.load("drawing.pic");

            **QPainter**  painter(this);
            painter.drawPicture(0, 0, picture);

        **See also** **QPicture::play** ().
        """
        ...

    @typing.overload
    def drawPicture(self, x: int, y: int, picture: PySide2.QtGui.QPicture) -> None:
        """
        **void QPainter::drawPicture(const QPointF & point , const QPicture & picture )**

        Replays the given **picture** at the given **point**.

        The **QPicture**  class is a paint device that records and replays **QPainter**  commands. A picture serializes the painter commands to an IO device in a platform-independent format. Everything that can be painted on a widget or pixmap can also be stored in a picture.

        This function does exactly the same as **QPicture::play** () when called with **point** = **QPoint** (0, 0).

        **QPicture**  picture;
            **QPointF**  point(10.0, 20.0)
            picture.load("drawing.pic");

            **QPainter**  painter(this);
            painter.drawPicture(0, 0, picture);

        **See also** **QPicture::play** ().
        """
        ...

    @typing.overload
    def drawPie(self, arg__1: PySide2.QtCore.QRect, a: int, alen: int) -> None:
        """
        **void QPainter::drawPie(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws a pie defined by the given **rectangle** , **startAngle** and **spanAngle**.

        The pie is filled with the current **brush** ().

        The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-pie.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawPie(rectangle, startAngle, spanAngle);

        **See also** **drawEllipse** (), **drawChord** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPie(self, rect: PySide2.QtCore.QRectF, a: int, alen: int) -> None:
        """
        **void QPainter::drawPie(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws a pie defined by the given **rectangle** , **startAngle** and **spanAngle**.

        The pie is filled with the current **brush** ().

        The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-pie.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawPie(rectangle, startAngle, spanAngle);

        **See also** **drawEllipse** (), **drawChord** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPie(self, x: int, y: int, w: int, h: int, a: int, alen: int) -> None:
        """
        **void QPainter::drawPie(const QRectF & rectangle , int startAngle , int spanAngle )**

        Draws a pie defined by the given **rectangle** , **startAngle** and **spanAngle**.

        The pie is filled with the current **brush** ().

        The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

        ![](images/qpainter-pie.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);
            int startAngle = 30 * 16;
            int spanAngle = 120 * 16;

            **QPainter**  painter(this);
            painter.drawPie(rectangle, startAngle, spanAngle);

        **See also** **drawEllipse** (), **drawChord** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPixmap(self, p: PySide2.QtCore.QPoint, pm: PySide2.QtGui.QPixmap) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self,
        p: PySide2.QtCore.QPoint,
        pm: PySide2.QtGui.QPixmap,
        sr: PySide2.QtCore.QRect,
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(self, p: PySide2.QtCore.QPointF, pm: PySide2.QtGui.QPixmap) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self,
        p: PySide2.QtCore.QPointF,
        pm: PySide2.QtGui.QPixmap,
        sr: PySide2.QtCore.QRectF,
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(self, r: PySide2.QtCore.QRect, pm: PySide2.QtGui.QPixmap) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self,
        targetRect: PySide2.QtCore.QRect,
        pixmap: PySide2.QtGui.QPixmap,
        sourceRect: PySide2.QtCore.QRect,
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self,
        targetRect: PySide2.QtCore.QRectF,
        pixmap: PySide2.QtGui.QPixmap,
        sourceRect: PySide2.QtCore.QRectF,
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(self, x: int, y: int, pm: PySide2.QtGui.QPixmap) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self,
        x: int,
        y: int,
        pm: PySide2.QtGui.QPixmap,
        sx: int,
        sy: int,
        sw: int,
        sh: int,
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self, x: int, y: int, w: int, h: int, pm: PySide2.QtGui.QPixmap
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    @typing.overload
    def drawPixmap(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        pm: PySide2.QtGui.QPixmap,
        sx: int,
        sy: int,
        sw: int,
        sh: int,
    ) -> None:
        """
        **void QPainter::drawPixmap(const QRectF & target , const QPixmap & pixmap , const QRectF & source )**

        Draws the rectangular portion **source** of the given **pixmap** into the given **target** in the paint device.

        **Note:** The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

        **Note:** See **Drawing High Resolution Versions of Pixmaps and Images**  on how this is affected by **QPixmap::devicePixelRatio** ().

        **QRectF**  target(10.0, 20.0, 80.0, 60.0);
            **QRectF**  source(0.0, 0.0, 70.0, 40.0);
            **QPixmap**  pixmap(":myPixmap.png");

            **QPainter** (this);
            painter.drawPixmap(target, pixmap, source);

        If **pixmap** is a **QBitmap**  it is drawn with the bits that are "set" using the pens color. If **backgroundMode**  is **Qt::OpaqueMode** , the "unset" bits are drawn using the color of the background brush; if **backgroundMode**  is **Qt::TransparentMode** , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

        **See also** **drawImage** () and **QPixmap::devicePixelRatio** ().
        """
        ...

    def drawPixmapFragments(
        self,
        fragments: PySide2.QtGui.QPainter.PixmapFragment,
        fragmentCount: int,
        pixmap: PySide2.QtGui.QPixmap,
        hints: PySide2.QtGui.QPainter.PixmapFragmentHints = ...,
    ) -> None:
        """
        **void QPainter::drawPixmapFragments(const QPainter::PixmapFragment * fragments , int fragmentCount , const QPixmap & pixmap , QPainter::PixmapFragmentHints hints = PixmapFragmentHints())**

        This function is used to draw **pixmap** , or a sub-rectangle of **pixmap** , at multiple positions with different scale, rotation and opacity. **fragments** is an array of **fragmentCount** elements specifying the parameters used to draw each pixmap fragment. The **hints** parameter can be used to pass in drawing hints.

        This function is potentially faster than multiple calls to **drawPixmap** (), since the backend can optimize state changes.

        This function was introduced in Qt 4.7.

        **See also** **QPainter::PixmapFragment**  and **QPainter::PixmapFragmentHint** .
        """
        ...

    @typing.overload
    def drawPoint(self, p: PySide2.QtCore.QPoint) -> None:
        """
        **void QPainter::drawPoint(const QPointF & position )**

        Draws a single point at the given **position** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPoint(self, pt: PySide2.QtCore.QPointF) -> None:
        """
        **void QPainter::drawPoint(const QPointF & position )**

        Draws a single point at the given **position** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPoint(self, x: int, y: int) -> None:
        """
        **void QPainter::drawPoint(const QPointF & position )**

        Draws a single point at the given **position** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPoints(self, arg__1: typing.List) -> None:
        """
        **void QPainter::drawPoints(const QPointF * points , int pointCount )**

        Draws the first **pointCount** points in the array **points** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPoints(self, arg__1: typing.List) -> None:
        """
        **void QPainter::drawPoints(const QPointF * points , int pointCount )**

        Draws the first **pointCount** points in the array **points** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPoints(self, points: PySide2.QtGui.QPolygon) -> None:
        """
        **void QPainter::drawPoints(const QPointF * points , int pointCount )**

        Draws the first **pointCount** points in the array **points** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPoints(self, points: PySide2.QtGui.QPolygonF) -> None:
        """
        **void QPainter::drawPoints(const QPointF * points , int pointCount )**

        Draws the first **pointCount** points in the array **points** using the current pen's color.

        **See also** **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolygon(
        self, arg__1: typing.List, arg__2: PySide2.QtCore.Qt.FillRule
    ) -> None:
        """
        **void QPainter::drawPolygon(const QPointF * points , int pointCount , Qt::FillRule fillRule = Qt::OddEvenFill)**

        Draws the polygon defined by the first **pointCount** points in the array **points** using the current pen and brush.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** ().

        If **fillRule** is **Qt::WindingFill** , the polygon is filled using the winding fill algorithm. If **fillRule** is **Qt::OddEvenFill** , the polygon is filled using the odd-even fill algorithm. See **Qt::FillRule**  for a more detailed description of these fill rules.

        **See also** **drawConvexPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolygon(
        self, arg__1: typing.List, arg__2: PySide2.QtCore.Qt.FillRule
    ) -> None:
        """
        **void QPainter::drawPolygon(const QPointF * points , int pointCount , Qt::FillRule fillRule = Qt::OddEvenFill)**

        Draws the polygon defined by the first **pointCount** points in the array **points** using the current pen and brush.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** ().

        If **fillRule** is **Qt::WindingFill** , the polygon is filled using the winding fill algorithm. If **fillRule** is **Qt::OddEvenFill** , the polygon is filled using the odd-even fill algorithm. See **Qt::FillRule**  for a more detailed description of these fill rules.

        **See also** **drawConvexPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolygon(
        self,
        polygon: PySide2.QtGui.QPolygon,
        fillRule: PySide2.QtCore.Qt.FillRule = ...,
    ) -> None:
        """
        **void QPainter::drawPolygon(const QPointF * points , int pointCount , Qt::FillRule fillRule = Qt::OddEvenFill)**

        Draws the polygon defined by the first **pointCount** points in the array **points** using the current pen and brush.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** ().

        If **fillRule** is **Qt::WindingFill** , the polygon is filled using the winding fill algorithm. If **fillRule** is **Qt::OddEvenFill** , the polygon is filled using the odd-even fill algorithm. See **Qt::FillRule**  for a more detailed description of these fill rules.

        **See also** **drawConvexPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolygon(
        self,
        polygon: PySide2.QtGui.QPolygonF,
        fillRule: PySide2.QtCore.Qt.FillRule = ...,
    ) -> None:
        """
        **void QPainter::drawPolygon(const QPointF * points , int pointCount , Qt::FillRule fillRule = Qt::OddEvenFill)**

        Draws the polygon defined by the first **pointCount** points in the array **points** using the current pen and brush.

        ![](images/qpainter-polygon.png)



            static const **QPointF**  points[4] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
                **QPointF** (90.0, 70.0)
            };

            **QPainter**  painter(this);
            painter.drawPolygon(points, 4);

        The first point is implicitly connected to the last point, and the polygon is filled with the current **brush** ().

        If **fillRule** is **Qt::WindingFill** , the polygon is filled using the winding fill algorithm. If **fillRule** is **Qt::OddEvenFill** , the polygon is filled using the odd-even fill algorithm. See **Qt::FillRule**  for a more detailed description of these fill rules.

        **See also** **drawConvexPolygon** (), **drawPolyline** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolyline(self, arg__1: typing.List) -> None:
        """
        **void QPainter::drawPolyline(const QPointF * points , int pointCount )**

        Draws the polyline defined by the first **pointCount** points in **points** using the current pen.

        Note that unlike the **drawPolygon** () function the last point is **not** connected to the first, neither is the polyline filled.

        static const **QPointF**  points[3] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
            };

            **QPainter**  painter(this);
            painter.drawPolyline(points, 3);

        **See also** **drawLines** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolyline(self, arg__1: typing.List) -> None:
        """
        **void QPainter::drawPolyline(const QPointF * points , int pointCount )**

        Draws the polyline defined by the first **pointCount** points in **points** using the current pen.

        Note that unlike the **drawPolygon** () function the last point is **not** connected to the first, neither is the polyline filled.

        static const **QPointF**  points[3] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
            };

            **QPainter**  painter(this);
            painter.drawPolyline(points, 3);

        **See also** **drawLines** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolyline(self, polygon: PySide2.QtGui.QPolygon) -> None:
        """
        **void QPainter::drawPolyline(const QPointF * points , int pointCount )**

        Draws the polyline defined by the first **pointCount** points in **points** using the current pen.

        Note that unlike the **drawPolygon** () function the last point is **not** connected to the first, neither is the polyline filled.

        static const **QPointF**  points[3] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
            };

            **QPainter**  painter(this);
            painter.drawPolyline(points, 3);

        **See also** **drawLines** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawPolyline(self, polyline: PySide2.QtGui.QPolygonF) -> None:
        """
        **void QPainter::drawPolyline(const QPointF * points , int pointCount )**

        Draws the polyline defined by the first **pointCount** points in **points** using the current pen.

        Note that unlike the **drawPolygon** () function the last point is **not** connected to the first, neither is the polyline filled.

        static const **QPointF**  points[3] = {
                **QPointF** (10.0, 80.0),
                **QPointF** (20.0, 10.0),
                **QPointF** (80.0, 30.0),
            };

            **QPainter**  painter(this);
            painter.drawPolyline(points, 3);

        **See also** **drawLines** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawRect(self, rect: PySide2.QtCore.QRect) -> None:
        """
        **void QPainter::drawRect(const QRectF & rectangle )**

        Draws the current **rectangle** with the current pen and brush.

        A filled rectangle has a size of **rectangle**.size(). A stroked rectangle has a size of **rectangle**.size() plus the pen width.

        ![](images/qpainter-rectangle.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawRect(rectangle);

        **See also** **drawRects** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawRect(self, rect: PySide2.QtCore.QRectF) -> None:
        """
        **void QPainter::drawRect(const QRectF & rectangle )**

        Draws the current **rectangle** with the current pen and brush.

        A filled rectangle has a size of **rectangle**.size(). A stroked rectangle has a size of **rectangle**.size() plus the pen width.

        ![](images/qpainter-rectangle.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawRect(rectangle);

        **See also** **drawRects** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawRect(self, x1: int, y1: int, w: int, h: int) -> None:
        """
        **void QPainter::drawRect(const QRectF & rectangle )**

        Draws the current **rectangle** with the current pen and brush.

        A filled rectangle has a size of **rectangle**.size(). A stroked rectangle has a size of **rectangle**.size() plus the pen width.

        ![](images/qpainter-rectangle.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawRect(rectangle);

        **See also** **drawRects** (), **drawPolygon** (), and **Coordinate System** .
        """
        ...

    @typing.overload
    def drawRects(self, rectangles: typing.List) -> None:
        """
        **void QPainter::drawRects(const QRectF * rectangles , int rectCount )**

        Draws the first **rectCount** of the given **rectangles** using the current pen and brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def drawRects(self, rectangles: typing.List) -> None:
        """
        **void QPainter::drawRects(const QRectF * rectangles , int rectCount )**

        Draws the first **rectCount** of the given **rectangles** using the current pen and brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def drawRoundRect(
        self, r: PySide2.QtCore.QRect, xround: int = ..., yround: int = ...
    ) -> None:
        ...

    @typing.overload
    def drawRoundRect(
        self, r: PySide2.QtCore.QRectF, xround: int = ..., yround: int = ...
    ) -> None:
        ...

    @typing.overload
    def drawRoundRect(
        self, x: int, y: int, w: int, h: int, xRound: int = ..., yRound: int = ...
    ) -> None:
        ...

    @typing.overload
    def drawRoundedRect(
        self,
        rect: PySide2.QtCore.QRect,
        xRadius: float,
        yRadius: float,
        mode: PySide2.QtCore.Qt.SizeMode = ...,
    ) -> None:
        """
        **void QPainter::drawRoundedRect(const QRectF & rect , qreal xRadius , qreal yRadius , Qt::SizeMode mode = Qt::AbsoluteSize)**

        Draws the given rectangle **rect** with rounded corners.

        The **xRadius** and **yRadius** arguments specify the radii of the ellipses defining the corners of the rounded rectangle. When **mode** is **Qt::RelativeSize** , **xRadius** and **yRadius** are specified in percentage of half the rectangle's width and height respectively, and should be in the range 0.0 to 100.0.

        A filled rectangle has a size of rect.size(). A stroked rectangle has a size of rect.size() plus the pen width.

        ![](images/qpainter-roundrect.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawRoundedRect(rectangle, 20.0, 15.0);

        This function was introduced in Qt 4.4.

        **See also** **drawRect** () and **QPen** .
        """
        ...

    @typing.overload
    def drawRoundedRect(
        self,
        rect: PySide2.QtCore.QRectF,
        xRadius: float,
        yRadius: float,
        mode: PySide2.QtCore.Qt.SizeMode = ...,
    ) -> None:
        """
        **void QPainter::drawRoundedRect(const QRectF & rect , qreal xRadius , qreal yRadius , Qt::SizeMode mode = Qt::AbsoluteSize)**

        Draws the given rectangle **rect** with rounded corners.

        The **xRadius** and **yRadius** arguments specify the radii of the ellipses defining the corners of the rounded rectangle. When **mode** is **Qt::RelativeSize** , **xRadius** and **yRadius** are specified in percentage of half the rectangle's width and height respectively, and should be in the range 0.0 to 100.0.

        A filled rectangle has a size of rect.size(). A stroked rectangle has a size of rect.size() plus the pen width.

        ![](images/qpainter-roundrect.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawRoundedRect(rectangle, 20.0, 15.0);

        This function was introduced in Qt 4.4.

        **See also** **drawRect** () and **QPen** .
        """
        ...

    @typing.overload
    def drawRoundedRect(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        xRadius: float,
        yRadius: float,
        mode: PySide2.QtCore.Qt.SizeMode = ...,
    ) -> None:
        """
        **void QPainter::drawRoundedRect(const QRectF & rect , qreal xRadius , qreal yRadius , Qt::SizeMode mode = Qt::AbsoluteSize)**

        Draws the given rectangle **rect** with rounded corners.

        The **xRadius** and **yRadius** arguments specify the radii of the ellipses defining the corners of the rounded rectangle. When **mode** is **Qt::RelativeSize** , **xRadius** and **yRadius** are specified in percentage of half the rectangle's width and height respectively, and should be in the range 0.0 to 100.0.

        A filled rectangle has a size of rect.size(). A stroked rectangle has a size of rect.size() plus the pen width.

        ![](images/qpainter-roundrect.png)



            **QRectF**  rectangle(10.0, 20.0, 80.0, 60.0);

            **QPainter**  painter(this);
            painter.drawRoundedRect(rectangle, 20.0, 15.0);

        This function was introduced in Qt 4.4.

        **See also** **drawRect** () and **QPen** .
        """
        ...

    @typing.overload
    def drawStaticText(
        self, left: int, top: int, staticText: PySide2.QtGui.QStaticText
    ) -> None:
        """
        **void QPainter::drawStaticText(const QPointF & topLeftPosition , const QStaticText & staticText )**

        Draws the given **staticText** at the given **topLeftPosition**.

        The text will be drawn using the font and the transformation set on the painter. If the font and/or transformation set on the painter are different from the ones used to initialize the layout of the **QStaticText** , then the layout will have to be recalculated. Use **QStaticText::prepare** () to initialize **staticText** with the font and transformation with which it will later be drawn.

        If **topLeftPosition** is not the same as when **staticText** was initialized, or when it was last drawn, then there will be a slight overhead when translating the text to its new position.

        **Note:** If the painter's transformation is not affine, then **staticText** will be drawn using regular calls to **drawText** (), losing any potential for performance improvement.

        **Note:** The y-position is used as the top of the font.

        This function was introduced in Qt 4.7.

        **See also** **QStaticText** .
        """
        ...

    @typing.overload
    def drawStaticText(
        self,
        topLeftPosition: PySide2.QtCore.QPoint,
        staticText: PySide2.QtGui.QStaticText,
    ) -> None:
        """
        **void QPainter::drawStaticText(const QPointF & topLeftPosition , const QStaticText & staticText )**

        Draws the given **staticText** at the given **topLeftPosition**.

        The text will be drawn using the font and the transformation set on the painter. If the font and/or transformation set on the painter are different from the ones used to initialize the layout of the **QStaticText** , then the layout will have to be recalculated. Use **QStaticText::prepare** () to initialize **staticText** with the font and transformation with which it will later be drawn.

        If **topLeftPosition** is not the same as when **staticText** was initialized, or when it was last drawn, then there will be a slight overhead when translating the text to its new position.

        **Note:** If the painter's transformation is not affine, then **staticText** will be drawn using regular calls to **drawText** (), losing any potential for performance improvement.

        **Note:** The y-position is used as the top of the font.

        This function was introduced in Qt 4.7.

        **See also** **QStaticText** .
        """
        ...

    @typing.overload
    def drawStaticText(
        self,
        topLeftPosition: PySide2.QtCore.QPointF,
        staticText: PySide2.QtGui.QStaticText,
    ) -> None:
        """
        **void QPainter::drawStaticText(const QPointF & topLeftPosition , const QStaticText & staticText )**

        Draws the given **staticText** at the given **topLeftPosition**.

        The text will be drawn using the font and the transformation set on the painter. If the font and/or transformation set on the painter are different from the ones used to initialize the layout of the **QStaticText** , then the layout will have to be recalculated. Use **QStaticText::prepare** () to initialize **staticText** with the font and transformation with which it will later be drawn.

        If **topLeftPosition** is not the same as when **staticText** was initialized, or when it was last drawn, then there will be a slight overhead when translating the text to its new position.

        **Note:** If the painter's transformation is not affine, then **staticText** will be drawn using regular calls to **drawText** (), losing any potential for performance improvement.

        **Note:** The y-position is used as the top of the font.

        This function was introduced in Qt 4.7.

        **See also** **QStaticText** .
        """
        ...

    @typing.overload
    def drawText(self, p: PySide2.QtCore.QPoint, s: str) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawText(self, p: PySide2.QtCore.QPointF, s: str) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawText(
        self, r: PySide2.QtCore.QRect, flags: int, text: str, br: PySide2.QtCore.QRect
    ) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawText(
        self, r: PySide2.QtCore.QRectF, flags: int, text: str, br: PySide2.QtCore.QRectF
    ) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawText(
        self, r: PySide2.QtCore.QRectF, text: str, o: PySide2.QtGui.QTextOption = ...
    ) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawText(self, x: int, y: int, s: str) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawText(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        flags: int,
        text: str,
        br: PySide2.QtCore.QRect,
    ) -> None:
        """
        **void QPainter::drawText(const QPointF & position , const QString & text )**

        Draws the given **text** with the currently defined text direction, beginning at the given **position**.

        This function does not handle the newline character (\\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

        By default, **QPainter**  draws text anti-aliased.

        **Note:** The y-position is used as the baseline of the font.

        **See also** **setFont** () and **setPen** ().
        """
        ...

    @typing.overload
    def drawTextItem(
        self, p: PySide2.QtCore.QPoint, ti: PySide2.QtGui.QTextItem
    ) -> None:
        ...

    @typing.overload
    def drawTextItem(
        self, p: PySide2.QtCore.QPointF, ti: PySide2.QtGui.QTextItem
    ) -> None:
        ...

    @typing.overload
    def drawTextItem(self, x: int, y: int, ti: PySide2.QtGui.QTextItem) -> None:
        ...

    @typing.overload
    def drawTiledPixmap(
        self,
        arg__1: PySide2.QtCore.QRect,
        arg__2: PySide2.QtGui.QPixmap,
        pos: PySide2.QtCore.QPoint = ...,
    ) -> None:
        """
        **void QPainter::drawTiledPixmap(const QRectF & rectangle , const QPixmap & pixmap , const QPointF & position = QPointF())**

        Draws a tiled **pixmap** , inside the given **rectangle** with its origin at the given **position**.

        Calling drawTiledPixmap() is similar to calling **drawPixmap** () several times to fill (tile) an area with a pixmap, but is potentially much more efficient depending on the underlying window system.

        drawTiledPixmap() will produce the same visual tiling pattern on high-dpi displays (with devicePixelRatio > 1), compared to normal- dpi displays. Set the devicePixelRatio on the **pixmap** to control the tile size. For example, setting it to 2 halves the tile width and height (on both 1x and 2x displays), and produces high-resolution output on 2x displays.

        The **position** offset is always in the painter coordinate system, indepentent of display devicePixelRatio.

        **See also** **drawPixmap** ().
        """
        ...

    @typing.overload
    def drawTiledPixmap(
        self,
        rect: PySide2.QtCore.QRectF,
        pm: PySide2.QtGui.QPixmap,
        offset: PySide2.QtCore.QPointF = ...,
    ) -> None:
        """
        **void QPainter::drawTiledPixmap(const QRectF & rectangle , const QPixmap & pixmap , const QPointF & position = QPointF())**

        Draws a tiled **pixmap** , inside the given **rectangle** with its origin at the given **position**.

        Calling drawTiledPixmap() is similar to calling **drawPixmap** () several times to fill (tile) an area with a pixmap, but is potentially much more efficient depending on the underlying window system.

        drawTiledPixmap() will produce the same visual tiling pattern on high-dpi displays (with devicePixelRatio > 1), compared to normal- dpi displays. Set the devicePixelRatio on the **pixmap** to control the tile size. For example, setting it to 2 halves the tile width and height (on both 1x and 2x displays), and produces high-resolution output on 2x displays.

        The **position** offset is always in the painter coordinate system, indepentent of display devicePixelRatio.

        **See also** **drawPixmap** ().
        """
        ...

    @typing.overload
    def drawTiledPixmap(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        arg__5: PySide2.QtGui.QPixmap,
        sx: int = ...,
        sy: int = ...,
    ) -> None:
        """
        **void QPainter::drawTiledPixmap(const QRectF & rectangle , const QPixmap & pixmap , const QPointF & position = QPointF())**

        Draws a tiled **pixmap** , inside the given **rectangle** with its origin at the given **position**.

        Calling drawTiledPixmap() is similar to calling **drawPixmap** () several times to fill (tile) an area with a pixmap, but is potentially much more efficient depending on the underlying window system.

        drawTiledPixmap() will produce the same visual tiling pattern on high-dpi displays (with devicePixelRatio > 1), compared to normal- dpi displays. Set the devicePixelRatio on the **pixmap** to control the tile size. For example, setting it to 2 halves the tile width and height (on both 1x and 2x displays), and produces high-resolution output on 2x displays.

        The **position** offset is always in the painter coordinate system, indepentent of display devicePixelRatio.

        **See also** **drawPixmap** ().
        """
        ...

    def end(self) -> bool:
        """
        **bool QPainter::end()**

        Ends painting. Any resources used while painting are released. You don't normally need to call this since it is called by the destructor.

        Returns `true` if the painter is no longer active; otherwise returns `false`.

        **See also** **begin** () and **isActive** ().
        """
        ...

    def endNativePainting(self) -> None:
        """
        **void QPainter::endNativePainting()**

        Restores the painter after manually issuing native painting commands. Lets the painter restore any native state that it relies on before calling any other painter commands.

        This function was introduced in Qt 4.6.

        **See also** **beginNativePainting** ().
        """
        ...

    @typing.overload
    def eraseRect(self, arg__1: PySide2.QtCore.QRect) -> None:
        """
        **void QPainter::eraseRect(const QRectF & rectangle )**

        Erases the area inside the given **rectangle**. Equivalent to calling

        fillRect(rectangle, background()).

        **See also** **fillRect** ().
        """
        ...

    @typing.overload
    def eraseRect(self, arg__1: PySide2.QtCore.QRectF) -> None:
        """
        **void QPainter::eraseRect(const QRectF & rectangle )**

        Erases the area inside the given **rectangle**. Equivalent to calling

        fillRect(rectangle, background()).

        **See also** **fillRect** ().
        """
        ...

    @typing.overload
    def eraseRect(self, x: int, y: int, w: int, h: int) -> None:
        """
        **void QPainter::eraseRect(const QRectF & rectangle )**

        Erases the area inside the given **rectangle**. Equivalent to calling

        fillRect(rectangle, background()).

        **See also** **fillRect** ().
        """
        ...

    def fillPath(
        self, path: PySide2.QtGui.QPainterPath, brush: PySide2.QtGui.QBrush
    ) -> None:
        """
        **void QPainter::fillPath(const QPainterPath & path , const QBrush & brush )**

        Fills the given **path** using the given **brush**. The outline is not drawn.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawPath** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, arg__1: PySide2.QtCore.QRect, arg__2: PySide2.QtGui.QBrush
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, arg__1: PySide2.QtCore.QRect, color: PySide2.QtGui.QColor
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, arg__1: PySide2.QtCore.QRectF, arg__2: PySide2.QtGui.QBrush
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, arg__1: PySide2.QtCore.QRectF, color: PySide2.QtGui.QColor
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, r: PySide2.QtCore.QRect, c: PySide2.QtCore.Qt.GlobalColor
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, r: PySide2.QtCore.QRect, preset: PySide2.QtGui.QGradient.Preset
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, r: PySide2.QtCore.QRect, style: PySide2.QtCore.Qt.BrushStyle
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, r: PySide2.QtCore.QRectF, c: PySide2.QtCore.Qt.GlobalColor
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, r: PySide2.QtCore.QRectF, preset: PySide2.QtGui.QGradient.Preset
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, r: PySide2.QtCore.QRectF, style: PySide2.QtCore.Qt.BrushStyle
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, arg__5: PySide2.QtGui.QBrush
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, c: PySide2.QtCore.Qt.GlobalColor
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, color: PySide2.QtGui.QColor
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, preset: PySide2.QtGui.QGradient.Preset
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, style: PySide2.QtCore.Qt.BrushStyle
    ) -> None:
        """
        **void QPainter::fillRect(const QRectF & rectangle , const QBrush & brush )**

        Fills the given **rectangle** with the **brush** specified.

        Alternatively, you can specify a **QColor**  instead of a **QBrush** ; the **QBrush**  constructor (taking a **QColor**  argument) will automatically create a solid pattern brush.

        **See also** **drawRect** ().
        """
        ...

    def font(self) -> PySide2.QtGui.QFont:
        """
        **const QFont &QPainter::font() const**

        Returns the currently set font used for drawing text.

        **See also** **setFont** (), **drawText** (), and **Settings** .
        """
        ...

    def fontInfo(self) -> PySide2.QtGui.QFontInfo:
        """
        **QFontInfo QPainter::fontInfo() const**

        Returns the font info for the painter if the painter is active. Otherwise, the return value is undefined.

        **See also** **font** (), **isActive** (), and **Settings** .
        """
        ...

    def fontMetrics(self) -> PySide2.QtGui.QFontMetrics:
        """
        **QFontMetrics QPainter::fontMetrics() const**

        Returns the font metrics for the painter if the painter is active. Otherwise, the return value is undefined.

        **See also** **font** (), **isActive** (), and **Settings** .
        """
        ...

    def hasClipping(self) -> bool:
        """
        **bool QPainter::hasClipping() const**

        Returns `true` if clipping has been set; otherwise returns `false`.

        **See also** **setClipping** () and **Clipping** .
        """
        ...

    def initFrom(self, device: PySide2.QtGui.QPaintDevice) -> None:
        ...

    def isActive(self) -> bool:
        """
        **bool QPainter::isActive() const**

        Returns `true` if **begin** () has been called and **end** () has not yet been called; otherwise returns `false`.

        **See also** **begin** () and **QPaintDevice::paintingActive** ().
        """
        ...

    def layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection:
        """
        **Qt::LayoutDirection QPainter::layoutDirection() const**

        Returns the layout direction used by the painter when drawing text.

        **See also** **QTextOption::textDirection** (), **setLayoutDirection** (), **drawText** (), and **Settings** .
        """
        ...

    def matrix(self) -> PySide2.QtGui.QMatrix:
        ...

    def matrixEnabled(self) -> bool:
        ...

    def opacity(self) -> float:
        """
        **qreal QPainter::opacity() const**

        Returns the opacity of the painter. The default value is 1.

        This function was introduced in Qt 4.2.

        **See also** **setOpacity** ().
        """
        ...

    def paintEngine(self) -> PySide2.QtGui.QPaintEngine:
        """
        **QPaintEngine *QPainter::paintEngine() const**

        Returns the paint engine that the painter is currently operating on if the painter is active; otherwise 0.

        **See also** **isActive** ().
        """
        ...

    def pen(self) -> PySide2.QtGui.QPen:
        """
        **const QPen &QPainter::pen() const**

        Returns the painter's current pen.

        **See also** **setPen** () and **Settings** .
        """
        ...

    @staticmethod
    def redirected(
        device: PySide2.QtGui.QPaintDevice,
        offset: typing.Optional[PySide2.QtCore.QPoint] = ...,
    ) -> PySide2.QtGui.QPaintDevice:
        ...

    def renderHints(self) -> PySide2.QtGui.QPainter.RenderHints:
        """
        **QPainter::RenderHints QPainter::renderHints() const**

        Returns a flag that specifies the rendering hints that are set for this painter.

        **See also** **setRenderHints** (), **testRenderHint** (), and **Rendering Quality** .
        """
        ...

    def resetMatrix(self) -> None:
        ...

    def resetTransform(self) -> None:
        """
        **void QPainter::resetTransform()**

        Resets any transformations that were made using **translate** (), **scale** (), **shear** (), **rotate** (), **setWorldTransform** (), **setViewport** () and **setWindow** ().

        **See also** **Coordinate Transformations** .
        """
        ...

    def restore(self) -> None:
        """
        **void QPainter::restore()**

        Restores the current painter state (pops a saved state off the stack).

        **See also** **save** ().
        """
        ...

    @staticmethod
    def restoreRedirected(device: PySide2.QtGui.QPaintDevice) -> None:
        ...

    def rotate(self, a: float) -> None:
        """
        **void QPainter::rotate(qreal angle )**

        Rotates the coordinate system clockwise. The given **angle** parameter is in degrees.

        **See also** **setWorldTransform** () and **Coordinate Transformations** .
        """
        ...

    def save(self) -> None:
        """
        **void QPainter::save()**

        Saves the current painter state (pushes the state onto a stack). A save() must be followed by a corresponding **restore** (); the **end** () function unwinds the stack.

        **See also** **restore** ().
        """
        ...

    def scale(self, sx: float, sy: float) -> None:
        """
        **void QPainter::scale(qreal sx , qreal sy )**

        Scales the coordinate system by ( **sx** , **sy** ).

        **See also** **setWorldTransform** () and **Coordinate Transformations** .
        """
        ...

    def setBackground(self, bg: PySide2.QtGui.QBrush) -> None:
        """
        **void QPainter::setBackground(const QBrush & brush )**

        Sets the background brush of the painter to the given **brush**.

        The background brush is the brush that is filled in when drawing opaque text, stippled lines and bitmaps. The background brush has no effect in transparent background mode (which is the default).

        **See also** **background** (), **setBackgroundMode** (), and **Settings** .
        """
        ...

    def setBackgroundMode(self, mode: PySide2.QtCore.Qt.BGMode) -> None:
        """
        **void QPainter::setBackgroundMode(Qt::BGMode mode )**

        Sets the background mode of the painter to the given **mode**

        **Qt::TransparentMode**  (the default) draws stippled lines and text without setting the background pixels. **Qt::OpaqueMode**  fills these space with the current background color.

        Note that in order to draw a bitmap or pixmap transparently, you must use **QPixmap::setMask** ().

        **See also** **backgroundMode** (), **setBackground** (), and **Settings** .
        """
        ...

    @typing.overload
    def setBrush(self, brush: PySide2.QtGui.QBrush) -> None:
        """
        **void QPainter::setBrush(const QBrush & brush )**

        Sets the painter's brush to the given **brush**.

        The painter's brush defines how shapes are filled.

        **See also** **brush** () and **Settings** .
        """
        ...

    @typing.overload
    def setBrush(self, style: PySide2.QtCore.Qt.BrushStyle) -> None:
        """
        **void QPainter::setBrush(const QBrush & brush )**

        Sets the painter's brush to the given **brush**.

        The painter's brush defines how shapes are filled.

        **See also** **brush** () and **Settings** .
        """
        ...

    @typing.overload
    def setBrushOrigin(self, arg__1: PySide2.QtCore.QPoint) -> None:
        """
        **void QPainter::setBrushOrigin(const QPointF & position )**

        Sets the brush origin to **position**.

        The brush origin specifies the (0, 0) coordinate of the painter's brush.

        Note that while the **brushOrigin** () was necessary to adopt the parent's background for a widget in Qt 3, this is no longer the case since the Qt 4 painter doesn't paint the background unless you explicitly tell it to do so by setting the widget's **autoFillBackground**  property to true.

        **See also** **brushOrigin** () and **Settings** .
        """
        ...

    @typing.overload
    def setBrushOrigin(self, arg__1: PySide2.QtCore.QPointF) -> None:
        """
        **void QPainter::setBrushOrigin(const QPointF & position )**

        Sets the brush origin to **position**.

        The brush origin specifies the (0, 0) coordinate of the painter's brush.

        Note that while the **brushOrigin** () was necessary to adopt the parent's background for a widget in Qt 3, this is no longer the case since the Qt 4 painter doesn't paint the background unless you explicitly tell it to do so by setting the widget's **autoFillBackground**  property to true.

        **See also** **brushOrigin** () and **Settings** .
        """
        ...

    @typing.overload
    def setBrushOrigin(self, x: int, y: int) -> None:
        """
        **void QPainter::setBrushOrigin(const QPointF & position )**

        Sets the brush origin to **position**.

        The brush origin specifies the (0, 0) coordinate of the painter's brush.

        Note that while the **brushOrigin** () was necessary to adopt the parent's background for a widget in Qt 3, this is no longer the case since the Qt 4 painter doesn't paint the background unless you explicitly tell it to do so by setting the widget's **autoFillBackground**  property to true.

        **See also** **brushOrigin** () and **Settings** .
        """
        ...

    def setClipPath(
        self,
        path: PySide2.QtGui.QPainterPath,
        op: PySide2.QtCore.Qt.ClipOperation = ...,
    ) -> None:
        """
        **void QPainter::setClipPath(const QPainterPath & path , Qt::ClipOperation operation = Qt::ReplaceClip)**

        Enables clipping, and sets the clip path for the painter to the given **path** , with the clip **operation**.

        Note that the clip path is specified in logical (painter) coordinates.

        **See also** **clipPath** (), **clipRegion** (), and **Clipping** .
        """
        ...

    @typing.overload
    def setClipRect(
        self, arg__1: PySide2.QtCore.QRect, op: PySide2.QtCore.Qt.ClipOperation = ...
    ) -> None:
        """
        **void QPainter::setClipRect(const QRectF & rectangle , Qt::ClipOperation operation = Qt::ReplaceClip)**

        Enables clipping, and sets the clip region to the given **rectangle** using the given clip **operation**. The default operation is to replace the current clip rectangle.

        Note that the clip rectangle is specified in logical (painter) coordinates.

        **See also** **clipRegion** (), **setClipping** (), and **Clipping** .
        """
        ...

    @typing.overload
    def setClipRect(
        self, arg__1: PySide2.QtCore.QRectF, op: PySide2.QtCore.Qt.ClipOperation = ...
    ) -> None:
        """
        **void QPainter::setClipRect(const QRectF & rectangle , Qt::ClipOperation operation = Qt::ReplaceClip)**

        Enables clipping, and sets the clip region to the given **rectangle** using the given clip **operation**. The default operation is to replace the current clip rectangle.

        Note that the clip rectangle is specified in logical (painter) coordinates.

        **See also** **clipRegion** (), **setClipping** (), and **Clipping** .
        """
        ...

    @typing.overload
    def setClipRect(
        self, x: int, y: int, w: int, h: int, op: PySide2.QtCore.Qt.ClipOperation = ...
    ) -> None:
        """
        **void QPainter::setClipRect(const QRectF & rectangle , Qt::ClipOperation operation = Qt::ReplaceClip)**

        Enables clipping, and sets the clip region to the given **rectangle** using the given clip **operation**. The default operation is to replace the current clip rectangle.

        Note that the clip rectangle is specified in logical (painter) coordinates.

        **See also** **clipRegion** (), **setClipping** (), and **Clipping** .
        """
        ...

    def setClipRegion(
        self, arg__1: PySide2.QtGui.QRegion, op: PySide2.QtCore.Qt.ClipOperation = ...
    ) -> None:
        """
        **void QPainter::setClipRegion(const QRegion & region , Qt::ClipOperation operation = Qt::ReplaceClip)**

        Sets the clip region to the given **region** using the specified clip **operation**. The default clip operation is to replace the current clip region.

        Note that the clip region is given in logical coordinates.

        **See also** **clipRegion** (), **setClipRect** (), and **Clipping** .
        """
        ...

    def setClipping(self, enable: bool) -> None:
        """
        **void QPainter::setClipping(bool enable )**

        Enables clipping if **enable** is true, or disables clipping if **enable** is false.

        **See also** **hasClipping** () and **Clipping** .
        """
        ...

    def setCompositionMode(self, mode: PySide2.QtGui.QPainter.CompositionMode) -> None:
        """
        **void QPainter::setCompositionMode(QPainter::CompositionMode mode )**

        Sets the composition mode to the given **mode**.

        **Warning:** Only a **QPainter**  operating on a **QImage**  fully supports all composition modes. The RasterOp modes are supported for X11 as described in **compositionMode** ().

        **See also** **compositionMode** ().
        """
        ...

    def setFont(self, f: PySide2.QtGui.QFont) -> None:
        """
        **void QPainter::setFont(const QFont & font )**

        Sets the painter's font to the given **font**.

        This font is used by subsequent **drawText** () functions. The text color is the same as the pen color.

        If you set a font that isn't available, Qt finds a close match. **font** () will return what you set using setFont() and **fontInfo** () returns the font actually being used (which may be the same).

        **See also** **font** (), **drawText** (), and **Settings** .
        """
        ...

    def setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None:
        """
        **void QPainter::setLayoutDirection(Qt::LayoutDirection direction )**

        Sets the layout direction used by the painter when drawing text, to the specified **direction**.

        The default is **Qt::LayoutDirectionAuto** , which will implicitly determine the direction from the text drawn.

        **See also** **QTextOption::setTextDirection** (), **layoutDirection** (), **drawText** (), and **Settings** .
        """
        ...

    def setMatrix(self, matrix: PySide2.QtGui.QMatrix, combine: bool = ...) -> None:
        ...

    def setMatrixEnabled(self, enabled: bool) -> None:
        ...

    def setOpacity(self, opacity: float) -> None:
        """
        **void QPainter::setOpacity(qreal opacity )**

        Sets the opacity of the painter to **opacity**. The value should be in the range 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque.

        Opacity set on the painter will apply to all drawing operations individually.

        This function was introduced in Qt 4.2.

        **See also** **opacity** ().
        """
        ...

    @typing.overload
    def setPen(self, color: PySide2.QtGui.QColor) -> None:
        """
        **void QPainter::setPen(const QPen & pen )**

        Sets the painter's pen to be the given **pen**.

        The **pen** defines how to draw lines and outlines, and it also defines the text color.

        **See also** **pen** () and **Settings** .
        """
        ...

    @typing.overload
    def setPen(self, pen: PySide2.QtGui.QPen) -> None:
        """
        **void QPainter::setPen(const QPen & pen )**

        Sets the painter's pen to be the given **pen**.

        The **pen** defines how to draw lines and outlines, and it also defines the text color.

        **See also** **pen** () and **Settings** .
        """
        ...

    @typing.overload
    def setPen(self, style: PySide2.QtCore.Qt.PenStyle) -> None:
        """
        **void QPainter::setPen(const QPen & pen )**

        Sets the painter's pen to be the given **pen**.

        The **pen** defines how to draw lines and outlines, and it also defines the text color.

        **See also** **pen** () and **Settings** .
        """
        ...

    @staticmethod
    def setRedirected(
        device: PySide2.QtGui.QPaintDevice,
        replacement: PySide2.QtGui.QPaintDevice,
        offset: PySide2.QtCore.QPoint = ...,
    ) -> None:
        ...

    def setRenderHint(
        self, hint: PySide2.QtGui.QPainter.RenderHint, on: bool = ...
    ) -> None:
        """
        **void QPainter::setRenderHint(QPainter::RenderHint hint , bool on = true)**

        Sets the given render **hint** on the painter if **on** is true; otherwise clears the render hint.

        **See also** **setRenderHints** (), **renderHints** (), and **Rendering Quality** .
        """
        ...

    def setRenderHints(
        self, hints: PySide2.QtGui.QPainter.RenderHints, on: bool = ...
    ) -> None:
        """
        **void QPainter::setRenderHints(QPainter::RenderHints hints , bool on = true)**

        Sets the given render **hints** on the painter if **on** is true; otherwise clears the render hints.

        This function was introduced in Qt 4.2.

        **See also** **setRenderHint** (), **renderHints** (), and **Rendering Quality** .
        """
        ...

    def setTransform(
        self, transform: PySide2.QtGui.QTransform, combine: bool = ...
    ) -> None:
        """
        **void QPainter::setTransform(const QTransform & transform , bool combine = false)**

        Sets the world transformation matrix. If **combine** is true, the specified **transform** is combined with the current matrix; otherwise it replaces the current matrix.

        This function was introduced in Qt 4.3.

        **See also** **transform** () and **setWorldTransform** ().
        """
        ...

    def setViewTransformEnabled(self, enable: bool) -> None:
        """
        **void QPainter::setViewTransformEnabled(bool enable )**

        Enables view transformations if **enable** is true, or disables view transformations if **enable** is false.

        **See also** **viewTransformEnabled** () and **Window-Viewport Conversion** .
        """
        ...

    @typing.overload
    def setViewport(self, viewport: PySide2.QtCore.QRect) -> None:
        """
        **void QPainter::setViewport(const QRect & rectangle )**

        Sets the painter's viewport rectangle to the given **rectangle** , and enables view transformations.

        The viewport rectangle is part of the view transformation. The viewport specifies the device coordinate system. Its sister, the **window** (), specifies the logical coordinate system.

        The default viewport rectangle is the same as the device's rectangle.

        **See also** **viewport** (), **viewTransformEnabled** (), and **Window-Viewport Conversion** .
        """
        ...

    @typing.overload
    def setViewport(self, x: int, y: int, w: int, h: int) -> None:
        """
        **void QPainter::setViewport(const QRect & rectangle )**

        Sets the painter's viewport rectangle to the given **rectangle** , and enables view transformations.

        The viewport rectangle is part of the view transformation. The viewport specifies the device coordinate system. Its sister, the **window** (), specifies the logical coordinate system.

        The default viewport rectangle is the same as the device's rectangle.

        **See also** **viewport** (), **viewTransformEnabled** (), and **Window-Viewport Conversion** .
        """
        ...

    @typing.overload
    def setWindow(self, window: PySide2.QtCore.QRect) -> None:
        """
        **void QPainter::setWindow(const QRect & rectangle )**

        Sets the painter's window to the given **rectangle** , and enables view transformations.

        The window rectangle is part of the view transformation. The window specifies the logical coordinate system. Its sister, the **viewport** (), specifies the device coordinate system.

        The default window rectangle is the same as the device's rectangle.

        **See also** **window** (), **viewTransformEnabled** (), and **Window-Viewport Conversion** .
        """
        ...

    @typing.overload
    def setWindow(self, x: int, y: int, w: int, h: int) -> None:
        """
        **void QPainter::setWindow(const QRect & rectangle )**

        Sets the painter's window to the given **rectangle** , and enables view transformations.

        The window rectangle is part of the view transformation. The window specifies the logical coordinate system. Its sister, the **viewport** (), specifies the device coordinate system.

        The default window rectangle is the same as the device's rectangle.

        **See also** **window** (), **viewTransformEnabled** (), and **Window-Viewport Conversion** .
        """
        ...

    def setWorldMatrix(
        self, matrix: PySide2.QtGui.QMatrix, combine: bool = ...
    ) -> None:
        ...

    def setWorldMatrixEnabled(self, enabled: bool) -> None:
        """
        **void QPainter::setWorldMatrixEnabled(bool enable )**

        Enables transformations if **enable** is true, or disables transformations if **enable** is false. The world transformation matrix is not changed.

        This function was introduced in Qt 4.2.

        **See also** **worldMatrixEnabled** (), **worldTransform** (), and **Coordinate Transformations** .
        """
        ...

    def setWorldTransform(
        self, matrix: PySide2.QtGui.QTransform, combine: bool = ...
    ) -> None:
        """
        **void QPainter::setWorldTransform(const QTransform & matrix , bool combine = false)**

        Sets the world transformation matrix. If **combine** is true, the specified **matrix** is combined with the current matrix; otherwise it replaces the current matrix.

        **See also** **worldTransform** (), **transform** (), and **setTransform** ().
        """
        ...

    def shear(self, sh: float, sv: float) -> None:
        """
        **void QPainter::shear(qreal sh , qreal sv )**

        Shears the coordinate system by ( **sh** , **sv** ).

        **See also** **setWorldTransform** () and **Coordinate Transformations** .
        """
        ...

    def strokePath(
        self, path: PySide2.QtGui.QPainterPath, pen: PySide2.QtGui.QPen
    ) -> None:
        """
        **void QPainter::strokePath(const QPainterPath & path , const QPen & pen )**

        Draws the outline (strokes) the path **path** with the pen specified by **pen**

        **See also** **fillPath** () and **Drawing** .
        """
        ...

    def testRenderHint(self, hint: PySide2.QtGui.QPainter.RenderHint) -> bool:
        """
        **bool QPainter::testRenderHint(QPainter::RenderHint hint ) const**

        Returns `true` if **hint** is set; otherwise returns `false`.

        This function was introduced in Qt 4.3.

        **See also** **renderHints** () and **setRenderHint** ().
        """
        ...

    def transform(self) -> PySide2.QtGui.QTransform:
        """
        **const QTransform &QPainter::transform() const**

        Alias for **worldTransform** (). Returns the world transformation matrix.

        **See also** **setTransform** () and **worldTransform** ().
        """
        ...

    @typing.overload
    def translate(self, dx: float, dy: float) -> None:
        """
        **void QPainter::translate(const QPointF & offset )**

        Translates the coordinate system by the given **offset** ; i.e. the given **offset** is added to points.

        **See also** **setWorldTransform** () and **Coordinate Transformations** .
        """
        ...

    @typing.overload
    def translate(self, offset: PySide2.QtCore.QPoint) -> None:
        """
        **void QPainter::translate(const QPointF & offset )**

        Translates the coordinate system by the given **offset** ; i.e. the given **offset** is added to points.

        **See also** **setWorldTransform** () and **Coordinate Transformations** .
        """
        ...

    @typing.overload
    def translate(self, offset: PySide2.QtCore.QPointF) -> None:
        """
        **void QPainter::translate(const QPointF & offset )**

        Translates the coordinate system by the given **offset** ; i.e. the given **offset** is added to points.

        **See also** **setWorldTransform** () and **Coordinate Transformations** .
        """
        ...

    def viewTransformEnabled(self) -> bool:
        """
        **bool QPainter::viewTransformEnabled() const**

        Returns `true` if view transformation is enabled; otherwise returns false.

        **See also** **setViewTransformEnabled** () and **worldTransform** ().
        """
        ...

    def viewport(self) -> PySide2.QtCore.QRect:
        """
        **QRect QPainter::viewport() const**

        Returns the viewport rectangle.

        **See also** **setViewport** () and **setViewTransformEnabled** ().
        """
        ...

    def window(self) -> PySide2.QtCore.QRect:
        """
        **QRect QPainter::window() const**

        Returns the window rectangle.

        **See also** **setWindow** () and **setViewTransformEnabled** ().
        """
        ...

    def worldMatrix(self) -> PySide2.QtGui.QMatrix:
        ...

    def worldMatrixEnabled(self) -> bool:
        """
        **bool QPainter::worldMatrixEnabled() const**

        Returns `true` if world transformation is enabled; otherwise returns false.

        This function was introduced in Qt 4.2.

        **See also** **setWorldMatrixEnabled** (), **worldTransform** (), and **Coordinate System** .
        """
        ...

    def worldTransform(self) -> PySide2.QtGui.QTransform:
        """
        **const QTransform &QPainter::worldTransform() const**

        Returns the world transformation matrix.

        **See also** **setWorldTransform** ().
        """
        ...
