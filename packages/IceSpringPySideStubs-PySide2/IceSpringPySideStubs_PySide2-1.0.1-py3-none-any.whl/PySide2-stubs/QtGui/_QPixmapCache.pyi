"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPixmapCache(object):
    """
    **Detailed Description**

    This class is a tool for optimized drawing with **QPixmap** . You can use it to store temporary pixmaps that are expensive to generate without using more storage space than **cacheLimit** (). Use **insert** () to insert pixmaps, find() to find them, and **clear** () to empty the cache.

    QPixmapCache contains no member data, only static functions to access the global pixmap cache. It creates an internal **QCache**  object for caching the pixmaps.

    The cache associates a pixmap with a user-provided string as a key, or with a **QPixmapCache::Key**  that the cache generates. Using **QPixmapCache::Key**  for keys is faster than using strings. The string API is very convenient for complex keys but the **QPixmapCache::Key**  API will be very efficient and convenient for a one-to-one object-to-pixmap mapping - in this case, you can store the keys as members of an object.

    If two pixmaps are inserted into the cache using equal keys then the last pixmap will replace the first pixmap in the cache. This follows the behavior of the **QHash**  and **QCache**  classes.

    The cache becomes full when the total size of all pixmaps in the cache exceeds **cacheLimit** (). The initial cache limit is 10240 KB (10 MB); you can change this by calling **setCacheLimit** () with the required value. A pixmap takes roughly ( **width** * **height** * **depth** )/8 bytes of memory.

    The **Qt Quarterly** article **Optimizing with QPixmapCache**  explains how to use QPixmapCache to speed up applications by caching the results of painting.

    **Note:** QPixmapCache is only usable from the application's main thread. Access from other threads will be ignored and return failure.

    **See also** **QCache**  and **QPixmap** .
    """

    class Key(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(self, other: PySide2.QtGui.QPixmapCache.Key) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        def isValid(self) -> bool:
            ...

        def swap(self, other: PySide2.QtGui.QPixmapCache.Key) -> None:
            ...

    def __init__(self) -> None:
        ...

    @staticmethod
    def cacheLimit() -> int:
        """
        **[static] int QPixmapCache::cacheLimit()**

        Returns the cache limit (in kilobytes).

        The default cache limit is 10240 KB.

        **See also** **setCacheLimit** ().
        """
        ...

    @staticmethod
    def clear() -> None:
        """
        **[static] void QPixmapCache::clear()**

        Removes all pixmaps from the cache.
        """
        ...

    @typing.overload
    @staticmethod
    def find(
        key: PySide2.QtGui.QPixmapCache.Key, pixmap: PySide2.QtGui.QPixmap
    ) -> bool:
        ...

    @typing.overload
    @staticmethod
    def find(key: str) -> PySide2.QtGui.QPixmap:
        ...

    @typing.overload
    @staticmethod
    def find(key: str, pixmap: PySide2.QtGui.QPixmap) -> bool:
        ...

    @typing.overload
    def find(self, arg__1: PySide2.QtGui.QPixmapCache.Key) -> None:
        ...

    @typing.overload
    @staticmethod
    def insert(key: str, pixmap: PySide2.QtGui.QPixmap) -> bool:
        """
        **[static] bool QPixmapCache::insert(const QString & key , const QPixmap & pixmap )**

        Inserts a copy of the pixmap **pixmap** associated with the **key** into the cache.

        All pixmaps inserted by the Qt library have a key starting with "$qt", so your own pixmap keys should never begin "$qt".

        When a pixmap is inserted and the cache is about to exceed its limit, it removes pixmaps until there is enough room for the pixmap to be inserted.

        The oldest pixmaps (least recently accessed in the cache) are deleted when more space is needed.

        The function returns `true` if the object was inserted into the cache; otherwise it returns `false`.

        **See also** **setCacheLimit** ().
        """
        ...

    @typing.overload
    @staticmethod
    def insert(pixmap: PySide2.QtGui.QPixmap) -> PySide2.QtGui.QPixmapCache.Key:
        """
        **[static] bool QPixmapCache::insert(const QString & key , const QPixmap & pixmap )**

        Inserts a copy of the pixmap **pixmap** associated with the **key** into the cache.

        All pixmaps inserted by the Qt library have a key starting with "$qt", so your own pixmap keys should never begin "$qt".

        When a pixmap is inserted and the cache is about to exceed its limit, it removes pixmaps until there is enough room for the pixmap to be inserted.

        The oldest pixmaps (least recently accessed in the cache) are deleted when more space is needed.

        The function returns `true` if the object was inserted into the cache; otherwise it returns `false`.

        **See also** **setCacheLimit** ().
        """
        ...

    @typing.overload
    @staticmethod
    def remove(key: PySide2.QtGui.QPixmapCache.Key) -> None:
        """
        **[static] void QPixmapCache::remove(const QString & key )**

        Removes the pixmap associated with **key** from the cache.
        """
        ...

    @typing.overload
    @staticmethod
    def remove(key: str) -> None:
        """
        **[static] void QPixmapCache::remove(const QString & key )**

        Removes the pixmap associated with **key** from the cache.
        """
        ...

    @staticmethod
    def replace(
        key: PySide2.QtGui.QPixmapCache.Key, pixmap: PySide2.QtGui.QPixmap
    ) -> bool:
        """
        **[static] bool QPixmapCache::replace(const QPixmapCache::Key & key , const QPixmap & pixmap )**

        Replaces the pixmap associated with the given **key** with the **pixmap** specified. Returns `true` if the **pixmap** has been correctly inserted into the cache; otherwise returns `false`.

        This function was introduced in Qt 4.6.

        **See also** **setCacheLimit** () and **insert** ().
        """
        ...

    @staticmethod
    def setCacheLimit(arg__1: int) -> None:
        """
        **[static] void QPixmapCache::setCacheLimit(int n )**

        Sets the cache limit to **n** kilobytes.

        The default setting is 10240 KB.

        **See also** **cacheLimit** ().
        """
        ...
