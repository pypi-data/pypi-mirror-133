"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QCursor(object):
    """
    **Detailed Description**

    This class is mainly used to create mouse cursors that are associated with particular widgets and to get and set the position of the mouse cursor.

    Qt has a number of standard cursor shapes, but you can also make custom cursor shapes based on a **QBitmap** , a mask and a hotspot.

    To associate a cursor with a widget, use **QWidget::setCursor** (). To associate a cursor with all widgets (normally for a short period of time), use **QGuiApplication::setOverrideCursor** ().

    To set a cursor shape use **QCursor::setShape** () or use the QCursor constructor which takes the shape as argument, or you can use one of the predefined cursors defined in the **Qt::CursorShape**  enum.

    If you want to create a cursor with your own bitmap, either use the QCursor constructor which takes a bitmap and a mask or the constructor which takes a pixmap as arguments.

    To set or get the position of the mouse cursor use the static methods **QCursor::pos** () and **QCursor::setPos** ().

    **Note:** It is possible to create a QCursor before **QGuiApplication** , but it is not useful except as a place-holder for a real QCursor created after **QGuiApplication** . Attempting to use a QCursor that was created before **QGuiApplication**  will result in a crash.

    **A Note for X11 Users**

    On X11, Qt supports the **Xcursor**  library, which allows for full color icon themes. The table below shows the cursor name used for each **Qt::CursorShape**  value. If a cursor cannot be found using the name shown below, a standard X11 cursor will be used instead. Note: X11 does not provide appropriate cursors for all possible **Qt::CursorShape**  values. It is possible that some cursors will be taken from the Xcursor theme, while others will use an internal bitmap cursor.

    Shape**Qt::CursorShape**  ValueCursor NameShape**Qt::CursorShape**  ValueCursor Name
    ![](images/cursor-arrow.png)**Qt::ArrowCursor** `left_ptr`![](images/cursor-sizev.png)**Qt::SizeVerCursor** `size_ver`
    ![](images/cursor-uparrow.png)**Qt::UpArrowCursor** `up_arrow`![](images/cursor-sizeh.png)**Qt::SizeHorCursor** `size_hor`
    ![](images/cursor-cross.png)**Qt::CrossCursor** `cross`![](images/cursor-sizeb.png)**Qt::SizeBDiagCursor** `size_bdiag`
    ![](images/cursor-ibeam.png)**Qt::IBeamCursor** `ibeam`![](images/cursor-sizef.png)**Qt::SizeFDiagCursor** `size_fdiag`
    ![](images/cursor-wait.png)**Qt::WaitCursor** `wait`![](images/cursor-sizeall.png)**Qt::SizeAllCursor** `size_all`
    ![](images/cursor-busy.png)**Qt::BusyCursor** `left_ptr_watch`![](images/cursor-vsplit.png)**Qt::SplitVCursor** `split_v`
    ![](images/cursor-forbidden.png)**Qt::ForbiddenCursor** `forbidden`![](images/cursor-hsplit.png)**Qt::SplitHCursor** `split_h`
    ![](images/cursor-hand.png)**Qt::PointingHandCursor** `pointing_hand`![](images/cursor-openhand.png)**Qt::OpenHandCursor** `openhand`
    ![](images/cursor-whatsthis.png)**Qt::WhatsThisCursor** `whats_this`![](images/cursor-closedhand.png)**Qt::ClosedHandCursor** `closedhand`
    **Qt::DragMoveCursor** `dnd-move` or `move`**Qt::DragCopyCursor** `dnd-copy` or `copy`
    **Qt::DragLinkCursor** `dnd-link` or `link`

    **See also** **QWidget**  and **GUI Design Handbook: Cursors** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QCursor::QCursor()**

        Constructs a cursor with the default arrow shape.
        """
        ...

    @typing.overload
    def __init__(
        self,
        bitmap: PySide2.QtGui.QBitmap,
        mask: PySide2.QtGui.QBitmap,
        hotX: int = ...,
        hotY: int = ...,
    ) -> None:
        """
        **QCursor::QCursor()**

        Constructs a cursor with the default arrow shape.
        """
        ...

    @typing.overload
    def __init__(self, cursor: PySide2.QtGui.QCursor) -> None:
        """
        **QCursor::QCursor()**

        Constructs a cursor with the default arrow shape.
        """
        ...

    @typing.overload
    def __init__(
        self, pixmap: PySide2.QtGui.QPixmap, hotX: int = ..., hotY: int = ...
    ) -> None:
        """
        **QCursor::QCursor()**

        Constructs a cursor with the default arrow shape.
        """
        ...

    @typing.overload
    def __init__(self, shape: PySide2.QtCore.Qt.CursorShape) -> None:
        """
        **QCursor::QCursor()**

        Constructs a cursor with the default arrow shape.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __lshift__(
        self, outS: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(self, inS: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream:
        ...

    def bitmap(self) -> PySide2.QtGui.QBitmap:
        """
        **QBitmap QCursor::bitmap( Qt::ReturnByValueConstant ) const**

        Returns the cursor bitmap, or a null bitmap if it is one of the standard cursors.

        Previously, Qt provided a version of `bitmap()` which returned the bitmap by-pointer. That version is now deprecated. To maintain compatibility with old code, you can explicitly differentiate between the by-pointer function and the by-value function:

        const **QBitmap**  *bmpPtr = cursor->bitmap();
            **QBitmap**  bmpVal = cursor->bitmap(Qt::ReturnByValue);

        If you disable the deprecated version using the **QT_DISABLE_DEPRECATED_BEFORE**  macro, then you can omit `Qt::ReturnByValue` as shown below:

        **QBitmap**  bmpVal = cursor->bitmap();

        This function was introduced in Qt 5.15.
        """
        ...

    def hotSpot(self) -> PySide2.QtCore.QPoint:
        """
        **QPoint QCursor::hotSpot() const**

        Returns the cursor hot spot, or (0, 0) if it is one of the standard cursors.
        """
        ...

    def mask(self) -> PySide2.QtGui.QBitmap:
        """
        **QBitmap QCursor::mask( Qt::ReturnByValueConstant ) const**

        Returns the cursor bitmap mask, or a null bitmap if it is one of the standard cursors.

        Previously, Qt provided a version of `mask()` which returned the bitmap by-pointer. That version is now deprecated. To maintain compatibility with old code, you can explicitly differentiate between the by-pointer function and the by-value function:

        const **QBitmap**  *bmpPtr = cursor->mask();
            **QBitmap**  bmpVal = cursor->mask(Qt::ReturnByValue);

        If you disable the deprecated version using the **QT_DISABLE_DEPRECATED_BEFORE**  macro, then you can omit `Qt::ReturnByValue` as shown below:

        **QBitmap**  bmpVal = cursor->mask();

        This function was introduced in Qt 5.15.
        """
        ...

    def pixmap(self) -> PySide2.QtGui.QPixmap:
        """
        **QPixmap QCursor::pixmap() const**

        Returns the cursor pixmap. This is only valid if the cursor is a pixmap cursor.
        """
        ...

    @typing.overload
    @staticmethod
    def pos() -> PySide2.QtCore.QPoint:
        """
        **[static] QPoint QCursor::pos()**

        Returns the position of the cursor (hot spot) of the primary screen in global screen coordinates.

        You can call **QWidget::mapFromGlobal** () to translate it to widget coordinates.

        **Note:** The position is queried from the windowing system. If mouse events are generated via other means (e.g., via QWindowSystemInterface in a unit test), those fake mouse moves will not be reflected in the returned value.

        **Note:** On platforms where there is no windowing system or cursors are not available, the returned position is based on the mouse move events generated via QWindowSystemInterface.

        **See also** **setPos** (), **QWidget::mapFromGlobal** (), **QWidget::mapToGlobal** (), and **QGuiApplication::primaryScreen** ().
        """
        ...

    @typing.overload
    @staticmethod
    def pos(screen: PySide2.QtGui.QScreen) -> PySide2.QtCore.QPoint:
        """
        **[static] QPoint QCursor::pos()**

        Returns the position of the cursor (hot spot) of the primary screen in global screen coordinates.

        You can call **QWidget::mapFromGlobal** () to translate it to widget coordinates.

        **Note:** The position is queried from the windowing system. If mouse events are generated via other means (e.g., via QWindowSystemInterface in a unit test), those fake mouse moves will not be reflected in the returned value.

        **Note:** On platforms where there is no windowing system or cursors are not available, the returned position is based on the mouse move events generated via QWindowSystemInterface.

        **See also** **setPos** (), **QWidget::mapFromGlobal** (), **QWidget::mapToGlobal** (), and **QGuiApplication::primaryScreen** ().
        """
        ...

    @typing.overload
    @staticmethod
    def setPos(p: PySide2.QtCore.QPoint) -> None:
        """
        **[static] void QCursor::setPos(int x , int y )**

        Moves the cursor (hot spot) of the primary screen to the global screen position ( **x** , **y** ).

        You can call **QWidget::mapToGlobal** () to translate widget coordinates to global screen coordinates.

        **See also** **pos** (), **QWidget::mapFromGlobal** (), **QWidget::mapToGlobal** (), and **QGuiApplication::primaryScreen** ().
        """
        ...

    @typing.overload
    @staticmethod
    def setPos(screen: PySide2.QtGui.QScreen, p: PySide2.QtCore.QPoint) -> None:
        """
        **[static] void QCursor::setPos(int x , int y )**

        Moves the cursor (hot spot) of the primary screen to the global screen position ( **x** , **y** ).

        You can call **QWidget::mapToGlobal** () to translate widget coordinates to global screen coordinates.

        **See also** **pos** (), **QWidget::mapFromGlobal** (), **QWidget::mapToGlobal** (), and **QGuiApplication::primaryScreen** ().
        """
        ...

    @typing.overload
    @staticmethod
    def setPos(screen: PySide2.QtGui.QScreen, x: int, y: int) -> None:
        """
        **[static] void QCursor::setPos(int x , int y )**

        Moves the cursor (hot spot) of the primary screen to the global screen position ( **x** , **y** ).

        You can call **QWidget::mapToGlobal** () to translate widget coordinates to global screen coordinates.

        **See also** **pos** (), **QWidget::mapFromGlobal** (), **QWidget::mapToGlobal** (), and **QGuiApplication::primaryScreen** ().
        """
        ...

    @typing.overload
    @staticmethod
    def setPos(x: int, y: int) -> None:
        """
        **[static] void QCursor::setPos(int x , int y )**

        Moves the cursor (hot spot) of the primary screen to the global screen position ( **x** , **y** ).

        You can call **QWidget::mapToGlobal** () to translate widget coordinates to global screen coordinates.

        **See also** **pos** (), **QWidget::mapFromGlobal** (), **QWidget::mapToGlobal** (), and **QGuiApplication::primaryScreen** ().
        """
        ...

    def setShape(self, newShape: PySide2.QtCore.Qt.CursorShape) -> None:
        """
        **void QCursor::setShape(Qt::CursorShape shape )**

        Sets the cursor to the shape identified by **shape**.

        See **Qt::CursorShape**  for the list of cursor shapes.

        **See also** **shape** ().
        """
        ...

    def shape(self) -> PySide2.QtCore.Qt.CursorShape:
        """
        **Qt::CursorShape QCursor::shape() const**

        Returns the cursor shape identifier. The return value is one of the **Qt::CursorShape**  enum values (cast to an int).

        **See also** **setShape** ().
        """
        ...

    def swap(self, other: PySide2.QtGui.QCursor) -> None:
        """
        **void QCursor::swap(QCursor & other )**

        Swaps this cursor with the **other** cursor.

        This function was introduced in Qt 5.7.
        """
        ...
