"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QSurfaceFormat(object):
    """
    **Detailed Description**

    The format includes the size of the color buffers, red, green, and blue; the size of the alpha buffer; the size of the depth and stencil buffers; and number of samples per pixel for multisampling. In addition, the format contains surface configuration parameters such as OpenGL profile and version for rendering, whether or not to enable stereo buffers, and swap behaviour.

    **Note:** When troubleshooting context or window format issues, it can be helpful to enable the logging category `qt.qpa.gl`. Depending on the platform, this may print useful debug information when it comes to OpenGL initialization and the native visual or framebuffer configurations which QSurfaceFormat gets mapped to.
    """

    DefaultColorSpace: QSurfaceFormat = ...
    DefaultRenderableType: QSurfaceFormat = ...
    DefaultSwapBehavior: QSurfaceFormat = ...
    NoProfile: QSurfaceFormat = ...
    CoreProfile: QSurfaceFormat = ...
    OpenGL: QSurfaceFormat = ...
    SingleBuffer: QSurfaceFormat = ...
    StereoBuffers: QSurfaceFormat = ...
    sRGBColorSpace: QSurfaceFormat = ...
    CompatibilityProfile: QSurfaceFormat = ...
    DebugContext: QSurfaceFormat = ...
    DoubleBuffer: QSurfaceFormat = ...
    OpenGLES: QSurfaceFormat = ...
    TripleBuffer: QSurfaceFormat = ...
    DeprecatedFunctions: QSurfaceFormat = ...
    OpenVG: QSurfaceFormat = ...
    ResetNotification: QSurfaceFormat = ...

    class ColorSpace(object):
        DefaultColorSpace: QSurfaceFormat.ColorSpace = ...
        sRGBColorSpace: QSurfaceFormat.ColorSpace = ...

    class FormatOption(object):
        StereoBuffers: QSurfaceFormat.FormatOption = ...
        DebugContext: QSurfaceFormat.FormatOption = ...
        DeprecatedFunctions: QSurfaceFormat.FormatOption = ...
        ResetNotification: QSurfaceFormat.FormatOption = ...

    class FormatOptions(object):
        ...

    class OpenGLContextProfile(object):
        NoProfile: QSurfaceFormat.OpenGLContextProfile = ...
        CoreProfile: QSurfaceFormat.OpenGLContextProfile = ...
        CompatibilityProfile: QSurfaceFormat.OpenGLContextProfile = ...

    class RenderableType(object):
        DefaultRenderableType: QSurfaceFormat.RenderableType = ...
        OpenGL: QSurfaceFormat.RenderableType = ...
        OpenGLES: QSurfaceFormat.RenderableType = ...
        OpenVG: QSurfaceFormat.RenderableType = ...

    class SwapBehavior(object):
        DefaultSwapBehavior: QSurfaceFormat.SwapBehavior = ...
        SingleBuffer: QSurfaceFormat.SwapBehavior = ...
        DoubleBuffer: QSurfaceFormat.SwapBehavior = ...
        TripleBuffer: QSurfaceFormat.SwapBehavior = ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QSurfaceFormat::QSurfaceFormat()**

        Constructs a default initialized QSurfaceFormat.

        **Note:** By default OpenGL 2.0 is requested since this provides the highest grade of portability between platforms and OpenGL implementations.
        """
        ...

    @typing.overload
    def __init__(self, options: PySide2.QtGui.QSurfaceFormat.FormatOptions) -> None:
        """
        **QSurfaceFormat::QSurfaceFormat()**

        Constructs a default initialized QSurfaceFormat.

        **Note:** By default OpenGL 2.0 is requested since this provides the highest grade of portability between platforms and OpenGL implementations.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtGui.QSurfaceFormat) -> None:
        """
        **QSurfaceFormat::QSurfaceFormat()**

        Constructs a default initialized QSurfaceFormat.

        **Note:** By default OpenGL 2.0 is requested since this provides the highest grade of portability between platforms and OpenGL implementations.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def alphaBufferSize(self) -> int:
        """
        **int QSurfaceFormat::alphaBufferSize() const**

        Get the size in bits of the alpha channel of the color buffer.

        **See also** **setAlphaBufferSize** ().
        """
        ...

    def blueBufferSize(self) -> int:
        """
        **int QSurfaceFormat::blueBufferSize() const**

        Get the size in bits of the blue channel of the color buffer.

        **See also** **setBlueBufferSize** ().
        """
        ...

    def colorSpace(self) -> PySide2.QtGui.QSurfaceFormat.ColorSpace:
        """
        **QSurfaceFormat::ColorSpace QSurfaceFormat::colorSpace() const**

        Returns the color space.

        This function was introduced in Qt 5.10.

        **See also** **setColorSpace** ().
        """
        ...

    @staticmethod
    def defaultFormat() -> PySide2.QtGui.QSurfaceFormat:
        """
        **[static] QSurfaceFormat QSurfaceFormat::defaultFormat()**

        Returns the global default surface format.

        When **setDefaultFormat** () is not called, this is a default-constructed **QSurfaceFormat** .

        This function was introduced in Qt 5.4.

        **See also** **setDefaultFormat** ().
        """
        ...

    def depthBufferSize(self) -> int:
        """
        **int QSurfaceFormat::depthBufferSize() const**

        Returns the depth buffer size.

        **See also** **setDepthBufferSize** ().
        """
        ...

    def greenBufferSize(self) -> int:
        """
        **int QSurfaceFormat::greenBufferSize() const**

        Get the size in bits of the green channel of the color buffer.

        **See also** **setGreenBufferSize** ().
        """
        ...

    def hasAlpha(self) -> bool:
        """
        **bool QSurfaceFormat::hasAlpha() const**

        Returns `true` if the alpha buffer size is greater than zero.

        This means that the surface might be used with per pixel translucency effects.
        """
        ...

    def majorVersion(self) -> int:
        """
        **int QSurfaceFormat::majorVersion() const**

        Returns the major OpenGL version.

        The default version is 2.0.

        **See also** **setMajorVersion** ().
        """
        ...

    def minorVersion(self) -> int:
        """
        **int QSurfaceFormat::minorVersion() const**

        Returns the minor OpenGL version.

        **See also** **setMinorVersion** ().
        """
        ...

    def options(self) -> PySide2.QtGui.QSurfaceFormat.FormatOptions:
        """
        **QSurfaceFormat::FormatOptions QSurfaceFormat::options() const**

        Returns the currently set format options.

        This function was introduced in Qt 5.3.

        **See also** **setOption** (), **setOptions** (), and **testOption** ().
        """
        ...

    def profile(self) -> PySide2.QtGui.QSurfaceFormat.OpenGLContextProfile:
        """
        **QSurfaceFormat::OpenGLContextProfile QSurfaceFormat::profile() const**

        Get the configured OpenGL context profile.

        This setting is ignored if the requested OpenGL version is less than 3.2.

        **See also** **setProfile** ().
        """
        ...

    def redBufferSize(self) -> int:
        """
        **int QSurfaceFormat::redBufferSize() const**

        Get the size in bits of the red channel of the color buffer.

        **See also** **setRedBufferSize** ().
        """
        ...

    def renderableType(self) -> PySide2.QtGui.QSurfaceFormat.RenderableType:
        """
        **QSurfaceFormat::RenderableType QSurfaceFormat::renderableType() const**

        Gets the renderable type.

        Chooses between desktop OpenGL, OpenGL ES, and **OpenVG** .

        **See also** **setRenderableType** ().
        """
        ...

    def samples(self) -> int:
        """
        **int QSurfaceFormat::samples() const**

        Returns the number of samples per pixel when multisampling is enabled, or `-1` when multisampling is disabled. The default return value is `-1`.

        **See also** **setSamples** ().
        """
        ...

    def setAlphaBufferSize(self, size: int) -> None:
        """
        **void QSurfaceFormat::setAlphaBufferSize(int size )**

        Set the desired **size** in bits of the alpha channel of the color buffer.

        **See also** **alphaBufferSize** ().
        """
        ...

    def setBlueBufferSize(self, size: int) -> None:
        """
        **void QSurfaceFormat::setBlueBufferSize(int size )**

        Set the desired **size** in bits of the blue channel of the color buffer.

        **See also** **blueBufferSize** ().
        """
        ...

    def setColorSpace(
        self, colorSpace: PySide2.QtGui.QSurfaceFormat.ColorSpace
    ) -> None:
        """
        **void QSurfaceFormat::setColorSpace(QSurfaceFormat::ColorSpace colorSpace )**

        Sets the preferred **colorSpace**.

        For example, this allows requesting windows with default framebuffers that are sRGB-capable on platforms that support it.

        **Note:** When the requested color space is not supported by the platform, the request is ignored. Query the **QSurfaceFormat**  after window creation to verify if the color space request could be honored or not.

        **Note:** This setting controls if the default framebuffer of the window is capable of updates and blending in a given color space. It does not change applications' output by itself. The applications' rendering code will still have to opt in via the appropriate OpenGL calls to enable updates and blending to be performed in the given color space instead of using the standard linear operations.

        This function was introduced in Qt 5.10.

        **See also** **colorSpace** ().
        """
        ...

    @staticmethod
    def setDefaultFormat(format: PySide2.QtGui.QSurfaceFormat) -> None:
        """
        **[static] void QSurfaceFormat::setDefaultFormat(const QSurfaceFormat & format )**

        Sets the global default surface **format**.

        This format is used by default in **QOpenGLContext** , **QWindow** , **QOpenGLWidget**  and similar classes.

        It can always be overridden on a per-instance basis by using the class in question's own setFormat() function. However, it is often more convenient to set the format for all windows once at the start of the application. It also guarantees proper behavior in cases where shared contexts are required, because settings the format via this function guarantees that all contexts and surfaces, even the ones created internally by Qt, will use the same format.

        **Note:** When setting **Qt::AA_ShareOpenGLContexts** , it is strongly recommended to place the call to this function before the construction of the **QGuiApplication**  or **QApplication** . Otherwise **format** will not be applied to the global share context and therefore issues may arise with context sharing afterwards.

        This function was introduced in Qt 5.4.

        **See also** **defaultFormat** ().
        """
        ...

    def setDepthBufferSize(self, size: int) -> None:
        """
        **void QSurfaceFormat::setDepthBufferSize(int size )**

        Set the minimum depth buffer size to **size**.

        **See also** **depthBufferSize** ().
        """
        ...

    def setGreenBufferSize(self, size: int) -> None:
        """
        **void QSurfaceFormat::setGreenBufferSize(int size )**

        Set the desired **size** in bits of the green channel of the color buffer.

        **See also** **greenBufferSize** ().
        """
        ...

    def setMajorVersion(self, majorVersion: int) -> None:
        """
        **void QSurfaceFormat::setMajorVersion(int major )**

        Sets the desired **major** OpenGL version.

        **See also** **majorVersion** ().
        """
        ...

    def setMinorVersion(self, minorVersion: int) -> None:
        """
        **void QSurfaceFormat::setMinorVersion(int minor )**

        Sets the desired **minor** OpenGL version.

        The default version is 2.0.

        **See also** **minorVersion** ().
        """
        ...

    @typing.overload
    def setOption(self, opt: PySide2.QtGui.QSurfaceFormat.FormatOptions) -> None:
        """
        **void QSurfaceFormat::setOption(QSurfaceFormat::FormatOption option , bool on = true)**

        Sets the format option **option** if **on** is true; otherwise, clears the option.

        This function was introduced in Qt 5.3.

        **See also** **setOptions** (), **options** (), and **testOption** ().
        """
        ...

    @typing.overload
    def setOption(
        self, option: PySide2.QtGui.QSurfaceFormat.FormatOption, on: bool = ...
    ) -> None:
        """
        **void QSurfaceFormat::setOption(QSurfaceFormat::FormatOption option , bool on = true)**

        Sets the format option **option** if **on** is true; otherwise, clears the option.

        This function was introduced in Qt 5.3.

        **See also** **setOptions** (), **options** (), and **testOption** ().
        """
        ...

    def setOptions(self, options: PySide2.QtGui.QSurfaceFormat.FormatOptions) -> None:
        """
        **void QSurfaceFormat::setOptions(QSurfaceFormat::FormatOptions options )**

        Sets the format options to **options**.

        This function was introduced in Qt 5.3.

        **See also** **options** () and **testOption** ().
        """
        ...

    def setProfile(
        self, profile: PySide2.QtGui.QSurfaceFormat.OpenGLContextProfile
    ) -> None:
        """
        **void QSurfaceFormat::setProfile(QSurfaceFormat::OpenGLContextProfile profile )**

        Sets the desired OpenGL context **profile**.

        This setting is ignored if the requested OpenGL version is less than 3.2.

        **See also** **profile** ().
        """
        ...

    def setRedBufferSize(self, size: int) -> None:
        """
        **void QSurfaceFormat::setRedBufferSize(int size )**

        Set the desired **size** in bits of the red channel of the color buffer.

        **See also** **redBufferSize** ().
        """
        ...

    def setRenderableType(
        self, type: PySide2.QtGui.QSurfaceFormat.RenderableType
    ) -> None:
        """
        **void QSurfaceFormat::setRenderableType(QSurfaceFormat::RenderableType type )**

        Sets the desired renderable **type**.

        Chooses between desktop OpenGL, OpenGL ES, and **OpenVG** .

        **See also** **renderableType** ().
        """
        ...

    def setSamples(self, numSamples: int) -> None:
        """
        **void QSurfaceFormat::setSamples(int numSamples )**

        Set the preferred number of samples per pixel when multisampling is enabled to **numSamples**. By default, multisampling is disabled.

        **See also** **samples** ().
        """
        ...

    def setStencilBufferSize(self, size: int) -> None:
        """
        **void QSurfaceFormat::setStencilBufferSize(int size )**

        Set the preferred stencil buffer size to **size** bits.

        **See also** **stencilBufferSize** ().
        """
        ...

    def setStereo(self, enable: bool) -> None:
        """
        **void QSurfaceFormat::setStereo(bool enable )**

        If **enable** is true enables stereo buffering; otherwise disables stereo buffering.

        Stereo buffering is disabled by default.

        Stereo buffering provides extra color buffers to generate left-eye and right-eye images.

        **See also** **stereo** ().
        """
        ...

    def setSwapBehavior(
        self, behavior: PySide2.QtGui.QSurfaceFormat.SwapBehavior
    ) -> None:
        """
        **void QSurfaceFormat::setSwapBehavior(QSurfaceFormat::SwapBehavior behavior )**

        Set the swap **behavior** of the surface.

        The swap behavior specifies whether single, double, or triple buffering is desired. The default, **DefaultSwapBehavior** , gives the default swap behavior of the platform.

        **See also** **swapBehavior** ().
        """
        ...

    def setSwapInterval(self, interval: int) -> None:
        """
        **void QSurfaceFormat::setSwapInterval(int interval )**

        Sets the preferred swap interval. The swap interval specifies the minimum number of video frames that are displayed before a buffer swap occurs. This can be used to sync the GL drawing into a window to the vertical refresh of the screen.

        Setting an **interval** value of 0 will turn the vertical refresh syncing off, any value higher than 0 will turn the vertical syncing on. Setting **interval** to a higher value, for example 10, results in having 10 vertical retraces between every buffer swap.

        The default interval is 1.

        Changing the swap interval may not be supported by the underlying platform. In this case, the request will be silently ignored.

        This function was introduced in Qt 5.3.

        **See also** **swapInterval** ().
        """
        ...

    def setVersion(self, major: int, minor: int) -> None:
        """
        **void QSurfaceFormat::setVersion(int major , int minor )**

        Sets the desired **major** and **minor** OpenGL versions.

        The default version is 2.0.

        **See also** **version** ().
        """
        ...

    def stencilBufferSize(self) -> int:
        """
        **int QSurfaceFormat::stencilBufferSize() const**

        Returns the stencil buffer size in bits.

        **See also** **setStencilBufferSize** ().
        """
        ...

    def stereo(self) -> bool:
        """
        **bool QSurfaceFormat::stereo() const**

        Returns `true` if stereo buffering is enabled; otherwise returns false. Stereo buffering is disabled by default.

        **See also** **setStereo** ().
        """
        ...

    def swapBehavior(self) -> PySide2.QtGui.QSurfaceFormat.SwapBehavior:
        """
        **QSurfaceFormat::SwapBehavior QSurfaceFormat::swapBehavior() const**

        Returns the configured swap behaviour.

        **See also** **setSwapBehavior** ().
        """
        ...

    def swapInterval(self) -> int:
        """
        **int QSurfaceFormat::swapInterval() const**

        Returns the swap interval.

        This function was introduced in Qt 5.3.

        **See also** **setSwapInterval** ().
        """
        ...

    @typing.overload
    def testOption(self, opt: PySide2.QtGui.QSurfaceFormat.FormatOptions) -> bool:
        """
        **bool QSurfaceFormat::testOption(QSurfaceFormat::FormatOption option ) const**

        Returns true if the format option **option** is set; otherwise returns false.

        This function was introduced in Qt 5.3.

        **See also** **options** ().
        """
        ...

    @typing.overload
    def testOption(self, option: PySide2.QtGui.QSurfaceFormat.FormatOption) -> bool:
        """
        **bool QSurfaceFormat::testOption(QSurfaceFormat::FormatOption option ) const**

        Returns true if the format option **option** is set; otherwise returns false.

        This function was introduced in Qt 5.3.

        **See also** **options** ().
        """
        ...

    def version(self) -> typing.Tuple:
        """
        **QPair<int, int> QSurfaceFormat::version() const**

        Returns a **QPair** <int, int> representing the OpenGL version.

        Useful for version checks, for example format.version() >= **qMakePair** (3, 2)

        **See also** **setVersion** ().
        """
        ...
