"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPolygonF(object):
    """
    **Detailed Description**

    A QPolygonF is a **QVector** <**QPointF** >. The easiest way to add points to a QPolygonF is to use its streaming operator, as illustrated below:

    **QPolygonF**  polygon;
                polygon << **QPointF** (10.4, 20.5) << **QPointF** (20.2, 30.2);

    In addition to the functions provided by **QVector** , QPolygonF provides the **boundingRect** () and **translate** () functions for geometry operations. Use the **QTransform::map** () function for more general transformations of QPolygonFs.

    QPolygonF also provides the **isClosed** () function to determine whether a polygon's start and end points are the same, and the **toPolygon** () function returning an integer precision copy of this polygon.

    The QPolygonF class is **implicitly shared** .

    **See also** **QVector** , **QPolygon** , and **QLineF** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QPolygonF::QPolygonF()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, a: PySide2.QtGui.QPolygon) -> None:
        """
        **QPolygonF::QPolygonF()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, a: PySide2.QtGui.QPolygonF) -> None:
        """
        **QPolygonF::QPolygonF()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, r: PySide2.QtCore.QRectF) -> None:
        """
        **QPolygonF::QPolygonF()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, size: int) -> None:
        """
        **QPolygonF::QPolygonF()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, v: typing.List) -> None:
        """
        **QPolygonF::QPolygonF()**

        Constructs a polygon with no points.

        **See also** **QVector::isEmpty** ().
        """
        ...

    def __add__(self, l: typing.List) -> typing.List:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __iadd__(self, t: PySide2.QtCore.QPointF) -> typing.List:
        ...

    def __lshift__(
        self, stream: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    @typing.overload
    def __mul__(self, m: PySide2.QtGui.QMatrix) -> PySide2.QtGui.QPolygonF:
        ...

    @typing.overload
    def __mul__(self, m: PySide2.QtGui.QTransform) -> PySide2.QtGui.QPolygonF:
        ...

    def __rshift__(
        self, stream: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    @typing.overload
    def append(self, l: typing.List) -> None:
        ...

    @typing.overload
    def append(self, t: PySide2.QtCore.QPointF) -> None:
        ...

    def at(self, i: int) -> PySide2.QtCore.QPointF:
        ...

    def back(self) -> PySide2.QtCore.QPointF:
        ...

    def boundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **QRectF QPolygonF::boundingRect() const**

        Returns the bounding rectangle of the polygon, or **QRectF** (0,0,0,0) if the polygon is empty.

        **See also** **QVector::isEmpty** ().
        """
        ...

    def capacity(self) -> int:
        ...

    def clear(self) -> None:
        ...

    def constData(self) -> PySide2.QtCore.QPointF:
        ...

    def constFirst(self) -> PySide2.QtCore.QPointF:
        ...

    def constLast(self) -> PySide2.QtCore.QPointF:
        ...

    def contains(self, t: PySide2.QtCore.QPointF) -> bool:
        ...

    def containsPoint(
        self, pt: PySide2.QtCore.QPointF, fillRule: PySide2.QtCore.Qt.FillRule
    ) -> bool:
        """
        **bool QPolygonF::containsPoint(const QPointF & point , Qt::FillRule fillRule ) const**

        Returns `true` if the given **point** is inside the polygon according to the specified **fillRule** ; otherwise returns `false`.

        This function was introduced in Qt 4.3.
        """
        ...

    @typing.overload
    def count(self) -> int:
        ...

    @typing.overload
    def count(self, t: PySide2.QtCore.QPointF) -> int:
        ...

    def data(self) -> PySide2.QtCore.QPointF:
        ...

    def empty(self) -> bool:
        ...

    def endsWith(self, t: PySide2.QtCore.QPointF) -> bool:
        ...

    def fill(self, t: PySide2.QtCore.QPointF, size: int = ...) -> typing.List:
        ...

    def first(self) -> PySide2.QtCore.QPointF:
        ...

    @staticmethod
    def fromList(list: typing.Sequence) -> typing.List:
        ...

    def front(self) -> PySide2.QtCore.QPointF:
        ...

    def indexOf(self, t: PySide2.QtCore.QPointF, from_: int = ...) -> int:
        ...

    @typing.overload
    def insert(self, i: int, n: int, t: PySide2.QtCore.QPointF) -> None:
        ...

    @typing.overload
    def insert(self, i: int, t: PySide2.QtCore.QPointF) -> None:
        ...

    def intersected(self, r: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF:
        """
        **QPolygonF QPolygonF::intersected(const QPolygonF & r ) const**

        Returns a polygon which is the intersection of this polygon and **r**.

        Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.

        This function was introduced in Qt 4.3.

        **See also** **intersects** ().
        """
        ...

    def intersects(self, r: PySide2.QtGui.QPolygonF) -> bool:
        """
        **bool QPolygonF::intersects(const QPolygonF & p ) const**

        Returns `true` if the current polygon intersects at any point the given polygon **p**. Also returns `true` if the current polygon contains or is contained by any part of **p**.

        Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.

        This function was introduced in Qt 5.10.

        **See also** **intersected** ().
        """
        ...

    def isClosed(self) -> bool:
        """
        **bool QPolygonF::isClosed() const**

        Returns `true` if the polygon is closed; otherwise returns `false`.

        A polygon is said to be closed if its start point and end point are equal.

        **See also** **QVector::first** () and **QVector::last** ().
        """
        ...

    def isEmpty(self) -> bool:
        ...

    def isSharedWith(self, other: typing.List) -> bool:
        ...

    def last(self) -> PySide2.QtCore.QPointF:
        ...

    def lastIndexOf(self, t: PySide2.QtCore.QPointF, from_: int = ...) -> int:
        ...

    def length(self) -> int:
        ...

    def mid(self, pos: int, len: int = ...) -> typing.List:
        ...

    def move(self, from_: int, to: int) -> None:
        ...

    def pop_back(self) -> None:
        ...

    def pop_front(self) -> None:
        ...

    def prepend(self, t: PySide2.QtCore.QPointF) -> None:
        ...

    def push_back(self, t: PySide2.QtCore.QPointF) -> None:
        ...

    def push_front(self, t: PySide2.QtCore.QPointF) -> None:
        ...

    @typing.overload
    def remove(self, i: int) -> None:
        ...

    @typing.overload
    def remove(self, i: int, n: int) -> None:
        ...

    def removeAll(self, t: PySide2.QtCore.QPointF) -> int:
        ...

    def removeAt(self, i: int) -> None:
        ...

    def removeFirst(self) -> None:
        ...

    def removeLast(self) -> None:
        ...

    def removeOne(self, t: PySide2.QtCore.QPointF) -> bool:
        ...

    def replace(self, i: int, t: PySide2.QtCore.QPointF) -> None:
        ...

    def reserve(self, size: int) -> None:
        ...

    def resize(self, size: int) -> None:
        ...

    def setSharable(self, sharable: bool) -> None:
        ...

    def shrink_to_fit(self) -> None:
        ...

    def size(self) -> int:
        ...

    def squeeze(self) -> None:
        ...

    def startsWith(self, t: PySide2.QtCore.QPointF) -> bool:
        ...

    def subtracted(self, r: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF:
        """
        **QPolygonF QPolygonF::subtracted(const QPolygonF & r ) const**

        Returns a polygon which is **r** subtracted from this polygon.

        Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.

        This function was introduced in Qt 4.3.
        """
        ...

    def swap(self, other: PySide2.QtGui.QPolygonF) -> None:
        """
        **void QPolygonF::swap(QPolygonF & other )**

        Swaps polygon **other** with this polygon. This operation is very fast and never fails.

        This function was introduced in Qt 4.8.
        """
        ...

    def swapItemsAt(self, i: int, j: int) -> None:
        ...

    def takeAt(self, i: int) -> PySide2.QtCore.QPointF:
        ...

    def takeFirst(self) -> PySide2.QtCore.QPointF:
        ...

    def takeLast(self) -> PySide2.QtCore.QPointF:
        ...

    def toList(self) -> typing.List:
        ...

    def toPolygon(self) -> PySide2.QtGui.QPolygon:
        """
        **QPolygon QPolygonF::toPolygon() const**

        Creates and returns a **QPolygon**  by converting each **QPointF**  to a **QPoint** .

        **See also** **QPointF::toPoint** ().
        """
        ...

    @typing.overload
    def translate(self, dx: float, dy: float) -> None:
        """
        **void QPolygonF::translate(const QPointF & offset )**

        Translate all points in the polygon by the given **offset**.

        **See also** **translated** ().
        """
        ...

    @typing.overload
    def translate(self, offset: PySide2.QtCore.QPointF) -> None:
        """
        **void QPolygonF::translate(const QPointF & offset )**

        Translate all points in the polygon by the given **offset**.

        **See also** **translated** ().
        """
        ...

    @typing.overload
    def translated(self, dx: float, dy: float) -> PySide2.QtGui.QPolygonF:
        """
        **QPolygonF QPolygonF::translated(const QPointF & offset ) const**

        Returns a copy of the polygon that is translated by the given **offset**.

        This function was introduced in Qt 4.6.

        **See also** **translate** ().
        """
        ...

    @typing.overload
    def translated(self, offset: PySide2.QtCore.QPointF) -> PySide2.QtGui.QPolygonF:
        """
        **QPolygonF QPolygonF::translated(const QPointF & offset ) const**

        Returns a copy of the polygon that is translated by the given **offset**.

        This function was introduced in Qt 4.6.

        **See also** **translate** ().
        """
        ...

    def united(self, r: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF:
        """
        **QPolygonF QPolygonF::united(const QPolygonF & r ) const**

        Returns a polygon which is the union of this polygon and **r**.

        Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.

        This function was introduced in Qt 4.3.

        **See also** **intersected** () and **subtracted** ().
        """
        ...

    @typing.overload
    def value(self, i: int) -> PySide2.QtCore.QPointF:
        ...

    @typing.overload
    def value(
        self, i: int, defaultValue: PySide2.QtCore.QPointF
    ) -> PySide2.QtCore.QPointF:
        ...
