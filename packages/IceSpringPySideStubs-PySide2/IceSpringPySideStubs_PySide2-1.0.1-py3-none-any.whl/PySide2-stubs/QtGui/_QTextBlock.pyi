"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QTextBlock(object):
    """
    **Detailed Description**

    A text block encapsulates a block or paragraph of text in a **QTextDocument** . QTextBlock provides read-only access to the block/paragraph structure of QTextDocuments. It is mainly of use if you want to implement your own layouts for the visual representation of a **QTextDocument** , or if you want to iterate over a document and write out the contents in your own custom format.

    Text blocks are created by their parent documents. If you need to create a new text block, or modify the contents of a document while examining its contents, use the cursor-based interface provided by **QTextCursor**  instead.

    Each text block is located at a specific **position** () in a **document** (). The contents of the block can be obtained by using the **text** () function. The **length** () function determines the block's size within the document (including formatting characters). The visual properties of the block are determined by its text **layout** (), its **charFormat** (), and its **blockFormat** ().

    The **next** () and **previous** () functions enable iteration over consecutive valid blocks in a document under the condition that the document is not modified by other means during the iteration process. Note that, although blocks are returned in sequence, adjacent blocks may come from different places in the document structure. The validity of a block can be determined by calling **isValid** ().

    QTextBlock provides comparison operators to make it easier to work with blocks: **operator==** () compares two block for equality, **operator!=** () compares two blocks for inequality, and **operator<** () determines whether a block precedes another in the same document.

    ![](images/qtextblock-sequence.png)

    **See also** **QTextBlockFormat** , **QTextCharFormat** , and **QTextFragment** .
    """

    class iterator(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(self, o: PySide2.QtGui.QTextBlock.iterator) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        def __iadd__(self, arg__1: int) -> PySide2.QtGui.QTextBlock.iterator:
            ...

        def __isub__(self, arg__1: int) -> PySide2.QtGui.QTextBlock.iterator:
            ...

        def __iter__(self) -> object:
            ...

        def __next__(self) -> object:
            ...

        def atEnd(self) -> bool:
            ...

        def fragment(self) -> PySide2.QtGui.QTextFragment:
            ...

    @typing.overload
    def __init__(self) -> None:
        ...

    @typing.overload
    def __init__(self, o: PySide2.QtGui.QTextBlock) -> None:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __iter__(self) -> object:
        ...

    def begin(self) -> PySide2.QtGui.QTextBlock.iterator:
        """
        **QTextBlock::iterator QTextBlock::begin() const**

        Returns a text block iterator pointing to the beginning of the text block.

        **See also** **end** ().
        """
        ...

    def blockFormat(self) -> PySide2.QtGui.QTextBlockFormat:
        """
        **QTextBlockFormat QTextBlock::blockFormat() const**

        Returns the **QTextBlockFormat**  that describes block-specific properties.

        **See also** **charFormat** ().
        """
        ...

    def blockFormatIndex(self) -> int:
        """
        **int QTextBlock::blockFormatIndex() const**

        Returns an index into the document's internal list of block formats for the text block's format.

        **See also** **QTextDocument::allFormats** ().
        """
        ...

    def blockNumber(self) -> int:
        """
        **int QTextBlock::blockNumber() const**

        Returns the number of this block, or -1 if the block is invalid.

        This function was introduced in Qt 4.4.

        **See also** **QTextCursor::blockNumber** ().
        """
        ...

    def charFormat(self) -> PySide2.QtGui.QTextCharFormat:
        """
        **QTextCharFormat QTextBlock::charFormat() const**

        Returns the **QTextCharFormat**  that describes the block's character format. The block's character format is used when inserting text into an empty block.

        **See also** **blockFormat** ().
        """
        ...

    def charFormatIndex(self) -> int:
        """
        **int QTextBlock::charFormatIndex() const**

        Returns an index into the document's internal list of character formats for the text block's character format.

        **See also** **QTextDocument::allFormats** ().
        """
        ...

    def clearLayout(self) -> None:
        """
        **void QTextBlock::clearLayout()**

        Clears the **QTextLayout**  that is used to lay out and display the block's contents.

        This function was introduced in Qt 4.4.

        **See also** **layout** ().
        """
        ...

    def contains(self, position: int) -> bool:
        """
        **bool QTextBlock::contains(int position ) const**

        Returns `true` if the given **position** is located within the text block; otherwise returns `false`.
        """
        ...

    def document(self) -> PySide2.QtGui.QTextDocument:
        """
        **const QTextDocument *QTextBlock::document() const**

        Returns the text document this text block belongs to, or `nullptr` if the text block does not belong to any document.
        """
        ...

    def end(self) -> PySide2.QtGui.QTextBlock.iterator:
        """
        **QTextBlock::iterator QTextBlock::end() const**

        Returns a text block iterator pointing to the end of the text block.

        **See also** **begin** (), **next** (), and **previous** ().
        """
        ...

    def firstLineNumber(self) -> int:
        """
        **int QTextBlock::firstLineNumber() const**

        Returns the first line number of this block, or -1 if the block is invalid. Unless the layout supports it, the line number is identical to the block number.

        This function was introduced in Qt 4.5.

        **See also** **QTextBlock::blockNumber** ().
        """
        ...

    def fragmentIndex(self) -> int:
        ...

    def isValid(self) -> bool:
        """
        **bool QTextBlock::isValid() const**

        Returns `true` if this text block is valid; otherwise returns `false`.
        """
        ...

    def isVisible(self) -> bool:
        """
        **bool QTextBlock::isVisible() const**

        Returns `true` if the block is visible; otherwise returns `false`.

        This function was introduced in Qt 4.4.

        **See also** **setVisible** ().
        """
        ...

    def layout(self) -> PySide2.QtGui.QTextLayout:
        """
        **QTextLayout *QTextBlock::layout() const**

        Returns the **QTextLayout**  that is used to lay out and display the block's contents.

        Note that the returned **QTextLayout**  object can only be modified from the documentChanged implementation of a **QAbstractTextDocumentLayout**  subclass. Any changes applied from the outside cause undefined behavior.

        **See also** **clearLayout** ().
        """
        ...

    def length(self) -> int:
        """
        **int QTextBlock::length() const**

        Returns the length of the block in characters.

        **Note:** The length returned includes all formatting characters, for example, newline.

        **See also** **text** (), **charFormat** (), and **blockFormat** ().
        """
        ...

    def lineCount(self) -> int:
        """
        **int QTextBlock::lineCount() const**

        Returns the line count. Not all document layouts support this feature.

        This function was introduced in Qt 4.5.

        **See also** **setLineCount** ().
        """
        ...

    def next(self) -> PySide2.QtGui.QTextBlock:
        """
        **QTextBlock QTextBlock::next() const**

        Returns the text block in the document after this block, or an empty text block if this is the last one.

        Note that the next block may be in a different frame or table to this block.

        **See also** **previous** (), **begin** (), and **end** ().
        """
        ...

    def position(self) -> int:
        """
        **int QTextBlock::position() const**

        Returns the index of the block's first character within the document.
        """
        ...

    def previous(self) -> PySide2.QtGui.QTextBlock:
        """
        **QTextBlock QTextBlock::previous() const**

        Returns the text block in the document before this block, or an empty text block if this is the first one.

        Note that the previous block may be in a different frame or table to this block.

        **See also** **next** (), **begin** (), and **end** ().
        """
        ...

    def revision(self) -> int:
        """
        **int QTextBlock::revision() const**

        Returns the blocks revision.

        This function was introduced in Qt 4.4.

        **See also** **setRevision** () and **QTextDocument::revision** ().
        """
        ...

    def setLineCount(self, count: int) -> None:
        """
        **void QTextBlock::setLineCount(int count )**

        Sets the line count to **count**.

        This function was introduced in Qt 4.5.

        **See also** **lineCount** ().
        """
        ...

    def setRevision(self, rev: int) -> None:
        """
        **void QTextBlock::setRevision(int rev )**

        Sets a blocks revision to **rev**.

        This function was introduced in Qt 4.4.

        **See also** **revision** () and **QTextDocument::revision** ().
        """
        ...

    def setUserData(self, data: PySide2.QtGui.QTextBlockUserData) -> None:
        """
        **void QTextBlock::setUserData(QTextBlockUserData * data )**

        Attaches the given **data** object to the text block.

        **QTextBlockUserData**  can be used to store custom settings. The ownership is passed to the underlying text document, i.e. the provided **QTextBlockUserData**  object will be deleted if the corresponding text block gets deleted. The user data object is not stored in the undo history, so it will not be available after undoing the deletion of a text block.

        For example, if you write a programming editor in an IDE, you may want to let your user set breakpoints visually in your code for an integrated debugger. In a programming editor a line of text usually corresponds to one **QTextBlock** . The **QTextBlockUserData**  interface allows the developer to store data for each **QTextBlock** , like for example in which lines of the source code the user has a breakpoint set. Of course this could also be stored externally, but by storing it inside the **QTextDocument** , it will for example be automatically deleted when the user deletes the associated line. It's really just a way to store custom information in the **QTextDocument**  without using custom properties in **QTextFormat**  which would affect the undo/redo stack.

        This function was introduced in Qt 4.1.

        **See also** **userData** ().
        """
        ...

    def setUserState(self, state: int) -> None:
        """
        **void QTextBlock::setUserState(int state )**

        Stores the specified **state** integer value in the text block. This may be useful for example in a syntax highlighter to store a text parsing state.

        This function was introduced in Qt 4.1.

        **See also** **userState** ().
        """
        ...

    def setVisible(self, visible: bool) -> None:
        """
        **void QTextBlock::setVisible(bool visible )**

        Sets the block's visibility to **visible**.

        This function was introduced in Qt 4.4.

        **See also** **isVisible** ().
        """
        ...

    def text(self) -> str:
        """
        **QString QTextBlock::text() const**

        Returns the block's contents as plain text.

        **See also** **length** (), **charFormat** (), and **blockFormat** ().
        """
        ...

    def textDirection(self) -> PySide2.QtCore.Qt.LayoutDirection:
        """
        **Qt::LayoutDirection QTextBlock::textDirection() const**

        Returns the resolved text direction.

        If the block has no explicit direction set, it will resolve the direction from the blocks content. Returns either **Qt::LeftToRight**  or **Qt::RightToLeft** .

        This function was introduced in Qt 4.7.

        **See also** **QTextFormat::layoutDirection** (), **QString::isRightToLeft** (), and **Qt::LayoutDirection** .
        """
        ...

    def textFormats(self) -> typing.List:
        """
        **QVector<QTextLayout::FormatRange> QTextBlock::textFormats() const**

        Returns the block's text format options as a list of continuous ranges of **QTextCharFormat** . The range's character format is used when inserting text within the range boundaries.

        This function was introduced in Qt 5.3.

        **See also** **charFormat** () and **blockFormat** ().
        """
        ...

    def textList(self) -> PySide2.QtGui.QTextList:
        """
        **QTextList *QTextBlock::textList() const**

        If the block represents a list item, returns the list that the item belongs to; otherwise returns `nullptr`.
        """
        ...

    def userData(self) -> PySide2.QtGui.QTextBlockUserData:
        """
        **QTextBlockUserData *QTextBlock::userData() const**

        Returns a pointer to a **QTextBlockUserData**  object, if one has been set with **setUserData** (), or `nullptr`.

        This function was introduced in Qt 4.1.

        **See also** **setUserData** ().
        """
        ...

    def userState(self) -> int:
        """
        **int QTextBlock::userState() const**

        Returns the integer value previously set with **setUserState** () or -1.

        This function was introduced in Qt 4.1.

        **See also** **setUserState** ().
        """
        ...
