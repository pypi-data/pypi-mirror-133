"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtQml
import PySide2.QtQuick

bytes = str


class QSGAbstractRenderer(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    A QSGAbstractRenderer created by a QSGEngine allows you to set your **QSGNode**  tree through **setRootNode** () and control the rendering viewport through **setDeviceRect** (), **setViewportRect** () and **setProjectionMatrixToRect** (). You can finally trigger the rendering to the desired framebuffer through **renderScene** ().

    The QSGAbstractRenderer is only available when used with a QSGEngine and isn't exposed when used internally by **QQuickWindow** .

    **See also** **QSGEngine**  and **QSGNode** .
    """

    ClearColorBuffer: QSGAbstractRenderer = ...
    MatrixTransformFlipY: QSGAbstractRenderer = ...
    ClearDepthBuffer: QSGAbstractRenderer = ...
    ClearStencilBuffer: QSGAbstractRenderer = ...

    class ClearMode(object):
        ...

    class ClearModeBit(object):
        ClearColorBuffer: QSGAbstractRenderer.ClearModeBit = ...
        ClearDepthBuffer: QSGAbstractRenderer.ClearModeBit = ...
        ClearStencilBuffer: QSGAbstractRenderer.ClearModeBit = ...

    class MatrixTransformFlag(object):
        MatrixTransformFlipY: QSGAbstractRenderer.MatrixTransformFlag = ...

    class MatrixTransformFlags(object):
        ...

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        ...

    def clearColor(self) -> PySide2.QtGui.QColor:
        """
        **QColor QSGAbstractRenderer::clearColor() const**

        Returns the color that clears the framebuffer at the beginning of the rendering.

        **See also** **setClearColor** () and **clearMode** ().
        """
        ...

    def clearMode(self) -> PySide2.QtQuick.QSGAbstractRenderer.ClearMode:
        """
        **QSGAbstractRenderer::ClearMode QSGAbstractRenderer::clearMode() const**

        Flags defining which attachment of the framebuffer will be cleared before each scene render.

        **See also** **setClearMode** () and **clearColor** ().
        """
        ...

    def deviceRect(self) -> PySide2.QtCore.QRect:
        """
        **QRect QSGAbstractRenderer::deviceRect() const**

        Returns the device rect of the surface being rendered to.

        **See also** **setDeviceRect** ().
        """
        ...

    def nodeChanged(
        self, node: PySide2.QtQuick.QSGNode, state: PySide2.QtQuick.QSGNode.DirtyState
    ) -> None:
        ...

    def projectionMatrix(self) -> PySide2.QtGui.QMatrix4x4:
        """
        **QMatrix4x4 QSGAbstractRenderer::projectionMatrix() const**

        Returns the projection matrix

        **See also** **setProjectionMatrix** () and **setProjectionMatrixToRect** ().
        """
        ...

    def projectionMatrixWithNativeNDC(self) -> PySide2.QtGui.QMatrix4x4:
        ...

    def renderScene(self, fboId: int = ...) -> None:
        """
        **[pure virtual] void QSGAbstractRenderer::renderScene(uint fboId = 0)**

        Render the scene to the specified **fboId**

        If **fboId** isn't specified, the scene graph will be rendered to the default framebuffer. You will have to call **QOpenGLContext::swapBuffers** () yourself afterward.

        The framebuffer specified by **fboId** will be bound automatically.

        **See also** **QOpenGLContext::swapBuffers** () and **QOpenGLFramebufferObject::handle** ().
        """
        ...

    def setClearColor(self, color: PySide2.QtGui.QColor) -> None:
        """
        **void QSGAbstractRenderer::setClearColor(const QColor & color )**

        Use **color** to clear the framebuffer when **clearMode** () is set to **QSGAbstractRenderer::ClearColorBuffer** .

        **See also** **clearColor** () and **setClearMode** ().
        """
        ...

    def setClearMode(self, mode: PySide2.QtQuick.QSGAbstractRenderer.ClearMode) -> None:
        """
        **void QSGAbstractRenderer::setClearMode(QSGAbstractRenderer::ClearMode mode )**

        Defines which attachment of the framebuffer should be cleared before each scene render with the **mode** flag.

        **See also** **clearMode** () and **setClearColor** ().
        """
        ...

    @typing.overload
    def setDeviceRect(self, rect: PySide2.QtCore.QRect) -> None:
        """
        **void QSGAbstractRenderer::setDeviceRect(const QRect & rect )**

        Sets **rect** as the geometry of the surface being rendered to.

        **See also** **deviceRect** ().
        """
        ...

    @typing.overload
    def setDeviceRect(self, size: PySide2.QtCore.QSize) -> None:
        """
        **void QSGAbstractRenderer::setDeviceRect(const QRect & rect )**

        Sets **rect** as the geometry of the surface being rendered to.

        **See also** **deviceRect** ().
        """
        ...

    def setProjectionMatrix(self, matrix: PySide2.QtGui.QMatrix4x4) -> None:
        """
        **void QSGAbstractRenderer::setProjectionMatrix(const QMatrix4x4 & matrix )**

        Use **matrix** to project the **QSGNode**  coordinates onto surface pixels.

        **See also** **projectionMatrix** () and **setProjectionMatrixToRect** ().
        """
        ...

    @typing.overload
    def setProjectionMatrixToRect(self, rect: PySide2.QtCore.QRectF) -> None:
        """
        **void QSGAbstractRenderer::setProjectionMatrixToRect(const QRectF & rect )**

        Convenience method that calls **setProjectionMatrix** () with an orthographic matrix generated from **rect**.

        **Note:** This function assumes that the graphics API uses Y up in its normalized device coordinate system.

        **See also** **setProjectionMatrix** () and **projectionMatrix** ().
        """
        ...

    @typing.overload
    def setProjectionMatrixToRect(
        self,
        rect: PySide2.QtCore.QRectF,
        flags: PySide2.QtQuick.QSGAbstractRenderer.MatrixTransformFlags,
    ) -> None:
        """
        **void QSGAbstractRenderer::setProjectionMatrixToRect(const QRectF & rect )**

        Convenience method that calls **setProjectionMatrix** () with an orthographic matrix generated from **rect**.

        **Note:** This function assumes that the graphics API uses Y up in its normalized device coordinate system.

        **See also** **setProjectionMatrix** () and **projectionMatrix** ().
        """
        ...

    def setProjectionMatrixWithNativeNDC(
        self, matrix: PySide2.QtGui.QMatrix4x4
    ) -> None:
        ...

    @typing.overload
    def setViewportRect(self, rect: PySide2.QtCore.QRect) -> None:
        """
        **void QSGAbstractRenderer::setViewportRect(const QRect & rect )**

        Sets **rect** as the geometry of the viewport to render on the surface.

        **See also** **viewportRect** ().
        """
        ...

    @typing.overload
    def setViewportRect(self, size: PySide2.QtCore.QSize) -> None:
        """
        **void QSGAbstractRenderer::setViewportRect(const QRect & rect )**

        Sets **rect** as the geometry of the viewport to render on the surface.

        **See also** **viewportRect** ().
        """
        ...

    def viewportRect(self) -> PySide2.QtCore.QRect:
        """
        **QRect QSGAbstractRenderer::viewportRect() const**

        Returns the rect of the viewport to render.

        **See also** **setViewportRect** ().
        """
        ...

    @property
    def sceneGraphChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QSGAbstractRenderer::sceneGraphChanged()**

        This signal is emitted on the first modification of a node in the tree after the last scene render.
        """
        ...
