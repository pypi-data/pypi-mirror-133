"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtDataVisualization

bytes = str


class QtDataVisualization(object):
    """
    **Detailed Description**

    **Q3DBars**

    Methods for rendering 3D bar graphs

    **Q3DCamera**

    Representation of a camera in 3D space

    **Q3DInputHandler**

    Basic wheel mouse based input handler

    **Q3DLight**

    Representation of a light source in 3D space

    **Q3DObject**

    Simple base class for all the objects in a 3D scene

    **Q3DScatter**

    Methods for rendering 3D scatter graphs

    **Q3DScene**

    Description of the 3D scene being visualized

    **Q3DSurface**

    Methods for rendering 3D surface plots

    **Q3DTheme**

    Visual style for graphs

    **QAbstract3DAxis**

    Base class for the axes of a graph

    **QAbstract3DGraph**

    Window and render loop for graphs

    **QAbstract3DInputHandler**

    Base class for implementations of input handlers

    **QAbstract3DSeries**

    Base class for all data series

    **QAbstractDataProxy**

    Base class for all data visualization data proxies

    **QBar3DSeries**

    Represents a data series in a 3D bar graph

    **QBarDataItem**

    Container for resolved data to be added to bar graphs

    **QBarDataProxy**

    The data proxy for a 3D bars graph

    **QCategory3DAxis**

    Manipulates an axis of a graph

    **QCustom3DItem**

    Adds a custom item to a graph

    **QCustom3DLabel**

    Adds a custom label to a graph

    **QCustom3DVolume**

    Adds a volume rendered object to a graph

    **QHeightMapSurfaceDataProxy**

    Base proxy class for Q3DSurface

    **QItemModelBarDataProxy**

    Proxy class for presenting data in item models with Q3DBars

    **QItemModelScatterDataProxy**

    Proxy class for presenting data in item models with Q3DScatter

    **QItemModelSurfaceDataProxy**

    Proxy class for presenting data in item models with Q3DSurface

    **QLogValue3DAxisFormatter**

    Formatting rules for a logarithmic value axis

    **QScatter3DSeries**

    Represents a data series in a 3D scatter graph

    **QScatterDataItem**

    Container for resolved data to be added to scatter graphs

    **QScatterDataProxy**

    The data proxy for 3D scatter graphs

    **QSurface3DSeries**

    Represents a data series in a 3D surface graph

    **QSurfaceDataItem**

    Container for resolved data to be added to surface graphs

    **QSurfaceDataProxy**

    The data proxy for a 3D surface graph

    **QTouch3DInputHandler**

    Basic touch display based input handler

    **QValue3DAxis**

    Manipulates an axis of a graph

    **QValue3DAxisFormatter**

    Base class for value axis formatters
    """

    class Q3DBars(PySide2.QtDataVisualization.QAbstract3DGraph):
        def __init__(
            self,
            format: typing.Optional[PySide2.QtGui.QSurfaceFormat] = ...,
            parent: typing.Optional[PySide2.QtGui.QWindow] = ...,
        ) -> None:
            ...

        def addAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DAxis
        ) -> None:
            ...

        def addSeries(
            self, series: PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries
        ) -> None:
            ...

        def axes(self) -> typing.List:
            ...

        def barSpacing(self) -> PySide2.QtCore.QSizeF:
            ...

        def barThickness(self) -> float:
            ...

        def columnAxis(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QCategory3DAxis:
            ...

        def floorLevel(self) -> float:
            ...

        def insertSeries(
            self,
            index: int,
            series: PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries,
        ) -> None:
            ...

        def isBarSpacingRelative(self) -> bool:
            ...

        def isMultiSeriesUniform(self) -> bool:
            ...

        def primarySeries(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries:
            ...

        def releaseAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DAxis
        ) -> None:
            ...

        def removeSeries(
            self, series: PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries
        ) -> None:
            ...

        def rowAxis(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QCategory3DAxis:
            ...

        def selectedSeries(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries:
            ...

        def seriesList(self) -> typing.List:
            ...

        def setBarSpacing(self, spacing: PySide2.QtCore.QSizeF) -> None:
            ...

        def setBarSpacingRelative(self, relative: bool) -> None:
            ...

        def setBarThickness(self, thicknessRatio: float) -> None:
            ...

        def setColumnAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QCategory3DAxis
        ) -> None:
            ...

        def setFloorLevel(self, level: float) -> None:
            ...

        def setMultiSeriesUniform(self, uniform: bool) -> None:
            ...

        def setPrimarySeries(
            self, series: PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries
        ) -> None:
            ...

        def setRowAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QCategory3DAxis
        ) -> None:
            ...

        def setValueAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def valueAxis(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

    class Q3DCamera(PySide2.QtDataVisualization.Q3DObject):
        CameraPresetNone: QtDataVisualization.Q3DCamera = ...
        CameraPresetFrontLow: QtDataVisualization.Q3DCamera = ...
        CameraPresetFront: QtDataVisualization.Q3DCamera = ...
        CameraPresetFrontHigh: QtDataVisualization.Q3DCamera = ...
        CameraPresetLeftLow: QtDataVisualization.Q3DCamera = ...
        CameraPresetLeft: QtDataVisualization.Q3DCamera = ...
        CameraPresetLeftHigh: QtDataVisualization.Q3DCamera = ...
        CameraPresetRightLow: QtDataVisualization.Q3DCamera = ...
        CameraPresetRight: QtDataVisualization.Q3DCamera = ...
        CameraPresetRightHigh: QtDataVisualization.Q3DCamera = ...
        CameraPresetBehindLow: QtDataVisualization.Q3DCamera = ...
        CameraPresetBehind: QtDataVisualization.Q3DCamera = ...
        CameraPresetBehindHigh: QtDataVisualization.Q3DCamera = ...
        CameraPresetIsometricLeft: QtDataVisualization.Q3DCamera = ...
        CameraPresetIsometricLeftHigh: QtDataVisualization.Q3DCamera = ...
        CameraPresetIsometricRight: QtDataVisualization.Q3DCamera = ...
        CameraPresetIsometricRightHigh: QtDataVisualization.Q3DCamera = ...
        CameraPresetDirectlyAbove: QtDataVisualization.Q3DCamera = ...
        CameraPresetDirectlyAboveCW45: QtDataVisualization.Q3DCamera = ...
        CameraPresetDirectlyAboveCCW45: QtDataVisualization.Q3DCamera = ...
        CameraPresetFrontBelow: QtDataVisualization.Q3DCamera = ...
        CameraPresetLeftBelow: QtDataVisualization.Q3DCamera = ...
        CameraPresetRightBelow: QtDataVisualization.Q3DCamera = ...
        CameraPresetBehindBelow: QtDataVisualization.Q3DCamera = ...
        CameraPresetDirectlyBelow: QtDataVisualization.Q3DCamera = ...

        class CameraPreset(object):
            CameraPresetNone: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetFrontLow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetFront: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetFrontHigh: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetLeftLow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetLeft: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetLeftHigh: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetRightLow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetRight: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetRightHigh: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetBehindLow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetBehind: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetBehindHigh: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetIsometricLeft: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetIsometricLeftHigh: QtDataVisualization.Q3DCamera.CameraPreset = (
                ...
            )
            CameraPresetIsometricRight: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetIsometricRightHigh: QtDataVisualization.Q3DCamera.CameraPreset = (
                ...
            )
            CameraPresetDirectlyAbove: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetDirectlyAboveCW45: QtDataVisualization.Q3DCamera.CameraPreset = (
                ...
            )
            CameraPresetDirectlyAboveCCW45: QtDataVisualization.Q3DCamera.CameraPreset = (
                ...
            )
            CameraPresetFrontBelow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetLeftBelow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetRightBelow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetBehindBelow: QtDataVisualization.Q3DCamera.CameraPreset = ...
            CameraPresetDirectlyBelow: QtDataVisualization.Q3DCamera.CameraPreset = ...

        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def cameraPreset(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DCamera.CameraPreset:
            ...

        def copyValuesFrom(
            self, source: PySide2.QtDataVisualization.QtDataVisualization.Q3DObject
        ) -> None:
            ...

        def maxZoomLevel(self) -> float:
            ...

        def minZoomLevel(self) -> float:
            ...

        def setCameraPosition(
            self, horizontal: float, vertical: float, zoom: float = ...
        ) -> None:
            ...

        def setCameraPreset(
            self,
            preset: PySide2.QtDataVisualization.QtDataVisualization.Q3DCamera.CameraPreset,
        ) -> None:
            ...

        def setMaxZoomLevel(self, zoomLevel: float) -> None:
            ...

        def setMinZoomLevel(self, zoomLevel: float) -> None:
            ...

        def setTarget(self, target: PySide2.QtGui.QVector3D) -> None:
            ...

        def setWrapXRotation(self, isEnabled: bool) -> None:
            ...

        def setWrapYRotation(self, isEnabled: bool) -> None:
            ...

        def setXRotation(self, rotation: float) -> None:
            ...

        def setYRotation(self, rotation: float) -> None:
            ...

        def setZoomLevel(self, zoomLevel: float) -> None:
            ...

        def target(self) -> PySide2.QtGui.QVector3D:
            ...

        def wrapXRotation(self) -> bool:
            ...

        def wrapYRotation(self) -> bool:
            ...

        def xRotation(self) -> float:
            ...

        def yRotation(self) -> float:
            ...

        def zoomLevel(self) -> float:
            ...

    class Q3DInputHandler(PySide2.QtDataVisualization.QAbstract3DInputHandler):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def isRotationEnabled(self) -> bool:
            ...

        def isSelectionEnabled(self) -> bool:
            ...

        def isZoomAtTargetEnabled(self) -> bool:
            ...

        def isZoomEnabled(self) -> bool:
            ...

        def mouseMoveEvent(
            self, event: PySide2.QtGui.QMouseEvent, mousePos: PySide2.QtCore.QPoint
        ) -> None:
            ...

        def mousePressEvent(
            self, event: PySide2.QtGui.QMouseEvent, mousePos: PySide2.QtCore.QPoint
        ) -> None:
            ...

        def mouseReleaseEvent(
            self, event: PySide2.QtGui.QMouseEvent, mousePos: PySide2.QtCore.QPoint
        ) -> None:
            ...

        def setRotationEnabled(self, enable: bool) -> None:
            ...

        def setSelectionEnabled(self, enable: bool) -> None:
            ...

        def setZoomAtTargetEnabled(self, enable: bool) -> None:
            ...

        def setZoomEnabled(self, enable: bool) -> None:
            ...

        def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None:
            ...

    class Q3DLight(PySide2.QtDataVisualization.Q3DObject):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def isAutoPosition(self) -> bool:
            ...

        def setAutoPosition(self, enabled: bool) -> None:
            ...

    class Q3DObject(PySide2.QtCore.QObject):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def copyValuesFrom(
            self, source: PySide2.QtDataVisualization.QtDataVisualization.Q3DObject
        ) -> None:
            ...

        def isDirty(self) -> bool:
            ...

        def parentScene(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DScene:
            ...

        def position(self) -> PySide2.QtGui.QVector3D:
            ...

        def setDirty(self, dirty: bool) -> None:
            ...

        def setPosition(self, position: PySide2.QtGui.QVector3D) -> None:
            ...

    class Q3DScatter(PySide2.QtDataVisualization.QAbstract3DGraph):
        def __init__(
            self,
            format: typing.Optional[PySide2.QtGui.QSurfaceFormat] = ...,
            parent: typing.Optional[PySide2.QtGui.QWindow] = ...,
        ) -> None:
            ...

        def addAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def addSeries(
            self,
            series: PySide2.QtDataVisualization.QtDataVisualization.QScatter3DSeries,
        ) -> None:
            ...

        def axes(self) -> typing.List:
            ...

        def axisX(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def axisY(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def axisZ(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def releaseAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def removeSeries(
            self,
            series: PySide2.QtDataVisualization.QtDataVisualization.QScatter3DSeries,
        ) -> None:
            ...

        def selectedSeries(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QScatter3DSeries:
            ...

        def seriesList(self) -> typing.List:
            ...

        def setAxisX(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def setAxisY(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def setAxisZ(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

    class Q3DScene(PySide2.QtCore.QObject):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def activeCamera(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DCamera:
            ...

        def activeLight(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DLight:
            ...

        def devicePixelRatio(self) -> float:
            ...

        def graphPositionQuery(self) -> PySide2.QtCore.QPoint:
            ...

        @staticmethod
        def invalidSelectionPoint() -> PySide2.QtCore.QPoint:
            ...

        def isPointInPrimarySubView(self, point: PySide2.QtCore.QPoint) -> bool:
            ...

        def isPointInSecondarySubView(self, point: PySide2.QtCore.QPoint) -> bool:
            ...

        def isSecondarySubviewOnTop(self) -> bool:
            ...

        def isSlicingActive(self) -> bool:
            ...

        def primarySubViewport(self) -> PySide2.QtCore.QRect:
            ...

        def secondarySubViewport(self) -> PySide2.QtCore.QRect:
            ...

        def selectionQueryPosition(self) -> PySide2.QtCore.QPoint:
            ...

        def setActiveCamera(
            self, camera: PySide2.QtDataVisualization.QtDataVisualization.Q3DCamera
        ) -> None:
            ...

        def setActiveLight(
            self, light: PySide2.QtDataVisualization.QtDataVisualization.Q3DLight
        ) -> None:
            ...

        def setDevicePixelRatio(self, pixelRatio: float) -> None:
            ...

        def setGraphPositionQuery(self, point: PySide2.QtCore.QPoint) -> None:
            ...

        def setPrimarySubViewport(
            self, primarySubViewport: PySide2.QtCore.QRect
        ) -> None:
            ...

        def setSecondarySubViewport(
            self, secondarySubViewport: PySide2.QtCore.QRect
        ) -> None:
            ...

        def setSecondarySubviewOnTop(self, isSecondaryOnTop: bool) -> None:
            ...

        def setSelectionQueryPosition(self, point: PySide2.QtCore.QPoint) -> None:
            ...

        def setSlicingActive(self, isSlicing: bool) -> None:
            ...

        def viewport(self) -> PySide2.QtCore.QRect:
            ...

    class Q3DSurface(PySide2.QtDataVisualization.QAbstract3DGraph):
        def __init__(
            self,
            format: typing.Optional[PySide2.QtGui.QSurfaceFormat] = ...,
            parent: typing.Optional[PySide2.QtGui.QWindow] = ...,
        ) -> None:
            ...

        def addAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def addSeries(
            self,
            series: PySide2.QtDataVisualization.QtDataVisualization.QSurface3DSeries,
        ) -> None:
            ...

        def axes(self) -> typing.List:
            ...

        def axisX(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def axisY(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def axisZ(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def flipHorizontalGrid(self) -> bool:
            ...

        def releaseAxis(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def removeSeries(
            self,
            series: PySide2.QtDataVisualization.QtDataVisualization.QSurface3DSeries,
        ) -> None:
            ...

        def selectedSeries(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QSurface3DSeries:
            ...

        def seriesList(self) -> typing.List:
            ...

        def setAxisX(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def setAxisY(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def setAxisZ(
            self, axis: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis
        ) -> None:
            ...

        def setFlipHorizontalGrid(self, flip: bool) -> None:
            ...

    class Q3DTheme(PySide2.QtCore.QObject):
        ColorStyleUniform: QtDataVisualization.Q3DTheme = ...
        ThemeQt: QtDataVisualization.Q3DTheme = ...
        ColorStyleObjectGradient: QtDataVisualization.Q3DTheme = ...
        ThemePrimaryColors: QtDataVisualization.Q3DTheme = ...
        ColorStyleRangeGradient: QtDataVisualization.Q3DTheme = ...
        ThemeDigia: QtDataVisualization.Q3DTheme = ...
        ThemeStoneMoss: QtDataVisualization.Q3DTheme = ...
        ThemeArmyBlue: QtDataVisualization.Q3DTheme = ...
        ThemeRetro: QtDataVisualization.Q3DTheme = ...
        ThemeEbony: QtDataVisualization.Q3DTheme = ...
        ThemeIsabelle: QtDataVisualization.Q3DTheme = ...
        ThemeUserDefined: QtDataVisualization.Q3DTheme = ...

        class ColorStyle(object):
            ColorStyleUniform: QtDataVisualization.Q3DTheme.ColorStyle = ...
            ColorStyleObjectGradient: QtDataVisualization.Q3DTheme.ColorStyle = ...
            ColorStyleRangeGradient: QtDataVisualization.Q3DTheme.ColorStyle = ...

        class Theme(object):
            ThemeQt: QtDataVisualization.Q3DTheme.Theme = ...
            ThemePrimaryColors: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeDigia: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeStoneMoss: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeArmyBlue: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeRetro: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeEbony: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeIsabelle: QtDataVisualization.Q3DTheme.Theme = ...
            ThemeUserDefined: QtDataVisualization.Q3DTheme.Theme = ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            themeType: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.Theme,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        def ambientLightStrength(self) -> float:
            ...

        def backgroundColor(self) -> PySide2.QtGui.QColor:
            ...

        def baseColors(self) -> typing.List:
            ...

        def baseGradients(self) -> typing.List:
            ...

        def colorStyle(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.ColorStyle:
            ...

        def font(self) -> PySide2.QtGui.QFont:
            ...

        def gridLineColor(self) -> PySide2.QtGui.QColor:
            ...

        def highlightLightStrength(self) -> float:
            ...

        def isBackgroundEnabled(self) -> bool:
            ...

        def isGridEnabled(self) -> bool:
            ...

        def isLabelBackgroundEnabled(self) -> bool:
            ...

        def isLabelBorderEnabled(self) -> bool:
            ...

        def labelBackgroundColor(self) -> PySide2.QtGui.QColor:
            ...

        def labelTextColor(self) -> PySide2.QtGui.QColor:
            ...

        def lightColor(self) -> PySide2.QtGui.QColor:
            ...

        def lightStrength(self) -> float:
            ...

        def multiHighlightColor(self) -> PySide2.QtGui.QColor:
            ...

        def multiHighlightGradient(self) -> PySide2.QtGui.QLinearGradient:
            ...

        def setAmbientLightStrength(self, strength: float) -> None:
            ...

        def setBackgroundColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setBackgroundEnabled(self, enabled: bool) -> None:
            ...

        def setBaseColors(self, colors: typing.Sequence) -> None:
            ...

        def setBaseGradients(self, gradients: typing.Sequence) -> None:
            ...

        def setColorStyle(
            self,
            style: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.ColorStyle,
        ) -> None:
            ...

        def setFont(self, font: PySide2.QtGui.QFont) -> None:
            ...

        def setGridEnabled(self, enabled: bool) -> None:
            ...

        def setGridLineColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setHighlightLightStrength(self, strength: float) -> None:
            ...

        def setLabelBackgroundColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setLabelBackgroundEnabled(self, enabled: bool) -> None:
            ...

        def setLabelBorderEnabled(self, enabled: bool) -> None:
            ...

        def setLabelTextColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setLightColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setLightStrength(self, strength: float) -> None:
            ...

        def setMultiHighlightColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setMultiHighlightGradient(
            self, gradient: PySide2.QtGui.QLinearGradient
        ) -> None:
            ...

        def setSingleHighlightColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setSingleHighlightGradient(
            self, gradient: PySide2.QtGui.QLinearGradient
        ) -> None:
            ...

        def setType(
            self,
            themeType: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.Theme,
        ) -> None:
            ...

        def setWindowColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def singleHighlightColor(self) -> PySide2.QtGui.QColor:
            ...

        def singleHighlightGradient(self) -> PySide2.QtGui.QLinearGradient:
            ...

        def type(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.Theme:
            ...

        def windowColor(self) -> PySide2.QtGui.QColor:
            ...

    class QAbstract3DAxis(PySide2.QtCore.QObject):
        AxisOrientationNone: QtDataVisualization.QAbstract3DAxis = ...
        AxisTypeNone: QtDataVisualization.QAbstract3DAxis = ...
        AxisOrientationX: QtDataVisualization.QAbstract3DAxis = ...
        AxisTypeCategory: QtDataVisualization.QAbstract3DAxis = ...
        AxisOrientationY: QtDataVisualization.QAbstract3DAxis = ...
        AxisTypeValue: QtDataVisualization.QAbstract3DAxis = ...
        AxisOrientationZ: QtDataVisualization.QAbstract3DAxis = ...

        class AxisOrientation(object):
            AxisOrientationNone: QtDataVisualization.QAbstract3DAxis.AxisOrientation = (
                ...
            )
            AxisOrientationX: QtDataVisualization.QAbstract3DAxis.AxisOrientation = ...
            AxisOrientationY: QtDataVisualization.QAbstract3DAxis.AxisOrientation = ...
            AxisOrientationZ: QtDataVisualization.QAbstract3DAxis.AxisOrientation = ...

        class AxisType(object):
            AxisTypeNone: QtDataVisualization.QAbstract3DAxis.AxisType = ...
            AxisTypeCategory: QtDataVisualization.QAbstract3DAxis.AxisType = ...
            AxisTypeValue: QtDataVisualization.QAbstract3DAxis.AxisType = ...

        def isAutoAdjustRange(self) -> bool:
            ...

        def isTitleFixed(self) -> bool:
            ...

        def isTitleVisible(self) -> bool:
            ...

        def labelAutoRotation(self) -> float:
            ...

        def labels(self) -> typing.List:
            ...

        def max(self) -> float:
            ...

        def min(self) -> float:
            ...

        def orientation(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DAxis.AxisOrientation:
            ...

        def setAutoAdjustRange(self, autoAdjust: bool) -> None:
            ...

        def setLabelAutoRotation(self, angle: float) -> None:
            ...

        def setLabels(self, labels: typing.Sequence) -> None:
            ...

        def setMax(self, max: float) -> None:
            ...

        def setMin(self, min: float) -> None:
            ...

        def setRange(self, min: float, max: float) -> None:
            ...

        def setTitle(self, title: str) -> None:
            ...

        def setTitleFixed(self, fixed: bool) -> None:
            ...

        def setTitleVisible(self, visible: bool) -> None:
            ...

        def title(self) -> str:
            ...

        def type(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DAxis.AxisType:
            ...

    class QAbstract3DGraph(PySide2.QtGui.QWindow):
        ElementNone: QtDataVisualization.QAbstract3DGraph = ...
        OptimizationDefault: QtDataVisualization.QAbstract3DGraph = ...
        SelectionNone: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualityNone: QtDataVisualization.QAbstract3DGraph = ...
        ElementSeries: QtDataVisualization.QAbstract3DGraph = ...
        OptimizationStatic: QtDataVisualization.QAbstract3DGraph = ...
        SelectionItem: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualityLow: QtDataVisualization.QAbstract3DGraph = ...
        ElementAxisXLabel: QtDataVisualization.QAbstract3DGraph = ...
        SelectionRow: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualityMedium: QtDataVisualization.QAbstract3DGraph = ...
        ElementAxisYLabel: QtDataVisualization.QAbstract3DGraph = ...
        SelectionItemAndRow: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualityHigh: QtDataVisualization.QAbstract3DGraph = ...
        ElementAxisZLabel: QtDataVisualization.QAbstract3DGraph = ...
        SelectionColumn: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualitySoftLow: QtDataVisualization.QAbstract3DGraph = ...
        ElementCustomItem: QtDataVisualization.QAbstract3DGraph = ...
        SelectionItemAndColumn: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualitySoftMedium: QtDataVisualization.QAbstract3DGraph = ...
        SelectionRowAndColumn: QtDataVisualization.QAbstract3DGraph = ...
        ShadowQualitySoftHigh: QtDataVisualization.QAbstract3DGraph = ...
        SelectionItemRowAndColumn: QtDataVisualization.QAbstract3DGraph = ...
        SelectionSlice: QtDataVisualization.QAbstract3DGraph = ...
        SelectionMultiSeries: QtDataVisualization.QAbstract3DGraph = ...

        class ElementType(object):
            ElementNone: QtDataVisualization.QAbstract3DGraph.ElementType = ...
            ElementSeries: QtDataVisualization.QAbstract3DGraph.ElementType = ...
            ElementAxisXLabel: QtDataVisualization.QAbstract3DGraph.ElementType = ...
            ElementAxisYLabel: QtDataVisualization.QAbstract3DGraph.ElementType = ...
            ElementAxisZLabel: QtDataVisualization.QAbstract3DGraph.ElementType = ...
            ElementCustomItem: QtDataVisualization.QAbstract3DGraph.ElementType = ...

        class OptimizationHint(object):
            OptimizationDefault: QtDataVisualization.QAbstract3DGraph.OptimizationHint = (
                ...
            )
            OptimizationStatic: QtDataVisualization.QAbstract3DGraph.OptimizationHint = (
                ...
            )

        class OptimizationHints(object):
            ...

        class SelectionFlag(object):
            SelectionNone: QtDataVisualization.QAbstract3DGraph.SelectionFlag = ...
            SelectionItem: QtDataVisualization.QAbstract3DGraph.SelectionFlag = ...
            SelectionRow: QtDataVisualization.QAbstract3DGraph.SelectionFlag = ...
            SelectionItemAndRow: QtDataVisualization.QAbstract3DGraph.SelectionFlag = (
                ...
            )
            SelectionColumn: QtDataVisualization.QAbstract3DGraph.SelectionFlag = ...
            SelectionItemAndColumn: QtDataVisualization.QAbstract3DGraph.SelectionFlag = (
                ...
            )
            SelectionRowAndColumn: QtDataVisualization.QAbstract3DGraph.SelectionFlag = (
                ...
            )
            SelectionItemRowAndColumn: QtDataVisualization.QAbstract3DGraph.SelectionFlag = (
                ...
            )
            SelectionSlice: QtDataVisualization.QAbstract3DGraph.SelectionFlag = ...
            SelectionMultiSeries: QtDataVisualization.QAbstract3DGraph.SelectionFlag = (
                ...
            )

        class SelectionFlags(object):
            ...

        class ShadowQuality(object):
            ShadowQualityNone: QtDataVisualization.QAbstract3DGraph.ShadowQuality = ...
            ShadowQualityLow: QtDataVisualization.QAbstract3DGraph.ShadowQuality = ...
            ShadowQualityMedium: QtDataVisualization.QAbstract3DGraph.ShadowQuality = (
                ...
            )
            ShadowQualityHigh: QtDataVisualization.QAbstract3DGraph.ShadowQuality = ...
            ShadowQualitySoftLow: QtDataVisualization.QAbstract3DGraph.ShadowQuality = (
                ...
            )
            ShadowQualitySoftMedium: QtDataVisualization.QAbstract3DGraph.ShadowQuality = (
                ...
            )
            ShadowQualitySoftHigh: QtDataVisualization.QAbstract3DGraph.ShadowQuality = (
                ...
            )

        def activeInputHandler(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DInputHandler:
            ...

        def activeTheme(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme:
            ...

        def addCustomItem(
            self, item: PySide2.QtDataVisualization.QtDataVisualization.QCustom3DItem
        ) -> int:
            ...

        def addInputHandler(
            self,
            inputHandler: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DInputHandler,
        ) -> None:
            ...

        def addTheme(
            self, theme: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme
        ) -> None:
            ...

        def aspectRatio(self) -> float:
            ...

        def clearSelection(self) -> None:
            ...

        def currentFps(self) -> float:
            ...

        def customItems(self) -> typing.List:
            ...

        def event(self, event: PySide2.QtCore.QEvent) -> bool:
            ...

        def exposeEvent(self, event: PySide2.QtGui.QExposeEvent) -> None:
            ...

        def hasContext(self) -> bool:
            ...

        def horizontalAspectRatio(self) -> float:
            ...

        def inputHandlers(self) -> typing.List:
            ...

        def isOrthoProjection(self) -> bool:
            ...

        def isPolar(self) -> bool:
            ...

        def isReflection(self) -> bool:
            ...

        def locale(self) -> PySide2.QtCore.QLocale:
            ...

        def margin(self) -> float:
            ...

        def measureFps(self) -> bool:
            ...

        def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None:
            ...

        def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None:
            ...

        def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None:
            ...

        def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None:
            ...

        def optimizationHints(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.OptimizationHints:
            ...

        def queriedGraphPosition(self) -> PySide2.QtGui.QVector3D:
            ...

        def radialLabelOffset(self) -> float:
            ...

        def reflectivity(self) -> float:
            ...

        def releaseCustomItem(
            self, item: PySide2.QtDataVisualization.QtDataVisualization.QCustom3DItem
        ) -> None:
            ...

        def releaseInputHandler(
            self,
            inputHandler: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DInputHandler,
        ) -> None:
            ...

        def releaseTheme(
            self, theme: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme
        ) -> None:
            ...

        def removeCustomItem(
            self, item: PySide2.QtDataVisualization.QtDataVisualization.QCustom3DItem
        ) -> None:
            ...

        def removeCustomItemAt(self, position: PySide2.QtGui.QVector3D) -> None:
            ...

        def removeCustomItems(self) -> None:
            ...

        def renderToImage(
            self, msaaSamples: int = ..., imageSize: PySide2.QtCore.QSize = ...
        ) -> PySide2.QtGui.QImage:
            ...

        def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None:
            ...

        def scene(self) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DScene:
            ...

        def selectedAxis(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DAxis:
            ...

        def selectedCustomItem(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QCustom3DItem:
            ...

        def selectedCustomItemIndex(self) -> int:
            ...

        def selectedElement(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.ElementType:
            ...

        def selectedLabelIndex(self) -> int:
            ...

        def selectionMode(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.SelectionFlags:
            ...

        def setActiveInputHandler(
            self,
            inputHandler: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DInputHandler,
        ) -> None:
            ...

        def setActiveTheme(
            self, theme: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme
        ) -> None:
            ...

        def setAspectRatio(self, ratio: float) -> None:
            ...

        def setHorizontalAspectRatio(self, ratio: float) -> None:
            ...

        def setLocale(self, locale: PySide2.QtCore.QLocale) -> None:
            ...

        def setMargin(self, margin: float) -> None:
            ...

        def setMeasureFps(self, enable: bool) -> None:
            ...

        def setOptimizationHints(
            self,
            hints: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.OptimizationHints,
        ) -> None:
            ...

        def setOrthoProjection(self, enable: bool) -> None:
            ...

        def setPolar(self, enable: bool) -> None:
            ...

        def setRadialLabelOffset(self, offset: float) -> None:
            ...

        def setReflection(self, enable: bool) -> None:
            ...

        def setReflectivity(self, reflectivity: float) -> None:
            ...

        def setSelectionMode(
            self,
            mode: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.SelectionFlags,
        ) -> None:
            ...

        def setShadowQuality(
            self,
            quality: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.ShadowQuality,
        ) -> None:
            ...

        def shadowQuality(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DGraph.ShadowQuality:
            ...

        def shadowsSupported(self) -> bool:
            ...

        def themes(self) -> typing.List:
            ...

        def touchEvent(self, event: PySide2.QtGui.QTouchEvent) -> None:
            ...

        def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None:
            ...

    class QAbstract3DInputHandler(PySide2.QtCore.QObject):
        InputViewNone: QtDataVisualization.QAbstract3DInputHandler = ...
        InputViewOnPrimary: QtDataVisualization.QAbstract3DInputHandler = ...
        InputViewOnSecondary: QtDataVisualization.QAbstract3DInputHandler = ...

        class InputView(object):
            InputViewNone: QtDataVisualization.QAbstract3DInputHandler.InputView = ...
            InputViewOnPrimary: QtDataVisualization.QAbstract3DInputHandler.InputView = (
                ...
            )
            InputViewOnSecondary: QtDataVisualization.QAbstract3DInputHandler.InputView = (
                ...
            )

        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def inputPosition(self) -> PySide2.QtCore.QPoint:
            ...

        def inputView(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DInputHandler.InputView:
            ...

        def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None:
            ...

        def mouseMoveEvent(
            self, event: PySide2.QtGui.QMouseEvent, mousePos: PySide2.QtCore.QPoint
        ) -> None:
            ...

        def mousePressEvent(
            self, event: PySide2.QtGui.QMouseEvent, mousePos: PySide2.QtCore.QPoint
        ) -> None:
            ...

        def mouseReleaseEvent(
            self, event: PySide2.QtGui.QMouseEvent, mousePos: PySide2.QtCore.QPoint
        ) -> None:
            ...

        def prevDistance(self) -> int:
            ...

        def previousInputPos(self) -> PySide2.QtCore.QPoint:
            ...

        def scene(self) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DScene:
            ...

        def setInputPosition(self, position: PySide2.QtCore.QPoint) -> None:
            ...

        def setInputView(
            self,
            inputView: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DInputHandler.InputView,
        ) -> None:
            ...

        def setPrevDistance(self, distance: int) -> None:
            ...

        def setPreviousInputPos(self, position: PySide2.QtCore.QPoint) -> None:
            ...

        def setScene(
            self, scene: PySide2.QtDataVisualization.QtDataVisualization.Q3DScene
        ) -> None:
            ...

        def touchEvent(self, event: PySide2.QtGui.QTouchEvent) -> None:
            ...

        def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None:
            ...

    class QAbstract3DSeries(PySide2.QtCore.QObject):
        MeshUserDefined: QtDataVisualization.QAbstract3DSeries = ...
        SeriesTypeNone: QtDataVisualization.QAbstract3DSeries = ...
        MeshBar: QtDataVisualization.QAbstract3DSeries = ...
        SeriesTypeBar: QtDataVisualization.QAbstract3DSeries = ...
        MeshCube: QtDataVisualization.QAbstract3DSeries = ...
        SeriesTypeScatter: QtDataVisualization.QAbstract3DSeries = ...
        MeshPyramid: QtDataVisualization.QAbstract3DSeries = ...
        MeshCone: QtDataVisualization.QAbstract3DSeries = ...
        SeriesTypeSurface: QtDataVisualization.QAbstract3DSeries = ...
        MeshCylinder: QtDataVisualization.QAbstract3DSeries = ...
        MeshBevelBar: QtDataVisualization.QAbstract3DSeries = ...
        MeshBevelCube: QtDataVisualization.QAbstract3DSeries = ...
        MeshSphere: QtDataVisualization.QAbstract3DSeries = ...
        MeshMinimal: QtDataVisualization.QAbstract3DSeries = ...
        MeshArrow: QtDataVisualization.QAbstract3DSeries = ...
        MeshPoint: QtDataVisualization.QAbstract3DSeries = ...

        class Mesh(object):
            MeshUserDefined: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshBar: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshCube: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshPyramid: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshCone: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshCylinder: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshBevelBar: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshBevelCube: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshSphere: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshMinimal: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshArrow: QtDataVisualization.QAbstract3DSeries.Mesh = ...
            MeshPoint: QtDataVisualization.QAbstract3DSeries.Mesh = ...

        class SeriesType(object):
            SeriesTypeNone: QtDataVisualization.QAbstract3DSeries.SeriesType = ...
            SeriesTypeBar: QtDataVisualization.QAbstract3DSeries.SeriesType = ...
            SeriesTypeScatter: QtDataVisualization.QAbstract3DSeries.SeriesType = ...
            SeriesTypeSurface: QtDataVisualization.QAbstract3DSeries.SeriesType = ...

        def baseColor(self) -> PySide2.QtGui.QColor:
            ...

        def baseGradient(self) -> PySide2.QtGui.QLinearGradient:
            ...

        def colorStyle(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.ColorStyle:
            ...

        def isItemLabelVisible(self) -> bool:
            ...

        def isMeshSmooth(self) -> bool:
            ...

        def isVisible(self) -> bool:
            ...

        def itemLabel(self) -> str:
            ...

        def itemLabelFormat(self) -> str:
            ...

        def mesh(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DSeries.Mesh:
            ...

        def meshRotation(self) -> PySide2.QtGui.QQuaternion:
            ...

        def multiHighlightColor(self) -> PySide2.QtGui.QColor:
            ...

        def multiHighlightGradient(self) -> PySide2.QtGui.QLinearGradient:
            ...

        def name(self) -> str:
            ...

        def setBaseColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setBaseGradient(self, gradient: PySide2.QtGui.QLinearGradient) -> None:
            ...

        def setColorStyle(
            self,
            style: PySide2.QtDataVisualization.QtDataVisualization.Q3DTheme.ColorStyle,
        ) -> None:
            ...

        def setItemLabelFormat(self, format: str) -> None:
            ...

        def setItemLabelVisible(self, visible: bool) -> None:
            ...

        def setMesh(
            self,
            mesh: PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DSeries.Mesh,
        ) -> None:
            ...

        def setMeshAxisAndAngle(
            self, axis: PySide2.QtGui.QVector3D, angle: float
        ) -> None:
            ...

        def setMeshRotation(self, rotation: PySide2.QtGui.QQuaternion) -> None:
            ...

        def setMeshSmooth(self, enable: bool) -> None:
            ...

        def setMultiHighlightColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setMultiHighlightGradient(
            self, gradient: PySide2.QtGui.QLinearGradient
        ) -> None:
            ...

        def setName(self, name: str) -> None:
            ...

        def setSingleHighlightColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setSingleHighlightGradient(
            self, gradient: PySide2.QtGui.QLinearGradient
        ) -> None:
            ...

        def setUserDefinedMesh(self, fileName: str) -> None:
            ...

        def setVisible(self, visible: bool) -> None:
            ...

        def singleHighlightColor(self) -> PySide2.QtGui.QColor:
            ...

        def singleHighlightGradient(self) -> PySide2.QtGui.QLinearGradient:
            ...

        def type(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstract3DSeries.SeriesType:
            ...

        def userDefinedMesh(self) -> str:
            ...

    class QAbstractDataProxy(PySide2.QtCore.QObject):
        DataTypeNone: QtDataVisualization.QAbstractDataProxy = ...
        DataTypeBar: QtDataVisualization.QAbstractDataProxy = ...
        DataTypeScatter: QtDataVisualization.QAbstractDataProxy = ...
        DataTypeSurface: QtDataVisualization.QAbstractDataProxy = ...

        class DataType(object):
            DataTypeNone: QtDataVisualization.QAbstractDataProxy.DataType = ...
            DataTypeBar: QtDataVisualization.QAbstractDataProxy.DataType = ...
            DataTypeScatter: QtDataVisualization.QAbstractDataProxy.DataType = ...
            DataTypeSurface: QtDataVisualization.QAbstractDataProxy.DataType = ...

        def type(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QAbstractDataProxy.DataType:
            ...

    class QBar3DSeries(PySide2.QtDataVisualization.QAbstract3DSeries):
        @typing.overload
        def __init__(
            self,
            dataProxy: PySide2.QtDataVisualization.QtDataVisualization.QBarDataProxy,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def dataProxy(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QBarDataProxy:
            ...

        @staticmethod
        def invalidSelectionPosition() -> PySide2.QtCore.QPoint:
            ...

        def meshAngle(self) -> float:
            ...

        def selectedBar(self) -> PySide2.QtCore.QPoint:
            ...

        def setDataProxy(
            self, proxy: PySide2.QtDataVisualization.QtDataVisualization.QBarDataProxy
        ) -> None:
            ...

        def setMeshAngle(self, angle: float) -> None:
            ...

        def setSelectedBar(self, position: PySide2.QtCore.QPoint) -> None:
            ...

    class QBarDataItem(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, other: PySide2.QtDataVisualization.QtDataVisualization.QBarDataItem
        ) -> None:
            ...

        @typing.overload
        def __init__(self, value: float) -> None:
            ...

        @typing.overload
        def __init__(self, value: float, angle: float) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        def createExtraData(self) -> None:
            ...

        def rotation(self) -> float:
            ...

        def setRotation(self, angle: float) -> None:
            ...

        def setValue(self, val: float) -> None:
            ...

        def value(self) -> float:
            ...

    class QBarDataProxy(PySide2.QtDataVisualization.QAbstractDataProxy):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        @typing.overload
        def addRow(self, row: typing.List) -> int:
            ...

        @typing.overload
        def addRow(self, row: typing.List, label: str) -> int:
            ...

        @typing.overload
        def addRows(self, rows: typing.List) -> int:
            ...

        @typing.overload
        def addRows(self, rows: typing.List, labels: typing.Sequence) -> int:
            ...

        def array(self) -> typing.List:
            ...

        def columnLabels(self) -> typing.List:
            ...

        @typing.overload
        def insertRow(self, rowIndex: int, row: typing.List) -> None:
            ...

        @typing.overload
        def insertRow(self, rowIndex: int, row: typing.List, label: str) -> None:
            ...

        @typing.overload
        def insertRows(self, rowIndex: int, rows: typing.List) -> None:
            ...

        @typing.overload
        def insertRows(
            self, rowIndex: int, rows: typing.List, labels: typing.Sequence
        ) -> None:
            ...

        @typing.overload
        def itemAt(
            self, position: PySide2.QtCore.QPoint
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QBarDataItem:
            ...

        @typing.overload
        def itemAt(
            self, rowIndex: int, columnIndex: int
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QBarDataItem:
            ...

        def removeRows(
            self, rowIndex: int, removeCount: int, removeLabels: bool = ...
        ) -> None:
            ...

        @typing.overload
        def resetArray(self) -> None:
            ...

        @typing.overload
        def resetArray(self, newArray: typing.List) -> None:
            ...

        @typing.overload
        def resetArray(
            self,
            newArray: typing.List,
            rowLabels: typing.Sequence,
            columnLabels: typing.Sequence,
        ) -> None:
            ...

        def rowAt(self, rowIndex: int) -> typing.List:
            ...

        def rowCount(self) -> int:
            ...

        def rowLabels(self) -> typing.List:
            ...

        def series(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QBar3DSeries:
            ...

        def setColumnLabels(self, labels: typing.Sequence) -> None:
            ...

        @typing.overload
        def setItem(
            self,
            position: PySide2.QtCore.QPoint,
            item: PySide2.QtDataVisualization.QtDataVisualization.QBarDataItem,
        ) -> None:
            ...

        @typing.overload
        def setItem(
            self,
            rowIndex: int,
            columnIndex: int,
            item: PySide2.QtDataVisualization.QtDataVisualization.QBarDataItem,
        ) -> None:
            ...

        @typing.overload
        def setRow(self, rowIndex: int, row: typing.List) -> None:
            ...

        @typing.overload
        def setRow(self, rowIndex: int, row: typing.List, label: str) -> None:
            ...

        def setRowLabels(self, labels: typing.Sequence) -> None:
            ...

        @typing.overload
        def setRows(self, rowIndex: int, rows: typing.List) -> None:
            ...

        @typing.overload
        def setRows(
            self, rowIndex: int, rows: typing.List, labels: typing.Sequence
        ) -> None:
            ...

    class QCategory3DAxis(PySide2.QtDataVisualization.QAbstract3DAxis):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def labels(self) -> typing.List:
            ...

        def setLabels(self, labels: typing.Sequence) -> None:
            ...

    class QCustom3DItem(PySide2.QtCore.QObject):
        @typing.overload
        def __init__(
            self,
            meshFile: str,
            position: PySide2.QtGui.QVector3D,
            scaling: PySide2.QtGui.QVector3D,
            rotation: PySide2.QtGui.QQuaternion,
            texture: PySide2.QtGui.QImage,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def isPositionAbsolute(self) -> bool:
            ...

        def isScalingAbsolute(self) -> bool:
            ...

        def isShadowCasting(self) -> bool:
            ...

        def isVisible(self) -> bool:
            ...

        def meshFile(self) -> str:
            ...

        def position(self) -> PySide2.QtGui.QVector3D:
            ...

        def rotation(self) -> PySide2.QtGui.QQuaternion:
            ...

        def scaling(self) -> PySide2.QtGui.QVector3D:
            ...

        def setMeshFile(self, meshFile: str) -> None:
            ...

        def setPosition(self, position: PySide2.QtGui.QVector3D) -> None:
            ...

        def setPositionAbsolute(self, positionAbsolute: bool) -> None:
            ...

        def setRotation(self, rotation: PySide2.QtGui.QQuaternion) -> None:
            ...

        def setRotationAxisAndAngle(
            self, axis: PySide2.QtGui.QVector3D, angle: float
        ) -> None:
            ...

        def setScaling(self, scaling: PySide2.QtGui.QVector3D) -> None:
            ...

        def setScalingAbsolute(self, scalingAbsolute: bool) -> None:
            ...

        def setShadowCasting(self, enabled: bool) -> None:
            ...

        def setTextureFile(self, textureFile: str) -> None:
            ...

        def setTextureImage(self, textureImage: PySide2.QtGui.QImage) -> None:
            ...

        def setVisible(self, visible: bool) -> None:
            ...

        def textureFile(self) -> str:
            ...

    class QCustom3DLabel(PySide2.QtDataVisualization.QCustom3DItem):
        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            text: str,
            font: PySide2.QtGui.QFont,
            position: PySide2.QtGui.QVector3D,
            scaling: PySide2.QtGui.QVector3D,
            rotation: PySide2.QtGui.QQuaternion,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        def backgroundColor(self) -> PySide2.QtGui.QColor:
            ...

        def font(self) -> PySide2.QtGui.QFont:
            ...

        def isBackgroundEnabled(self) -> bool:
            ...

        def isBorderEnabled(self) -> bool:
            ...

        def isFacingCamera(self) -> bool:
            ...

        def setBackgroundColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setBackgroundEnabled(self, enabled: bool) -> None:
            ...

        def setBorderEnabled(self, enabled: bool) -> None:
            ...

        def setFacingCamera(self, enabled: bool) -> None:
            ...

        def setFont(self, font: PySide2.QtGui.QFont) -> None:
            ...

        def setText(self, text: str) -> None:
            ...

        def setTextColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def text(self) -> str:
            ...

        def textColor(self) -> PySide2.QtGui.QColor:
            ...

    class QCustom3DVolume(PySide2.QtDataVisualization.QCustom3DItem):
        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtGui.QVector3D,
            scaling: PySide2.QtGui.QVector3D,
            rotation: PySide2.QtGui.QQuaternion,
            textureWidth: int,
            textureHeight: int,
            textureDepth: int,
            textureData: typing.List,
            textureFormat: PySide2.QtGui.QImage.Format,
            colorTable: typing.List,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        def alphaMultiplier(self) -> float:
            ...

        def colorTable(self) -> typing.List:
            ...

        def createTextureData(self, images: typing.List) -> typing.List:
            ...

        def drawSliceFrames(self) -> bool:
            ...

        def drawSlices(self) -> bool:
            ...

        def preserveOpacity(self) -> bool:
            ...

        def renderSlice(
            self, axis: PySide2.QtCore.Qt.Axis, index: int
        ) -> PySide2.QtGui.QImage:
            ...

        def setAlphaMultiplier(self, mult: float) -> None:
            ...

        def setColorTable(self, colors: typing.List) -> None:
            ...

        def setDrawSliceFrames(self, enable: bool) -> None:
            ...

        def setDrawSlices(self, enable: bool) -> None:
            ...

        def setPreserveOpacity(self, enable: bool) -> None:
            ...

        def setSliceFrameColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setSliceFrameGaps(self, values: PySide2.QtGui.QVector3D) -> None:
            ...

        def setSliceFrameThicknesses(self, values: PySide2.QtGui.QVector3D) -> None:
            ...

        def setSliceFrameWidths(self, values: PySide2.QtGui.QVector3D) -> None:
            ...

        def setSliceIndexX(self, value: int) -> None:
            ...

        def setSliceIndexY(self, value: int) -> None:
            ...

        def setSliceIndexZ(self, value: int) -> None:
            ...

        def setSliceIndices(self, x: int, y: int, z: int) -> None:
            ...

        @typing.overload
        def setSubTextureData(
            self, axis: PySide2.QtCore.Qt.Axis, index: int, data: bytes
        ) -> None:
            ...

        @typing.overload
        def setSubTextureData(
            self, axis: PySide2.QtCore.Qt.Axis, index: int, image: PySide2.QtGui.QImage
        ) -> None:
            ...

        def setTextureData(self, data: typing.List) -> None:
            ...

        def setTextureDepth(self, value: int) -> None:
            ...

        def setTextureDimensions(self, width: int, height: int, depth: int) -> None:
            ...

        def setTextureFormat(self, format: PySide2.QtGui.QImage.Format) -> None:
            ...

        def setTextureHeight(self, value: int) -> None:
            ...

        def setTextureWidth(self, value: int) -> None:
            ...

        def setUseHighDefShader(self, enable: bool) -> None:
            ...

        def sliceFrameColor(self) -> PySide2.QtGui.QColor:
            ...

        def sliceFrameGaps(self) -> PySide2.QtGui.QVector3D:
            ...

        def sliceFrameThicknesses(self) -> PySide2.QtGui.QVector3D:
            ...

        def sliceFrameWidths(self) -> PySide2.QtGui.QVector3D:
            ...

        def sliceIndexX(self) -> int:
            ...

        def sliceIndexY(self) -> int:
            ...

        def sliceIndexZ(self) -> int:
            ...

        def textureData(self) -> typing.List:
            ...

        def textureDataWidth(self) -> int:
            ...

        def textureDepth(self) -> int:
            ...

        def textureFormat(self) -> PySide2.QtGui.QImage.Format:
            ...

        def textureHeight(self) -> int:
            ...

        def textureWidth(self) -> int:
            ...

        def useHighDefShader(self) -> bool:
            ...

    class QHeightMapSurfaceDataProxy(PySide2.QtDataVisualization.QSurfaceDataProxy):
        @typing.overload
        def __init__(
            self, filename: str, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            image: PySide2.QtGui.QImage,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def heightMap(self) -> PySide2.QtGui.QImage:
            ...

        def heightMapFile(self) -> str:
            ...

        def maxXValue(self) -> float:
            ...

        def maxZValue(self) -> float:
            ...

        def minXValue(self) -> float:
            ...

        def minZValue(self) -> float:
            ...

        def setHeightMap(self, image: PySide2.QtGui.QImage) -> None:
            ...

        def setHeightMapFile(self, filename: str) -> None:
            ...

        def setMaxXValue(self, max: float) -> None:
            ...

        def setMaxZValue(self, max: float) -> None:
            ...

        def setMinXValue(self, min: float) -> None:
            ...

        def setMinZValue(self, min: float) -> None:
            ...

        def setValueRanges(
            self, minX: float, maxX: float, minZ: float, maxZ: float
        ) -> None:
            ...

    class QItemModelBarDataProxy(PySide2.QtDataVisualization.QBarDataProxy):
        MMBFirst: QtDataVisualization.QItemModelBarDataProxy = ...
        MMBLast: QtDataVisualization.QItemModelBarDataProxy = ...
        MMBAverage: QtDataVisualization.QItemModelBarDataProxy = ...
        MMBCumulative: QtDataVisualization.QItemModelBarDataProxy = ...

        class MultiMatchBehavior(object):
            MMBFirst: QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior = (
                ...
            )
            MMBLast: QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior = ...
            MMBAverage: QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior = (
                ...
            )
            MMBCumulative: QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior = (
                ...
            )

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            valueRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            valueRole: str,
            rotationRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            valueRole: str,
            rotationRole: str,
            rowCategories: typing.Sequence,
            columnCategories: typing.Sequence,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            valueRole: str,
            rowCategories: typing.Sequence,
            columnCategories: typing.Sequence,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            valueRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def autoColumnCategories(self) -> bool:
            ...

        def autoRowCategories(self) -> bool:
            ...

        def columnCategories(self) -> typing.List:
            ...

        def columnCategoryIndex(self, category: str) -> int:
            ...

        def columnRole(self) -> str:
            ...

        def columnRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def columnRoleReplace(self) -> str:
            ...

        def itemModel(self) -> PySide2.QtCore.QAbstractItemModel:
            ...

        def multiMatchBehavior(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior:
            ...

        def remap(
            self,
            rowRole: str,
            columnRole: str,
            valueRole: str,
            rotationRole: str,
            rowCategories: typing.Sequence,
            columnCategories: typing.Sequence,
        ) -> None:
            ...

        def rotationRole(self) -> str:
            ...

        def rotationRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def rotationRoleReplace(self) -> str:
            ...

        def rowCategories(self) -> typing.List:
            ...

        def rowCategoryIndex(self, category: str) -> int:
            ...

        def rowRole(self) -> str:
            ...

        def rowRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def rowRoleReplace(self) -> str:
            ...

        def setAutoColumnCategories(self, enable: bool) -> None:
            ...

        def setAutoRowCategories(self, enable: bool) -> None:
            ...

        def setColumnCategories(self, categories: typing.Sequence) -> None:
            ...

        def setColumnRole(self, role: str) -> None:
            ...

        def setColumnRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setColumnRoleReplace(self, replace: str) -> None:
            ...

        def setItemModel(self, itemModel: PySide2.QtCore.QAbstractItemModel) -> None:
            ...

        def setMultiMatchBehavior(
            self,
            behavior: PySide2.QtDataVisualization.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior,
        ) -> None:
            ...

        def setRotationRole(self, role: str) -> None:
            ...

        def setRotationRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setRotationRoleReplace(self, replace: str) -> None:
            ...

        def setRowCategories(self, categories: typing.Sequence) -> None:
            ...

        def setRowRole(self, role: str) -> None:
            ...

        def setRowRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setRowRoleReplace(self, replace: str) -> None:
            ...

        def setUseModelCategories(self, enable: bool) -> None:
            ...

        def setValueRole(self, role: str) -> None:
            ...

        def setValueRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setValueRoleReplace(self, replace: str) -> None:
            ...

        def useModelCategories(self) -> bool:
            ...

        def valueRole(self) -> str:
            ...

        def valueRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def valueRoleReplace(self) -> str:
            ...

    class QItemModelScatterDataProxy(PySide2.QtDataVisualization.QScatterDataProxy):
        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            xPosRole: str,
            yPosRole: str,
            zPosRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            xPosRole: str,
            yPosRole: str,
            zPosRole: str,
            rotationRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def itemModel(self) -> PySide2.QtCore.QAbstractItemModel:
            ...

        def remap(
            self, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str
        ) -> None:
            ...

        def rotationRole(self) -> str:
            ...

        def rotationRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def rotationRoleReplace(self) -> str:
            ...

        def setItemModel(self, itemModel: PySide2.QtCore.QAbstractItemModel) -> None:
            ...

        def setRotationRole(self, role: str) -> None:
            ...

        def setRotationRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setRotationRoleReplace(self, replace: str) -> None:
            ...

        def setXPosRole(self, role: str) -> None:
            ...

        def setXPosRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setXPosRoleReplace(self, replace: str) -> None:
            ...

        def setYPosRole(self, role: str) -> None:
            ...

        def setYPosRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setYPosRoleReplace(self, replace: str) -> None:
            ...

        def setZPosRole(self, role: str) -> None:
            ...

        def setZPosRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setZPosRoleReplace(self, replace: str) -> None:
            ...

        def xPosRole(self) -> str:
            ...

        def xPosRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def xPosRoleReplace(self) -> str:
            ...

        def yPosRole(self) -> str:
            ...

        def yPosRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def yPosRoleReplace(self) -> str:
            ...

        def zPosRole(self) -> str:
            ...

        def zPosRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def zPosRoleReplace(self) -> str:
            ...

    class QItemModelSurfaceDataProxy(PySide2.QtDataVisualization.QSurfaceDataProxy):
        MMBFirst: QtDataVisualization.QItemModelSurfaceDataProxy = ...
        MMBLast: QtDataVisualization.QItemModelSurfaceDataProxy = ...
        MMBAverage: QtDataVisualization.QItemModelSurfaceDataProxy = ...
        MMBCumulativeY: QtDataVisualization.QItemModelSurfaceDataProxy = ...

        class MultiMatchBehavior(object):
            MMBFirst: QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior = (
                ...
            )
            MMBLast: QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior = (
                ...
            )
            MMBAverage: QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior = (
                ...
            )
            MMBCumulativeY: QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior = (
                ...
            )

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            xPosRole: str,
            yPosRole: str,
            zPosRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            xPosRole: str,
            yPosRole: str,
            zPosRole: str,
            rowCategories: typing.Sequence,
            columnCategories: typing.Sequence,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            yPosRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            rowRole: str,
            columnRole: str,
            yPosRole: str,
            rowCategories: typing.Sequence,
            columnCategories: typing.Sequence,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            itemModel: PySide2.QtCore.QAbstractItemModel,
            yPosRole: str,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def autoColumnCategories(self) -> bool:
            ...

        def autoRowCategories(self) -> bool:
            ...

        def columnCategories(self) -> typing.List:
            ...

        def columnCategoryIndex(self, category: str) -> int:
            ...

        def columnRole(self) -> str:
            ...

        def columnRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def columnRoleReplace(self) -> str:
            ...

        def itemModel(self) -> PySide2.QtCore.QAbstractItemModel:
            ...

        def multiMatchBehavior(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior:
            ...

        def remap(
            self,
            rowRole: str,
            columnRole: str,
            xPosRole: str,
            yPosRole: str,
            zPosRole: str,
            rowCategories: typing.Sequence,
            columnCategories: typing.Sequence,
        ) -> None:
            ...

        def rowCategories(self) -> typing.List:
            ...

        def rowCategoryIndex(self, category: str) -> int:
            ...

        def rowRole(self) -> str:
            ...

        def rowRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def rowRoleReplace(self) -> str:
            ...

        def setAutoColumnCategories(self, enable: bool) -> None:
            ...

        def setAutoRowCategories(self, enable: bool) -> None:
            ...

        def setColumnCategories(self, categories: typing.Sequence) -> None:
            ...

        def setColumnRole(self, role: str) -> None:
            ...

        def setColumnRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setColumnRoleReplace(self, replace: str) -> None:
            ...

        def setItemModel(self, itemModel: PySide2.QtCore.QAbstractItemModel) -> None:
            ...

        def setMultiMatchBehavior(
            self,
            behavior: PySide2.QtDataVisualization.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior,
        ) -> None:
            ...

        def setRowCategories(self, categories: typing.Sequence) -> None:
            ...

        def setRowRole(self, role: str) -> None:
            ...

        def setRowRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setRowRoleReplace(self, replace: str) -> None:
            ...

        def setUseModelCategories(self, enable: bool) -> None:
            ...

        def setXPosRole(self, role: str) -> None:
            ...

        def setXPosRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setXPosRoleReplace(self, replace: str) -> None:
            ...

        def setYPosRole(self, role: str) -> None:
            ...

        def setYPosRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setYPosRoleReplace(self, replace: str) -> None:
            ...

        def setZPosRole(self, role: str) -> None:
            ...

        def setZPosRolePattern(self, pattern: PySide2.QtCore.QRegExp) -> None:
            ...

        def setZPosRoleReplace(self, replace: str) -> None:
            ...

        def useModelCategories(self) -> bool:
            ...

        def xPosRole(self) -> str:
            ...

        def xPosRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def xPosRoleReplace(self) -> str:
            ...

        def yPosRole(self) -> str:
            ...

        def yPosRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def yPosRoleReplace(self) -> str:
            ...

        def zPosRole(self) -> str:
            ...

        def zPosRolePattern(self) -> PySide2.QtCore.QRegExp:
            ...

        def zPosRoleReplace(self) -> str:
            ...

    class QLogValue3DAxisFormatter(PySide2.QtDataVisualization.QValue3DAxisFormatter):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def autoSubGrid(self) -> bool:
            ...

        def base(self) -> float:
            ...

        def createNewInstance(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxisFormatter:
            ...

        def populateCopy(
            self,
            copy: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxisFormatter,
        ) -> None:
            ...

        def positionAt(self, value: float) -> float:
            ...

        def recalculate(self) -> None:
            ...

        def setAutoSubGrid(self, enabled: bool) -> None:
            ...

        def setBase(self, base: float) -> None:
            ...

        def setShowEdgeLabels(self, enabled: bool) -> None:
            ...

        def showEdgeLabels(self) -> bool:
            ...

        def valueAt(self, position: float) -> float:
            ...

    class QScatter3DSeries(PySide2.QtDataVisualization.QAbstract3DSeries):
        @typing.overload
        def __init__(
            self,
            dataProxy: PySide2.QtDataVisualization.QtDataVisualization.QScatterDataProxy,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def dataProxy(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QScatterDataProxy:
            ...

        @staticmethod
        def invalidSelectionIndex() -> int:
            ...

        def itemSize(self) -> float:
            ...

        def selectedItem(self) -> int:
            ...

        def setDataProxy(
            self,
            proxy: PySide2.QtDataVisualization.QtDataVisualization.QScatterDataProxy,
        ) -> None:
            ...

        def setItemSize(self, size: float) -> None:
            ...

        def setSelectedItem(self, index: int) -> None:
            ...

    class QScatterDataItem(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            other: PySide2.QtDataVisualization.QtDataVisualization.QScatterDataItem,
        ) -> None:
            ...

        @typing.overload
        def __init__(self, position: PySide2.QtGui.QVector3D) -> None:
            ...

        @typing.overload
        def __init__(
            self, position: PySide2.QtGui.QVector3D, rotation: PySide2.QtGui.QQuaternion
        ) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        def createExtraData(self) -> None:
            ...

        def position(self) -> PySide2.QtGui.QVector3D:
            ...

        def rotation(self) -> PySide2.QtGui.QQuaternion:
            ...

        def setPosition(self, pos: PySide2.QtGui.QVector3D) -> None:
            ...

        def setRotation(self, rot: PySide2.QtGui.QQuaternion) -> None:
            ...

        def setX(self, value: float) -> None:
            ...

        def setY(self, value: float) -> None:
            ...

        def setZ(self, value: float) -> None:
            ...

        def x(self) -> float:
            ...

        def y(self) -> float:
            ...

        def z(self) -> float:
            ...

    class QScatterDataProxy(PySide2.QtDataVisualization.QAbstractDataProxy):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def addItem(
            self, item: PySide2.QtDataVisualization.QtDataVisualization.QScatterDataItem
        ) -> int:
            ...

        def addItems(self, items: typing.List) -> int:
            ...

        def array(self) -> typing.List:
            ...

        def insertItem(
            self,
            index: int,
            item: PySide2.QtDataVisualization.QtDataVisualization.QScatterDataItem,
        ) -> None:
            ...

        def insertItems(self, index: int, items: typing.List) -> None:
            ...

        def itemAt(
            self, index: int
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QScatterDataItem:
            ...

        def itemCount(self) -> int:
            ...

        def removeItems(self, index: int, removeCount: int) -> None:
            ...

        def resetArray(self, newArray: typing.List) -> None:
            ...

        def series(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QScatter3DSeries:
            ...

        def setItem(
            self,
            index: int,
            item: PySide2.QtDataVisualization.QtDataVisualization.QScatterDataItem,
        ) -> None:
            ...

        def setItems(self, index: int, items: typing.List) -> None:
            ...

    class QSurface3DSeries(PySide2.QtDataVisualization.QAbstract3DSeries):
        DrawWireframe: QtDataVisualization.QSurface3DSeries = ...
        DrawSurface: QtDataVisualization.QSurface3DSeries = ...
        DrawSurfaceAndWireframe: QtDataVisualization.QSurface3DSeries = ...

        class DrawFlag(object):
            DrawWireframe: QtDataVisualization.QSurface3DSeries.DrawFlag = ...
            DrawSurface: QtDataVisualization.QSurface3DSeries.DrawFlag = ...
            DrawSurfaceAndWireframe: QtDataVisualization.QSurface3DSeries.DrawFlag = ...

        class DrawFlags(object):
            ...

        @typing.overload
        def __init__(
            self,
            dataProxy: PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataProxy,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def dataProxy(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataProxy:
            ...

        def drawMode(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QSurface3DSeries.DrawFlags:
            ...

        @staticmethod
        def invalidSelectionPosition() -> PySide2.QtCore.QPoint:
            ...

        def isFlatShadingEnabled(self) -> bool:
            ...

        def isFlatShadingSupported(self) -> bool:
            ...

        def selectedPoint(self) -> PySide2.QtCore.QPoint:
            ...

        def setDataProxy(
            self,
            proxy: PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataProxy,
        ) -> None:
            ...

        def setDrawMode(
            self,
            mode: PySide2.QtDataVisualization.QtDataVisualization.QSurface3DSeries.DrawFlags,
        ) -> None:
            ...

        def setFlatShadingEnabled(self, enabled: bool) -> None:
            ...

        def setSelectedPoint(self, position: PySide2.QtCore.QPoint) -> None:
            ...

        def setTexture(self, texture: PySide2.QtGui.QImage) -> None:
            ...

        def setTextureFile(self, filename: str) -> None:
            ...

        def texture(self) -> PySide2.QtGui.QImage:
            ...

        def textureFile(self) -> str:
            ...

    class QSurfaceDataItem(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            other: PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataItem,
        ) -> None:
            ...

        @typing.overload
        def __init__(self, position: PySide2.QtGui.QVector3D) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        def createExtraData(self) -> None:
            ...

        def position(self) -> PySide2.QtGui.QVector3D:
            ...

        def setPosition(self, pos: PySide2.QtGui.QVector3D) -> None:
            ...

        def setX(self, value: float) -> None:
            ...

        def setY(self, value: float) -> None:
            ...

        def setZ(self, value: float) -> None:
            ...

        def x(self) -> float:
            ...

        def y(self) -> float:
            ...

        def z(self) -> float:
            ...

    class QSurfaceDataProxy(PySide2.QtDataVisualization.QAbstractDataProxy):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def addRow(self, row: typing.List) -> int:
            ...

        def addRows(self, rows: typing.List) -> int:
            ...

        def array(self) -> typing.List:
            ...

        def columnCount(self) -> int:
            ...

        def insertRow(self, rowIndex: int, row: typing.List) -> None:
            ...

        def insertRows(self, rowIndex: int, rows: typing.List) -> None:
            ...

        @typing.overload
        def itemAt(
            self, position: PySide2.QtCore.QPoint
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataItem:
            ...

        @typing.overload
        def itemAt(
            self, rowIndex: int, columnIndex: int
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataItem:
            ...

        def removeRows(self, rowIndex: int, removeCount: int) -> None:
            ...

        def resetArray(self, newArray: typing.List) -> None:
            ...

        def rowCount(self) -> int:
            ...

        def series(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QSurface3DSeries:
            ...

        @typing.overload
        def setItem(
            self,
            position: PySide2.QtCore.QPoint,
            item: PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataItem,
        ) -> None:
            ...

        @typing.overload
        def setItem(
            self,
            rowIndex: int,
            columnIndex: int,
            item: PySide2.QtDataVisualization.QtDataVisualization.QSurfaceDataItem,
        ) -> None:
            ...

        def setRow(self, rowIndex: int, row: typing.List) -> None:
            ...

        def setRows(self, rowIndex: int, rows: typing.List) -> None:
            ...

    class QTouch3DInputHandler(PySide2.QtDataVisualization.Q3DInputHandler):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def touchEvent(self, event: PySide2.QtGui.QTouchEvent) -> None:
            ...

    class QValue3DAxis(PySide2.QtDataVisualization.QAbstract3DAxis):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def formatter(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxisFormatter:
            ...

        def labelFormat(self) -> str:
            ...

        def reversed(self) -> bool:
            ...

        def segmentCount(self) -> int:
            ...

        def setFormatter(
            self,
            formatter: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxisFormatter,
        ) -> None:
            ...

        def setLabelFormat(self, format: str) -> None:
            ...

        def setReversed(self, enable: bool) -> None:
            ...

        def setSegmentCount(self, count: int) -> None:
            ...

        def setSubSegmentCount(self, count: int) -> None:
            ...

        def subSegmentCount(self) -> int:
            ...

    class QValue3DAxisFormatter(PySide2.QtCore.QObject):
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def allowNegatives(self) -> bool:
            ...

        def allowZero(self) -> bool:
            ...

        def axis(self) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxis:
            ...

        def createNewInstance(
            self,
        ) -> PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxisFormatter:
            ...

        def gridPositions(self) -> typing.List:
            ...

        def labelPositions(self) -> typing.List:
            ...

        def labelStrings(self) -> typing.List:
            ...

        def locale(self) -> PySide2.QtCore.QLocale:
            ...

        def markDirty(self, labelsChange: bool = ...) -> None:
            ...

        def populateCopy(
            self,
            copy: PySide2.QtDataVisualization.QtDataVisualization.QValue3DAxisFormatter,
        ) -> None:
            ...

        def positionAt(self, value: float) -> float:
            ...

        def recalculate(self) -> None:
            ...

        def setAllowNegatives(self, allow: bool) -> None:
            ...

        def setAllowZero(self, allow: bool) -> None:
            ...

        def setLocale(self, locale: PySide2.QtCore.QLocale) -> None:
            ...

        def stringForValue(self, value: float, format: str) -> str:
            ...

        def subGridPositions(self) -> typing.List:
            ...

        def valueAt(self, position: float) -> float:
            ...

    @typing.overload
    @staticmethod
    def qDefaultSurfaceFormat(antialias: bool) -> PySide2.QtGui.QSurfaceFormat:
        """
        **QSurfaceFormat qDefaultSurfaceFormat(bool antialias )**

        This convenience function can be used to create a custom surface format suitable for use by Qt Data Visualization graphs.

        The **antialias** parameter specifies whether or not antialiasing is activated.

        Give the surface format returned by this function to the graph constructor (C++) or set it as the window format for **QQuickView**  (QML) before calling `show()` on it.

        For example, disable antialiasing on C++ application:

        #include <QtDataVisualization/qutils.h>

            // ...

            **Q3DBars**  *graph = new **Q3DBars** (QtDataVisualization::qDefaultSurfaceFormat(false));

        For example, enable antialiasing for direct rendering modes on QML application:

        #include <QtDataVisualization/qutils.h>

            // ...

            **QQuickView**  viewer;
            viewer.setFormat(QtDataVisualization::qDefaultSurfaceFormat());

        **Note:** Antialiasing is not supported in OpenGL ES2 environments.
        """
        ...

    @typing.overload
    @staticmethod
    def qDefaultSurfaceFormat(antialias: bool = ...) -> PySide2.QtGui.QSurfaceFormat:
        """
        **QSurfaceFormat qDefaultSurfaceFormat(bool antialias )**

        This convenience function can be used to create a custom surface format suitable for use by Qt Data Visualization graphs.

        The **antialias** parameter specifies whether or not antialiasing is activated.

        Give the surface format returned by this function to the graph constructor (C++) or set it as the window format for **QQuickView**  (QML) before calling `show()` on it.

        For example, disable antialiasing on C++ application:

        #include <QtDataVisualization/qutils.h>

            // ...

            **Q3DBars**  *graph = new **Q3DBars** (QtDataVisualization::qDefaultSurfaceFormat(false));

        For example, enable antialiasing for direct rendering modes on QML application:

        #include <QtDataVisualization/qutils.h>

            // ...

            **QQuickView**  viewer;
            viewer.setFormat(QtDataVisualization::qDefaultSurfaceFormat());

        **Note:** Antialiasing is not supported in OpenGL ES2 environments.
        """
        ...
