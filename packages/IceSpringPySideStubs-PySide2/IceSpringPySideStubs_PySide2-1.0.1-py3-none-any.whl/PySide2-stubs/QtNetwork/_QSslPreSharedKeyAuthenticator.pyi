"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtNetwork

bytes = str


class QSslPreSharedKeyAuthenticator(object):
    """
    **Detailed Description**

    The QSslPreSharedKeyAuthenticator class is used by an SSL socket to provide the required authentication data in a pre shared key (PSK) ciphersuite.

    In a PSK handshake, the client must derive a key, which must match the key set on the server. The exact algorithm of deriving the key depends on the application; however, for this purpose, the server may send an **identity hint** to the client. This hint, combined with other information (for instance a passphrase), is then used by the client to construct the shared key.

    The QSslPreSharedKeyAuthenticator provides means to client applications for completing the PSK handshake. The client application needs to connect a slot to the **QSslSocket::preSharedKeyAuthenticationRequired** () signal:

    connect(socket, &**QSslSocket** ::preSharedKeyAuthenticationRequired,
                    this, &AuthManager::handlePreSharedKeyAuthentication);

    The signal carries a QSslPreSharedKeyAuthenticator object containing the identity hint the server sent to the client, and which must be filled with the corresponding client identity and the derived key:

    void AuthManager::handlePreSharedKeyAuthentication(**QSslPreSharedKeyAuthenticator**  *authenticator)
            {
                authenticator->setIdentity("My Qt App");

                const **QByteArray**  key = deriveKey(authenticator->identityHint(), passphrase);
                authenticator->setPreSharedKey(key);
            }

    **Note:** PSK ciphersuites are supported only when using OpenSSL 1.0.1 (or greater) as the SSL backend.

    **Note:** PSK is currently only supported in OpenSSL.

    **See also** **QSslSocket** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QSslPreSharedKeyAuthenticator::QSslPreSharedKeyAuthenticator()**

        Constructs a default QSslPreSharedKeyAuthenticator object.

        The identity hint, the identity and the key will be initialized to empty byte arrays; the maximum length for both the identity and the key will be initialized to 0.
        """
        ...

    @typing.overload
    def __init__(
        self, authenticator: PySide2.QtNetwork.QSslPreSharedKeyAuthenticator
    ) -> None:
        """
        **QSslPreSharedKeyAuthenticator::QSslPreSharedKeyAuthenticator()**

        Constructs a default QSslPreSharedKeyAuthenticator object.

        The identity hint, the identity and the key will be initialized to empty byte arrays; the maximum length for both the identity and the key will be initialized to 0.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def identity(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QSslPreSharedKeyAuthenticator::identity() const**

        Returns the PSK client identity.

        **See also** **setIdentity** ().
        """
        ...

    def identityHint(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QSslPreSharedKeyAuthenticator::identityHint() const**

        Returns the PSK identity hint as provided by the server. The interpretation of this hint is left to the application.
        """
        ...

    def maximumIdentityLength(self) -> int:
        """
        **int QSslPreSharedKeyAuthenticator::maximumIdentityLength() const**

        Returns the maximum length, in bytes, of the PSK client identity.

        **Note:** it is possible to set an identity whose length is greater than maximumIdentityLength(); in this case, only the first maximumIdentityLength() bytes will be actually sent to the server.

        **See also** **setIdentity** ().
        """
        ...

    def maximumPreSharedKeyLength(self) -> int:
        """
        **int QSslPreSharedKeyAuthenticator::maximumPreSharedKeyLength() const**

        Returns the maximum length, in bytes, of the pre shared key.

        **Note:** it is possible to set a key whose length is greater than the maximumPreSharedKeyLength(); in this case, only the first maximumPreSharedKeyLength() bytes will be actually sent to the server.

        **See also** **setPreSharedKey** ().
        """
        ...

    def preSharedKey(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QSslPreSharedKeyAuthenticator::preSharedKey() const**

        Returns the pre shared key.

        **See also** **setPreSharedKey** ().
        """
        ...

    def setIdentity(self, identity: PySide2.QtCore.QByteArray) -> None:
        """
        **void QSslPreSharedKeyAuthenticator::setIdentity(const QByteArray & identity )**

        Sets the PSK client identity (to be advised to the server) to **identity**.

        **Note:** it is possible to set an identity whose length is greater than **maximumIdentityLength** (); in this case, only the first **maximumIdentityLength** () bytes will be actually sent to the server.

        **See also** **identity** () and **maximumIdentityLength** ().
        """
        ...

    def setPreSharedKey(self, preSharedKey: PySide2.QtCore.QByteArray) -> None:
        """
        **void QSslPreSharedKeyAuthenticator::setPreSharedKey(const QByteArray & preSharedKey )**

        Sets the pre shared key to **preSharedKey**.

        **Note:** it is possible to set a key whose length is greater than the **maximumPreSharedKeyLength** (); in this case, only the first **maximumPreSharedKeyLength** () bytes will be actually sent to the server.

        **See also** **preSharedKey** (), **maximumPreSharedKeyLength** (), and **QByteArray::fromHex** ().
        """
        ...

    def swap(self, other: PySide2.QtNetwork.QSslPreSharedKeyAuthenticator) -> None:
        """
        **void QSslPreSharedKeyAuthenticator::swap(QSslPreSharedKeyAuthenticator & authenticator )**

        Swaps the **QSslPreSharedKeyAuthenticator**  object **authenticator** with this object. This operation is very fast and never fails.
        """
        ...
