"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtNetwork

bytes = str


class QHstsPolicy(object):
    """
    **Detailed Description**

    HSTS policy defines a period of time during which **QNetworkAccessManager**  should only access a host in a secure fashion. HSTS policy is defined by RFC6797.

    You can set expiry time and host name for this policy, and control whether it applies to subdomains, either in the constructor or by calling **setExpiry** (), **setHost** () and setIncludesSubdomains().

    **See also** **QNetworkAccessManager::setStrictTransportSecurityEnabled** ().
    """

    IncludeSubDomains: QHstsPolicy = ...

    class PolicyFlag(object):
        IncludeSubDomains: QHstsPolicy.PolicyFlag = ...

    class PolicyFlags(object):
        ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QHstsPolicy::QHstsPolicy()**

        Constructs an invalid (expired) policy with empty host name and subdomains not included.
        """
        ...

    @typing.overload
    def __init__(
        self,
        expiry: PySide2.QtCore.QDateTime,
        flags: PySide2.QtNetwork.QHstsPolicy.PolicyFlags,
        host: str,
        mode: PySide2.QtCore.QUrl.ParsingMode = ...,
    ) -> None:
        """
        **QHstsPolicy::QHstsPolicy()**

        Constructs an invalid (expired) policy with empty host name and subdomains not included.
        """
        ...

    @typing.overload
    def __init__(self, rhs: PySide2.QtNetwork.QHstsPolicy) -> None:
        """
        **QHstsPolicy::QHstsPolicy()**

        Constructs an invalid (expired) policy with empty host name and subdomains not included.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def expiry(self) -> PySide2.QtCore.QDateTime:
        """
        **QDateTime QHstsPolicy::expiry() const**

        Returns the expiration date for the policy (in UTC).

        **See also** **setExpiry** ().
        """
        ...

    def host(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption = ...) -> str:
        """
        **QString QHstsPolicy::host(QUrl::ComponentFormattingOptions options = QUrl::FullyDecoded) const**

        Returns a host for a given policy, formatted according to **options**.

        **See also** **setHost** (), **QUrl::host** (), and **QUrl::ComponentFormattingOptions** .
        """
        ...

    def includesSubDomains(self) -> bool:
        """
        **bool QHstsPolicy::includesSubDomains() const**

        Returns `true` if this policy also includes subdomains.

        **See also** **setIncludesSubDomains** ().
        """
        ...

    def isExpired(self) -> bool:
        """
        **bool QHstsPolicy::isExpired() const**

        Return `true` if this policy has a valid expiration date and this date is greater than QDateTime::currentGetDateTimeUtc().

        **See also** **setExpiry** () and **expiry** ().
        """
        ...

    def setExpiry(self, expiry: PySide2.QtCore.QDateTime) -> None:
        """
        **void QHstsPolicy::setExpiry(const QDateTime & expiry )**

        Sets the expiration date for the policy (in UTC) to **expiry**.

        **See also** **expiry** ().
        """
        ...

    def setHost(self, host: str, mode: PySide2.QtCore.QUrl.ParsingMode = ...) -> None:
        """
        **void QHstsPolicy::setHost(const QString & host , QUrl::ParsingMode mode = QUrl::DecodedMode)**

        Sets a host, **host** data is interpreted according to **mode** parameter.

        **See also** **host** (), **QUrl::setHost** (), and **QUrl::ParsingMode** .
        """
        ...

    def setIncludesSubDomains(self, include: bool) -> None:
        """
        **void QHstsPolicy::setIncludesSubDomains(bool include )**

        Sets whether subdomains are included for this policy to **include**.

        **See also** **includesSubDomains** ().
        """
        ...

    def swap(self, other: PySide2.QtNetwork.QHstsPolicy) -> None:
        """
        **void QHstsPolicy::swap(QHstsPolicy & other )**

        Swaps this policy with the **other** policy.
        """
        ...
