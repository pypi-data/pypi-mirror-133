"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtQuickControls2, except for defaults which are replaced by "...".
"""
import typing

bytes = str


class QQuickStyle(object):
    """
    https://doc.qt.io/qt-5/qquickstyle.html

    **Detailed Description**

    QQuickStyle provides API for querying and configuring the application
    **styles**  of Qt Quick Controls.

    #include <QGuiApplication>
        #include <QQmlApplicationEngine>
        #include
    <QQuickStyle>

        int main(int argc, char *argv[])
        {
    **QGuiApplication** ::setAttribute(Qt::AA_EnableHighDpiScaling);
    **QGuiApplication**  app(argc, argv);

            **QQuickStyle**
    ::setStyle("Material");

            **QQmlApplicationEngine**  engine;
    engine.load(**QUrl** ("qrc:/main.qml"));

            return app.exec();
    }

    **Note:** The style must be configured **before** loading QML that imports
    Qt Quick Controls. It is not possible to change the style after the QML
    types have been registered.

    The style can also be specified as a path to a custom style, such as
    `":/mystyle"`. See **Creating a Custom Style**  for more details about
    building custom styles. Custom styles do not need to implement all controls.
    By default, the styling system uses the **Default style**  as a fallback for
    controls that a custom style does not provide. It is possible to specify a
    different fallback style to customize or extend one of the built-in styles.

    **QQuickStyle** ::setStyle(":/mystyle");
        **QQuickStyle**
    ::setFallbackStyle("Material");

    **See also** **Styling Qt Quick Controls** .
    """

    def __init__(self) -> None:
        ...

    @staticmethod
    def addStylePath(path: str) -> None:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#addStylePath

        **[static] void QQuickStyle::addStylePath(const QString & path )**

        Adds **path** as a directory where Qt Quick Controls 2 searches for
        available styles.

        The **path** may be any local filesystem directory or **Qt Resource**
        directory. For example, the following paths are all valid:

        * `/path/to/styles/`
          * `file:///path/to/styles/`
          *
        `:/path/to/styles/`
          * `qrc:/path/to/styles/`)

        The **path** will be converted into **canonical form**  before it is
        added to the style path list.

        The newly added **path** will be first in the **stylePathList** ().

        This function was introduced in Qt 5.12.

        **See also** **stylePathList** () and **availableStyles** ().
        """
        ...

    @staticmethod
    def availableStyles() -> typing.List:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#availableStyles

        **[static] QStringList QQuickStyle::availableStyles()**

        Returns the names of the available styles.

        **Note:** The method must be called **after** creating an instance of
        **QGuiApplication** .

        This function was introduced in Qt 5.9.

        **See also** **stylePathList** () and **addStylePath** ().
        """
        ...

    @staticmethod
    def name() -> str:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#name

        **[static] QString QQuickStyle::name()**

        Returns the name of the application style.

        **Note:** The application style can be specified by passing a `-style`
        command line argument. Therefore `name()` may not return a fully
        resolved value if called before constructing a **QGuiApplication** .
        """
        ...

    @staticmethod
    def path() -> str:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#path

        **[static] QString QQuickStyle::path()**

        Returns the path of an overridden application style, or an empty string
        if the style is one of the built-in Qt Quick Controls 2 styles.

        **Note:** The application style can be specified by passing a `-style`
        command line argument. Therefore `path()` may not return a fully
        resolved value if called before constructing a **QGuiApplication** .
        """
        ...

    @staticmethod
    def setFallbackStyle(style: str) -> None:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#setFallbackStyle

        **[static] void QQuickStyle::setFallbackStyle(const QString & style )**

        Sets the application fallback style to **style**.

        **Note:** The fallback style must be the name of one of the built-in Qt
        Quick Controls styles, e.g. "Material".

        **Note:** The style must be configured **before** loading QML that
        imports Qt Quick Controls. It is not possible to change the style after
        the QML types have been registered.

        The fallback style can be also specified by setting the
        `QT_QUICK_CONTROLS_FALLBACK_STYLE` **environment variable** .

        This function was introduced in Qt 5.8.

        **See also** **setStyle** () and **Using Styles in Qt Quick Controls** .
        """
        ...

    @staticmethod
    def setStyle(style: str) -> None:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#setStyle

        **[static] void QQuickStyle::setStyle(const QString & style )**

        Sets the application style to **style**.

        **Note:** The style must be configured **before** loading QML that
        imports Qt Quick Controls. It is not possible to change the style after
        the QML types have been registered.

        **See also** **setFallbackStyle** () and **Using Styles in Qt Quick
        Controls** .
        """
        ...

    @staticmethod
    def stylePathList() -> typing.List:
        """
        https://doc.qt.io/qt-5/qquickstyle.html#stylePathList

        **[static] QStringList QQuickStyle::stylePathList()**

        Returns the list of directories where Qt Quick Controls 2 searches for
        available styles.

        By default, the list contains paths specified in the
        `QT_QUICK_CONTROLS_STYLE_PATH` environment variable, and any existing
        `QtQuick/Controls.2` sub-directories in **QQmlEngine::importPathList**
        ().

        This function was introduced in Qt 5.12.

        **See also** **addStylePath** () and **availableStyles** ().
        """
        ...
