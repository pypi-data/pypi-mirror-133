"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtScript, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptContext(object):
    """
    https://doc.qt.io/qt-5/qscriptcontext.html

    **Detailed Description**

    A QScriptContext provides access to the `this' object and arguments passed
    to a script function. You typically want to access this information when
    you're writing a native (C++) function (see **QScriptEngine::newFunction**
    ()) that will be called from script code. For example, when the script code

    foo(20.5, "hello", new Object())

    is evaluated, a QScriptContext will be created, and the context will carry
    the arguments as QScriptValues; in this particular case, the arguments will
    be one **QScriptValue**  containing the number 20.5, a second
    **QScriptValue**  containing the string `"hello"`, and a third
    **QScriptValue**  containing a Qt Script object.

    Use **argumentCount** () to get the number of arguments passed to the
    function, and **argument** () to get an argument at a certain index. The
    **argumentsObject** () function returns a Qt Script array object containing
    all the arguments; you can use the **QScriptValueIterator**  to iterate over
    its elements, or pass the array on as arguments to another script function
    using **QScriptValue::call** ().

    Use **thisObject** () to get the `this' object associated with the function
    call, and **setThisObject** () to set the `this' object. If you are
    implementing a native "instance method", you typically fetch the
    **thisObject** () and access one or more of its properties:

    **QScriptValue**  Person_prototype_fullName(QScriptContext *context,
    **QScriptEngine**  *engine)
        {
            **QScriptValue**  self =
    context->thisObject();
            **QString**  result;
            result +=
    self.property("firstName").toString();
            result += QLatin1String(" ");
    result += self.property("lastName").toString();
            return result;
        }

    Use **isCalledAsConstructor** () to determine if the function was called as
    a constructor (e.g. `"new foo()"` (as constructor) or just `"foo()"`). When
    a function is called as a constructor, the **thisObject** () contains the
    newly constructed object that the function is expected to initialize.

    Use **throwValue** () or **throwError** () to throw an exception.

    Use **callee** () to obtain the **QScriptValue**  that represents the
    function being called. This can for example be used to call the function
    recursively.

    Use **parentContext** () to get a pointer to the context that precedes this
    context in the activation stack. This is mostly useful for debugging
    purposes (e.g. when constructing some form of backtrace).

    The **activationObject** () function returns the object that is used to hold
    the local variables associated with this function call. You can replace the
    activation object by calling **setActivationObject** (). A typical usage of
    these functions is when you want script code to be evaluated in the context
    of the parent context, e.g. to implement an include() function:

    **QScriptValue**  myInclude(QScriptContext *ctx, **QScriptEngine**  *eng)
    {
            **QString**  fileName = ctx->argument(0).toString();
    **QString**  contents = readTheFile(fileName);
    ctx->setActivationObject(ctx->parentContext()->activationObject());
    ctx->setThisObject(ctx->parentContext()->thisObject());
            return
    eng->evaluate(contents, fileName);
        }

    Use **backtrace** () to get a human-readable backtrace associated with this
    context. This can be useful for debugging purposes when implementing native
    functions. The **toString** () function provides a string representation of
    the context. (**QScriptContextInfo**  provides more detailed debugging-
    related information about the QScriptContext.)

    Use **engine** () to obtain a pointer to the **QScriptEngine**  that this
    context resides in.

    **See also** **QScriptContextInfo** , **QScriptEngine::newFunction** (), and
    **QScriptable** .
    """

    NormalState: QScriptContext = ...
    UnknownError: QScriptContext = ...
    ExceptionState: QScriptContext = ...
    ReferenceError: QScriptContext = ...
    SyntaxError: QScriptContext = ...
    TypeError: QScriptContext = ...
    RangeError: QScriptContext = ...
    URIError: QScriptContext = ...

    class Error(object):
        UnknownError: QScriptContext.Error = ...
        ReferenceError: QScriptContext.Error = ...
        SyntaxError: QScriptContext.Error = ...
        TypeError: QScriptContext.Error = ...
        RangeError: QScriptContext.Error = ...
        URIError: QScriptContext.Error = ...

    class ExecutionState(object):
        NormalState: QScriptContext.ExecutionState = ...
        ExceptionState: QScriptContext.ExecutionState = ...

    def activationObject(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#activationObject

        **QScriptValue QScriptContext::activationObject() const**

        Returns the activation object of this **QScriptContext** . The
        activation object provides access to the local variables associated with
        this context.

        **Note:** The activation object might not be available if there is no
        active **QScriptEngineAgent** , as it might be optimized.

        **See also** **setActivationObject** (), **argument** (), and
        **argumentsObject** ().
        """
        ...

    def argument(self, index: int) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#argument

        **QScriptValue QScriptContext::argument(int index ) const**

        Returns the function argument at the given **index**.

        If **index** >= **argumentCount** (), a **QScriptValue**  of the
        primitive type Undefined is returned.

        **See also** **argumentCount** ().
        """
        ...

    def argumentCount(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#argumentCount

        **int QScriptContext::argumentCount() const**

        Returns the number of arguments passed to the function in this
        invocation.

        Note that the argument count can be different from the formal number of
        arguments (the `length` property of **callee** ()).

        **See also** **argument** ().
        """
        ...

    def argumentsObject(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#argumentsObject

        **QScriptValue QScriptContext::argumentsObject() const**

        Returns the arguments object of this **QScriptContext** .

        The arguments object has properties `callee` (equal to **callee** ())
        and `length` (equal to **argumentCount** ()), and properties `0`, `1`,
        ..., **argumentCount** () - 1 that provide access to the argument
        values. Initially, property `P` (0 <= `P` < **argumentCount** ()) has
        the same value as argument(`P`). In the case when `P` is less than the
        number of formal parameters of the function, `P` shares its value with
        the corresponding property of the activation object
        (**activationObject** ()). This means that changing this property
        changes the corresponding property of the activation object and vice
        versa.

        **See also** **argument** () and **activationObject** ().
        """
        ...

    def backtrace(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#backtrace

        **QStringList QScriptContext::backtrace() const**

        Returns a human-readable backtrace of this **QScriptContext** .

        Each line is of the form `<function-name>(<arguments>)@<file-
        name>:<line-number>`.

        To access individual pieces of debugging-related information (for
        example, to construct your own backtrace representation), use
        **QScriptContextInfo** .

        **See also** **QScriptEngine::uncaughtExceptionBacktrace** (),
        **QScriptContextInfo** , and **toString** ().
        """
        ...

    def callee(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#callee

        **QScriptValue QScriptContext::callee() const**

        Returns the callee. The callee is the function object that this
        **QScriptContext**  represents an invocation of.
        """
        ...

    def engine(self) -> PySide2.QtScript.QScriptEngine:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#engine

        **QScriptEngine *QScriptContext::engine() const**

        Returns the **QScriptEngine**  that this **QScriptContext**  belongs to.
        """
        ...

    def isCalledAsConstructor(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#isCalledAsConstructor

        **bool QScriptContext::isCalledAsConstructor() const**

        Returns true if the function was called as a constructor (e.g. `"new
        foo()"`); otherwise returns false.

        When a function is called as constructor, the **thisObject** () contains
        the newly constructed object to be initialized.

        **Note:** This function is only guaranteed to work for a context
        corresponding to native functions.
        """
        ...

    def parentContext(self) -> PySide2.QtScript.QScriptContext:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#parentContext

        **QScriptContext *QScriptContext::parentContext() const**

        Returns the parent context of this **QScriptContext** .
        """
        ...

    def popScope(self) -> PySide2.QtScript.QScriptValue:
        ...

    def pushScope(self, object: PySide2.QtScript.QScriptValue) -> None:
        ...

    def returnValue(self) -> PySide2.QtScript.QScriptValue:
        ...

    def scopeChain(self) -> typing.List:
        ...

    def setActivationObject(self, activation: PySide2.QtScript.QScriptValue) -> None:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#setActivationObject

        **void QScriptContext::setActivationObject(const QScriptValue &
        activation )**

        Sets the activation object of this **QScriptContext**  to be the given
        **activation**.

        If **activation** is not an object, this function does nothing.

        **Note:** For a context corresponding to a JavaScript function, this is
        only guaranteed to work if there was an **QScriptEngineAgent**  active
        on the engine while the function was evaluated.

        **See also** **activationObject** ().
        """
        ...

    def setReturnValue(self, result: PySide2.QtScript.QScriptValue) -> None:
        ...

    def setThisObject(self, thisObject: PySide2.QtScript.QScriptValue) -> None:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#setThisObject

        **void QScriptContext::setThisObject(const QScriptValue & thisObject )**

        Sets the `this' object associated with this **QScriptContext**  to be
        **thisObject**.

        If **thisObject** is not an object, this function does nothing.

        **See also** **thisObject** ().
        """
        ...

    def state(self) -> PySide2.QtScript.QScriptContext.ExecutionState:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#state

        **QScriptContext::ExecutionState QScriptContext::state() const**

        Returns the frameution state of this **QScriptContext** .
        """
        ...

    def thisObject(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#thisObject

        **QScriptValue QScriptContext::thisObject() const**

        Returns the `this' object associated with this **QScriptContext** .

        **See also** **setThisObject** ().
        """
        ...

    @typing.overload
    def throwError(
        self, error: PySide2.QtScript.QScriptContext.Error, text: str
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#throwError

        **QScriptValue QScriptContext::throwError(QScriptContext::Error error ,
        const QString & text )**

        Throws an **error** with the given **text**. Returns the created error
        object.

        The **text** will be stored in the `message` property of the error
        object.

        The error object will be initialized to contain information about the
        location where the error occurred; specifically, it will have properties
        `lineNumber`, `fileName` and `stack`. These properties are described in
        **Qt Script Extensions to ECMAScript** .

        **See also** **throwValue** () and **state** ().
        """
        ...

    @typing.overload
    def throwError(self, text: str) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#throwError-1

        **QScriptValue QScriptContext::throwError(const QString & text )**

        This is an overloaded function.

        Throws an error with the given **text**. Returns the created error
        object.

        **See also** **throwValue** () and **state** ().
        """
        ...

    def throwValue(
        self, value: PySide2.QtScript.QScriptValue
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#throwValue

        **QScriptValue QScriptContext::throwValue(const QScriptValue & value )**

        Throws an exception with the given **value**. Returns the value thrown
        (the same as the argument).

        **See also** **throwError** () and **state** ().
        """
        ...

    def toString(self) -> str:
        """
        https://doc.qt.io/qt-5/qscriptcontext.html#toString

        **QString QScriptContext::toString() const**

        Returns a string representation of this context. This is useful for
        debugging.

        This function was introduced in Qt 4.4.

        **See also** **backtrace** ().
        """
        ...
