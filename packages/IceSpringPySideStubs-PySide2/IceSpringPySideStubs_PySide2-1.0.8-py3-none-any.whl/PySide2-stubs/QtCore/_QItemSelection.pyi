"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QItemSelection(object):
    """
    https://doc.qt.io/qt-5/qitemselection.html

    **Detailed Description**

    A QItemSelection describes the items in a model that have been selected by
    the user. A QItemSelection is basically a list of selection ranges, see
    **QItemSelectionRange** . It provides functions for creating and
    manipulating selections, and selecting a range of items from a model.

    The QItemSelection class is one of the **Model/View Classes**  and is part
    of Qt's **model/view framework** .

    An item selection can be constructed and initialized to contain a range of
    items from an existing model. The following example constructs a selection
    that contains a range of items from the given `model`, beginning at the
    `topLeft`, and ending at the `bottomRight`.

    **QItemSelection**  *selection = new **QItemSelection** (topLeft,
    bottomRight);

    An empty item selection can be constructed, and later populated as required.
    So, if the model is going to be unavailable when we construct the item
    selection, we can rewrite the above code in the following way:

    **QItemSelection**  *selection = new **QItemSelection** ();
        ...
    selection->select(topLeft, bottomRight);

    QItemSelection saves memory, and avoids unnecessary work, by working with
    selection ranges rather than recording the model item index for each item in
    the selection. Generally, an instance of this class will contain a list of
    non-overlapping selection ranges.

    Use **merge** () to merge one item selection into another without making
    overlapping ranges. Use **split** () to split one selection range into
    smaller ranges based on a another selection range.

    **See also** **Model/View Programming**  and **QItemSelectionModel** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qitemselection.html#QItemSelection

        **QItemSelection::QItemSelection()**

        Constructs an empty selection.
        """
        ...

    @typing.overload
    def __init__(self, QItemSelection: PySide2.QtCore.QItemSelection) -> None:
        """
        https://doc.qt.io/qt-5/qitemselection.html#QItemSelection-1

        **QItemSelection::QItemSelection(const QModelIndex & topLeft , const
        QModelIndex & bottomRight )**

        Constructs an item selection that extends from the top-left model item,
        specified by the **topLeft** index, to the bottom-right item, specified
        by **bottomRight**.
        """
        ...

    @typing.overload
    def __init__(
        self,
        topLeft: PySide2.QtCore.QModelIndex,
        bottomRight: PySide2.QtCore.QModelIndex,
    ) -> None:
        ...

    def __add__(self, l: typing.Sequence) -> typing.List:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    @typing.overload
    def __iadd__(self, l: typing.Sequence) -> typing.List:
        ...

    @typing.overload
    def __iadd__(self, t: PySide2.QtCore.QItemSelectionRange) -> typing.List:
        ...

    @typing.overload
    def __lshift__(self, l: typing.Sequence) -> typing.List:
        ...

    @typing.overload
    def __lshift__(self, t: PySide2.QtCore.QItemSelectionRange) -> typing.List:
        ...

    @typing.overload
    def append(self, t: PySide2.QtCore.QItemSelectionRange) -> None:
        ...

    @typing.overload
    def append(self, t: typing.Sequence) -> None:
        ...

    def at(self, i: int) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def back(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def clear(self) -> None:
        ...

    def constFirst(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def constLast(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def contains(self, index: PySide2.QtCore.QModelIndex) -> bool:
        """
        https://doc.qt.io/qt-5/qitemselection.html#contains

        **bool QItemSelection::contains(const QModelIndex & index ) const**

        Returns `true` if the selection contains the given **index** ; otherwise
        returns `false`.
        """
        ...

    @typing.overload
    def count(self) -> int:
        ...

    @typing.overload
    def count(self, t: PySide2.QtCore.QItemSelectionRange) -> int:
        ...

    def detachShared(self) -> None:
        ...

    def empty(self) -> bool:
        ...

    def endsWith(self, t: PySide2.QtCore.QItemSelectionRange) -> bool:
        ...

    def first(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    @staticmethod
    def fromSet(set: typing.Set) -> typing.List:
        ...

    @staticmethod
    def fromVector(vector: typing.List) -> typing.List:
        ...

    def front(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def indexOf(self, t: PySide2.QtCore.QItemSelectionRange, from_: int = ...) -> int:
        ...

    def indexes(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qitemselection.html#indexes

        **QModelIndexList QItemSelection::indexes() const**

        Returns a list of model indexes that correspond to the selected items.
        """
        ...

    def insert(self, i: int, t: PySide2.QtCore.QItemSelectionRange) -> None:
        ...

    def isEmpty(self) -> bool:
        ...

    def isSharedWith(self, other: typing.Sequence) -> bool:
        ...

    def last(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def lastIndexOf(
        self, t: PySide2.QtCore.QItemSelectionRange, from_: int = ...
    ) -> int:
        ...

    def length(self) -> int:
        ...

    def merge(
        self,
        other: PySide2.QtCore.QItemSelection,
        command: PySide2.QtCore.QItemSelectionModel.SelectionFlags,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qitemselection.html#merge

        **void QItemSelection::merge(const QItemSelection & other ,
        QItemSelectionModel::SelectionFlags command )**

        Merges the **other** selection with this **QItemSelection**  using the
        **command** given. This method guarantees that no ranges are
        overlapping.

        Note that only **QItemSelectionModel::Select** ,
        **QItemSelectionModel::Deselect** , and **QItemSelectionModel::Toggle**
        are supported.

        **See also** **split** ().
        """
        ...

    def mid(self, pos: int, length: int = ...) -> typing.List:
        ...

    def move(self, from_: int, to: int) -> None:
        ...

    def pop_back(self) -> None:
        ...

    def pop_front(self) -> None:
        ...

    def prepend(self, t: PySide2.QtCore.QItemSelectionRange) -> None:
        ...

    def push_back(self, t: PySide2.QtCore.QItemSelectionRange) -> None:
        ...

    def push_front(self, t: PySide2.QtCore.QItemSelectionRange) -> None:
        ...

    def removeAll(self, t: PySide2.QtCore.QItemSelectionRange) -> int:
        ...

    def removeAt(self, i: int) -> None:
        ...

    def removeFirst(self) -> None:
        ...

    def removeLast(self) -> None:
        ...

    def removeOne(self, t: PySide2.QtCore.QItemSelectionRange) -> bool:
        ...

    def replace(self, i: int, t: PySide2.QtCore.QItemSelectionRange) -> None:
        ...

    def reserve(self, size: int) -> None:
        ...

    def select(
        self,
        topLeft: PySide2.QtCore.QModelIndex,
        bottomRight: PySide2.QtCore.QModelIndex,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qitemselection.html#select

        **void QItemSelection::select(const QModelIndex & topLeft , const
        QModelIndex & bottomRight )**

        Adds the items in the range that extends from the top-left model item,
        specified by the **topLeft** index, to the bottom-right item, specified
        by **bottomRight** to the list.

        **Note:** **topLeft** and **bottomRight** must have the same parent.
        """
        ...

    def setSharable(self, sharable: bool) -> None:
        ...

    def size(self) -> int:
        ...

    @staticmethod
    def split(
        range: PySide2.QtCore.QItemSelectionRange,
        other: PySide2.QtCore.QItemSelectionRange,
        result: PySide2.QtCore.QItemSelection,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qitemselection.html#split

        **[static] void QItemSelection::split(const QItemSelectionRange & range
        , const QItemSelectionRange & other , QItemSelection * result )**

        Splits the selection **range** using the selection **other** range.
        Removes all items in **other** from **range** and puts the result in
        **result**. This can be compared with the semantics of the **subtract**
        operation of a set.

        **See also** **merge** ().
        """
        ...

    def startsWith(self, t: PySide2.QtCore.QItemSelectionRange) -> bool:
        ...

    @typing.overload
    def swap(self, i: int, j: int) -> None:
        ...

    @typing.overload
    def swap(self, other: typing.Sequence) -> None:
        ...

    def swapItemsAt(self, i: int, j: int) -> None:
        ...

    def takeAt(self, i: int) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def takeFirst(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def takeLast(self) -> PySide2.QtCore.QItemSelectionRange:
        ...

    def toSet(self) -> typing.Set:
        ...

    def toVector(self) -> typing.List:
        ...

    @typing.overload
    def value(self, i: int) -> PySide2.QtCore.QItemSelectionRange:
        ...

    @typing.overload
    def value(
        self, i: int, defaultValue: PySide2.QtCore.QItemSelectionRange
    ) -> PySide2.QtCore.QItemSelectionRange:
        ...
