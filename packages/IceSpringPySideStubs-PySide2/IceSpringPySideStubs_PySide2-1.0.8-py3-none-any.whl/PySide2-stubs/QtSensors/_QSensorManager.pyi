"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtSensors

bytes = str


class QSensorManager(object):
    """
    https://doc.qt.io/qt-5/qsensormanager.html

    **Detailed Description**

    Sensor plugins register backends using the **registerBackend** () function.

    When **QSensor::connectToBackend** () is called, the **createBackend** ()
    function will be called.
    """

    def __init__(self) -> None:
        ...

    @staticmethod
    def createBackend(
        sensor: PySide2.QtSensors.QSensor,
    ) -> PySide2.QtSensors.QSensorBackend:
        """
        https://doc.qt.io/qt-5/qsensormanager.html#createBackend

        **[static] QSensorBackend *QSensorManager::createBackend(QSensor *
        sensor )**

        Create a backend for **sensor**. Returns null if no suitable backend
        exists.
        """
        ...

    @staticmethod
    def isBackendRegistered(
        type: PySide2.QtCore.QByteArray, identifier: PySide2.QtCore.QByteArray
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qsensormanager.html#isBackendRegistered

        **[static] bool QSensorManager::isBackendRegistered(const QByteArray &
        type , const QByteArray & identifier )**

        Returns true if the backend identified by **type** and **identifier** is
        registered.

        This is a convenience method that helps out plugins doing dynamic
        registration.
        """
        ...

    @staticmethod
    def registerBackend(
        type: PySide2.QtCore.QByteArray,
        identifier: PySide2.QtCore.QByteArray,
        factory: PySide2.QtSensors.QSensorBackendFactory,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qsensormanager.html#registerBackend

        **[static] void QSensorManager::registerBackend(const QByteArray & type
        , const QByteArray & identifier , QSensorBackendFactory * factory )**

        Register a sensor for **type**. The **identifier** must be unique.

        The **factory** will be asked to create instances of the backend.
        """
        ...

    @staticmethod
    def setDefaultBackend(
        type: PySide2.QtCore.QByteArray, identifier: PySide2.QtCore.QByteArray
    ) -> None:
        """
        https://doc.qt.io/qt-5/qsensormanager.html#setDefaultBackend

        **[static] void QSensorManager::setDefaultBackend(const QByteArray &
        type , const QByteArray & identifier )**

        Sets or overwrite the sensor **type** with the backend **identifier**.
        """
        ...

    @staticmethod
    def unregisterBackend(
        type: PySide2.QtCore.QByteArray, identifier: PySide2.QtCore.QByteArray
    ) -> None:
        """
        https://doc.qt.io/qt-5/qsensormanager.html#unregisterBackend

        **[static] void QSensorManager::unregisterBackend(const QByteArray &
        type , const QByteArray & identifier )**

        Unregister the backend for **type** with **identifier**.

        Note that this only prevents new instance of the backend from being
        created. It does not invalidate the existing instances of the backend.
        The backend code should handle the disappearance of the underlying
        hardware itself.
        """
        ...
