"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptEngineAgent(object):
    """
    https://doc.qt.io/qt-5/qscriptengineagent.html

    **Detailed Description**

    The QScriptEngineAgent class is the basis of tools that monitor and/or
    control the execution of a **QScriptEngine** , such as debuggers and
    profilers.

    To process script loading and unloading events, reimplement the
    **scriptLoad** () and **scriptUnload** () functions. **scriptLoad** () is
    called after the input to **QScriptEngine::evaluate** () has been parsed,
    right before the given script is executed. The engine assigns each script an
    ID, which is available as one of the arguments to **scriptLoad** ();
    subsequently, other event handlers can use the ID to identify a particular
    script. One common usage of **scriptLoad** () is to retain the script text,
    filename and base line number (the original input to
    **QScriptEngine::evaluate** ()), so that other event handlers can e.g. map a
    line number to the corresponding line of text.

    **scriptUnload** () is called when the **QScriptEngine**  has no further use
    for a script; the QScriptEngineAgent may at this point safely discard any
    resources associated with the script (such as the script text). Note that
    after **scriptUnload** () has been called, the **QScriptEngine**  may reuse
    the relevant script ID for new scripts (i.e. as argument to a subsequent
    call to **scriptLoad** ()).

    Evaluating the following script will result in **scriptUnload** () being
    called immediately after evaluation has completed:

    var a = Math.random() + 2;

    Evaluating the following script will **not** result in a call to
    **scriptUnload** () when evaluation has completed:

    function cube(a) {
            return a * a * a;
        }

        var a = cube(3);

    The script isn't unloaded because it defines a function (`cube`) that
    remains in the script environment after evaluation has completed. If a
    subsequent script removed the `cube` function (e.g. by setting it to
    `null`), **scriptUnload** () would be called when the function is garbage
    collected. In general terms, a script isn't unloaded until the engine has
    determined that none of its contents is referenced.

    To process script function calls and returns, reimplement the
    **functionEntry** () and **functionExit** () functions. **functionEntry** ()
    is called when a script function is about to be executed; **functionExit**
    () is called when a script function is about to return, either normally or
    due to an exception.

    To process individual script statements, reimplement **positionChange** ().
    **positionChange** () is called each time the engine is about to execute a
    new statement of a script, and thus offers the finest level of script
    monitoring.

    To process exceptions, reimplement **exceptionThrow** () and
    **exceptionCatch** (). **exceptionThrow** () is called when a script
    exception is thrown, before it has been handled. **exceptionCatch** () is
    called when an exception handler is present, and execution is about to be
    resumed at the handler code.

    **See also** **QScriptEngine::setAgent** () and **QScriptContextInfo** .
    """

    DebuggerInvocationRequest: QScriptEngineAgent = ...

    class Extension(object):
        DebuggerInvocationRequest: QScriptEngineAgent.Extension = ...

    def __init__(self, engine: PySide2.QtScript.QScriptEngine) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#QScriptEngineAgent

        **QScriptEngineAgent::QScriptEngineAgent(QScriptEngine * engine )**

        Constructs a QScriptEngineAgent object for the given **engine**.

        The engine takes ownership of the agent.

        Call **QScriptEngine::setAgent** () to make this agent the active agent.
        """
        ...

    def contextPop(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#contextPop

        **[virtual] void QScriptEngineAgent::contextPop()**

        This function is called when the current script context is about to be
        popped.

        The default implementation does nothing.

        **See also** **contextPush** () and **functionExit** ().
        """
        ...

    def contextPush(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#contextPush

        **[virtual] void QScriptEngineAgent::contextPush()**

        This function is called when a new script context has been pushed.

        The default implementation does nothing.

        **See also** **contextPop** () and **functionEntry** ().
        """
        ...

    def engine(self) -> PySide2.QtScript.QScriptEngine:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#engine

        **QScriptEngine *QScriptEngineAgent::engine() const**

        Returns the **QScriptEngine**  that this agent is associated with.
        """
        ...

    def exceptionCatch(
        self, scriptId: int, exception: PySide2.QtScript.QScriptValue
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#exceptionCatch

        **[virtual] void QScriptEngineAgent::exceptionCatch(qint64 scriptId ,
        const QScriptValue & exception )**

        This function is called when the given **exception** is about to be
        caught, in the script identified by **scriptId**.

        Reimplement this function if you want to handle this event.

        The default implementation does nothing.

        **See also** **exceptionThrow** ().
        """
        ...

    def exceptionThrow(
        self, scriptId: int, exception: PySide2.QtScript.QScriptValue, hasHandler: bool
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#exceptionThrow

        **[virtual] void QScriptEngineAgent::exceptionThrow(qint64 scriptId ,
        const QScriptValue & exception , bool hasHandler )**

        This function is called when the given **exception** has occurred in the
        engine, in the script identified by **scriptId**. If the exception was
        thrown by a native Qt Script function, **scriptId** is -1.

        If **hasHandler** is true, there is a `catch` or `finally` block that
        will handle the exception. If **hasHandler** is false, there is no
        handler for the exception.

        Reimplement this function if you want to handle this event. For example,
        a debugger can notify the user when an uncaught exception occurs (i.e.
        **hasHandler** is false).

        The default implementation does nothing.

        **See also** **exceptionCatch** ().
        """
        ...

    def extension(
        self,
        extension: PySide2.QtScript.QScriptEngineAgent.Extension,
        argument: typing.Any = ...,
    ) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#extension

        **[virtual] QVariant
        QScriptEngineAgent::extension(QScriptEngineAgent::Extension extension ,
        const QVariant & argument = QVariant())**

        This virtual function can be reimplemented in a **QScriptEngineAgent**
        subclass to provide support for extensions. The optional **argument**
        can be provided as input to the **extension** ; the result must be
        returned in the form of a **QVariant** . You can call
        **supportsExtension** () to check if an extension is supported by the
        **QScriptEngineAgent** . By default, no extensions are supported, and
        this function returns an invalid **QVariant** .

        If you implement the **DebuggerInvocationRequest**  extension, Qt Script
        will call this function when a `debugger` statement is encountered in a
        script. The **argument** is a **QVariantList**  containing three items:
        The first item is the scriptId (a qint64), the second item is the line
        number (an int), and the third item is the column number (an int).

        **See also** **supportsExtension** ().
        """
        ...

    def functionEntry(self, scriptId: int) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#functionEntry

        **[virtual] void QScriptEngineAgent::functionEntry(qint64 scriptId )**

        This function is called when a script function is called in the engine.
        If the script function is not a native Qt Script function, it resides in
        the script identified by **scriptId** ; otherwise, **scriptId** is -1.

        This function is called just before execution of the script function
        begins. You can obtain the **QScriptContext**  associated with the
        function call with **QScriptEngine::currentContext** (). The arguments
        passed to the function are available.

        Reimplement this function to handle this event. For example, a debugger
        implementation could reimplement this function (and **functionExit** ())
        to keep track of the call stack and provide step-over functionality.

        The default implementation does nothing.

        **See also** **functionExit** (), **positionChange** (), and
        **QScriptEngine::currentContext** ().
        """
        ...

    def functionExit(
        self, scriptId: int, returnValue: PySide2.QtScript.QScriptValue
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#functionExit

        **[virtual] void QScriptEngineAgent::functionExit(qint64 scriptId ,
        const QScriptValue & returnValue )**

        This function is called when the currently executing script function is
        about to return. If the script function is not a native Qt Script
        function, it resides in the script identified by **scriptId** ;
        otherwise, **scriptId** is -1. The **returnValue** is the value that the
        script function will return.

        This function is called just before the script function returns. You can
        still access the **QScriptContext**  associated with the script function
        call with **QScriptEngine::currentContext** ().

        If the engine's **hasUncaughtException** () function returns true, the
        script function is exiting due to an exception; otherwise, the script
        function is returning normally.

        Reimplement this function to handle this event; typically you will then
        also want to reimplement **functionEntry** ().

        The default implementation does nothing.

        **See also** **functionEntry** () and
        **QScriptEngine::hasUncaughtException** ().
        """
        ...

    def positionChange(self, scriptId: int, lineNumber: int, columnNumber: int) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#positionChange

        **[virtual] void QScriptEngineAgent::positionChange(qint64 scriptId ,
        int lineNumber , int columnNumber )**

        This function is called when the engine is about to execute a new
        statement in the script identified by **scriptId**. The statement begins
        on the line and column specified by **lineNumber** This event is not
        generated for native Qt Script functions.

        Reimplement this function to handle this event. For example, a debugger
        implementation could reimplement this function to provide line-by-line
        stepping, and a profiler implementation could use it to count the number
        of times each statement is executed.

        The default implementation does nothing.

        **Note:** **columnNumber** is undefined

        **See also** **scriptLoad** () and **functionEntry** ().
        """
        ...

    def scriptLoad(
        self, id: int, program: str, fileName: str, baseLineNumber: int
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#scriptLoad

        **[virtual] void QScriptEngineAgent::scriptLoad(qint64 id , const
        QString & program , const QString & fileName , int baseLineNumber )**

        This function is called when the engine has parsed a script and has
        associated it with the given **id**. The id can be used to identify this
        particular script in subsequent event notifications.

        **program** , **fileName** and **baseLineNumber** are the original
        arguments to the **QScriptEngine::evaluate** () call that triggered this
        event.

        This function is called just before the script is about to be evaluated.

        You can reimplement this function to record information about the
        script; for example, by retaining the script text, you can obtain the
        line of text corresponding to a line number in a subsequent call to
        **positionChange** ().

        The default implementation does nothing.

        **See also** **scriptUnload** ().
        """
        ...

    def scriptUnload(self, id: int) -> None:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#scriptUnload

        **[virtual] void QScriptEngineAgent::scriptUnload(qint64 id )**

        This function is called when the engine has discarded the script
        identified by the given **id**.

        You can reimplement this function to clean up any resources you have
        associated with the script.

        The default implementation does nothing.

        **See also** **scriptLoad** ().
        """
        ...

    def supportsExtension(
        self, extension: PySide2.QtScript.QScriptEngineAgent.Extension
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptengineagent.html#supportsExtension

        **[virtual] bool
        QScriptEngineAgent::supportsExtension(QScriptEngineAgent::Extension
        extension ) const**

        Returns true if the **QScriptEngineAgent**  supports the given
        **extension** ; otherwise, false is returned. By default, no extensions
        are supported.

        **See also** **extension** ().
        """
        ...
