"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QRecursiveMutex(object):
    """
    https://doc.qt.io/qt-5/qrecursivemutex.html

    **Detailed Description**

    The QRecursiveMutex class is a mutex, like **QMutex** , with which it is
    API-compatible. It differs from **QMutex**  by accepting **lock** () calls
    from the same thread any number of times. **QMutex**  would deadlock in this
    situation.

    QRecursiveMutex is much more expensive to construct and operate on, so use a
    plain **QMutex**  whenever you can. Sometimes, one public function, however,
    calls another public function, and they both need to lock the same mutex. In
    this case, you have two options:

    * Factor the code that needs mutex protection into private functions, which
    assume that the mutex is held when they are called, and lock a plain
    **QMutex**  in the public functions before you call the private
    implementation ones.
      * Or use a recursive mutex, so it doesn't matter that
    the first public function has already locked the mutex when the second one
    wishes to do so.

    **See also** **QMutex** , **QMutexLocker** , **QReadWriteLock** ,
    **QSemaphore** , and **QWaitCondition** .
    """

    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qrecursivemutex.html#QRecursiveMutex

        **QRecursiveMutex::QRecursiveMutex()**

        Constructs a new recursive mutex. The mutex is created in an unlocked
        state.

        **See also** **lock** () and **unlock** ().
        """
        ...
