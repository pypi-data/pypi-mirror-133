"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QAudioProbe(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    **QAudioRecorder**  *recorder = new **QAudioRecorder** ();
        **QAudioProbe**  *probe = new **QAudioProbe** ;

        // ... configure the audio recorder (skipped)

        connect(probe, SIGNAL(audioBufferProbed(**QAudioBuffer** )), this, SLOT(processBuffer(**QAudioBuffer** )));

        probe->setSource(recorder); // Returns true, hopefully.

        recorder->record(); // Now we can do things like calculating levels or performing an FFT

    **See also** **QVideoProbe** , **QMediaPlayer** , and **QCamera** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **QAudioProbe::QAudioProbe(QObject * parent = nullptr)**

        Creates a new QAudioProbe class with a **parent**. After setting the source to monitor with **setSource** (), the **audioBufferProbed** () signal will be emitted when audio buffers are flowing in the source media object.
        """
        ...

    def isActive(self) -> bool:
        """
        **bool QAudioProbe::isActive() const**

        Returns true if this probe is monitoring something, or false otherwise.

        The source being monitored does not need to be active.
        """
        ...

    @typing.overload
    def setSource(self, source: PySide2.QtMultimedia.QMediaObject) -> bool:
        """
        **bool QAudioProbe::setSource(QMediaObject * source )**

        Sets the media object to monitor to **source**.

        If **source** is zero, this probe will be deactivated and this function wil return true.

        If the media object does not support monitoring audio, this function will return false.

        The previous object will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.
        """
        ...

    @typing.overload
    def setSource(self, source: PySide2.QtMultimedia.QMediaRecorder) -> bool:
        """
        **bool QAudioProbe::setSource(QMediaObject * source )**

        Sets the media object to monitor to **source**.

        If **source** is zero, this probe will be deactivated and this function wil return true.

        If the media object does not support monitoring audio, this function will return false.

        The previous object will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.
        """
        ...

    @property
    def audioBufferProbed(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAudioProbe::audioBufferProbed(const QAudioBuffer & buffer )**

        This signal should be emitted when an audio **buffer** is processed in the media service.
        """
        ...

    @property
    def flush(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAudioProbe::flush()**

        This signal should be emitted when it is required to release all buffers. Application must release all outstanding references to audio buffers.
        """
        ...
