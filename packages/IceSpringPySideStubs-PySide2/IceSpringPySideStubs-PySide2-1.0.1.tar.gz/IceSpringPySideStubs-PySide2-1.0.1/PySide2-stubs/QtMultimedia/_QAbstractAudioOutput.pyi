"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QAbstractAudioOutput(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    QAbstractAudioOutput implements audio functionality for **QAudioOutput** , i.e., **QAudioOutput**  routes function calls to QAbstractAudioOutput. For a description of the functionality that is implemented, see the **QAudioOutput**  class and function descriptions.

    **See also** **QAudioOutput** .
    """

    def __init__(self) -> None:
        ...

    def bufferSize(self) -> int:
        """
        **[pure virtual] int QAbstractAudioOutput::bufferSize() const**

        Returns the audio buffer size in bytes.

        **See also** **setBufferSize** ().
        """
        ...

    def bytesFree(self) -> int:
        """
        **[pure virtual] int QAbstractAudioOutput::bytesFree() const**

        Returns the free space available in bytes in the audio buffer.
        """
        ...

    def category(self) -> str:
        ...

    def elapsedUSecs(self) -> int:
        """
        **[pure virtual] qint64 QAbstractAudioOutput::elapsedUSecs() const**

        Returns the milliseconds since **start** () was called, including time in Idle and suspend states.
        """
        ...

    def error(self) -> PySide2.QtMultimedia.QAudio.Error:
        """
        **[pure virtual] QAudio::Error QAbstractAudioOutput::error() const**

        Returns the error state.
        """
        ...

    def format(self) -> PySide2.QtMultimedia.QAudioFormat:
        """
        **[pure virtual] QAudioFormat QAbstractAudioOutput::format() const**

        Returns the **QAudioFormat**  being used.

        **See also** **setFormat** ().
        """
        ...

    def notifyInterval(self) -> int:
        """
        **[pure virtual] int QAbstractAudioOutput::notifyInterval() const**

        Returns the notify interval in milliseconds.

        **See also** **setNotifyInterval** ().
        """
        ...

    def periodSize(self) -> int:
        """
        **[pure virtual] int QAbstractAudioOutput::periodSize() const**

        Returns the period size in bytes.
        """
        ...

    def processedUSecs(self) -> int:
        """
        **[pure virtual] qint64 QAbstractAudioOutput::processedUSecs() const**

        Returns the amount of audio data processed since **start** () was called in milliseconds.
        """
        ...

    def reset(self) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::reset()**

        Drops all audio data in the buffers, resets buffers to zero.
        """
        ...

    def resume(self) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::resume()**

        Resumes processing audio data after a **suspend** ()
        """
        ...

    def setBufferSize(self, value: int) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::setBufferSize(int value )**

        Sets the audio buffer size to **value** in bytes.

        **See also** **bufferSize** ().
        """
        ...

    def setCategory(self, arg__1: str) -> None:
        ...

    def setFormat(self, fmt: PySide2.QtMultimedia.QAudioFormat) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::setFormat(const QAudioFormat & fmt )**

        Set the **QAudioFormat**  to use to **fmt**. Setting the format is only allowable while in **QAudio::StoppedState** .

        **See also** **format** ().
        """
        ...

    def setNotifyInterval(self, milliSeconds: int) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::setNotifyInterval(int ms )**

        Sets the interval for **notify** () signal to be emitted. This is based on the **ms** of audio data processed not on actual real-time. The resolution of the timer is platform specific.

        **See also** **notifyInterval** ().
        """
        ...

    def setVolume(self, arg__1: float) -> None:
        """
        **[virtual] void QAbstractAudioOutput::setVolume(qreal volume )**

        Sets the volume. Where **volume** is between 0.0 and 1.0.

        **See also** **volume** ().
        """
        ...

    @typing.overload
    def start(self) -> PySide2.QtCore.QIODevice:
        """
        **[pure virtual] void QAbstractAudioOutput::start(QIODevice * device )**

        Uses the **device** as the **QIODevice**  to transfer data.
        """
        ...

    @typing.overload
    def start(self, device: PySide2.QtCore.QIODevice) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::start(QIODevice * device )**

        Uses the **device** as the **QIODevice**  to transfer data.
        """
        ...

    def state(self) -> PySide2.QtMultimedia.QAudio.State:
        """
        **[pure virtual] QAudio::State QAbstractAudioOutput::state() const**

        Returns the state of audio processing.
        """
        ...

    def stop(self) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::stop()**

        Stops the audio output.
        """
        ...

    def suspend(self) -> None:
        """
        **[pure virtual] void QAbstractAudioOutput::suspend()**

        Stops processing audio data, preserving buffered audio data.
        """
        ...

    def volume(self) -> float:
        """
        **[virtual] qreal QAbstractAudioOutput::volume() const**

        Returns the volume in the range 0.0 and 1.0.

        **See also** **setVolume** ().
        """
        ...

    @property
    def errorChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractAudioOutput::errorChanged(QAudio::Error error )**

        This signal is emitted when the **error** state has changed.
        """
        ...

    @property
    def notify(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractAudioOutput::notify()**

        This signal is emitted when x ms of audio data has been processed the interval set by **setNotifyInterval** (x).
        """
        ...

    @property
    def stateChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractAudioOutput::stateChanged(QAudio::State state )**

        This signal is emitted when the device **state** has changed.
        """
        ...
