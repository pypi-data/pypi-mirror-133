"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QCamera(PySide2.QtMultimedia.QMediaObject):
    """
    **Detailed Description**

    QCamera can be used with **QCameraViewfinder**  for viewfinder display, **QMediaRecorder**  for video recording and **QCameraImageCapture**  for image taking.

    You can use **QCameraInfo**  to list available cameras and choose which one to use.

    const **QList** <**QCameraInfo** > cameras = **QCameraInfo** ::availableCameras();
        for (const **QCameraInfo**  &cameraInfo : cameras) {
            if (cameraInfo.deviceName() == "mycamera")
                camera = new **QCamera** (cameraInfo);
        }

    See the **camera overview**  for more information.
    """

    CaptureViewfinder: QCamera = ...
    NoError: QCamera = ...
    NoLock: QCamera = ...
    UnavailableStatus: QCamera = ...
    UnloadedState: QCamera = ...
    Unlocked: QCamera = ...
    UnspecifiedPosition: QCamera = ...
    UserRequest: QCamera = ...
    BackFace: QCamera = ...
    CameraError: QCamera = ...
    CaptureStillImage: QCamera = ...
    LoadedState: QCamera = ...
    LockAcquired: QCamera = ...
    LockExposure: QCamera = ...
    Searching: QCamera = ...
    UnloadedStatus: QCamera = ...
    ActiveState: QCamera = ...
    CaptureVideo: QCamera = ...
    FrontFace: QCamera = ...
    InvalidRequestError: QCamera = ...
    LoadingStatus: QCamera = ...
    LockFailed: QCamera = ...
    LockWhiteBalance: QCamera = ...
    Locked: QCamera = ...
    LockLost: QCamera = ...
    ServiceMissingError: QCamera = ...
    UnloadingStatus: QCamera = ...
    LoadedStatus: QCamera = ...
    LockFocus: QCamera = ...
    LockTemporaryLost: QCamera = ...
    NotSupportedFeatureError: QCamera = ...
    StandbyStatus: QCamera = ...
    StartingStatus: QCamera = ...
    StoppingStatus: QCamera = ...
    ActiveStatus: QCamera = ...

    class CaptureMode(object):
        CaptureViewfinder: QCamera.CaptureMode = ...
        CaptureStillImage: QCamera.CaptureMode = ...
        CaptureVideo: QCamera.CaptureMode = ...

    class CaptureModes(object):
        ...

    class Error(object):
        NoError: QCamera.Error = ...
        CameraError: QCamera.Error = ...
        InvalidRequestError: QCamera.Error = ...
        ServiceMissingError: QCamera.Error = ...
        NotSupportedFeatureError: QCamera.Error = ...

    class FrameRateRange(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, FrameRateRange: PySide2.QtMultimedia.QCamera.FrameRateRange
        ) -> None:
            ...

        @typing.overload
        def __init__(self, minimum: float, maximum: float) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

    class LockChangeReason(object):
        UserRequest: QCamera.LockChangeReason = ...
        LockAcquired: QCamera.LockChangeReason = ...
        LockFailed: QCamera.LockChangeReason = ...
        LockLost: QCamera.LockChangeReason = ...
        LockTemporaryLost: QCamera.LockChangeReason = ...

    class LockStatus(object):
        Unlocked: QCamera.LockStatus = ...
        Searching: QCamera.LockStatus = ...
        Locked: QCamera.LockStatus = ...

    class LockType(object):
        NoLock: QCamera.LockType = ...
        LockExposure: QCamera.LockType = ...
        LockWhiteBalance: QCamera.LockType = ...
        LockFocus: QCamera.LockType = ...

    class LockTypes(object):
        ...

    class Position(object):
        UnspecifiedPosition: QCamera.Position = ...
        BackFace: QCamera.Position = ...
        FrontFace: QCamera.Position = ...

    class State(object):
        UnloadedState: QCamera.State = ...
        LoadedState: QCamera.State = ...
        ActiveState: QCamera.State = ...

    class Status(object):
        UnavailableStatus: QCamera.Status = ...
        UnloadedStatus: QCamera.Status = ...
        LoadingStatus: QCamera.Status = ...
        UnloadingStatus: QCamera.Status = ...
        LoadedStatus: QCamera.Status = ...
        StandbyStatus: QCamera.Status = ...
        StartingStatus: QCamera.Status = ...
        StoppingStatus: QCamera.Status = ...
        ActiveStatus: QCamera.Status = ...

    @typing.overload
    def __init__(
        self,
        cameraInfo: PySide2.QtMultimedia.QCameraInfo,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QCamera::QCamera(QObject * parent = nullptr)**

        Construct a QCamera with a **parent**.
        """
        ...

    @typing.overload
    def __init__(
        self,
        deviceName: PySide2.QtCore.QByteArray,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QCamera::QCamera(QObject * parent = nullptr)**

        Construct a QCamera with a **parent**.
        """
        ...

    @typing.overload
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **QCamera::QCamera(QObject * parent = nullptr)**

        Construct a QCamera with a **parent**.
        """
        ...

    @typing.overload
    def __init__(
        self,
        position: PySide2.QtMultimedia.QCamera.Position,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QCamera::QCamera(QObject * parent = nullptr)**

        Construct a QCamera with a **parent**.
        """
        ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus:
        """
        **[override virtual] QMultimedia::AvailabilityStatus QCamera::availability() const**

        Reimplements: **QMediaObject::availability** () const.

        Returns the availability state of the camera service.
        """
        ...

    @staticmethod
    def availableDevices() -> typing.List:
        ...

    def captureMode(self) -> PySide2.QtMultimedia.QCamera.CaptureModes:
        """
        **captureMode : QCamera::CaptureModes**

        The type of media (video or still images), the camera is configured to capture.

        It's allowed to change capture mode in any camera state, but if the camera is currently active, chaging capture mode is likely to lead to camera status chaged to **QCamera::LoadedStatus** , **QCamera::LoadingStatus** , and when the camera is ready to **QCamera::ActiveStatus** .

        **Access functions:**

        QCamera::CaptureModes **captureMode** () const
        void **setCaptureMode** (QCamera::CaptureModes **mode** )

        **Notifier signal:**

        void ****captureModeChanged** ** (QCamera::CaptureModes **mode** )
        """
        ...

    @staticmethod
    def deviceDescription(device: PySide2.QtCore.QByteArray) -> str:
        ...

    def error(self) -> PySide2.QtMultimedia.QCamera.Error:
        """
        **QCamera::Error QCamera::error() const**

        Returns the error state of the object.
        """
        ...

    def errorString(self) -> str:
        """
        **QString QCamera::errorString() const**

        Returns a string describing a camera's error state.
        """
        ...

    def exposure(self) -> PySide2.QtMultimedia.QCameraExposure:
        """
        **QCameraExposure *QCamera::exposure() const**

        Returns the camera exposure control object.
        """
        ...

    def focus(self) -> PySide2.QtMultimedia.QCameraFocus:
        """
        **QCameraFocus *QCamera::focus() const**

        Returns the camera focus control object.
        """
        ...

    def imageProcessing(self) -> PySide2.QtMultimedia.QCameraImageProcessing:
        """
        **QCameraImageProcessing *QCamera::imageProcessing() const**

        Returns the camera image processing control object.
        """
        ...

    def isCaptureModeSupported(
        self, mode: PySide2.QtMultimedia.QCamera.CaptureModes
    ) -> bool:
        """
        **bool QCamera::isCaptureModeSupported(QCamera::CaptureModes mode ) const**

        Returns true if the capture **mode** is suported.
        """
        ...

    def load(self) -> None:
        """
        **[slot] void QCamera::load()**

        Opens the camera device. The camera state is changed to **QCamera::LoadedState** .

        It's not necessary to explicitly load the camera, unless the application needs to read the supported camera settings and change the default values according to the camera capabilities.

        In all the other cases, it's possible to start the camera directly from the unloaded state.

        /sa **QCamera::UnloadedState**
        """
        ...

    @typing.overload
    def lockStatus(self) -> PySide2.QtMultimedia.QCamera.LockStatus:
        """
        **QCamera::LockStatus QCamera::lockStatus() const**

        Returns the status of requested camera settings locks.

        **Note:** Getter function for property lockStatus.
        """
        ...

    @typing.overload
    def lockStatus(
        self, lock: PySide2.QtMultimedia.QCamera.LockType
    ) -> PySide2.QtMultimedia.QCamera.LockStatus:
        """
        **QCamera::LockStatus QCamera::lockStatus() const**

        Returns the status of requested camera settings locks.

        **Note:** Getter function for property lockStatus.
        """
        ...

    def requestedLocks(self) -> PySide2.QtMultimedia.QCamera.LockTypes:
        """
        **QCamera::LockTypes QCamera::requestedLocks() const**

        Returns the requested lock types.
        """
        ...

    @typing.overload
    def searchAndLock(self) -> None:
        """
        **[slot] void QCamera::searchAndLock()**

        Lock all the supported camera settings.
        """
        ...

    @typing.overload
    def searchAndLock(self, locks: PySide2.QtMultimedia.QCamera.LockTypes) -> None:
        """
        **[slot] void QCamera::searchAndLock()**

        Lock all the supported camera settings.
        """
        ...

    def setCaptureMode(self, mode: PySide2.QtMultimedia.QCamera.CaptureModes) -> None:
        """
        **captureMode : QCamera::CaptureModes**

        The type of media (video or still images), the camera is configured to capture.

        It's allowed to change capture mode in any camera state, but if the camera is currently active, chaging capture mode is likely to lead to camera status chaged to **QCamera::LoadedStatus** , **QCamera::LoadingStatus** , and when the camera is ready to **QCamera::ActiveStatus** .

        **Access functions:**

        QCamera::CaptureModes **captureMode** () const
        void **setCaptureMode** (QCamera::CaptureModes **mode** )

        **Notifier signal:**

        void ****captureModeChanged** ** (QCamera::CaptureModes **mode** )
        """
        ...

    @typing.overload
    def setViewfinder(
        self, surface: PySide2.QtMultimedia.QAbstractVideoSurface
    ) -> None:
        """
        **void QCamera::setViewfinder(QVideoWidget * viewfinder )**

        Sets the **QVideoWidget**  based camera **viewfinder**. The previously set viewfinder is detached.
        """
        ...

    @typing.overload
    def setViewfinder(
        self, viewfinder: PySide2.QtMultimediaWidgets.QGraphicsVideoItem
    ) -> None:
        """
        **void QCamera::setViewfinder(QVideoWidget * viewfinder )**

        Sets the **QVideoWidget**  based camera **viewfinder**. The previously set viewfinder is detached.
        """
        ...

    @typing.overload
    def setViewfinder(
        self, viewfinder: PySide2.QtMultimediaWidgets.QVideoWidget
    ) -> None:
        """
        **void QCamera::setViewfinder(QVideoWidget * viewfinder )**

        Sets the **QVideoWidget**  based camera **viewfinder**. The previously set viewfinder is detached.
        """
        ...

    def setViewfinderSettings(
        self, settings: PySide2.QtMultimedia.QCameraViewfinderSettings
    ) -> None:
        """
        **void QCamera::setViewfinderSettings(const QCameraViewfinderSettings & settings )**

        Sets the viewfinder **settings**.

        If some parameters are not specified, or null settings are passed, the camera will choose default values.

        If the camera is used to capture videos or images, the viewfinder settings might be ignored if they conflict with the capture settings. You can check the actual viewfinder settings once the camera is in the `QCamera::ActiveStatus` status.

        Changing the viewfinder settings while the camera is in the **QCamera::ActiveState**  state may cause the camera to be restarted.

        This function was introduced in Qt 5.5.

        **See also** **viewfinderSettings** (), **supportedViewfinderResolutions** (), **supportedViewfinderFrameRateRanges** (), and **supportedViewfinderPixelFormats** ().
        """
        ...

    def start(self) -> None:
        """
        **[slot] void QCamera::start()**

        Starts the camera.

        State is changed to **QCamera::ActiveState**  if camera is started successfully, otherwise **errorOccurred** () signal is emitted.

        While the camera state is changed to **QCamera::ActiveState** , starting the camera service can be asynchronous with the actual status reported with **QCamera::status**  property.
        """
        ...

    def state(self) -> PySide2.QtMultimedia.QCamera.State:
        """
        **state : const QCamera::State**

        This property holds the current state of the camera object.

        **Access functions:**

        QCamera::State **state** () const

        **Notifier signal:**

        void ****stateChanged** ** (QCamera::State **state** )
        """
        ...

    def status(self) -> PySide2.QtMultimedia.QCamera.Status:
        """
        **status : const QCamera::Status**

        This property holds the current status of the camera object.

        **Access functions:**

        QCamera::Status **status** () const

        **Notifier signal:**

        void ****statusChanged** ** (QCamera::Status **status** )

        **Member Function Documentation**
        """
        ...

    def stop(self) -> None:
        """
        **[slot] void QCamera::stop()**

        Stops the camera. The camera state is changed from **QCamera::ActiveState**  to **QCamera::LoadedState** .

        In this state, the camera still consumes power.

        **See also** **unload** () and **QCamera::UnloadedState** .
        """
        ...

    def supportedLocks(self) -> PySide2.QtMultimedia.QCamera.LockTypes:
        """
        **QCamera::LockTypes QCamera::supportedLocks() const**

        Returns the lock types that the camera supports.
        """
        ...

    def supportedViewfinderFrameRateRanges(
        self, settings: PySide2.QtMultimedia.QCameraViewfinderSettings = ...
    ) -> typing.List:
        """
        **QList<QCamera::FrameRateRange> QCamera::supportedViewfinderFrameRateRanges(const QCameraViewfinderSettings & settings = QCameraViewfinderSettings()) const**

        Returns a list of supported viewfinder frame rate ranges.

        This is a convenience function which retrieves unique frame rate ranges from the supported settings.

        If non null viewfinder **settings** are passed, the returned list is reduced to frame rate ranges supported with partial **settings** applied.

        The camera must be loaded before calling this function, otherwise the returned list is empty.

        This function was introduced in Qt 5.5.

        **See also** **QCameraViewfinderSettings::minimumFrameRate** (), **QCameraViewfinderSettings::maximumFrameRate** (), and **setViewfinderSettings** ().
        """
        ...

    def supportedViewfinderPixelFormats(
        self, settings: PySide2.QtMultimedia.QCameraViewfinderSettings = ...
    ) -> typing.List:
        """
        **QList<QVideoFrame::PixelFormat> QCamera::supportedViewfinderPixelFormats(const QCameraViewfinderSettings & settings = QCameraViewfinderSettings()) const**

        Returns a list of supported viewfinder pixel formats.

        This is a convenience function which retrieves unique pixel formats from the supported settings.

        If non null viewfinder **settings** are passed, the returned list is reduced to pixel formats supported with partial **settings** applied.

        The camera must be loaded before calling this function, otherwise the returned list is empty.

        This function was introduced in Qt 5.5.

        **See also** **QCameraViewfinderSettings::pixelFormat** () and **setViewfinderSettings** ().
        """
        ...

    def supportedViewfinderResolutions(
        self, settings: PySide2.QtMultimedia.QCameraViewfinderSettings = ...
    ) -> typing.List:
        """
        **QList<QSize> QCamera::supportedViewfinderResolutions(const QCameraViewfinderSettings & settings = QCameraViewfinderSettings()) const**

        Returns a list of supported viewfinder resolutions.

        This is a convenience function which retrieves unique resolutions from the supported settings.

        If non null viewfinder **settings** are passed, the returned list is reduced to resolutions supported with partial **settings** applied.

        The camera must be loaded before calling this function, otherwise the returned list is empty.

        This function was introduced in Qt 5.5.

        **See also** **QCameraViewfinderSettings::resolution** () and **setViewfinderSettings** ().
        """
        ...

    def supportedViewfinderSettings(
        self, settings: PySide2.QtMultimedia.QCameraViewfinderSettings = ...
    ) -> typing.List:
        """
        **QList<QCameraViewfinderSettings> QCamera::supportedViewfinderSettings(const QCameraViewfinderSettings & settings = QCameraViewfinderSettings()) const**

        Returns a list of supported viewfinder settings.

        The list is ordered by preference; preferred settings come first.

        The optional **settings** argument can be used to conveniently filter the results. If **settings** is non null, the returned list is reduced to settings matching the given partial **settings**.

        The status of the camera must be **LoadedStatus**  before calling this function, otherwise the returned list is empty.

        This function was introduced in Qt 5.5.

        **See also** **setViewfinderSettings** (), **supportedViewfinderResolutions** (), **supportedViewfinderFrameRateRanges** (), and **supportedViewfinderPixelFormats** ().
        """
        ...

    def unload(self) -> None:
        """
        **[slot] void QCamera::unload()**

        Closes the camera device and deallocates the related resources. The camera state is changed to **QCamera::UnloadedState** .
        """
        ...

    @typing.overload
    def unlock(self) -> None:
        """
        **[slot] void QCamera::unlock()**

        Unlock all the requested camera locks.
        """
        ...

    @typing.overload
    def unlock(self, locks: PySide2.QtMultimedia.QCamera.LockTypes) -> None:
        """
        **[slot] void QCamera::unlock()**

        Unlock all the requested camera locks.
        """
        ...

    def viewfinderSettings(self) -> PySide2.QtMultimedia.QCameraViewfinderSettings:
        """
        **QCameraViewfinderSettings QCamera::viewfinderSettings() const**

        Returns the viewfinder settings being used by the camera.

        Settings may change when the camera is started, for example if the viewfinder settings are undefined or if unsupported values are set.

        If viewfinder settings are not supported by the camera, it always returns a null **QCameraViewfinderSettings**  object.

        This function was introduced in Qt 5.5.

        **See also** **setViewfinderSettings** ().
        """
        ...

    @property
    def captureModeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::captureModeChanged(QCamera::CaptureModes mode )**

        Signals the capture **mode** has changed.

        **Note:** Notifier signal for property **captureMode** .
        """
        ...

    @property
    def errorOccurred(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::errorOccurred(QCamera::Error value )**

        Signal emitted when error state changes to **value**.

        This function was introduced in Qt 5.15.
        """
        ...

    @property
    def lockFailed(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::lockFailed()**

        Signals locking of at least one requested camera settings failed.
        """
        ...

    @property
    def lockStatusChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::lockStatusChanged(QCamera::LockStatus status , QCamera::LockChangeReason reason )**

        Signals the overall **status** for all the requested camera locks was changed with specified **reason**.

        **Note:** Notifier signal for property **lockStatus** .

        **Note:** Signal **lockStatusChanged** is overloaded in this class. To connect to this signal by using the function pointer syntax, Qt provides a convenient helper for obtaining the function pointer as shown in this example:

        connect(camera, QOverload<**QCamera** ::LockStatus, **QCamera** ::LockChangeReason>::of(&**QCamera** ::lockStatusChanged),
                [=](**QCamera** ::LockStatus status, **QCamera** ::LockChangeReason reason){ /* ... */ });
        """
        ...

    @property
    def lockStatusChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::lockStatusChanged(QCamera::LockStatus status , QCamera::LockChangeReason reason )**

        Signals the overall **status** for all the requested camera locks was changed with specified **reason**.

        **Note:** Notifier signal for property **lockStatus** .

        **Note:** Signal **lockStatusChanged** is overloaded in this class. To connect to this signal by using the function pointer syntax, Qt provides a convenient helper for obtaining the function pointer as shown in this example:

        connect(camera, QOverload<**QCamera** ::LockStatus, **QCamera** ::LockChangeReason>::of(&**QCamera** ::lockStatusChanged),
                [=](**QCamera** ::LockStatus status, **QCamera** ::LockChangeReason reason){ /* ... */ });
        """
        ...

    @property
    def locked(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::locked()**

        Signals all the requested camera settings are locked.
        """
        ...

    @property
    def stateChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::stateChanged(QCamera::State state )**

        Signals the camera **state** has changed.

        Usually the state changes is caused by calling **load** (), **unload** (), **start** () and **stop** (), but the state can also be changed change as a result of camera error.

        **Note:** Notifier signal for property **state** .
        """
        ...

    @property
    def statusChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QCamera::statusChanged(QCamera::Status status )**

        Signals the camera **status** has changed.

        **Note:** Notifier signal for property **status** .
        """
        ...
