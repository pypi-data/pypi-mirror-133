"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QRadioTunerControl(PySide2.QtMultimedia.QMediaControl):
    """
    **Detailed Description**

    If a **QMediaService**  can tune an analog radio device it will implement QRadioTunerControl. This control provides a means to tune a radio device to a specific **frequency**  as well as search **forwards**  and **backwards**  for a signal.

    The functionality provided by this control is exposed to application code through the **QRadioTuner**  class.

    The interface name of QRadioTunerControl is `org.qt-project.qt.radiotunercontrol/5.0` as defined in **QRadioTunerControl_iid** .

    **See also** **QMediaService::requestControl** () and **QRadioTuner** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **[protected] QRadioTunerControl::QRadioTunerControl(QObject * parent = nullptr)**

        Constructs a radio tuner control with the given **parent**.
        """
        ...

    def band(self) -> PySide2.QtMultimedia.QRadioTuner.Band:
        """
        **[pure virtual] QRadioTuner::Band QRadioTunerControl::band() const**

        Returns the frequency band a radio tuner is tuned to.

        **See also** **setBand** ().
        """
        ...

    def cancelSearch(self) -> None:
        """
        **[pure virtual] void QRadioTunerControl::cancelSearch()**

        Stops scanning for a signal.
        """
        ...

    def error(self) -> PySide2.QtMultimedia.QRadioTuner.Error:
        """
        **[pure virtual] QRadioTuner::Error QRadioTunerControl::error() const**

        Returns the error state of a radio tuner.
        """
        ...

    def errorString(self) -> str:
        """
        **[pure virtual] QString QRadioTunerControl::errorString() const**

        Returns a string describing a radio tuner's error state.
        """
        ...

    def frequency(self) -> int:
        """
        **[pure virtual] int QRadioTunerControl::frequency() const**

        Returns the frequency a radio tuner is tuned to.

        **See also** **setFrequency** ().
        """
        ...

    def frequencyRange(self, b: PySide2.QtMultimedia.QRadioTuner.Band) -> typing.Tuple:
        """
        **[pure virtual] QPair<int, int> QRadioTunerControl::frequencyRange(QRadioTuner::Band band ) const**

        Returns a frequency **band** 's minimum and maximum frequency.
        """
        ...

    def frequencyStep(self, b: PySide2.QtMultimedia.QRadioTuner.Band) -> int:
        """
        **[pure virtual] int QRadioTunerControl::frequencyStep(QRadioTuner::Band band ) const**

        Returns the number of Hertz to increment the frequency by when stepping through frequencies within a given **band**.
        """
        ...

    def isAntennaConnected(self) -> bool:
        """
        **[virtual] bool QRadioTunerControl::isAntennaConnected() const**

        Identifies if there is an antenna connected to the device.

        Returns true if there is a connected antenna, and false otherwise.
        """
        ...

    def isBandSupported(self, b: PySide2.QtMultimedia.QRadioTuner.Band) -> bool:
        """
        **[pure virtual] bool QRadioTunerControl::isBandSupported(QRadioTuner::Band band ) const**

        Identifies if a frequency **band** is supported.

        Returns true if the band is supported, and false if it is not.
        """
        ...

    def isMuted(self) -> bool:
        """
        **[pure virtual] bool QRadioTunerControl::isMuted() const**

        Identifies if a radio tuner's audio output is muted.

        Returns true if the audio is muted, and false if it is not.
        """
        ...

    def isSearching(self) -> bool:
        """
        **[pure virtual] bool QRadioTunerControl::isSearching() const**

        Identifies if a radio tuner is currently scanning for signal.

        Returns true if the tuner is scanning, and false if it is not.
        """
        ...

    def isStereo(self) -> bool:
        """
        **[pure virtual] bool QRadioTunerControl::isStereo() const**

        Identifies if a radio tuner is receiving a stereo signal.

        Returns true if the tuner is receiving a stereo signal, and false if it is not.
        """
        ...

    def searchAllStations(
        self, searchMode: PySide2.QtMultimedia.QRadioTuner.SearchMode = ...
    ) -> None:
        """
        **[pure virtual] void QRadioTunerControl::searchAllStations(QRadioTuner::SearchMode searchMode = QRadioTuner::SearchFast)**

        Starts a scan through the whole frequency band searching all stations with a specific **searchMode**.
        """
        ...

    def searchBackward(self) -> None:
        """
        **[pure virtual] void QRadioTunerControl::searchBackward()**

        Starts a backwards scan for a signal, starting from the current **frequency** ().
        """
        ...

    def searchForward(self) -> None:
        """
        **[pure virtual] void QRadioTunerControl::searchForward()**

        Starts a forward scan for a signal, starting from the current **frequency** ().
        """
        ...

    def setBand(self, b: PySide2.QtMultimedia.QRadioTuner.Band) -> None:
        """
        **[pure virtual] void QRadioTunerControl::setBand(QRadioTuner::Band band )**

        Sets the frequecy **band** a radio tuner is tuned to.

        Changing the frequency band will reset the frequency to the minimum frequency of the new band.

        **See also** **band** ().
        """
        ...

    def setFrequency(self, frequency: int) -> None:
        """
        **[pure virtual] void QRadioTunerControl::setFrequency(int frequency )**

        Sets the **frequency** a radio tuner is tuned to.

        **See also** **frequency** ().
        """
        ...

    def setMuted(self, muted: bool) -> None:
        """
        **[pure virtual] void QRadioTunerControl::setMuted(bool muted )**

        Sets the **muted** state of a radio tuner's audio output.

        **See also** **isMuted** ().
        """
        ...

    def setStereoMode(self, mode: PySide2.QtMultimedia.QRadioTuner.StereoMode) -> None:
        """
        **[pure virtual] void QRadioTunerControl::setStereoMode(QRadioTuner::StereoMode mode )**

        Sets a radio tuner's stereo **mode**.

        **See also** **stereoMode** () and **QRadioTuner::StereoMode** .
        """
        ...

    def setVolume(self, volume: int) -> None:
        """
        **[pure virtual] void QRadioTunerControl::setVolume(int volume )**

        Sets the percentage **volume** of a radio tuner's audio output.

        **See also** **volume** ().
        """
        ...

    def signalStrength(self) -> int:
        """
        **[pure virtual] int QRadioTunerControl::signalStrength() const**

        Return a radio tuner's current signal strength as a percentage.
        """
        ...

    def start(self) -> None:
        """
        **[pure virtual] void QRadioTunerControl::start()**

        Activate the radio device.
        """
        ...

    def state(self) -> PySide2.QtMultimedia.QRadioTuner.State:
        """
        **[pure virtual] QRadioTuner::State QRadioTunerControl::state() const**

        Returns the current radio tuner state.
        """
        ...

    def stereoMode(self) -> PySide2.QtMultimedia.QRadioTuner.StereoMode:
        """
        **[pure virtual] QRadioTuner::StereoMode QRadioTunerControl::stereoMode() const**

        Returns a radio tuner's stereo mode.

        **See also** **setStereoMode** () and **QRadioTuner::StereoMode** .
        """
        ...

    def stop(self) -> None:
        """
        **[pure virtual] void QRadioTunerControl::stop()**

        Deactivate the radio device.
        """
        ...

    def volume(self) -> int:
        """
        **[pure virtual] int QRadioTunerControl::volume() const**

        Returns the volume of a radio tuner's audio output as a percentage.

        **See also** **setVolume** ().
        """
        ...

    @property
    def antennaConnectedChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::antennaConnectedChanged(bool connectionStatus )**

        Signals that the antenna has either been connected or disconnected as reflected with the **connectionStatus**.
        """
        ...

    @property
    def bandChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::bandChanged(QRadioTuner::Band band )**

        Signals that the frequency **band** a radio tuner is tuned to has changed.
        """
        ...

    @property
    def error(self) -> PySide2.QtCore.SignalInstance:
        """
        **[pure virtual] QRadioTuner::Error QRadioTunerControl::error() const**

        Returns the error state of a radio tuner.
        """
        ...

    @property
    def frequencyChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::frequencyChanged(int frequency )**

        Signals that the **frequency** a radio tuner is tuned to has changed.
        """
        ...

    @property
    def mutedChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::mutedChanged(bool muted )**

        Signals that the **muted** state of a radio tuner's audio output has changed.
        """
        ...

    @property
    def searchingChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::searchingChanged(bool searching )**

        Signals that the **searching** state of a radio tuner has changed.
        """
        ...

    @property
    def signalStrengthChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::signalStrengthChanged(int strength )**

        Signals that the percentage **strength** of the signal received by a radio tuner has changed.
        """
        ...

    @property
    def stateChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::stateChanged(QRadioTuner::State state )**

        Signals that the **state** of a radio tuner has changed.
        """
        ...

    @property
    def stationFound(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::stationFound(int frequency , QString stationId )**

        Signals that new station with **frequency** and **stationId** was found when scanning
        """
        ...

    @property
    def stereoStatusChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::stereoStatusChanged(bool stereo )**

        Signals that the **stereo** state of a radio tuner has changed.
        """
        ...

    @property
    def volumeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QRadioTunerControl::volumeChanged(int volume )**

        Signals that the percentage **volume** of radio tuner's audio output has changed.
        """
        ...
