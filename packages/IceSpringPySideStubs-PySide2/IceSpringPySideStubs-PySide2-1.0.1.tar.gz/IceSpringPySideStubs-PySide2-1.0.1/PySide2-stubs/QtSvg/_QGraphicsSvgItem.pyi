"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtSvg

bytes = str


class QGraphicsSvgItem(PySide2.QtWidgets.QGraphicsObject):
    """
    **Detailed Description**

    QGraphicsSvgItem provides a way of rendering SVG files onto **QGraphicsView** . QGraphicsSvgItem can be created by passing the SVG file to be rendered to its constructor or by explicit setting a shared **QSvgRenderer**  on it.

    Note that setting **QSvgRenderer**  on a QGraphicsSvgItem doesn\'t make the item take ownership of the renderer, therefore if using **setSharedRenderer** () method one has to make sure that the lifetime of the **QSvgRenderer**  object will be at least as long as that of the QGraphicsSvgItem.

    QGraphicsSvgItem provides a way of rendering only parts of the SVG files via the **setElementId** . If **setElementId** () method is called, only the SVG element (and its children) with the passed id will be renderer. This provides a convenient way of selectively rendering large SVG files that contain a number of discrete elements. For example the following code renders only jokers from a SVG file containing a whole card deck:

    **QSvgRenderer**  *renderer = new **QSvgRenderer** (QLatin1String("SvgCardDeck.svg"));
        **QGraphicsSvgItem**  *black = new **QGraphicsSvgItem** ();
        **QGraphicsSvgItem**  *red   = new **QGraphicsSvgItem** ();

        black->setSharedRenderer(renderer);
        black->setElementId(QLatin1String("black_joker"));

        red->setSharedRenderer(renderer);
        red->setElementId(QLatin1String("red_joker"));

    Size of the item can be set via direct manipulation of the items transformation matrix.

    By default the SVG rendering is cached using **QGraphicsItem::DeviceCoordinateCache**  mode to speedup the display of items. Caching can be disabled by passing **QGraphicsItem::NoCache**  to the **QGraphicsItem::setCacheMode** () method.

    **See also** **QSvgWidget** , **Qt SVG C++ Classes** , **QGraphicsItem** , and **QGraphicsView** .
    """

    @typing.overload
    def __init__(
        self,
        fileName: str,
        parentItem: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...,
    ) -> None:
        """
        **QGraphicsSvgItem::QGraphicsSvgItem(QGraphicsItem * parent = nullptr)**

        Constructs a new SVG item with the given **parent**.
        """
        ...

    @typing.overload
    def __init__(
        self, parentItem: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...
    ) -> None:
        """
        **QGraphicsSvgItem::QGraphicsSvgItem(QGraphicsItem * parent = nullptr)**

        Constructs a new SVG item with the given **parent**.
        """
        ...

    def boundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **[override virtual] QRectF QGraphicsSvgItem::boundingRect() const**

        Reimplements: **QGraphicsItem::boundingRect** () const.

        Returns the bounding rectangle of this item.
        """
        ...

    def elementId(self) -> str:
        """
        **QString QGraphicsSvgItem::elementId() const**

        Returns the XML ID the element that is currently being rendered. Returns an empty string if the whole file is being rendered.

        **Note:** Getter function for property elementId.

        **See also** **setElementId** ().
        """
        ...

    def isCachingEnabled(self) -> bool:
        ...

    def maximumCacheSize(self) -> PySide2.QtCore.QSize:
        """
        **QSize QGraphicsSvgItem::maximumCacheSize() const**

        Returns the current maximum size of the device coordinate cache for this item. If the item is cached using **QGraphicsItem::DeviceCoordinateCache**  mode, caching is bypassed if the extension of the item in device coordinates is larger than the maximum size.

        The default maximum cache size is 1024x768. **QPixmapCache::cacheLimit** () gives the cumulative bounds of the whole cache, whereas maximumCacheSize() refers to a maximum cache size for this particular item.

        **Note:** Getter function for property maximumCacheSize.

        **See also** **setMaximumCacheSize** () and **QGraphicsItem::cacheMode** ().
        """
        ...

    def paint(
        self,
        painter: PySide2.QtGui.QPainter,
        option: PySide2.QtWidgets.QStyleOptionGraphicsItem,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        **[override virtual] void QGraphicsSvgItem::paint(QPainter * painter , const QStyleOptionGraphicsItem * option , QWidget * widget = nullptr)**

        Reimplements: **QGraphicsItem::paint** (QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget).
        """
        ...

    def renderer(self) -> PySide2.QtSvg.QSvgRenderer:
        """
        **QSvgRenderer *QGraphicsSvgItem::renderer() const**

        Returns the currently use **QSvgRenderer** .
        """
        ...

    def setCachingEnabled(self, arg__1: bool) -> None:
        ...

    def setElementId(self, id: str) -> None:
        """
        **void QGraphicsSvgItem::setElementId(const QString & id )**

        Sets the XML ID of the element to **id**.

        **Note:** Setter function for property **elementId** .

        **See also** **elementId** ().
        """
        ...

    def setMaximumCacheSize(self, size: PySide2.QtCore.QSize) -> None:
        """
        **void QGraphicsSvgItem::setMaximumCacheSize(const QSize & size )**

        Sets the maximum device coordinate cache size of the item to **size**. If the item is cached using **QGraphicsItem::DeviceCoordinateCache**  mode, caching is bypassed if the extension of the item in device coordinates is larger than **size**.

        The cache corresponds to the **QPixmap**  which is used to cache the results of the rendering. Use **QPixmapCache::setCacheLimit** () to set limitations on the whole cache and use setMaximumCacheSize() when setting cache size for individual items.

        **Note:** Setter function for property **maximumCacheSize** .

        **See also** **maximumCacheSize** () and **QGraphicsItem::cacheMode** ().
        """
        ...

    def setSharedRenderer(self, renderer: PySide2.QtSvg.QSvgRenderer) -> None:
        """
        **void QGraphicsSvgItem::setSharedRenderer(QSvgRenderer * renderer )**

        Sets **renderer** to be a shared **QSvgRenderer**  on the item. By using this method one can share the same **QSvgRenderer**  on a number of items. This means that the SVG file will be parsed only once. **QSvgRenderer**  passed to this method has to exist for as long as this item is used.
        """
        ...

    def type(self) -> int:
        """
        **[override virtual] int QGraphicsSvgItem::type() const**

        Reimplements: **QGraphicsItem::type** () const.
        """
        ...
