"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtSvg

bytes = str


class QSvgGenerator(PySide2.QtGui.QPaintDevice):
    """
    **Detailed Description**

    This paint device represents a Scalable Vector Graphics (SVG) drawing. Like QPrinter, it is designed as a write-only device that generates output in a specific format.

    To write an SVG file, you first need to configure the output by setting the **fileName**  or **outputDevice**  properties. It is usually necessary to specify the size of the drawing by setting the **size**  property, and in some cases where the drawing will be included in another, the **viewBox**  property also needs to be set.

    **QSvgGenerator**  generator;
            generator.setFileName(path);
            generator.setSize(**QSize** (200, 200));
            generator.setViewBox(**QRect** (0, 0, 200, 200));
            generator.setTitle(tr("SVG Generator Example Drawing"));
            generator.setDescription(tr("An SVG drawing created by the SVG Generator "
                                        "Example provided with Qt."));

    Other meta-data can be specified by setting the **title** , **description** and **resolution** properties.

    As with other **QPaintDevice**  subclasses, a **QPainter**  object is used to paint onto an instance of this class:

    **QPainter**  painter;
            painter.begin(&generator);
            ...
            painter.end();

    Painting is performed in the same way as for any other paint device. However, it is necessary to use the **QPainter::begin** () and **end()**  to explicitly begin and end painting on the device.

    The **SVG Generator Example**  shows how the same painting commands can be used for painting a widget and writing an SVG file.

    **See also** **QSvgRenderer** , **QSvgWidget** , and **Qt SVG C++ Classes** .
    """

    def __init__(self) -> None:
        """
        **QSvgGenerator::QSvgGenerator()**

        Constructs a new generator.
        """
        ...

    def description(self) -> str:
        """
        **description : QString**

        This property holds the description of the generated SVG drawing

        This property was introduced in Qt 4.5.

        **Access functions:**

        QString **description** () const
        void **setDescription** (const QString & **description** )

        **See also** **title** .
        """
        ...

    def fileName(self) -> str:
        """
        **fileName : QString**

        This property holds the target filename for the generated SVG drawing

        This property was introduced in Qt 4.5.

        **Access functions:**

        QString **fileName** () const
        void **setFileName** (const QString & **fileName** )

        **See also** **outputDevice** .
        """
        ...

    def metric(self, metric: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int:
        """
        **[override virtual protected] int QSvgGenerator::metric(QPaintDevice::PaintDeviceMetric metric ) const**

        Reimplements: **QPaintDevice::metric** (QPaintDevice::PaintDeviceMetric metric) const.
        """
        ...

    def outputDevice(self) -> PySide2.QtCore.QIODevice:
        """
        **outputDevice : QIODevice***

        This property holds the output device for the generated SVG drawing

        If both output device and file name are specified, the output device will have precedence.

        This property was introduced in Qt 4.5.

        **Access functions:**

        QIODevice * **outputDevice** () const
        void **setOutputDevice** (QIODevice * **outputDevice** )

        **See also** **fileName** .
        """
        ...

    def paintEngine(self) -> PySide2.QtGui.QPaintEngine:
        """
        **[override virtual protected] QPaintEngine *QSvgGenerator::paintEngine() const**

        Reimplements: **QPaintDevice::paintEngine** () const.

        Returns the paint engine used to render graphics to be converted to SVG format information.
        """
        ...

    def resolution(self) -> int:
        """
        **resolution : int**

        This property holds the resolution of the generated output

        The resolution is specified in dots per inch, and is used to calculate the physical size of an SVG drawing.

        This property was introduced in Qt 4.5.

        **Access functions:**

        int **resolution** () const
        void **setResolution** (int **dpi** )

        **See also** **size**  and **viewBox** .
        """
        ...

    def setDescription(self, description: str) -> None:
        """
        **description : QString**

        This property holds the description of the generated SVG drawing

        This property was introduced in Qt 4.5.

        **Access functions:**

        QString **description** () const
        void **setDescription** (const QString & **description** )

        **See also** **title** .
        """
        ...

    def setFileName(self, fileName: str) -> None:
        """
        **fileName : QString**

        This property holds the target filename for the generated SVG drawing

        This property was introduced in Qt 4.5.

        **Access functions:**

        QString **fileName** () const
        void **setFileName** (const QString & **fileName** )

        **See also** **outputDevice** .
        """
        ...

    def setOutputDevice(self, outputDevice: PySide2.QtCore.QIODevice) -> None:
        """
        **outputDevice : QIODevice***

        This property holds the output device for the generated SVG drawing

        If both output device and file name are specified, the output device will have precedence.

        This property was introduced in Qt 4.5.

        **Access functions:**

        QIODevice * **outputDevice** () const
        void **setOutputDevice** (QIODevice * **outputDevice** )

        **See also** **fileName** .
        """
        ...

    def setResolution(self, dpi: int) -> None:
        """
        **resolution : int**

        This property holds the resolution of the generated output

        The resolution is specified in dots per inch, and is used to calculate the physical size of an SVG drawing.

        This property was introduced in Qt 4.5.

        **Access functions:**

        int **resolution** () const
        void **setResolution** (int **dpi** )

        **See also** **size**  and **viewBox** .
        """
        ...

    def setSize(self, size: PySide2.QtCore.QSize) -> None:
        """
        **size : QSize**

        This property holds the size of the generated SVG drawing

        By default this property is set to `QSize(-1, -1)`, which indicates that the generator should not output the width and height attributes of the `<svg>` element.

        **Note:** It is not possible to change this property while a **QPainter**  is active on the generator.

        This property was introduced in Qt 4.5.

        **Access functions:**

        QSize **size** () const
        void **setSize** (const QSize & **size** )

        **See also** **viewBox**  and **resolution** .
        """
        ...

    def setTitle(self, title: str) -> None:
        """
        **title : QString**

        This property holds the title of the generated SVG drawing

        This property was introduced in Qt 4.5.

        **Access functions:**

        QString **title** () const
        void **setTitle** (const QString & **title** )

        **See also** **description** .
        """
        ...

    @typing.overload
    def setViewBox(self, viewBox: PySide2.QtCore.QRect) -> None:
        """
        **QRect QSvgGenerator::viewBox() const**

        Returns **viewBoxF** ().toRect().

        This function was introduced in Qt 4.5.

        **See also** **setViewBox** () and **viewBoxF** ().
        """
        ...

    @typing.overload
    def setViewBox(self, viewBox: PySide2.QtCore.QRectF) -> None:
        """
        **QRect QSvgGenerator::viewBox() const**

        Returns **viewBoxF** ().toRect().

        This function was introduced in Qt 4.5.

        **See also** **setViewBox** () and **viewBoxF** ().
        """
        ...

    def size(self) -> PySide2.QtCore.QSize:
        """
        **size : QSize**

        This property holds the size of the generated SVG drawing

        By default this property is set to `QSize(-1, -1)`, which indicates that the generator should not output the width and height attributes of the `<svg>` element.

        **Note:** It is not possible to change this property while a **QPainter**  is active on the generator.

        This property was introduced in Qt 4.5.

        **Access functions:**

        QSize **size** () const
        void **setSize** (const QSize & **size** )

        **See also** **viewBox**  and **resolution** .
        """
        ...

    def title(self) -> str:
        """
        **title : QString**

        This property holds the title of the generated SVG drawing

        This property was introduced in Qt 4.5.

        **Access functions:**

        QString **title** () const
        void **setTitle** (const QString & **title** )

        **See also** **description** .
        """
        ...

    def viewBox(self) -> PySide2.QtCore.QRect:
        """
        **QRect QSvgGenerator::viewBox() const**

        Returns **viewBoxF** ().toRect().

        This function was introduced in Qt 4.5.

        **See also** **setViewBox** () and **viewBoxF** ().
        """
        ...

    def viewBoxF(self) -> PySide2.QtCore.QRectF:
        ...
