"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoPath(PySide2.QtPositioning.QGeoShape):
    """
    **Detailed Description**

    The path is defined by an ordered list of QGeoCoordinates.

    Each two adjacent elements in the path are intended to be connected together by the shortest line segment of constant bearing passing through both elements. This type of connection can cross the dateline in the longitudinal direction, but never crosses the poles.

    This is relevant for the calculation of the bounding box returned by **QGeoShape::boundingGeoRectangle** () for this shape, which will have the latitude of the top left corner set to the maximum latitude in the path point set. Similarly, the latitude of the bottom right corner will be the minimum latitude in the path point set.

    This class is a **Q_GADGET** . It can be **directly used from C++ and QML** .

    A QGeoPath is both invalid and empty if it contains no coordinate.

    **Note:** A default constructed QGeoPath is both invalid and empty as it does not contain any coordinates.
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QGeoPath::QGeoPath()**

        Constructs a new, empty geo path.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoPath) -> None:
        """
        **QGeoPath::QGeoPath()**

        Constructs a new, empty geo path.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoShape) -> None:
        """
        **QGeoPath::QGeoPath()**

        Constructs a new, empty geo path.
        """
        ...

    @typing.overload
    def __init__(self, path: typing.Sequence, width: float = ...) -> None:
        """
        **QGeoPath::QGeoPath()**

        Constructs a new, empty geo path.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def addCoordinate(self, coordinate: PySide2.QtPositioning.QGeoCoordinate) -> None:
        """
        **void QGeoPath::addCoordinate(const QGeoCoordinate & coordinate )**

        Appends **coordinate** to the path.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def clearPath(self) -> None:
        """
        **void QGeoPath::clearPath()**

        Clears the path.

        This function was introduced in Qt 5.12.
        """
        ...

    def containsCoordinate(
        self, coordinate: PySide2.QtPositioning.QGeoCoordinate
    ) -> bool:
        """
        **bool QGeoPath::containsCoordinate(const QGeoCoordinate & coordinate ) const**

        Returns true if the path contains **coordinate** as one of the elements.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def coordinateAt(self, index: int) -> PySide2.QtPositioning.QGeoCoordinate:
        """
        **QGeoCoordinate QGeoPath::coordinateAt(int index ) const**

        Returns the coordinate at **index** .

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def insertCoordinate(
        self, index: int, coordinate: PySide2.QtPositioning.QGeoCoordinate
    ) -> None:
        """
        **void QGeoPath::insertCoordinate(int index , const QGeoCoordinate & coordinate )**

        Inserts **coordinate** at the specified **index**.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def length(self, indexFrom: int = ..., indexTo: int = ...) -> float:
        """
        **double QGeoPath::length(int indexFrom = 0, int indexTo = -1) const**

        Returns the length of the path, in meters, from the element **indexFrom** to the element **indexTo**. The length is intended to be the sum of the shortest distances for each pair of adjacent points.

        If **indexTo** is -1 (the default value), the length will be including the distance between last coordinate and the first (closed loop). To retrieve the length for the path, use 0 for **indexFrom** and **QGeoPath::size** () - 1 for **indexTo**.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def path(self) -> typing.List:
        """
        **const QList<QGeoCoordinate> &QGeoPath::path() const**

        Returns all the elements of the path.

        **See also** **setPath** ().
        """
        ...

    @typing.overload
    def removeCoordinate(
        self, coordinate: PySide2.QtPositioning.QGeoCoordinate
    ) -> None:
        """
        **void QGeoPath::removeCoordinate(const QGeoCoordinate & coordinate )**

        Removes the last occurrence of **coordinate** from the path.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    @typing.overload
    def removeCoordinate(self, index: int) -> None:
        """
        **void QGeoPath::removeCoordinate(const QGeoCoordinate & coordinate )**

        Removes the last occurrence of **coordinate** from the path.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def replaceCoordinate(
        self, index: int, coordinate: PySide2.QtPositioning.QGeoCoordinate
    ) -> None:
        """
        **void QGeoPath::replaceCoordinate(int index , const QGeoCoordinate & coordinate )**

        Replaces the path element at the specified **index** with **coordinate**.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def setPath(self, path: typing.Sequence) -> None:
        """
        **void QGeoPath::setPath(const QList<QGeoCoordinate> & path )**

        Sets all the elements of the **path**.

        **See also** **path** ().
        """
        ...

    def setVariantPath(self, path: typing.Sequence) -> None:
        ...

    def setWidth(self, width: float) -> None:
        """
        **qreal QGeoPath::width() const**

        Returns the width of the path, in meters. This information is used in the **contains**  method. The default value is 0.

        **Note:** Getter function for property **width** .

        **See also** **setWidth** ().
        """
        ...

    def size(self) -> int:
        """
        **int QGeoPath::size() const**

        Returns the number of elements in the path.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        This function was introduced in Qt 5.10.
        """
        ...

    def toString(self) -> str:
        """
        **QString QGeoPath::toString() const**

        Returns the geo path properties as a string.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def translate(self, degreesLatitude: float, degreesLongitude: float) -> None:
        """
        **void QGeoPath::translate(double degreesLatitude , double degreesLongitude )**

        Translates this geo path by **degreesLatitude** northwards and **degreesLongitude** eastwards.

        Negative values of **degreesLatitude** and **degreesLongitude** correspond to southward and westward translation respectively.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def translated(
        self, degreesLatitude: float, degreesLongitude: float
    ) -> PySide2.QtPositioning.QGeoPath:
        """
        **QGeoPath QGeoPath::translated(double degreesLatitude , double degreesLongitude ) const**

        Returns a copy of this geo path translated by **degreesLatitude** northwards and **degreesLongitude** eastwards.

        Negative values of **degreesLatitude** and **degreesLongitude** correspond to southward and westward translation respectively.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        **See also** **translate** ().
        """
        ...

    def variantPath(self) -> typing.List:
        ...

    def width(self) -> float:
        """
        **qreal QGeoPath::width() const**

        Returns the width of the path, in meters. This information is used in the **contains**  method. The default value is 0.

        **Note:** Getter function for property **width** .

        **See also** **setWidth** ().
        """
        ...
