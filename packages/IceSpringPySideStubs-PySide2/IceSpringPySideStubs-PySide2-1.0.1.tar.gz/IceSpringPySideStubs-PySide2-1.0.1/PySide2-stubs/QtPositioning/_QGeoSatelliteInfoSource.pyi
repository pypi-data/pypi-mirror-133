"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoSatelliteInfoSource(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    The static function **QGeoSatelliteInfoSource::createDefaultSource** () creates a default satellite data source that is appropriate for the platform, if one is available. Otherwise, available **QGeoPositionInfoSourceFactory**  plugins will be checked for one that has a satellite data source available.

    Call **startUpdates** () and **stopUpdates** () to start and stop regular updates, or **requestUpdate** () to request a single update. When an update is available, **satellitesInViewUpdated** () and/or **satellitesInUseUpdated** () will be emitted.

    If regular satellite updates are required, **setUpdateInterval** () can be used to specify how often these updates should be emitted. If no interval is specified, updates are simply provided whenever they are available. For example:

    // Emit updates every 10 seconds if available
        QGeoSatelliteInfoSource *source = QGeoSatelliteInfoSource::createDefaultSource(0);
        if (source)
            source->setUpdateInterval(10000);

    To remove an update interval that was previously set, call **setUpdateInterval** () with a value of 0.

    Note that the satellite source may have a minimum value requirement for update intervals, as returned by **minimumUpdateInterval** ().
    """

    UnknownSourceError: QGeoSatelliteInfoSource = ...
    AccessError: QGeoSatelliteInfoSource = ...
    ClosedError: QGeoSatelliteInfoSource = ...
    NoError: QGeoSatelliteInfoSource = ...

    class Error(object):
        UnknownSourceError: QGeoSatelliteInfoSource.Error = ...
        AccessError: QGeoSatelliteInfoSource.Error = ...
        ClosedError: QGeoSatelliteInfoSource.Error = ...
        NoError: QGeoSatelliteInfoSource.Error = ...

    def __init__(self, parent: PySide2.QtCore.QObject) -> None:
        ...

    @staticmethod
    def availableSources() -> typing.List:
        """
        **[static] QStringList QGeoSatelliteInfoSource::availableSources()**

        Returns a list of available source plugins, including the default system backend if one is available.
        """
        ...

    @typing.overload
    @staticmethod
    def createDefaultSource(
        parameters: typing.Dict, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtPositioning.QGeoSatelliteInfoSource:
        """
        **[static] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createDefaultSource(QObject * parent )**

        Creates and returns a source with the specified **parent** that reads from the system's default source of satellite update information, or the highest priority available plugin.

        Returns 0 if the system has no default satellite source, no valid plugins could be found or the user does not have the permission to access the satellite data.
        """
        ...

    @typing.overload
    @staticmethod
    def createDefaultSource(
        parent: PySide2.QtCore.QObject,
    ) -> PySide2.QtPositioning.QGeoSatelliteInfoSource:
        """
        **[static] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createDefaultSource(QObject * parent )**

        Creates and returns a source with the specified **parent** that reads from the system's default source of satellite update information, or the highest priority available plugin.

        Returns 0 if the system has no default satellite source, no valid plugins could be found or the user does not have the permission to access the satellite data.
        """
        ...

    @typing.overload
    @staticmethod
    def createSource(
        sourceName: str, parameters: typing.Dict, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtPositioning.QGeoSatelliteInfoSource:
        """
        **[static] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createSource(const QString & sourceName , QObject * parent )**

        Creates and returns a source with the given **parent** , by loading the plugin named **sourceName**.

        Returns 0 if the plugin cannot be found.
        """
        ...

    @typing.overload
    @staticmethod
    def createSource(
        sourceName: str, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtPositioning.QGeoSatelliteInfoSource:
        """
        **[static] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createSource(const QString & sourceName , QObject * parent )**

        Creates and returns a source with the given **parent** , by loading the plugin named **sourceName**.

        Returns 0 if the plugin cannot be found.
        """
        ...

    def error(self) -> PySide2.QtPositioning.QGeoSatelliteInfoSource.Error:
        """
        **[pure virtual] QGeoSatelliteInfoSource::Error QGeoSatelliteInfoSource::error() const**

        Returns the last error that occurred.

        This signal is not emitted when a **requestTimeout** () has occurred.
        """
        ...

    def minimumUpdateInterval(self) -> int:
        """
        **minimumUpdateInterval : const int**

        This property holds the minimum time (in milliseconds) required to retrieve a satellite update.

        This is the minimum value accepted by **setUpdateInterval** () and **requestUpdate** ().

        **Access functions:**

        virtual int **minimumUpdateInterval** () const = 0
        """
        ...

    def requestUpdate(self, timeout: int = ...) -> None:
        """
        **[pure virtual slot] void QGeoSatelliteInfoSource::requestUpdate(int timeout = 0)**

        Attempts to get the current satellite information and emit **satellitesInViewUpdated** () and **satellitesInUseUpdated** () with this information. If the current satellite information cannot be found within the given **timeout** (in milliseconds) or if **timeout** is less than the value returned by **minimumUpdateInterval** (), **requestTimeout** () is emitted.

        If the timeout is zero, the timeout defaults to a reasonable timeout period as appropriate for the source.

        This does nothing if another update request is in progress. However it can be called even if **startUpdates** () has already been called and regular updates are in progress.
        """
        ...

    def setUpdateInterval(self, msec: int) -> None:
        """
        **updateInterval : int**

        This property holds the requested interval in milliseconds between each update.

        If the update interval is not set (or is set to 0) the source will provide updates as often as necessary.

        If the update interval is set, the source will provide updates at an interval as close to the requested interval as possible. If the requested interval is less than the **minimumUpdateInterval** (), the minimum interval is used instead.

        Changes to the update interval will happen as soon as is practical, however the time the change takes may vary between implementations. Whether or not the elapsed time from the previous interval is counted as part of the new interval is also implementation dependent.

        The default value for this property is 0.

        Note: Subclass implementations must call the base implementation of setUpdateInterval() so that updateInterval() returns the correct value.

        **Access functions:**

        int **updateInterval** () const
        virtual void **setUpdateInterval** (int **msec** )

        **Member Function Documentation**
        """
        ...

    def sourceName(self) -> str:
        """
        **QString QGeoSatelliteInfoSource::sourceName() const**

        Returns the unique name of the satellite source implementation in use.

        This is the same name that can be passed to **createSource** () in order to create a new instance of a particular satellite source implementation.
        """
        ...

    def startUpdates(self) -> None:
        """
        **[pure virtual slot] void QGeoSatelliteInfoSource::startUpdates()**

        Starts emitting updates at regular intervals. The updates will be provided whenever new satellite information becomes available.

        If satellite information cannot be retrieved or some other form of timeout has occurred the **satellitesInViewUpdated** () and **satellitesInUseUpdated** () signals may be emitted with empty parameter lists.

        **See also** **satellitesInViewUpdated** () and **satellitesInUseUpdated** ().
        """
        ...

    def stopUpdates(self) -> None:
        """
        **[pure virtual slot] void QGeoSatelliteInfoSource::stopUpdates()**

        Stops emitting updates at regular intervals.
        """
        ...

    def updateInterval(self) -> int:
        """
        **updateInterval : int**

        This property holds the requested interval in milliseconds between each update.

        If the update interval is not set (or is set to 0) the source will provide updates as often as necessary.

        If the update interval is set, the source will provide updates at an interval as close to the requested interval as possible. If the requested interval is less than the **minimumUpdateInterval** (), the minimum interval is used instead.

        Changes to the update interval will happen as soon as is practical, however the time the change takes may vary between implementations. Whether or not the elapsed time from the previous interval is counted as part of the new interval is also implementation dependent.

        The default value for this property is 0.

        Note: Subclass implementations must call the base implementation of setUpdateInterval() so that updateInterval() returns the correct value.

        **Access functions:**

        int **updateInterval** () const
        virtual void **setUpdateInterval** (int **msec** )

        **Member Function Documentation**
        """
        ...

    @property
    def error(self) -> PySide2.QtCore.SignalInstance:
        """
        **[pure virtual] QGeoSatelliteInfoSource::Error QGeoSatelliteInfoSource::error() const**

        Returns the last error that occurred.

        This signal is not emitted when a **requestTimeout** () has occurred.
        """
        ...

    @property
    def requestTimeout(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGeoSatelliteInfoSource::requestTimeout()**

        Emitted if **requestUpdate** () was called and the current satellite information could not be retrieved within the specified timeout.

        While the triggering of this signal may be considered an error condition, it does not imply the emission of the `error()` signal. Only the emission of `requestTimeout()` is required to indicate a timeout.
        """
        ...

    @property
    def satellitesInUseUpdated(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGeoSatelliteInfoSource::satellitesInUseUpdated(const QList<QGeoSatelliteInfo> & satellites )**

        If **startUpdates** () or **requestUpdate** () is called, this signal is emitted when an update is available on the number of satellites that are currently in use.

        These are the satellites that are used to get a "fix" - that is, those used to determine the current position.

        The **satellites** parameter holds the satellites currently in use.
        """
        ...

    @property
    def satellitesInViewUpdated(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGeoSatelliteInfoSource::satellitesInViewUpdated(const QList<QGeoSatelliteInfo> & satellites )**

        If **startUpdates** () or **requestUpdate** () is called, this signal is emitted when an update is available on the satellites that are currently in view.

        The **satellites** parameter holds the satellites currently in view.
        """
        ...
