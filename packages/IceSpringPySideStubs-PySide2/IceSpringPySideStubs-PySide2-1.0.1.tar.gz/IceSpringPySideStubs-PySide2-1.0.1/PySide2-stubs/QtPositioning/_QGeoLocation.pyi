"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoLocation(object):
    """
    **Detailed Description**

    A QGeoLocation consists of a coordinate and corresponding address, along with an optional bounding box which is the recommended region to be displayed when viewing the location.
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QGeoLocation::QGeoLocation()**

        Constructs an new location object.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoLocation) -> None:
        """
        **QGeoLocation::QGeoLocation()**

        Constructs an new location object.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def address(self) -> PySide2.QtPositioning.QGeoAddress:
        """
        **QGeoAddress QGeoLocation::address() const**

        Returns the address of the location.

        **See also** **setAddress** ().
        """
        ...

    def boundingBox(self) -> PySide2.QtPositioning.QGeoRectangle:
        """
        **QGeoRectangle QGeoLocation::boundingBox() const**

        Returns a bounding box which represents the recommended region to display when viewing this location.

        For example, a building's location may have a region centered around the building, but the region is large enough to show it's immediate surrounding geographical context.

        **See also** **setBoundingBox** ().
        """
        ...

    def coordinate(self) -> PySide2.QtPositioning.QGeoCoordinate:
        """
        **QGeoCoordinate QGeoLocation::coordinate() const**

        Returns the coordinate of the location.

        **See also** **setCoordinate** ().
        """
        ...

    def extendedAttributes(self) -> typing.Dict:
        """
        **QVariantMap QGeoLocation::extendedAttributes() const**

        Returns the extended attributes associated to this location. Extended attributes are backend-dependent and can be location-dependent.

        This function was introduced in Qt 5.13.

        **See also** **setExtendedAttributes** ().
        """
        ...

    def isEmpty(self) -> bool:
        """
        **bool QGeoLocation::isEmpty() const**

        Returns true if all fields of the location are 0; otherwise returns false.
        """
        ...

    def setAddress(self, address: PySide2.QtPositioning.QGeoAddress) -> None:
        """
        **void QGeoLocation::setAddress(const QGeoAddress & address )**

        Sets the **address** of the location.

        **See also** **address** ().
        """
        ...

    def setBoundingBox(self, box: PySide2.QtPositioning.QGeoRectangle) -> None:
        """
        **void QGeoLocation::setBoundingBox(const QGeoRectangle & boundingBox )**

        Sets the **boundingBox** of the location.

        **See also** **boundingBox** ().
        """
        ...

    def setCoordinate(self, position: PySide2.QtPositioning.QGeoCoordinate) -> None:
        """
        **void QGeoLocation::setCoordinate(const QGeoCoordinate & coordinate )**

        Sets the **coordinate** of the location.

        **See also** **coordinate** ().
        """
        ...

    def setExtendedAttributes(self, data: typing.Dict) -> None:
        """
        **void QGeoLocation::setExtendedAttributes(const QVariantMap & data )**

        Sets the extended attributes of the location with the parameters specified in **data**.

        This function was introduced in Qt 5.13.

        **See also** **extendedAttributes** ().
        """
        ...
