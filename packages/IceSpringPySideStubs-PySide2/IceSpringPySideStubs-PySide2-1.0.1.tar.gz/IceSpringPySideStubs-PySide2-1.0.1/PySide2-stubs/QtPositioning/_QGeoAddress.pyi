"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoAddress(object):
    """
    **Detailed Description**

    The address\' attributes are normalized to US feature names and can be mapped to the local feature levels (for example State matches "Bundesland" in Germany).

    The address contains a **text** () for displaying purposes and additional properties to access the components of an address:

    * **QGeoAddress::country** ()
      * **QGeoAddress::countryCode** ()
      * **QGeoAddress::state** ()
      * **QGeoAddress::city** ()
      * **QGeoAddress::district** ()
      * **QGeoAddress::street** ()
      * **QGeoAddress::postalCode** ()
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QGeoAddress::QGeoAddress()**

        Default constructor.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoAddress) -> None:
        """
        **QGeoAddress::QGeoAddress()**

        Default constructor.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def city(self) -> str:
        """
        **QString QGeoAddress::city() const**

        Returns the city.

        **See also** **setCity** ().
        """
        ...

    def clear(self) -> None:
        """
        **void QGeoAddress::clear()**

        Clears all of the address' data fields.
        """
        ...

    def country(self) -> str:
        """
        **QString QGeoAddress::country() const**

        Returns the country name.

        **See also** **setCountry** ().
        """
        ...

    def countryCode(self) -> str:
        """
        **QString QGeoAddress::countryCode() const**

        Returns the country code according to ISO 3166-1 alpha-3

        **See also** **setCountryCode** ().
        """
        ...

    def county(self) -> str:
        """
        **QString QGeoAddress::county() const**

        Returns the county. The county is considered the second subdivision below country.

        **See also** **setCounty** ().
        """
        ...

    def district(self) -> str:
        """
        **QString QGeoAddress::district() const**

        Returns the district. The district is considered the subdivison below city.

        **See also** **setDistrict** ().
        """
        ...

    def isEmpty(self) -> bool:
        """
        **bool QGeoAddress::isEmpty() const**

        Returns whether this address is empty. An address is considered empty if **all** of its fields are empty.
        """
        ...

    def isTextGenerated(self) -> bool:
        """
        **bool QGeoAddress::isTextGenerated() const**

        Returns true if **QGeoAddress::text** () is automatically generated from address elements, otherwise returns false if **text** () has been explicitly assigned.

        **See also** **text** () and **setText** ().
        """
        ...

    def postalCode(self) -> str:
        """
        **QString QGeoAddress::postalCode() const**

        Returns the postal code.

        **See also** **setPostalCode** ().
        """
        ...

    def setCity(self, city: str) -> None:
        """
        **void QGeoAddress::setCity(const QString & city )**

        Sets the **city**.

        **See also** **city** ().
        """
        ...

    def setCountry(self, country: str) -> None:
        """
        **void QGeoAddress::setCountry(const QString & country )**

        Sets the **country** name.

        **See also** **country** ().
        """
        ...

    def setCountryCode(self, countryCode: str) -> None:
        """
        **void QGeoAddress::setCountryCode(const QString & countryCode )**

        Sets the **countryCode** according to ISO 3166-1 alpha-3

        **See also** **countryCode** ().
        """
        ...

    def setCounty(self, county: str) -> None:
        """
        **void QGeoAddress::setCounty(const QString & county )**

        Sets the **county**.

        **See also** **county** ().
        """
        ...

    def setDistrict(self, district: str) -> None:
        """
        **void QGeoAddress::setDistrict(const QString & district )**

        Sets the **district**.

        **See also** **district** ().
        """
        ...

    def setPostalCode(self, postalCode: str) -> None:
        """
        **void QGeoAddress::setPostalCode(const QString & postalCode )**

        Sets the **postalCode**.

        **See also** **postalCode** ().
        """
        ...

    def setState(self, state: str) -> None:
        """
        **void QGeoAddress::setState(const QString & state )**

        Sets the **state**.

        **See also** **state** ().
        """
        ...

    def setStreet(self, street: str) -> None:
        """
        **void QGeoAddress::setStreet(const QString & street )**

        Sets the street-level component of the address to **street**.

        This typically includes a street number and street name but may also contain things like a unit number, a building name, or anything else that might be used to distinguish one address from another.

        **See also** **street** ().
        """
        ...

    def setText(self, text: str) -> None:
        """
        **void QGeoAddress::setText(const QString & text )**

        If **text** is not empty, explicitly assigns **text** as the string to be returned by **text** (). **isTextGenerated** () will return false.

        If **text** is empty, indicates that **text** () should be automatically generated from the address elements. **isTextGenerated** () will return true.

        **See also** **text** ().
        """
        ...

    def state(self) -> str:
        """
        **QString QGeoAddress::state() const**

        Returns the state. The state is considered the first subdivision below country.

        **See also** **setState** ().
        """
        ...

    def street(self) -> str:
        """
        **QString QGeoAddress::street() const**

        Returns the street-level component of the address.

        This typically includes a street number and street name but may also contain things like a unit number, a building name, or anything else that might be used to distinguish one address from another.

        **See also** **setStreet** ().
        """
        ...

    def text(self) -> str:
        """
        **QString QGeoAddress::text() const**

        Returns the address as a single formatted string. It is the recommended string to use to display the address to the user. It typically takes the format of an address as found on an envelope, but this is not always necessarily the case.

        The address text is either automatically generated or explicitly assigned. This can be determined by checking **isTextGenerated** .

        If an empty string is provided to **setText** (), then **isTextGenerated** () will be set to true and text() will return a string which is locally formatted according to **countryCode** () and based on the elements of the address such as street, city and so on. Because the text string is generated from the address elements, a sequence of calls such as text(), **setStreet** (), text() may return different strings for each invocation of text().

        If a non-empty string is provided to **setText** (), then **isTextGenerated** () will be set to false and text() will always return the explicitly assigned string. Calls to modify other elements such as **setStreet** (), **setCity** () and so on will not affect the resultant string from text().

        **See also** **setText** ().
        """
        ...
