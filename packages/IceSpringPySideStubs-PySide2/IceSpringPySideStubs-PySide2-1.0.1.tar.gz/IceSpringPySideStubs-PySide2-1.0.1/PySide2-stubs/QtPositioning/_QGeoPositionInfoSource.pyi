"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoPositionInfoSource(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    The static function **QGeoPositionInfoSource::createDefaultSource** () creates a default position source that is appropriate for the platform, if one is available. Otherwise, QGeoPositionInfoSource will check for available plugins that implement the **QGeoPositionInfoSourceFactory**  interface.

    Users of a QGeoPositionInfoSource subclass can request the current position using **requestUpdate** (), or start and stop regular position updates using **startUpdates** () and **stopUpdates** (). When an update is available, **positionUpdated** () is emitted. The last known position can be accessed with **lastKnownPosition** ().

    If regular position updates are required, **setUpdateInterval** () can be used to specify how often these updates should be emitted. If no interval is specified, updates are simply provided whenever they are available. For example:

    // Emit updates every 10 seconds if available
        **QGeoPositionInfoSource**  *source = **QGeoPositionInfoSource** ::createDefaultSource(0);
        if (source)
            source->setUpdateInterval(10000);

    To remove an update interval that was previously set, call **setUpdateInterval** () with a value of 0.

    Note that the position source may have a minimum value requirement for update intervals, as returned by **minimumUpdateInterval** ().
    """

    NonSatellitePositioningMethods: QGeoPositionInfoSource = ...
    AllPositioningMethods: QGeoPositionInfoSource = ...
    AccessError: QGeoPositionInfoSource = ...
    NoPositioningMethods: QGeoPositionInfoSource = ...
    ClosedError: QGeoPositionInfoSource = ...
    UnknownSourceError: QGeoPositionInfoSource = ...
    NoError: QGeoPositionInfoSource = ...
    SatellitePositioningMethods: QGeoPositionInfoSource = ...

    class Error(object):
        AccessError: QGeoPositionInfoSource.Error = ...
        ClosedError: QGeoPositionInfoSource.Error = ...
        UnknownSourceError: QGeoPositionInfoSource.Error = ...
        NoError: QGeoPositionInfoSource.Error = ...

    class PositioningMethod(object):
        NonSatellitePositioningMethods: QGeoPositionInfoSource.PositioningMethod = ...
        AllPositioningMethods: QGeoPositionInfoSource.PositioningMethod = ...
        NoPositioningMethods: QGeoPositionInfoSource.PositioningMethod = ...
        SatellitePositioningMethods: QGeoPositionInfoSource.PositioningMethod = ...

    class PositioningMethods(object):
        ...

    def __init__(self, parent: PySide2.QtCore.QObject) -> None:
        """
        **QGeoPositionInfoSource::QGeoPositionInfoSource(QObject * parent )**

        Creates a position source with the specified **parent**.
        """
        ...

    @staticmethod
    def availableSources() -> typing.List:
        """
        **[static] QStringList QGeoPositionInfoSource::availableSources()**

        Returns a list of available source plugins. This includes any default backend plugin for the current platform.
        """
        ...

    def backendProperty(self, name: str) -> typing.Any:
        """
        **QVariant QGeoPositionInfoSource::backendProperty(const QString & name ) const**

        Returns the value of the backend-specific property named **name** , if present. Otherwise, the returned value will be invalid. Supported backend-specific properties are listed and described in **Qt Positioning plugins#Default plugins** .

        This function was introduced in Qt 5.14.

        **See also** **setBackendProperty** .
        """
        ...

    @typing.overload
    @staticmethod
    def createDefaultSource(
        parameters: typing.Dict, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtPositioning.QGeoPositionInfoSource:
        """
        **[static] QGeoPositionInfoSource *QGeoPositionInfoSource::createDefaultSource(QObject * parent )**

        Creates and returns a position source with the given **parent** that reads from the system's default sources of location data, or the plugin with the highest available priority.

        Returns 0 if the system has no default position source, no valid plugins could be found or the user does not have the permission to access the current position.
        """
        ...

    @typing.overload
    @staticmethod
    def createDefaultSource(
        parent: PySide2.QtCore.QObject,
    ) -> PySide2.QtPositioning.QGeoPositionInfoSource:
        """
        **[static] QGeoPositionInfoSource *QGeoPositionInfoSource::createDefaultSource(QObject * parent )**

        Creates and returns a position source with the given **parent** that reads from the system's default sources of location data, or the plugin with the highest available priority.

        Returns 0 if the system has no default position source, no valid plugins could be found or the user does not have the permission to access the current position.
        """
        ...

    @typing.overload
    @staticmethod
    def createSource(
        sourceName: str, parameters: typing.Dict, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtPositioning.QGeoPositionInfoSource:
        """
        **[static] QGeoPositionInfoSource *QGeoPositionInfoSource::createSource(const QString & sourceName , QObject * parent )**

        Creates and returns a position source with the given **parent** , by loading the plugin named **sourceName**.

        Returns 0 if the plugin cannot be found.
        """
        ...

    @typing.overload
    @staticmethod
    def createSource(
        sourceName: str, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtPositioning.QGeoPositionInfoSource:
        """
        **[static] QGeoPositionInfoSource *QGeoPositionInfoSource::createSource(const QString & sourceName , QObject * parent )**

        Creates and returns a position source with the given **parent** , by loading the plugin named **sourceName**.

        Returns 0 if the plugin cannot be found.
        """
        ...

    def error(self) -> PySide2.QtPositioning.QGeoPositionInfoSource.Error:
        """
        **[pure virtual] QGeoPositionInfoSource::Error QGeoPositionInfoSource::error() const**

        Returns the type of error that last occurred.
        """
        ...

    def lastKnownPosition(
        self, fromSatellitePositioningMethodsOnly: bool = ...
    ) -> PySide2.QtPositioning.QGeoPositionInfo:
        """
        **[pure virtual] QGeoPositionInfo QGeoPositionInfoSource::lastKnownPosition(bool fromSatellitePositioningMethodsOnly = false) const**

        Returns an update containing the last known position, or a null update if none is available.

        If **fromSatellitePositioningMethodsOnly** is true, this returns the last known position received from a satellite positioning method; if none is available, a null update is returned.
        """
        ...

    def minimumUpdateInterval(self) -> int:
        """
        **minimumUpdateInterval : const int**

        This property holds the minimum time (in milliseconds) required to retrieve a position update.

        This is the minimum value accepted by **setUpdateInterval** () and **requestUpdate** ().

        **Access functions:**

        virtual int **minimumUpdateInterval** () const = 0
        """
        ...

    def preferredPositioningMethods(
        self,
    ) -> PySide2.QtPositioning.QGeoPositionInfoSource.PositioningMethods:
        """
        **QGeoPositionInfoSource::PositioningMethods QGeoPositionInfoSource::preferredPositioningMethods() const**

        Returns the positioning methods set by **setPreferredPositioningMethods** ().

        **See also** **setPreferredPositioningMethods** ().
        """
        ...

    def requestUpdate(self, timeout: int = ...) -> None:
        """
        **[pure virtual slot] void QGeoPositionInfoSource::requestUpdate(int timeout = 0)**

        Attempts to get the current position and emit **positionUpdated** () with this information. If the current position cannot be found within the given **timeout** (in milliseconds) or if **timeout** is less than the value returned by **minimumUpdateInterval** (), **updateTimeout** () is emitted.

        If the timeout is zero, the timeout defaults to a reasonable timeout period as appropriate for the source.

        This does nothing if another update request is in progress. However it can be called even if **startUpdates** () has already been called and regular updates are in progress.

        If the source uses multiple positioning methods, it tries to get the current position from the most accurate positioning method within the given timeout.
        """
        ...

    def setBackendProperty(self, name: str, value: typing.Any) -> bool:
        """
        **bool QGeoPositionInfoSource::setBackendProperty(const QString & name , const QVariant & value )**

        Sets the backend-specific property named **name** to **value**. Returns `true` on success, `false` otherwise. Backend-specific properties can be used to configure the positioning subsystem behavior at runtime. Supported backend-specific properties are listed and described in **Qt Positioning plugins#Default plugins** .

        This function was introduced in Qt 5.14.

        **See also** **backendProperty** .
        """
        ...

    def setPreferredPositioningMethods(
        self, methods: PySide2.QtPositioning.QGeoPositionInfoSource.PositioningMethods
    ) -> None:
        """
        **[virtual] void QGeoPositionInfoSource::setPreferredPositioningMethods(QGeoPositionInfoSource::PositioningMethods methods )**

        Sets the preferred positioning methods for this source to **methods**.

        If **methods** includes a method that is not supported by the source, the unsupported method will be ignored.

        If **methods** does not include a single method available/supported by the source, the preferred methods will be set to the set of methods which the source has available. If the source has no method availabe (e.g. because its Location service is turned off or it does not offer a Location service), the passed **methods** are accepted as they are.

        **Note:** When reimplementing this method, subclasses must call the base method implementation to ensure **preferredPositioningMethods** () returns the correct value.

        **See also** **preferredPositioningMethods** () and **supportedPositioningMethods** ().
        """
        ...

    def setUpdateInterval(self, msec: int) -> None:
        """
        **updateInterval : int**

        This property holds the requested interval in milliseconds between each update.

        If the update interval is not set (or is set to 0) the source will provide updates as often as necessary.

        If the update interval is set, the source will provide updates at an interval as close to the requested interval as possible. If the requested interval is less than the **minimumUpdateInterval** (), the minimum interval is used instead.

        Changes to the update interval will happen as soon as is practical, however the time the change takes may vary between implementations. Whether or not the elapsed time from the previous interval is counted as part of the new interval is also implementation dependent.

        The default value for this property is 0.

        Note: Subclass implementations must call the base implementation of setUpdateInterval() so that updateInterval() returns the correct value.

        **Access functions:**

        int **updateInterval** () const
        virtual void **setUpdateInterval** (int **msec** )

        **Member Function Documentation**
        """
        ...

    def sourceName(self) -> str:
        """
        **sourceName : const QString**

        This property holds the unique name of the position source implementation in use.

        This is the same name that can be passed to **createSource** () in order to create a new instance of a particular position source implementation.

        **Access functions:**

        QString **sourceName** () const
        """
        ...

    def startUpdates(self) -> None:
        """
        **[pure virtual slot] void QGeoPositionInfoSource::startUpdates()**

        Starts emitting updates at regular intervals as specified by **setUpdateInterval** ().

        If **setUpdateInterval** () has not been called, the source will emit updates as soon as they become available.

        An **updateTimeout** () signal will be emitted if this **QGeoPositionInfoSource**  subclass determines that it will not be able to provide regular updates. This could happen if a satellite fix is lost or if a hardware error is detected. Position updates will recommence if the data becomes available later on. The **updateTimeout** () signal will not be emitted again until after the periodic updates resume.

        On iOS, starting from version 8, Core Location framework requires additional entries in the application's Info.plist with keys NSLocationAlwaysUsageDescription or NSLocationWhenInUseUsageDescription and a string to be displayed in the authorization prompt. The key NSLocationWhenInUseUsageDescription is used when requesting permission to use location services while the app is in the foreground. The key NSLocationAlwaysUsageDescription is used when requesting permission to use location services whenever the app is running (both the foreground and the background). If both entries are defined, NSLocationWhenInUseUsageDescription has a priority in the foreground mode.
        """
        ...

    def stopUpdates(self) -> None:
        """
        **[pure virtual slot] void QGeoPositionInfoSource::stopUpdates()**

        Stops emitting updates at regular intervals.
        """
        ...

    def supportedPositioningMethods(
        self,
    ) -> PySide2.QtPositioning.QGeoPositionInfoSource.PositioningMethods:
        """
        **[pure virtual] QGeoPositionInfoSource::PositioningMethods QGeoPositionInfoSource::supportedPositioningMethods() const**

        Returns the positioning methods available to this source. Availability is defined as being usable at the time of calling this function. Therefore user settings like turned off location service or limitations to Satellite-based position providers are reflected by this function. Runtime notifications when the status changes can be obtained via **supportedPositioningMethodsChanged** ().

        Not all platforms distinguish the different positioning methods or communicate the current user configuration of the device. The following table provides an overview of the current platform situation:

        PlatformBrief Description
        AndroidIndividual provider status and general Location service state are known and communicated when location service is active.
        GeoClueHardcoced to always return **AllPositioningMethods** .
        GeoClue2Individual providers are not distinguishable but disabled Location services reflected.
        iOS/tvOSHardcoced to always return **AllPositioningMethods** .
        macOSHardcoced to always return **AllPositioningMethods** .
        Windows (UWP)Individual providers are not distinguishable but disabled Location services reflected.

        **See also** **supportedPositioningMethodsChanged** () and **setPreferredPositioningMethods** ().
        """
        ...

    def updateInterval(self) -> int:
        """
        **updateInterval : int**

        This property holds the requested interval in milliseconds between each update.

        If the update interval is not set (or is set to 0) the source will provide updates as often as necessary.

        If the update interval is set, the source will provide updates at an interval as close to the requested interval as possible. If the requested interval is less than the **minimumUpdateInterval** (), the minimum interval is used instead.

        Changes to the update interval will happen as soon as is practical, however the time the change takes may vary between implementations. Whether or not the elapsed time from the previous interval is counted as part of the new interval is also implementation dependent.

        The default value for this property is 0.

        Note: Subclass implementations must call the base implementation of setUpdateInterval() so that updateInterval() returns the correct value.

        **Access functions:**

        int **updateInterval** () const
        virtual void **setUpdateInterval** (int **msec** )

        **Member Function Documentation**
        """
        ...

    @property
    def error(self) -> PySide2.QtCore.SignalInstance:
        """
        **[pure virtual] QGeoPositionInfoSource::Error QGeoPositionInfoSource::error() const**

        Returns the type of error that last occurred.
        """
        ...

    @property
    def positionUpdated(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGeoPositionInfoSource::positionUpdated(const QGeoPositionInfo & update )**

        If **startUpdates** () or **requestUpdate** () is called, this signal is emitted when an update becomes available.

        The **update** value holds the value of the new update.
        """
        ...

    @property
    def supportedPositioningMethodsChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGeoPositionInfoSource::supportedPositioningMethodsChanged()**

        This signal is emitted when the supported positioning methods changed. The cause for a change could be a user turning Location services on/off or restricting Location services to certain types (e.g. GPS only). Note that changes to the supported positioning methods cannot be detected on all platforms. **supportedPositioningMethods** () provides an overview of the current platform support.

        This function was introduced in Qt 5.12.
        """
        ...

    @property
    def updateTimeout(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QGeoPositionInfoSource::updateTimeout()**

        If **requestUpdate** () was called, this signal will be emitted if the current position could not be retrieved within the specified timeout.

        If **startUpdates** () has been called, this signal will be emitted if this **QGeoPositionInfoSource**  subclass determines that it will not be able to provide further regular updates. This signal will not be emitted again until after the regular updates resume.

        While the triggering of this signal may be considered an error condition, it does not imply the emission of the `error()` signal. Only the emission of `updateTimeout()` is required to indicate a timeout.
        """
        ...
