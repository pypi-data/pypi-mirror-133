"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtOpenGL

bytes = str


class QGLShader(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    This class supports shaders written in the OpenGL Shading Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).

    QGLShader and **QGLShaderProgram**  shelter the programmer from the details of compiling and linking vertex and fragment shaders.

    **Note:** This class has been deprecated in favor of **QOpenGLShader** .

    **See also** **QGLShaderProgram** .
    """

    Vertex: QGLShader = ...
    Fragment: QGLShader = ...
    Geometry: QGLShader = ...

    class ShaderType(object):
        ...

    class ShaderTypeBit(object):
        Vertex: QGLShader.ShaderTypeBit = ...
        Fragment: QGLShader.ShaderTypeBit = ...
        Geometry: QGLShader.ShaderTypeBit = ...

    @typing.overload
    def __init__(
        self,
        type: PySide2.QtOpenGL.QGLShader.ShaderType,
        context: PySide2.QtOpenGL.QGLContext,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QGLShader::QGLShader(QGLShader::ShaderType type , QObject * parent = nullptr)**

        Constructs a new QGLShader object of the specified **type** and attaches it to **parent**. If shader programs are not supported, **QGLShaderProgram::hasOpenGLShaderPrograms** () will return false.

        This constructor is normally followed by a call to **compileSourceCode** () or **compileSourceFile** ().

        The shader will be associated with the current QGLContext.

        **See also** **compileSourceCode** () and **compileSourceFile** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        type: PySide2.QtOpenGL.QGLShader.ShaderType,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QGLShader::QGLShader(QGLShader::ShaderType type , QObject * parent = nullptr)**

        Constructs a new QGLShader object of the specified **type** and attaches it to **parent**. If shader programs are not supported, **QGLShaderProgram::hasOpenGLShaderPrograms** () will return false.

        This constructor is normally followed by a call to **compileSourceCode** () or **compileSourceFile** ().

        The shader will be associated with the current QGLContext.

        **See also** **compileSourceCode** () and **compileSourceFile** ().
        """
        ...

    @typing.overload
    def compileSourceCode(self, source: PySide2.QtCore.QByteArray) -> bool:
        """
        **bool QGLShader::compileSourceCode(const char * source )**

        Sets the **source** code for this shader and compiles it. Returns `true` if the source was successfully compiled, false otherwise.

        **See also** **compileSourceFile** ().
        """
        ...

    @typing.overload
    def compileSourceCode(self, source: str) -> bool:
        """
        **bool QGLShader::compileSourceCode(const char * source )**

        Sets the **source** code for this shader and compiles it. Returns `true` if the source was successfully compiled, false otherwise.

        **See also** **compileSourceFile** ().
        """
        ...

    @typing.overload
    def compileSourceCode(self, source: bytes) -> bool:
        """
        **bool QGLShader::compileSourceCode(const char * source )**

        Sets the **source** code for this shader and compiles it. Returns `true` if the source was successfully compiled, false otherwise.

        **See also** **compileSourceFile** ().
        """
        ...

    def compileSourceFile(self, fileName: str) -> bool:
        """
        **bool QGLShader::compileSourceFile(const QString & fileName )**

        Sets the source code for this shader to the contents of **fileName** and compiles it. Returns `true` if the file could be opened and the source compiled, false otherwise.

        **See also** **compileSourceCode** ().
        """
        ...

    @staticmethod
    def hasOpenGLShaders(
        type: PySide2.QtOpenGL.QGLShader.ShaderType,
        context: typing.Optional[PySide2.QtOpenGL.QGLContext] = ...,
    ) -> bool:
        """
        **[static] bool QGLShader::hasOpenGLShaders(QGLShader::ShaderType type , const QGLContext * context = nullptr)**

        Returns `true` if shader programs of type **type** are supported on this system; false otherwise.

        The **context** is used to resolve the GLSL extensions. If **context** is `nullptr`, then **QGLContext::currentContext** () is used.

        This function was introduced in Qt 4.7.
        """
        ...

    def isCompiled(self) -> bool:
        """
        **bool QGLShader::isCompiled() const**

        Returns `true` if this shader has been compiled; false otherwise.

        **See also** **compileSourceCode** () and **compileSourceFile** ().
        """
        ...

    def log(self) -> str:
        """
        **QString QGLShader::log() const**

        Returns the errors and warnings that occurred during the last compile.

        **See also** **compileSourceCode** () and **compileSourceFile** ().
        """
        ...

    def shaderId(self) -> int:
        """
        **GLuint QGLShader::shaderId() const**

        Returns the OpenGL identifier associated with this shader.

        **See also** **QGLShaderProgram::programId** ().
        """
        ...

    def shaderType(self) -> PySide2.QtOpenGL.QGLShader.ShaderType:
        """
        **QGLShader::ShaderType QGLShader::shaderType() const**

        Returns the type of this shader.
        """
        ...

    def sourceCode(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QGLShader::sourceCode() const**

        Returns the source code for this shader.

        **See also** **compileSourceCode** ().
        """
        ...
