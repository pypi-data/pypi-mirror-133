"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QBrush(object):
    """
    **Detailed Description**

    A brush has a style, a color, a gradient and a texture.

    The brush **style** () defines the fill pattern using the **Qt::BrushStyle**  enum. The default brush style is **Qt::NoBrush**  (depending on how you construct a brush). This style tells the painter to not fill shapes. The standard style for filling is **Qt::SolidPattern** . The style can be set when the brush is created using the appropriate constructor, and in addition the **setStyle** () function provides means for altering the style once the brush is constructed.

    ![Brush Styles](images/brush-styles.png)

    The brush **color** () defines the color of the fill pattern. The color can either be one of Qt's predefined colors, **Qt::GlobalColor** , or any other custom **QColor** . The currently set color can be retrieved and altered using the **color** () and **setColor** () functions, respectively.

    The **gradient** () defines the gradient fill used when the current style is either **Qt::LinearGradientPattern** , **Qt::RadialGradientPattern**  or **Qt::ConicalGradientPattern** . Gradient brushes are created by giving a **QGradient**  as a constructor argument when creating the QBrush. Qt provides three different gradients: **QLinearGradient** , **QConicalGradient** , and **QRadialGradient**  \\- all of which inherit **QGradient** .

    **QRadialGradient**  gradient(50, 50, 50, 50, 50);
            gradient.setColorAt(0, **QColor** ::fromRgbF(0, 1, 0, 1));
            gradient.setColorAt(1, **QColor** ::fromRgbF(0, 0, 0, 0));

            **QBrush**  brush(gradient);

    The **texture** () defines the pixmap used when the current style is **Qt::TexturePattern** . You can create a brush with a texture by providing the pixmap when the brush is created or by using **setTexture** ().

    Note that applying **setTexture** () makes **style** () == **Qt::TexturePattern** , regardless of previous style settings. Also, calling **setColor** () will not make a difference if the style is a gradient. The same is the case if the style is **Qt::TexturePattern**  style unless the current texture is a **QBitmap** .

    The **isOpaque** () function returns `true` if the brush is fully opaque otherwise false. A brush is considered opaque if:

    * The alpha component of the **color** () is 255.
      * Its **texture** () does not have an alpha channel and is not a **QBitmap** .
      * The colors in the **gradient** () all have an alpha component that is 255.

    ![Outlines](images/brush-outline.png)To specify the style and color of lines and outlines, use the **QPainter** 's **pen**  combined with **Qt::PenStyle**  and **Qt::GlobalColor** :



        **QPainter**  painter(this);

        painter.setBrush(Qt::cyan);
        painter.setPen(Qt::darkCyan);
        painter.drawRect(0, 0, 100,100);

        painter.setBrush(Qt::NoBrush);
        painter.setPen(Qt::darkGreen);
        painter.drawRect(40, 40, 100, 100);

    Note that, by default, **QPainter**  renders the outline (using the currently set pen) when drawing shapes. Use [`painter.setPen(Qt::NoPen)`**  to disable this behavior.

    For more information about painting in general, see the **Paint System** .

    **See also** **Qt::BrushStyle** , **QPainter** , and **QColor** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(self, brush: PySide2.QtGui.QBrush) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(self, bs: PySide2.QtCore.Qt.BrushStyle) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(
        self,
        color: PySide2.QtCore.Qt.GlobalColor,
        bs: PySide2.QtCore.Qt.BrushStyle = ...,
    ) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(
        self, color: PySide2.QtCore.Qt.GlobalColor, pixmap: PySide2.QtGui.QPixmap
    ) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(
        self, color: PySide2.QtGui.QColor, bs: PySide2.QtCore.Qt.BrushStyle = ...
    ) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(
        self, color: PySide2.QtGui.QColor, pixmap: PySide2.QtGui.QPixmap
    ) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(self, gradient: PySide2.QtGui.QGradient) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(self, image: PySide2.QtGui.QImage) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @typing.overload
    def __init__(self, pixmap: PySide2.QtGui.QPixmap) -> None:
        """
        **QBrush::QBrush()**

        Constructs a default black brush with the style **Qt::NoBrush**  (i.e. this brush will not fill shapes).
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __lshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def color(self) -> PySide2.QtGui.QColor:
        """
        **const QColor &QBrush::color() const**

        Returns the brush color.

        **See also** **setColor** ().
        """
        ...

    def gradient(self) -> PySide2.QtGui.QGradient:
        """
        **const QGradient *QBrush::gradient() const**

        Returns the gradient describing this brush.
        """
        ...

    def isOpaque(self) -> bool:
        """
        **bool QBrush::isOpaque() const**

        Returns `true` if the brush is fully opaque otherwise false. A brush is considered opaque if:

        * The alpha component of the **color** () is 255.
          * Its **texture** () does not have an alpha channel and is not a **QBitmap** .
          * The colors in the **gradient** () all have an alpha component that is 255.
          * It is an extended radial gradient.
        """
        ...

    def matrix(self) -> PySide2.QtGui.QMatrix:
        ...

    @typing.overload
    def setColor(self, color: PySide2.QtCore.Qt.GlobalColor) -> None:
        """
        **void QBrush::setColor(const QColor & color )**

        Sets the brush color to the given **color**.

        Note that calling setColor() will not make a difference if the style is a gradient. The same is the case if the style is **Qt::TexturePattern**  style unless the current texture is a **QBitmap** .

        **See also** **color** ().
        """
        ...

    @typing.overload
    def setColor(self, color: PySide2.QtGui.QColor) -> None:
        """
        **void QBrush::setColor(const QColor & color )**

        Sets the brush color to the given **color**.

        Note that calling setColor() will not make a difference if the style is a gradient. The same is the case if the style is **Qt::TexturePattern**  style unless the current texture is a **QBitmap** .

        **See also** **color** ().
        """
        ...

    def setMatrix(self, mat: PySide2.QtGui.QMatrix) -> None:
        ...

    def setStyle(self, arg__1: PySide2.QtCore.Qt.BrushStyle) -> None:
        """
        **void QBrush::setStyle(Qt::BrushStyle style )**

        Sets the brush style to **style**.

        **See also** **style** ().
        """
        ...

    def setTexture(self, pixmap: PySide2.QtGui.QPixmap) -> None:
        """
        **void QBrush::setTexture(const QPixmap & pixmap )**

        Sets the brush pixmap to **pixmap**. The style is set to **Qt::TexturePattern** .

        The current brush color will only have an effect for monochrome pixmaps, i.e. for **QPixmap::depth** () == 1 (**QBitmaps** ).

        **See also** **texture** ().
        """
        ...

    def setTextureImage(self, image: PySide2.QtGui.QImage) -> None:
        """
        **void QBrush::setTextureImage(const QImage & image )**

        Sets the brush image to **image**. The style is set to **Qt::TexturePattern** .

        Note the current brush color will **not** have any affect on monochrome images, as opposed to calling **setTexture** () with a **QBitmap** . If you want to change the color of monochrome image brushes, either convert the image to **QBitmap**  with `QBitmap::fromImage()` and set the resulting **QBitmap**  as a texture, or change the entries in the color table for the image.

        This function was introduced in Qt 4.2.

        **See also** **textureImage** () and **setTexture** ().
        """
        ...

    def setTransform(self, arg__1: PySide2.QtGui.QTransform) -> None:
        """
        **void QBrush::setTransform(const QTransform & matrix )**

        Sets **matrix** as an explicit transformation matrix on the current brush. The brush transformation matrix is merged with **QPainter**  transformation matrix to produce the final result.

        This function was introduced in Qt 4.3.

        **See also** **transform** ().
        """
        ...

    def style(self) -> PySide2.QtCore.Qt.BrushStyle:
        """
        **Qt::BrushStyle QBrush::style() const**

        Returns the brush style.

        **See also** **setStyle** ().
        """
        ...

    def swap(self, other: PySide2.QtGui.QBrush) -> None:
        """
        **void QBrush::swap(QBrush & other )**

        Swaps brush **other** with this brush. This operation is very fast and never fails.

        This function was introduced in Qt 4.8.
        """
        ...

    def texture(self) -> PySide2.QtGui.QPixmap:
        """
        **QPixmap QBrush::texture() const**

        Returns the custom brush pattern, or a null pixmap if no custom brush pattern has been set.

        **See also** **setTexture** ().
        """
        ...

    def textureImage(self) -> PySide2.QtGui.QImage:
        """
        **QImage QBrush::textureImage() const**

        Returns the custom brush pattern, or a null image if no custom brush pattern has been set.

        If the texture was set as a **QPixmap**  it will be converted to a **QImage** .

        This function was introduced in Qt 4.2.

        **See also** **setTextureImage** ().
        """
        ...

    def transform(self) -> PySide2.QtGui.QTransform:
        """
        **QTransform QBrush::transform() const**

        Returns the current transformation matrix for the brush.

        This function was introduced in Qt 4.3.

        **See also** **setTransform** ().
        """
        ...
