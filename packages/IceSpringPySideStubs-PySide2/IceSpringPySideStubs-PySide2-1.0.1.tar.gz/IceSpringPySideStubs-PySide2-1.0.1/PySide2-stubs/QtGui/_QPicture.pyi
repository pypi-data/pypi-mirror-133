"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPicture(PySide2.QtGui.QPaintDevice):
    """
    **Detailed Description**

    A picture serializes painter commands to an IO device in a platform-independent format. They are sometimes referred to as meta-files.

    Qt pictures use a proprietary binary format. Unlike native picture (meta-file) formats on many window systems, Qt pictures have no limitations regarding their contents. Everything that can be painted on a widget or pixmap (e.g., fonts, pixmaps, regions, transformed graphics, etc.) can also be stored in a picture.

    QPicture is resolution independent, i.e. a QPicture can be displayed on different devices (for example svg, pdf, ps, printer and screen) looking the same. This is, for instance, needed for WYSIWYG print preview. QPicture runs in the default system dpi, and scales the painter to match differences in resolution depending on the window system.

    Example of how to record a picture:

    **QPicture**  picture;
                **QPainter**  painter;
                painter.begin(&picture);           // paint in picture
                painter.drawEllipse(10,20, 80,70); // draw an ellipse
                painter.end();                     // painting done
                picture.save("drawing.pic");       // save picture

    Note that the list of painter commands is reset on each call to the **QPainter::begin** () function.

    Example of how to replay a picture:

    **QPicture**  picture;
                picture.load("drawing.pic");           // load picture
                **QPainter**  painter;
                painter.begin(&myImage);               // paint in myImage
                painter.drawPicture(0, 0, picture);    // draw the picture at (0,0)
                painter.end();                         // painting done

    Pictures can also be drawn using **play** (). Some basic data about a picture is available, for example, **size** (), **isNull** () and **boundingRect** ().

    **See also** **QMovie** .
    """

    @typing.overload
    def __init__(self, arg__1: PySide2.QtGui.QPicture) -> None:
        """
        **QPicture::QPicture(int formatVersion = -1)**

        Constructs an empty picture.

        The **formatVersion** parameter may be used to **create** a QPicture that can be read by applications that are compiled with earlier versions of Qt.

        Note that the default formatVersion is -1 which signifies the current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the default formatVersion of -1.

        Reading pictures generated by earlier versions of Qt is not supported in Qt 4.0.
        """
        ...

    @typing.overload
    def __init__(self, formatVersion: int = ...) -> None:
        """
        **QPicture::QPicture(int formatVersion = -1)**

        Constructs an empty picture.

        The **formatVersion** parameter may be used to **create** a QPicture that can be read by applications that are compiled with earlier versions of Qt.

        Note that the default formatVersion is -1 which signifies the current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the default formatVersion of -1.

        Reading pictures generated by earlier versions of Qt is not supported in Qt 4.0.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __lshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def boundingRect(self) -> PySide2.QtCore.QRect:
        """
        **QRect QPicture::boundingRect() const**

        Returns the picture's bounding rectangle or an invalid rectangle if the picture contains no data.

        **See also** **setBoundingRect** ().
        """
        ...

    def data(self) -> bytes:
        """
        **const char *QPicture::data() const**

        Returns a pointer to the picture data. The pointer is only valid until the next non-const function is called on this picture. The returned pointer is 0 if the picture contains no data.

        **See also** **setData** (), **size** (), and **isNull** ().
        """
        ...

    def devType(self) -> int:
        ...

    @staticmethod
    def inputFormatList() -> typing.List:
        ...

    @staticmethod
    def inputFormats() -> typing.List:
        ...

    def isNull(self) -> bool:
        """
        **bool QPicture::isNull() const**

        Returns `true` if the picture contains no data; otherwise returns false.
        """
        ...

    @typing.overload
    def load(
        self, dev: PySide2.QtCore.QIODevice, format: typing.Optional[bytes] = ...
    ) -> bool:
        """
        **bool QPicture::load(const QString & fileName , const char * format = nullptr)**

        Loads a picture from the file specified by **fileName** and returns true if successful; otherwise invalidates the picture and returns `false`.

        Please note that the **format** parameter has been deprecated and will have no effect.

        **See also** **save** ().
        """
        ...

    @typing.overload
    def load(self, fileName: str, format: typing.Optional[bytes] = ...) -> bool:
        """
        **bool QPicture::load(const QString & fileName , const char * format = nullptr)**

        Loads a picture from the file specified by **fileName** and returns true if successful; otherwise invalidates the picture and returns `false`.

        Please note that the **format** parameter has been deprecated and will have no effect.

        **See also** **save** ().
        """
        ...

    def metric(self, m: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int:
        ...

    @staticmethod
    def outputFormatList() -> typing.List:
        ...

    @staticmethod
    def outputFormats() -> typing.List:
        ...

    def paintEngine(self) -> PySide2.QtGui.QPaintEngine:
        ...

    @staticmethod
    def pictureFormat(fileName: str) -> bytes:
        ...

    def play(self, p: PySide2.QtGui.QPainter) -> bool:
        """
        **bool QPicture::play(QPainter * painter )**

        Replays the picture using **painter** , and returns `true` if successful; otherwise returns `false`.

        This function does exactly the same as **QPainter::drawPicture** () with (x, y) = (0, 0).
        """
        ...

    @typing.overload
    def save(
        self, dev: PySide2.QtCore.QIODevice, format: typing.Optional[bytes] = ...
    ) -> bool:
        """
        **bool QPicture::save(const QString & fileName , const char * format = nullptr)**

        Saves a picture to the file specified by **fileName** and returns true if successful; otherwise returns `false`.

        Please note that the **format** parameter has been deprecated and will have no effect.

        **See also** **load** ().
        """
        ...

    @typing.overload
    def save(self, fileName: str, format: typing.Optional[bytes] = ...) -> bool:
        """
        **bool QPicture::save(const QString & fileName , const char * format = nullptr)**

        Saves a picture to the file specified by **fileName** and returns true if successful; otherwise returns `false`.

        Please note that the **format** parameter has been deprecated and will have no effect.

        **See also** **load** ().
        """
        ...

    def setBoundingRect(self, r: PySide2.QtCore.QRect) -> None:
        """
        **void QPicture::setBoundingRect(const QRect & r )**

        Sets the picture's bounding rectangle to **r**. The automatically calculated value is overridden.

        **See also** **boundingRect** ().
        """
        ...

    def setData(self, data: bytes, size: int) -> None:
        """
        **[virtual] void QPicture::setData(const char * data , uint size )**

        Sets the picture data directly from **data** and **size**. This function copies the input data.

        **See also** **data** () and **size** ().
        """
        ...

    def size(self) -> int:
        """
        **uint QPicture::size() const**

        Returns the size of the picture data.

        **See also** **data** ().
        """
        ...

    def swap(self, other: PySide2.QtGui.QPicture) -> None:
        """
        **void QPicture::swap(QPicture & other )**

        Swaps picture **other** with this picture. This operation is very fast and never fails.

        This function was introduced in Qt 4.8.
        """
        ...
