"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QAbstractTextDocumentLayout(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    The standard layout provided by Qt can handle simple word processing including inline images, lists and tables.

    Some applications, e.g., a word processor or a DTP application might need more features than the ones provided by Qt's layout engine, in which case you can subclass QAbstractTextDocumentLayout to provide custom layout behavior for your text documents.

    An instance of the QAbstractTextDocumentLayout subclass can be installed on a **QTextDocument**  object with the **setDocumentLayout()**  function.

    You can insert custom objects into a **QTextDocument** ; see the **QTextObjectInterface**  class description for details.

    **See also** **QTextObjectInterface** .
    """

    class PaintContext(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, PaintContext: PySide2.QtGui.QAbstractTextDocumentLayout.PaintContext
        ) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

    class Selection(object):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, Selection: PySide2.QtGui.QAbstractTextDocumentLayout.Selection
        ) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

    def __init__(self, doc: PySide2.QtGui.QTextDocument) -> None:
        """
        **QAbstractTextDocumentLayout::QAbstractTextDocumentLayout(QTextDocument * document )**

        Creates a new text document layout for the given **document**.
        """
        ...

    def anchorAt(self, pos: PySide2.QtCore.QPointF) -> str:
        """
        **QString QAbstractTextDocumentLayout::anchorAt(const QPointF & position ) const**

        Returns the reference of the anchor the given **position** , or an empty string if no anchor exists at that point.
        """
        ...

    def blockBoundingRect(
        self, block: PySide2.QtGui.QTextBlock
    ) -> PySide2.QtCore.QRectF:
        """
        **[pure virtual] QRectF QAbstractTextDocumentLayout::blockBoundingRect(const QTextBlock & block ) const**

        Returns the bounding rectangle of **block**.
        """
        ...

    def blockWithMarkerAt(
        self, pos: PySide2.QtCore.QPointF
    ) -> PySide2.QtGui.QTextBlock:
        """
        **QTextBlock QAbstractTextDocumentLayout::blockWithMarkerAt(const QPointF & pos ) const**

        Returns the block (probably a list item) whose **marker**  is found at the given position **pos**.

        This function was introduced in Qt 5.14.
        """
        ...

    def document(self) -> PySide2.QtGui.QTextDocument:
        """
        **QTextDocument *QAbstractTextDocumentLayout::document() const**

        Returns the text document that this layout is operating on.
        """
        ...

    def documentChanged(self, from_: int, charsRemoved: int, charsAdded: int) -> None:
        """
        **[pure virtual protected] void QAbstractTextDocumentLayout::documentChanged(int position , int charsRemoved , int charsAdded )**

        This function is called whenever the contents of the document change. A change occurs when text is inserted, removed, or a combination of these two. The change is specified by **position** , **charsRemoved** , and **charsAdded** corresponding to the starting character position of the change, the number of characters removed from the document, and the number of characters added.

        For example, when inserting the text "Hello" into an empty document, **charsRemoved** would be 0 and **charsAdded** would be 5 (the length of the string).

        Replacing text is a combination of removing and inserting. For example, if the text "Hello" gets replaced by "Hi", **charsRemoved** would be 5 and **charsAdded** would be 2.

        For subclasses of **QAbstractTextDocumentLayout** , this is the central function where a large portion of the work to lay out and position document contents is done.

        For example, in a subclass that only arranges blocks of text, an implementation of this function would have to do the following:

        * Determine the list of changed **QTextBlock** (s) using the parameters provided.
          * Each **QTextBlock**  object\'s corresponding **QTextLayout**  object needs to be processed. You can access the **QTextBlock** \'s layout using the **QTextBlock::layout** () function. This processing should take the document\'s page size into consideration.
          * If the total number of pages changed, the **pageCountChanged** () signal should be emitted.
          * If the total size changed, the **documentSizeChanged** () signal should be emitted.
          * The **update** () signal should be emitted to schedule a repaint of areas in the layout that require repainting.

        **See also** **QTextLayout** .
        """
        ...

    def documentSize(self) -> PySide2.QtCore.QSizeF:
        """
        **[pure virtual] QSizeF QAbstractTextDocumentLayout::documentSize() const**

        Returns the total size of the document's layout.

        This information can be used by display widgets to update their scroll bars correctly.

        **See also** **documentSizeChanged** () and **QTextDocument::pageSize** .
        """
        ...

    def draw(
        self,
        painter: PySide2.QtGui.QPainter,
        context: PySide2.QtGui.QAbstractTextDocumentLayout.PaintContext,
    ) -> None:
        """
        **[pure virtual] void QAbstractTextDocumentLayout::draw(QPainter * painter , const QAbstractTextDocumentLayout::PaintContext & context )**

        Draws the layout with the given **painter** using the given **context**.
        """
        ...

    def drawInlineObject(
        self,
        painter: PySide2.QtGui.QPainter,
        rect: PySide2.QtCore.QRectF,
        object: PySide2.QtGui.QTextInlineObject,
        posInDocument: int,
        format: PySide2.QtGui.QTextFormat,
    ) -> None:
        """
        **[virtual protected] void QAbstractTextDocumentLayout::drawInlineObject(QPainter * painter , const QRectF & rect , QTextInlineObject object , int posInDocument , const QTextFormat & format )**

        This function is called to draw the inline object, **object** , with the given **painter** within the rectangle specified by **rect** using the specified text **format**.

        **posInDocument** specifies the position of the object within the document.

        The default implementation calls drawObject() on the object handlers. This function is called only within Qt. Subclasses can reimplement this function to customize the drawing of inline objects.

        **See also** **draw** ().
        """
        ...

    def format(self, pos: int) -> PySide2.QtGui.QTextCharFormat:
        """
        **[protected] QTextCharFormat QAbstractTextDocumentLayout::format(int position )**

        Returns the character format that is applicable at the given **position**.
        """
        ...

    def formatAt(self, pos: PySide2.QtCore.QPointF) -> PySide2.QtGui.QTextFormat:
        """
        **QTextFormat QAbstractTextDocumentLayout::formatAt(const QPointF & pos ) const**

        Returns the text format at the given position **pos**.

        This function was introduced in Qt 5.8.
        """
        ...

    def formatIndex(self, pos: int) -> int:
        ...

    def frameBoundingRect(
        self, frame: PySide2.QtGui.QTextFrame
    ) -> PySide2.QtCore.QRectF:
        """
        **[pure virtual] QRectF QAbstractTextDocumentLayout::frameBoundingRect(QTextFrame * frame ) const**

        Returns the bounding rectangle of **frame**.
        """
        ...

    def handlerForObject(self, objectType: int) -> PySide2.QtGui.QTextObjectInterface:
        """
        **QTextObjectInterface *QAbstractTextDocumentLayout::handlerForObject(int objectType ) const**

        Returns a handler for objects of the given **objectType**.
        """
        ...

    def hitTest(
        self, point: PySide2.QtCore.QPointF, accuracy: PySide2.QtCore.Qt.HitTestAccuracy
    ) -> int:
        """
        **[pure virtual] int QAbstractTextDocumentLayout::hitTest(const QPointF & point , Qt::HitTestAccuracy accuracy ) const**

        Returns the cursor position for the given **point** with the specified **accuracy**. Returns -1 if no valid cursor position was found.
        """
        ...

    def imageAt(self, pos: PySide2.QtCore.QPointF) -> str:
        """
        **QString QAbstractTextDocumentLayout::imageAt(const QPointF & pos ) const**

        Returns the source of the image at the given position **pos** , or an empty string if no image exists at that point.

        This function was introduced in Qt 5.8.
        """
        ...

    def pageCount(self) -> int:
        """
        **[pure virtual] int QAbstractTextDocumentLayout::pageCount() const**

        Returns the number of pages contained in the layout.

        **See also** **pageCountChanged** ().
        """
        ...

    def paintDevice(self) -> PySide2.QtGui.QPaintDevice:
        """
        **QPaintDevice *QAbstractTextDocumentLayout::paintDevice() const**

        Returns the paint device used to render the document's layout.

        **See also** **setPaintDevice** ().
        """
        ...

    def positionInlineObject(
        self,
        item: PySide2.QtGui.QTextInlineObject,
        posInDocument: int,
        format: PySide2.QtGui.QTextFormat,
    ) -> None:
        """
        **[virtual protected] void QAbstractTextDocumentLayout::positionInlineObject(QTextInlineObject item , int posInDocument , const QTextFormat & format )**

        Lays out the inline object **item** using the given text **format**.

        **posInDocument** specifies the position of the object within the document.

        The default implementation does nothing. This function is called only within Qt. Subclasses can reimplement this function to customize the position of inline objects.

        **See also** **drawInlineObject** ().
        """
        ...

    def registerHandler(
        self, objectType: int, component: PySide2.QtCore.QObject
    ) -> None:
        """
        **void QAbstractTextDocumentLayout::registerHandler(int objectType , QObject * component )**

        Registers the given **component** as a handler for items of the given **objectType**.

        **Note:** registerHandler() has to be called once for each object type. This means that there is only one handler for multiple replacement characters of the same object type.

        The text document layout does not take ownership of `component`.
        """
        ...

    def resizeInlineObject(
        self,
        item: PySide2.QtGui.QTextInlineObject,
        posInDocument: int,
        format: PySide2.QtGui.QTextFormat,
    ) -> None:
        """
        **[virtual protected] void QAbstractTextDocumentLayout::resizeInlineObject(QTextInlineObject item , int posInDocument , const QTextFormat & format )**

        Sets the size of the inline object **item** corresponding to the text **format**.

        **posInDocument** specifies the position of the object within the document.

        The default implementation resizes the **item** to the size returned by the object handler's intrinsicSize() function. This function is called only within Qt. Subclasses can reimplement this function to customize the resizing of inline objects.
        """
        ...

    def setPaintDevice(self, device: PySide2.QtGui.QPaintDevice) -> None:
        """
        **void QAbstractTextDocumentLayout::setPaintDevice(QPaintDevice * device )**

        Sets the paint device used for rendering the document's layout to the given **device**.

        **See also** **paintDevice** ().
        """
        ...

    def unregisterHandler(
        self, objectType: int, component: typing.Optional[PySide2.QtCore.QObject] = ...
    ) -> None:
        """
        **void QAbstractTextDocumentLayout::unregisterHandler(int objectType , QObject * component = nullptr)**

        Unregisters the given **component** as a handler for items of the given **objectType** , or any handler if the **component** is not specified.

        This function was introduced in Qt 5.2.
        """
        ...

    @property
    def documentSizeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractTextDocumentLayout::documentSizeChanged(const QSizeF & newSize )**

        This signal is emitted when the size of the document layout changes to **newSize**.

        Subclasses of **QAbstractTextDocumentLayout**  should emit this signal when the document's entire layout size changes. This signal is useful for widgets that display text documents since it enables them to update their scroll bars correctly.

        **See also** **documentSize** ().
        """
        ...

    @property
    def pageCountChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractTextDocumentLayout::pageCountChanged(int newPages )**

        This signal is emitted when the number of pages in the layout changes; **newPages** is the updated page count.

        Subclasses of **QAbstractTextDocumentLayout**  should emit this signal when the number of pages in the layout has changed. Changes to the page count are caused by changes to the layout or the document content itself.

        **See also** **pageCount** ().
        """
        ...

    @property
    def update(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractTextDocumentLayout::update(const QRectF & rect = QRectF(0., 0., 1000000000., 1000000000.))**

        This signal is emitted when the rectangle **rect** has been updated.

        Subclasses of **QAbstractTextDocumentLayout**  should emit this signal when the layout of the contents change in order to repaint.
        """
        ...

    @property
    def updateBlock(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QAbstractTextDocumentLayout::updateBlock(const QTextBlock & block )**

        This signal is emitted when the specified **block** has been updated.

        Subclasses of **QAbstractTextDocumentLayout**  should emit this signal when the layout of **block** has changed in order to repaint.

        This function was introduced in Qt 4.4.
        """
        ...
