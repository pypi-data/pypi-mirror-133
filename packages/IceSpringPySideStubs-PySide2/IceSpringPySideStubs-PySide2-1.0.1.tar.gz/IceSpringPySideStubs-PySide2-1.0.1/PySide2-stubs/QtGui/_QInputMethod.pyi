"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QInputMethod(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    QInputMethod is used by the text editors for integrating to the platform text input methods and more commonly by application views for querying various text input method-related information like virtual keyboard visibility and keyboard dimensions.

    Qt Quick also provides access to QInputMethod in QML through **Qt global object**  as `Qt.inputMethod` property.
    """

    Click: QInputMethod = ...
    ContextMenu: QInputMethod = ...

    class Action(object):
        Click: QInputMethod.Action = ...
        ContextMenu: QInputMethod.Action = ...

    def anchorRectangle(self) -> PySide2.QtCore.QRectF:
        """
        **anchorRectangle : const QRectF**

        Input item's anchor rectangle in window coordinates.

        Anchor rectangle is often used by various text editing controls like text prediction popups for following the text selection.

        **Access functions:**

        QRectF **anchorRectangle** () const

        **Notifier signal:**

        void **anchorRectangleChanged** ()
        """
        ...

    def commit(self) -> None:
        """
        **[slot] void QInputMethod::commit()**

        Commits the word user is currently composing to the editor. The function is mostly needed by the input methods with text prediction features and by the methods where the script used for typing characters is different from the script that actually gets appended to the editor. Any kind of action that interrupts the text composing needs to flush the composing state by calling the commit() function, for example when the cursor is moved elsewhere.
        """
        ...

    def cursorRectangle(self) -> PySide2.QtCore.QRectF:
        """
        **cursorRectangle : const QRectF**

        Input item's cursor rectangle in window coordinates.

        Cursor rectangle is often used by various text editing controls like text prediction popups for following the text being typed.

        **Access functions:**

        QRectF **cursorRectangle** () const

        **Notifier signal:**

        void **cursorRectangleChanged** ()
        """
        ...

    def hide(self) -> None:
        """
        **[slot] void QInputMethod::hide()**

        Requests virtual keyboard to close.

        Normally applications should not need to call this function, keyboard should automatically close when the text editor loses focus, for example when the parent view is closed.
        """
        ...

    def inputDirection(self) -> PySide2.QtCore.Qt.LayoutDirection:
        """
        **inputDirection : const Qt::LayoutDirection**

        Current input direction.

        **Access functions:**

        Qt::LayoutDirection **inputDirection** () const

        **Notifier signal:**

        void **inputDirectionChanged** (Qt::LayoutDirection **newDirection** )
        """
        ...

    def inputItemClipRectangle(self) -> PySide2.QtCore.QRectF:
        """
        **inputItemClipRectangle : const QRectF**

        Input item's clipped rectangle in window coordinates.

        The clipped input rectangle is often used by various input methods to determine how much screen real estate is available for the input method (e.g. Virtual Keyboard).

        **Access functions:**

        QRectF **inputItemClipRectangle** () const

        **Notifier signal:**

        void **inputItemClipRectangleChanged** ()
        """
        ...

    def inputItemRectangle(self) -> PySide2.QtCore.QRectF:
        """
        **QRectF QInputMethod::inputItemRectangle() const**

        Returns the input item's geometry in input item coordinates.

        This function was introduced in Qt 5.1.

        **See also** **setInputItemRectangle** ().
        """
        ...

    def inputItemTransform(self) -> PySide2.QtGui.QTransform:
        """
        **QTransform QInputMethod::inputItemTransform() const**

        Returns the transformation from input item coordinates to the window coordinates.

        **See also** **setInputItemTransform** ().
        """
        ...

    def invokeAction(
        self, a: PySide2.QtGui.QInputMethod.Action, cursorPosition: int
    ) -> None:
        """
        **[slot] void QInputMethod::invokeAction(QInputMethod::Action a , int cursorPosition )**

        Called by the input item when the word currently being composed is tapped by the user, as indicated by the action **a** and the given **cursorPosition**. Input methods often use this information to offer more word suggestions to the user.
        """
        ...

    def isAnimating(self) -> bool:
        ...

    def isVisible(self) -> bool:
        ...

    def keyboardRectangle(self) -> PySide2.QtCore.QRectF:
        """
        **keyboardRectangle : const QRectF**

        Virtual keyboard's geometry in window coordinates.

        This might be an empty rectangle if it is not possible to know the geometry of the keyboard. This is the case for a floating keyboard on android.

        **Access functions:**

        QRectF **keyboardRectangle** () const

        **Notifier signal:**

        void **keyboardRectangleChanged** ()
        """
        ...

    def locale(self) -> PySide2.QtCore.QLocale:
        """
        **locale : const QLocale**

        Current input locale.

        **Access functions:**

        QLocale **locale** () const

        **Notifier signal:**

        void **localeChanged** ()
        """
        ...

    @staticmethod
    def queryFocusObject(
        query: PySide2.QtCore.Qt.InputMethodQuery, argument: typing.Any
    ) -> typing.Any:
        """
        **[static] QVariant QInputMethod::queryFocusObject(Qt::InputMethodQuery query , QVariant argument )**

        Send **query** to the current focus object with parameters **argument** and return the result.
        """
        ...

    def reset(self) -> None:
        """
        **[slot] void QInputMethod::reset()**

        Resets the input method state. For example, a text editor normally calls this method before inserting a text to make widget ready to accept a text.

        Input method resets automatically when the focused editor changes.
        """
        ...

    def setInputItemRectangle(self, rect: PySide2.QtCore.QRectF) -> None:
        """
        **void QInputMethod::setInputItemRectangle(const QRectF & rect )**

        Sets the input item's geometry to be **rect** , in input item coordinates. This needs to be updated by the focused window like QQuickCanvas whenever item is moved inside the scene, or focus is changed.

        This function was introduced in Qt 5.1.

        **See also** **inputItemRectangle** ().
        """
        ...

    def setInputItemTransform(self, transform: PySide2.QtGui.QTransform) -> None:
        """
        **void QInputMethod::setInputItemTransform(const QTransform & transform )**

        Sets the transformation from input item coordinates to window coordinates to be **transform**. Item transform needs to be updated by the focused window like QQuickCanvas whenever item is moved inside the scene.

        **See also** **inputItemTransform** ().
        """
        ...

    def setVisible(self, visible: bool) -> None:
        """
        **void QInputMethod::setVisible(bool visible )**

        Controls the keyboard visibility. Equivalent to calling **show** () (if **visible** is `true`) or **hide** () (if **visible** is `false`).

        **See also** **isVisible** (), **show** (), and **hide** ().
        """
        ...

    def show(self) -> None:
        """
        **[slot] void QInputMethod::show()**

        Requests virtual keyboard to open. If the platform doesn't provide virtual keyboard the visibility remains false.

        Normally applications should not need to call this function, keyboard should automatically open when the text editor gains focus.
        """
        ...

    def update(self, queries: PySide2.QtCore.Qt.InputMethodQueries) -> None:
        """
        **[slot] void QInputMethod::update(Qt::InputMethodQueries queries )**

        Called by the input item to inform the platform input methods when there has been state changes in editor's input method query attributes. When calling the function **queries** parameter has to be used to tell what has changes, which input method can use to make queries for attributes it's interested with **QInputMethodQueryEvent** .

        In particular calling update whenever the cursor position changes is important as that often causes other query attributes like surrounding text and text selection to change as well. The attributes that often change together with cursor position have been grouped in **Qt::ImQueryInput**  value for convenience.
        """
        ...

    @property
    def anchorRectangleChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def animatingChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def cursorRectangleChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def inputDirectionChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def inputItemClipRectangleChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def keyboardRectangleChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def localeChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def visibleChanged(self) -> PySide2.QtCore.SignalInstance:
        ...
