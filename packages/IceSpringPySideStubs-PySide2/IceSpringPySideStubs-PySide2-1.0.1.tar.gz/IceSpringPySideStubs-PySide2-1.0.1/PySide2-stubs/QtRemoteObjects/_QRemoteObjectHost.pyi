"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtRemoteObjects

bytes = str


class QRemoteObjectHost(PySide2.QtRemoteObjects.QRemoteObjectHostBase):
    """
    **Detailed Description**

    The QRemoteObjectHost class provides an entry point to a **QtRemoteObjects**  network. A network can be as simple as two nodes, or an arbitrarily complex set of processes and devices.

    QRemoteObjectHosts have the same capabilities as QRemoteObjectNodes, but they can also be connected to and can share source objects on the network.

    Nodes may connect to each other directly using **connectToNode** , or they can use the **QRemoteObjectRegistry**  to simplify connections.

    The **QRemoteObjectRegistry**  is a special replica available to every node that connects to the uegistry Url. It knows how to connect to every QRemoteObjectSource object on the network.

    **See also** **QRemoteObjectNode**  and **QRemoteObjectRegistryHost** .
    """

    @typing.overload
    def __init__(
        self, address: PySide2.QtCore.QUrl, parent: PySide2.QtCore.QObject
    ) -> None:
        """
        **QRemoteObjectHost::QRemoteObjectHost(QObject * parent = nullptr)**

        Constructs a new QRemoteObjectHost Node (i.e., a Node that supports exposing **Source**  objects on the QtRO network) with the given **parent**. This constructor is meant specific to support QML in the future as it will not be available to connect to until **setHostUrl**  is called.

        **See also** **setHostUrl** () and **setRegistryUrl** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        address: PySide2.QtCore.QUrl,
        registryAddress: PySide2.QtCore.QUrl = ...,
        allowedSchemas: PySide2.QtRemoteObjects.QRemoteObjectHostBase.AllowedSchemas = ...,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QRemoteObjectHost::QRemoteObjectHost(QObject * parent = nullptr)**

        Constructs a new QRemoteObjectHost Node (i.e., a Node that supports exposing **Source**  objects on the QtRO network) with the given **parent**. This constructor is meant specific to support QML in the future as it will not be available to connect to until **setHostUrl**  is called.

        **See also** **setHostUrl** () and **setRegistryUrl** ().
        """
        ...

    @typing.overload
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **QRemoteObjectHost::QRemoteObjectHost(QObject * parent = nullptr)**

        Constructs a new QRemoteObjectHost Node (i.e., a Node that supports exposing **Source**  objects on the QtRO network) with the given **parent**. This constructor is meant specific to support QML in the future as it will not be available to connect to until **setHostUrl**  is called.

        **See also** **setHostUrl** () and **setRegistryUrl** ().
        """
        ...

    def hostUrl(self) -> PySide2.QtCore.QUrl:
        """
        **[override virtual] QUrl QRemoteObjectHost::hostUrl() const**

        Returns the host address for the **QRemoteObjectNode**  as a **QUrl** . If the Node is not a Host node, returns an empty **QUrl** .

        **Note:** Getter function for property hostUrl.

        **See also** **setHostUrl** ().
        """
        ...

    def setHostUrl(
        self,
        hostAddress: PySide2.QtCore.QUrl,
        allowedSchemas: PySide2.QtRemoteObjects.QRemoteObjectHostBase.AllowedSchemas = ...,
    ) -> bool:
        """
        **[override virtual] bool QRemoteObjectHost::setHostUrl(const QUrl & hostAddress , QRemoteObjectHostBase::AllowedSchemas allowedSchemas = BuiltInSchemasOnly)**

        Sets the **hostAddress** for a host **QRemoteObjectNode** .

        Returns `true` if the Host address is set, otherwise `false`.

        The **allowedSchemas** parameter is only needed (and should be set to **AllowExternalRegistration** ) if the schema of the url should be used as an **External Schema**  by the registry.

        **Note:** Setter function for property **hostUrl** .

        **See also** **hostUrl** ().
        """
        ...

    @property
    def hostUrlChanged(self) -> PySide2.QtCore.SignalInstance:
        ...
