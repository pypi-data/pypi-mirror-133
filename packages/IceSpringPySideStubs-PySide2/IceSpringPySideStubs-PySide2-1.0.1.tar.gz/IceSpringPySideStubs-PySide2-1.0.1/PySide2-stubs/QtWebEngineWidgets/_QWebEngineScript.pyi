"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtPrintSupport
import PySide2.QtWebChannel
import PySide2.QtWebEngineCore
import PySide2.QtWebEngineWidgets

bytes = str


class QWebEngineScript(object):
    """
    **Detailed Description**

    QWebEngineScript enables the programmatic injection of so called **user scripts** in the JavaScript engine at different points, determined by **injectionPoint** (), during the loading of web contents.

    Scripts can be executed either in the main JavaScript **world** , along with the rest of the JavaScript coming from the web contents, or in their own isolated world. While the DOM of the page can be accessed from any world, JavaScript variables of a function defined in one world are not accessible from a different one. **ScriptWorldId**  provides some predefined IDs for this purpose.

    The following **Greasemonkey**  attributes are supported since Qt 5.8: `@exclude`, `@include`, `@name`, `@match`, and `@run-at`.

    Use **QWebEnginePage::scripts** () and **QWebEngineProfile::scripts** () to access the collection of scripts associated with a single page or a number of pages sharing the same profile.

    **See also** **Script Injection** .
    """

    Deferred: QWebEngineScript = ...
    MainWorld: QWebEngineScript = ...
    ApplicationWorld: QWebEngineScript = ...
    DocumentReady: QWebEngineScript = ...
    DocumentCreation: QWebEngineScript = ...
    UserWorld: QWebEngineScript = ...

    class InjectionPoint(object):
        Deferred: QWebEngineScript.InjectionPoint = ...
        DocumentReady: QWebEngineScript.InjectionPoint = ...
        DocumentCreation: QWebEngineScript.InjectionPoint = ...

    class ScriptWorldId(object):
        MainWorld: QWebEngineScript.ScriptWorldId = ...
        ApplicationWorld: QWebEngineScript.ScriptWorldId = ...
        UserWorld: QWebEngineScript.ScriptWorldId = ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QWebEngineScript::QWebEngineScript()**

        Constructs a null script.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtWebEngineWidgets.QWebEngineScript) -> None:
        """
        **QWebEngineScript::QWebEngineScript()**

        Constructs a null script.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def injectionPoint(
        self,
    ) -> PySide2.QtWebEngineWidgets.QWebEngineScript.InjectionPoint:
        """
        **QWebEngineScript::InjectionPoint QWebEngineScript::injectionPoint() const**

        Returns the point in the loading process at which the script will be executed. The default value is **QWebEngineScript::Deferred** .

        **See also** **setInjectionPoint** ().
        """
        ...

    def isNull(self) -> bool:
        """
        **bool QWebEngineScript::isNull() const**

        Returns `true` is the script is null; otherwise returns `false`.
        """
        ...

    def name(self) -> str:
        """
        **QString QWebEngineScript::name() const**

        Returns the name of the script. Can be useful to retrieve a particular script from a **QWebEngineScriptCollection** .

        **See also** **setName** (), **QWebEngineScriptCollection::findScript** (), and **QWebEngineScriptCollection::findScripts** ().
        """
        ...

    def runsOnSubFrames(self) -> bool:
        """
        **bool QWebEngineScript::runsOnSubFrames() const**

        Returns `true` if the script is executed on every frame in the page, or `false` if it is only ran for the main frame.

        **See also** **setRunsOnSubFrames** ().
        """
        ...

    def setInjectionPoint(
        self, arg__1: PySide2.QtWebEngineWidgets.QWebEngineScript.InjectionPoint
    ) -> None:
        """
        **void QWebEngineScript::setInjectionPoint(QWebEngineScript::InjectionPoint p )**

        Sets the point at which to execute the script to be **p**.

        **See also** **injectionPoint** () and **InjectionPoint** .
        """
        ...

    def setName(self, arg__1: str) -> None:
        """
        **void QWebEngineScript::setName(const QString & scriptName )**

        Sets the script name to **scriptName**.

        **See also** **name** ().
        """
        ...

    def setRunsOnSubFrames(self, on: bool) -> None:
        """
        **void QWebEngineScript::setRunsOnSubFrames(bool on )**

        Executes the script on sub frames in addition to the main frame if **on** returns `true`.

        **See also** **runsOnSubFrames** ().
        """
        ...

    def setSourceCode(self, arg__1: str) -> None:
        """
        **void QWebEngineScript::setSourceCode(const QString & scriptSource )**

        Sets the script source to **scriptSource**.

        **See also** **sourceCode** ().
        """
        ...

    def setWorldId(self, arg__1: int) -> None:
        """
        **void QWebEngineScript::setWorldId(quint32 id )**

        Sets the world ID of the isolated world to **id** when running this script.

        Must be between `0` and `256`.

        **See also** **worldId** ().
        """
        ...

    def sourceCode(self) -> str:
        """
        **QString QWebEngineScript::sourceCode() const**

        Returns the source of the script.

        **See also** **setSourceCode** ().
        """
        ...

    def swap(self, other: PySide2.QtWebEngineWidgets.QWebEngineScript) -> None:
        """
        **void QWebEngineScript::swap(QWebEngineScript & other )**

        Swaps the contents of the script with the contents of **other**.
        """
        ...

    def worldId(self) -> int:
        """
        **quint32 QWebEngineScript::worldId() const**

        Returns the world ID defining which world the script is executed in.

        **See also** **setWorldId** ().
        """
        ...
