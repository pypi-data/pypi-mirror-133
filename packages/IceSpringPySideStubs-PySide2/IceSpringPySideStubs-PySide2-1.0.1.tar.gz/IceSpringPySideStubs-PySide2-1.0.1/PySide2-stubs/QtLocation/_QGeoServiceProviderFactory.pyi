"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning
import PySide2.QtLocation

bytes = str


class QGeoServiceProviderFactory(object):
    """
    **Detailed Description**

    Implementers must provide a unique combination of providerName() and providerVersion() per plugin.

    The other functions should be overridden if the plugin supports the associated set of functionality.

    **See also** **QGeoServiceProviderFactoryV2** .
    """

    def __init__(self) -> None:
        ...

    def createGeocodingManagerEngine(
        self,
        parameters: typing.Dict,
        error: PySide2.QtLocation.QGeoServiceProvider.Error,
    ) -> typing.Tuple:
        """
        **[virtual] QGeoCodingManagerEngine *QGeoServiceProviderFactory::createGeocodingManagerEngine(const QVariantMap & parameters , QGeoServiceProvider::Error * error , QString * errorString ) const**

        Returns a new **QGeoCodingManagerEngine**  instance, initialized with **parameters** , which implements the location geocoding functionality.

        If **error** is not 0 it should be set to **QGeoServiceProvider::NoError**  on success or an appropriate **QGeoServiceProvider::Error**  on failure.

        If **errorString** is not 0 it should be set to a string describing any error which occurred.

        The default implementation returns 0, which causes a **QGeoServiceProvider::NotSupportedError**  in **QGeoServiceProvider** .
        """
        ...

    def createPlaceManagerEngine(
        self,
        parameters: typing.Dict,
        error: PySide2.QtLocation.QGeoServiceProvider.Error,
    ) -> typing.Tuple:
        """
        **[virtual] QPlaceManagerEngine *QGeoServiceProviderFactory::createPlaceManagerEngine(const QVariantMap & parameters , QGeoServiceProvider::Error * error , QString * errorString ) const**

        Returns a new **QPlaceManagerEngine**  instance, initialized with **parameters** , which implements the place searching functionality.

        If **error** is not 0 it should be set to **QGeoServiceProvider::NoError**  on success or an appropriate **QGeoServiceProvider::Error**  on failure.

        If **errorString** is not 0 it should be set to a string describing any error which occurred.

        The default implementation returns 0, which causes a **QGeoServiceProvider::NotSupportedError**  in **QGeoServiceProvider** .
        """
        ...

    def createRoutingManagerEngine(
        self,
        parameters: typing.Dict,
        error: PySide2.QtLocation.QGeoServiceProvider.Error,
    ) -> typing.Tuple:
        """
        **[virtual] QGeoRoutingManagerEngine *QGeoServiceProviderFactory::createRoutingManagerEngine(const QVariantMap & parameters , QGeoServiceProvider::Error * error , QString * errorString ) const**

        Returns a new **QGeoRoutingManagerEngine**  instance, initialized with **parameters** , which implements routing functionality.

        If **error** is not 0 it should be set to **QGeoServiceProvider::NoError**  on success or an appropriate **QGeoServiceProvider::Error**  on failure.

        If **errorString** is not 0 it should be set to a string describing any error which occurred.

        The default implementation returns 0, which causes a **QGeoServiceProvider::NotSupportedError**  in **QGeoServiceProvider** .
        """
        ...
