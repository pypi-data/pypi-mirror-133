"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning
import PySide2.QtLocation

bytes = str


class QPlace(object):
    """
    **Detailed Description**

    A place is a point of interest, it could be a favorite restaurant, a park or someone\'s home. A QPlace object represents a place by acting as a container for various information about that place.

    This information can be divided into 2 broad classifications

    * Details
      * Rich content

    The place details consist of properties of the place, such as the name, location, contact information and so on. When a place is returned during a search, these details are filled in. Sometimes in order to save bandwidth, there are further details about the place that can be retrieved on an individual place by place basis, if the user is interested. The **QPlace::detailsFetched** () function can be queried to see if all available details have been fetched, and if not, **QPlaceManager::getPlaceDetails** () can be used to retrieve them. Precisely which details are populated during a search and which need to be fetched individually may vary from provider to provider. See **plugin documentation**  for more details.

    The rich content of a place consists of items such as images, reviews and editorials. Potentially there may be many rich content items, so they are treated separately from the place details. They can be retrieved in a paged fashion via **QPlaceManager::getPlaceContent** (). If necessary, the content may be assigned to a place so it can act as a convenient container.

    **Contact Information**

    The contact information of a place is based around a common set of **contact types** . To retrieve all the phone numbers of a place, one would do:

    if (place.contactTypes().contains(**QPlaceContactDetail** ::Phone)) {
            foreach (const **QPlaceContactDetail**  &number, place.contactDetails(**QPlaceContactDetail** ::Phone))
                **qDebug** () << number.label() << ":" << number.value();
        }

    The contact types are string values by design to allow for providers to introduce new contact types.

    For convenience there are a set of functions which return the value of the first contact detail of each type.

    * **QPlace::primaryPhone** ()
      * **QPlace::primaryEmail** ()
      * **QPlace::primaryWebsite** ()
      * **QPlace::primaryFax** ()

    **Extended Attributes**

    Places may have additional attributes which are not covered in the formal API. Similar to contacts attributes are based around a common set of **attribute types** . To retrieve an extended attribute one would do:

    if (place.extendedAttributeTypes().contains(**QPlaceAttribute** ::OpeningHours))
            **qDebug** () << place.extendedAttribute(**QPlaceAttribute** ::OpeningHours).text();

    The attribute types are string values by design to allow providers to introduce new attribute types.

    **Content**

    The QPlace object is only meant to be a convenient container to hold rich content such as images, reviews and so on. Retrieval of content should happen via **QPlaceManager::getPlaceContent** ().

    The content is stored as a **QPlaceContent::Collection**  which contains both the index of the content, as well as the content itself. This enables developers to check whether a particular item has already been retrieved and if not, then request that content.

    **Attribution**

    Places have a field for a rich text attribution string. Some providers may require that the attribution be shown when a place is displayed to a user.

    **Categories**

    Different categories may be assigned to a place to indicate that the place is associated with those categories. When saving a place, the only meaningful data is the category id, the rest of the category data is effectively ignored. The category must already exist before saving the place (it is not possible to create a new category, assign it to the place, save the place and expect the category to be created).

    **Saving Caveats**

    The Places API is currently designed for only saving **core** details. Saving rich content like images and reviews or details like supplier and rating is not a supported use case. Typically a manager will generally ignore these fields upon save and may produce a warning message if they are populated.

    The Places API only supports saving of the following **core details** :

    * name
      * place id
      * location
      * contact details
      * icon
      * categories (tag-like names to describe a place)
      * visibility scope

    It is possible that providers may only support a subset of these. See the **plugin documentation**  for more details.

    Saving of properties such as the rating, extended attributes, images, reviews, editorials and supplier is explicitly not supported by the Places API.
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QPlace::QPlace()**

        Constructs an empty place object.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtLocation.QPlace) -> None:
        """
        **QPlace::QPlace()**

        Constructs an empty place object.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def appendContactDetail(
        self, contactType: str, detail: PySide2.QtLocation.QPlaceContactDetail
    ) -> None:
        """
        **void QPlace::appendContactDetail(const QString & contactType , const QPlaceContactDetail & detail )**

        Appends a contact **detail** of a specified **contactType**.

        See **QPlaceContactDetail**  for a list of common **contact types** .
        """
        ...

    def attribution(self) -> str:
        """
        **QString QPlace::attribution() const**

        Returns a rich text attribution string of the place. Note, some providers may have a requirement where the attribution must be shown whenever a place is displayed to an end user.

        **See also** **setAttribution** ().
        """
        ...

    def categories(self) -> typing.List:
        """
        **QList<QPlaceCategory> QPlace::categories() const**

        Returns categories that this place belongs to.

        **See also** **setCategories** ().
        """
        ...

    def contactDetails(self, contactType: str) -> typing.List:
        """
        **QList<QPlaceContactDetail> QPlace::contactDetails(const QString & contactType ) const**

        Returns a list of contact details of the specified **contactType**.

        See **QPlaceContactDetail**  for a list of common **contact types** .

        **See also** **setContactDetails** ().
        """
        ...

    def contactTypes(self) -> typing.List:
        """
        **QStringList QPlace::contactTypes() const**

        Returns the type of contact details this place has.

        See **QPlaceContactDetail**  for a list of common **contact types** .
        """
        ...

    def content(self, type: PySide2.QtLocation.QPlaceContent.Type) -> typing.Dict:
        """
        **QPlaceContent::Collection QPlace::content(QPlaceContent::Type type ) const**

        Returns a collection of content associated with a place. This collection is a map with the key being the index of the content object and value being the content object itself.

        The **type** specifies which kind of content is to be retrieved.

        **See also** **setContent** ().
        """
        ...

    def detailsFetched(self) -> bool:
        """
        **bool QPlace::detailsFetched() const**

        Returns true if the details of this place have been fetched, otherwise returns false.

        **See also** **setDetailsFetched** ().
        """
        ...

    def extendedAttribute(
        self, attributeType: str
    ) -> PySide2.QtLocation.QPlaceAttribute:
        """
        **QPlaceAttribute QPlace::extendedAttribute(const QString & attributeType ) const**

        Returns the exteded attribute corresponding to the specified **attributeType**. If the place does not have that particular attribute type, a default constructed QPlaceExtendedAttribute is returned.

        **See also** **setExtendedAttribute** ().
        """
        ...

    def extendedAttributeTypes(self) -> typing.List:
        """
        **QStringList QPlace::extendedAttributeTypes() const**

        Returns the types of extended attributes that this place has.
        """
        ...

    def icon(self) -> PySide2.QtLocation.QPlaceIcon:
        """
        **QPlaceIcon QPlace::icon() const**

        Returns the icon of the place.

        **See also** **setIcon** ().
        """
        ...

    def insertContent(
        self, type: PySide2.QtLocation.QPlaceContent.Type, content: typing.Dict
    ) -> None:
        """
        **void QPlace::insertContent(QPlaceContent::Type type , const QPlaceContent::Collection & content )**

        Adds a collection of **content** of the given **type** to the place. Any index in **content** that already exists is overwritten.
        """
        ...

    def isEmpty(self) -> bool:
        """
        **bool QPlace::isEmpty() const**

        Returns a boolean indicating whether the all the fields of the place are empty or not.
        """
        ...

    def location(self) -> PySide2.QtPositioning.QGeoLocation:
        """
        **QGeoLocation QPlace::location() const**

        Returns the location of the place.

        **See also** **setLocation** ().
        """
        ...

    def name(self) -> str:
        """
        **QString QPlace::name() const**

        Returns the name of the place.

        **See also** **setName** ().
        """
        ...

    def placeId(self) -> str:
        """
        **QString QPlace::placeId() const**

        Returns the identifier of the place. The place identifier is only meaningful to the **QPlaceManager**  that generated it and is not transferable between managers. The place identifier is not guaranteed to be universally unique, but unique for the manager that generated it.

        **See also** **setPlaceId** ().
        """
        ...

    def primaryEmail(self) -> str:
        """
        **QString QPlace::primaryEmail() const**

        Returns the primary email address for this place. This convenience function accesses the first contact detail of the **email type** . If no email addresses exist, then an empty string is returned.
        """
        ...

    def primaryFax(self) -> str:
        """
        **QString QPlace::primaryFax() const**

        Returns the primary fax number for this place. This convenience function accesses the first contact detail of the **fax type** . If no fax details exist, then an empty string is returned.
        """
        ...

    def primaryPhone(self) -> str:
        """
        **QString QPlace::primaryPhone() const**

        Returns the primary phone number for this place. This accesses the first contact detail of the **phone number type** . If no phone details exist, then an empty string is returned.
        """
        ...

    def primaryWebsite(self) -> PySide2.QtCore.QUrl:
        """
        **QUrl QPlace::primaryWebsite() const**

        Returns the primary website of the place. This convenience function accesses the first contact detail of the **website type** . If no websites exist, then an empty string is returned.
        """
        ...

    def ratings(self) -> PySide2.QtLocation.QPlaceRatings:
        """
        **QPlaceRatings QPlace::ratings() const**

        Returns an aggregated rating of the place.

        **See also** **setRatings** ().
        """
        ...

    def removeContactDetails(self, contactType: str) -> None:
        """
        **void QPlace::removeContactDetails(const QString & contactType )**

        Removes all the contact details of a given **contactType**.

        The **contactType** is no longer returned when **QPlace::contactTypes** () is called.
        """
        ...

    def removeExtendedAttribute(self, attributeType: str) -> None:
        """
        **void QPlace::removeExtendedAttribute(const QString & attributeType )**

        Remove the attribute of **attributeType** from the place.

        The attribute will no longer be listed by **QPlace::extendedAttributeTypes** ()
        """
        ...

    def setAttribution(self, attribution: str) -> None:
        """
        **void QPlace::setAttribution(const QString & attribution )**

        Sets the **attribution** string of the place.

        **See also** **attribution** ().
        """
        ...

    def setCategories(self, categories: typing.Sequence) -> None:
        """
        **void QPlace::setCategories(const QList<QPlaceCategory> & categories )**

        Sets the **categories** that this place belongs to.

        **See also** **categories** ().
        """
        ...

    def setCategory(self, category: PySide2.QtLocation.QPlaceCategory) -> None:
        """
        **void QPlace::setCategory(const QPlaceCategory & category )**

        Sets a single **category** that this place belongs to.
        """
        ...

    def setContactDetails(self, contactType: str, details: typing.Sequence) -> None:
        """
        **void QPlace::setContactDetails(const QString & contactType , QList<QPlaceContactDetail> details )**

        Sets the contact **details** of a specified **contactType**.

        If **details** is empty, then the **contactType** is removed from the place such that it is no longer returned by **QPlace::contactTypes** ().

        See **QPlaceContactDetail**  for a list of common **contact types** .

        **See also** **contactDetails** ().
        """
        ...

    def setContent(
        self, type: PySide2.QtLocation.QPlaceContent.Type, content: typing.Dict
    ) -> None:
        """
        **void QPlace::setContent(QPlaceContent::Type type , const QPlaceContent::Collection & content )**

        Sets a collection of **content** for the given **type**.

        **See also** **content** ().
        """
        ...

    def setDetailsFetched(self, fetched: bool) -> None:
        """
        **void QPlace::setDetailsFetched(bool fetched )**

        Sets whether the details of this place have been **fetched** or not.

        **See also** **detailsFetched** ().
        """
        ...

    def setExtendedAttribute(
        self, attributeType: str, attribute: PySide2.QtLocation.QPlaceAttribute
    ) -> None:
        """
        **void QPlace::setExtendedAttribute(const QString & attributeType , const QPlaceAttribute & attribute )**

        Assigns an **attribute** of the given **attributeType** to a place. If the given **attributeType** already exists in the place, then it is overwritten.

        If **attribute** is a default constructed **QPlaceAttribute** , then the **attributeType** is removed from the place which means it will not be listed by **QPlace::extendedAttributeTypes** ().

        **See also** **extendedAttribute** ().
        """
        ...

    def setIcon(self, icon: PySide2.QtLocation.QPlaceIcon) -> None:
        """
        **void QPlace::setIcon(const QPlaceIcon & icon )**

        Sets the **icon** of the place.

        **See also** **icon** ().
        """
        ...

    def setLocation(self, location: PySide2.QtPositioning.QGeoLocation) -> None:
        """
        **void QPlace::setLocation(const QGeoLocation & location )**

        Sets the **location** of the place.

        **See also** **location** ().
        """
        ...

    def setName(self, name: str) -> None:
        """
        **void QPlace::setName(const QString & name )**

        Sets the **name** of the place.

        **See also** **name** ().
        """
        ...

    def setPlaceId(self, identifier: str) -> None:
        """
        **void QPlace::setPlaceId(const QString & identifier )**

        Sets the **identifier** of the place.

        **See also** **placeId** ().
        """
        ...

    def setRatings(self, ratings: PySide2.QtLocation.QPlaceRatings) -> None:
        """
        **void QPlace::setRatings(const QPlaceRatings & rating )**

        Sets the aggregated **rating** of the place.

        **See also** **ratings** ().
        """
        ...

    def setSupplier(self, supplier: PySide2.QtLocation.QPlaceSupplier) -> None:
        """
        **void QPlace::setSupplier(const QPlaceSupplier & supplier )**

        Sets the supplier of this place to **supplier**.

        **See also** **supplier** ().
        """
        ...

    def setTotalContentCount(
        self, type: PySide2.QtLocation.QPlaceContent.Type, total: int
    ) -> None:
        """
        **void QPlace::setTotalContentCount(QPlaceContent::Type type , int totalCount )**

        Sets the **totalCount** of content objects of the given **type**.

        **See also** **totalContentCount** ().
        """
        ...

    def supplier(self) -> PySide2.QtLocation.QPlaceSupplier:
        """
        **QPlaceSupplier QPlace::supplier() const**

        Returns the supplier of this place.

        **See also** **setSupplier** ().
        """
        ...

    def totalContentCount(self, type: PySide2.QtLocation.QPlaceContent.Type) -> int:
        """
        **int QPlace::totalContentCount(QPlaceContent::Type type ) const**

        Returns the total count of content objects of the given **type**. This total count indicates how many the manager/provider should have available. (As opposed to how many objects this place instance is currently assigned).

        A negative count indicates that the total number of items is unknown. By default the total content count is set to 0.

        **See also** **setTotalContentCount** ().
        """
        ...
