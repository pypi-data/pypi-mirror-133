"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QTabWidget(PySide2.QtWidgets.QWidget):
    """
    **Detailed Description**

    ![](images/windows-tabwidget.png)

    A tab widget provides a tab bar (see **QTabBar** ) and a "page area" that is used to display pages related to each tab. By default, the tab bar is shown above the page area, but different configurations are available (see **TabPosition** ). Each tab is associated with a different widget (called a page). Only the current page is shown in the page area; all the other pages are hidden. The user can show a different page by clicking on its tab or by pressing its Alt+ **letter** shortcut if it has one.

    The normal way to use QTabWidget is to do the following:

    1. Create a QTabWidget.
      2. Create a **QWidget**  for each of the pages in the tab dialog, but do not specify parent widgets for them.
      3. Insert child widgets into the page widget, using layouts to position them as normal.
      4. Call **addTab** () or **insertTab** () to put the page widgets into the tab widget, giving each tab a suitable label with an optional keyboard shortcut.

    The position of the tabs is defined by **tabPosition** , their shape by **tabShape** .

    The signal **currentChanged** () is emitted when the user selects a page.

    The current page index is available as **currentIndex** (), the current page widget with **currentWidget** (). You can retrieve a pointer to a page widget with a given index using **widget** (), and can find the index position of a widget with **indexOf** (). Use **setCurrentWidget** () or **setCurrentIndex** () to show a particular page.

    You can change a tab\'s text and icon using **setTabText** () or **setTabIcon** (). A tab and its associated page can be removed with **removeTab** ().

    Each tab is either enabled or disabled at any given time (see **setTabEnabled** ()). If a tab is enabled, the tab text is drawn normally and the user can select that tab. If it is disabled, the tab is drawn in a different way and the user cannot select that tab. Note that even if a tab is disabled, the page can still be visible, for example if all of the tabs happen to be disabled.

    Tab widgets can be a very good way to split up a complex dialog. An alternative is to use a **QStackedWidget**  for which you provide some means of navigating between pages, for example, a **QToolBar**  or a **QListWidget** .

    Most of the functionality in QTabWidget is provided by a **QTabBar**  (at the top, providing the tabs) and a **QStackedWidget**  (most of the area, organizing the individual pages).

    **See also** **QTabBar** , **QStackedWidget** , **QToolBox** , and **Tab Dialog Example** .
    """

    North: QTabWidget = ...
    Rounded: QTabWidget = ...
    South: QTabWidget = ...
    Triangular: QTabWidget = ...
    West: QTabWidget = ...
    East: QTabWidget = ...

    class TabPosition(object):
        North: QTabWidget.TabPosition = ...
        South: QTabWidget.TabPosition = ...
        West: QTabWidget.TabPosition = ...
        East: QTabWidget.TabPosition = ...

    class TabShape(object):
        Rounded: QTabWidget.TabShape = ...
        Triangular: QTabWidget.TabShape = ...

    def __init__(
        self, parent: typing.Optional[PySide2.QtWidgets.QWidget] = ...
    ) -> None:
        """
        **QTabWidget::QTabWidget(QWidget * parent = nullptr)**

        Constructs a tabbed widget with parent **parent**.
        """
        ...

    @typing.overload
    def addTab(self, widget: PySide2.QtWidgets.QWidget, arg__2: str) -> int:
        """
        **int QTabWidget::addTab(QWidget * page , const QString & label )**

        Adds a tab with the given **page** and **label** to the tab widget, and returns the index of the tab in the tab bar. Ownership of **page** is passed on to the **QTabWidget** .

        If the tab\'s **label** contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes a shortcut which will move the focus to this tab.

        **Note:** If you call addTab() after **show** (), the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the **QWidget::updatesEnabled**  property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.

        **See also** **insertTab** ().
        """
        ...

    @typing.overload
    def addTab(
        self, widget: PySide2.QtWidgets.QWidget, icon: PySide2.QtGui.QIcon, label: str
    ) -> int:
        """
        **int QTabWidget::addTab(QWidget * page , const QString & label )**

        Adds a tab with the given **page** and **label** to the tab widget, and returns the index of the tab in the tab bar. Ownership of **page** is passed on to the **QTabWidget** .

        If the tab\'s **label** contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes a shortcut which will move the focus to this tab.

        **Note:** If you call addTab() after **show** (), the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the **QWidget::updatesEnabled**  property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.

        **See also** **insertTab** ().
        """
        ...

    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None:
        """
        **[override virtual protected] void QTabWidget::changeEvent(QEvent * ev )**

        Reimplements: **QWidget::changeEvent** (QEvent *event).
        """
        ...

    def clear(self) -> None:
        """
        **void QTabWidget::clear()**

        Removes all the pages, but does not delete them. Calling this function is equivalent to calling **removeTab** () until the tab widget is empty.
        """
        ...

    def cornerWidget(
        self, corner: PySide2.QtCore.Qt.Corner = ...
    ) -> PySide2.QtWidgets.QWidget:
        """
        **QWidget *QTabWidget::cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const**

        Returns the widget shown in the **corner** of the tab widget or `nullptr`.

        **See also** **setCornerWidget** ().
        """
        ...

    def count(self) -> int:
        """
        **count : const int**

        This property holds the number of tabs in the tab bar

        By default, this property contains a value of 0.

        **Access functions:**

        int **count** () const
        """
        ...

    def currentIndex(self) -> int:
        """
        **currentIndex : int**

        This property holds the index position of the current tab page

        The current index is -1 if there is no current widget.

        By default, this property contains a value of -1 because there are initially no tabs in the widget.

        **Access functions:**

        int **currentIndex** () const
        void **setCurrentIndex** (int **index** )

        **Notifier signal:**

        void ****currentChanged** ** (int **index** )
        """
        ...

    def currentWidget(self) -> PySide2.QtWidgets.QWidget:
        """
        **QWidget *QTabWidget::currentWidget() const**

        Returns a pointer to the page currently being displayed by the tab dialog. The tab dialog does its best to make sure that this value is never 0 (but if you try hard enough, it can be).

        **See also** **currentIndex** () and **setCurrentWidget** ().
        """
        ...

    def documentMode(self) -> bool:
        """
        **documentMode : bool**

        This property holds whether or not the tab widget is rendered in a mode suitable for document pages. This is the same as document mode on macOS.

        When this property is set the tab widget frame is not rendered. This mode is useful for showing document-type pages where the page covers most of the tab widget area.

        This property was introduced in Qt 4.5.

        **Access functions:**

        bool **documentMode** () const
        void **setDocumentMode** (bool **set** )

        **See also** **elideMode** , **QTabBar::documentMode** , **QTabBar::usesScrollButtons** , and **QStyle::SH_TabBar_PreferNoArrows** .
        """
        ...

    def elideMode(self) -> PySide2.QtCore.Qt.TextElideMode:
        """
        **elideMode : Qt::TextElideMode**

        how to elide text in the tab bar

        This property controls how items are elided when there is not enough space to show them for a given tab bar size.

        By default the value is style dependant.

        This property was introduced in Qt 4.2.

        **Access functions:**

        Qt::TextElideMode **elideMode** () const
        void **setElideMode** (Qt::TextElideMode **mode** )

        **See also** **QTabBar::elideMode** , **usesScrollButtons** , and **QStyle::SH_TabBar_ElideMode** .
        """
        ...

    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool:
        """
        **[override virtual protected] bool QTabWidget::event(QEvent * ev )**

        Reimplements: **QWidget::event** (QEvent *event).
        """
        ...

    def hasHeightForWidth(self) -> bool:
        """
        **[override virtual] bool QTabWidget::hasHeightForWidth() const**

        Reimplements: **QWidget::hasHeightForWidth** () const.
        """
        ...

    def heightForWidth(self, width: int) -> int:
        """
        **[override virtual] int QTabWidget::heightForWidth(int width ) const**

        Reimplements: **QWidget::heightForWidth** (int w) const.
        """
        ...

    def iconSize(self) -> PySide2.QtCore.QSize:
        """
        **iconSize : QSize**

        This property holds the size for icons in the tab bar

        The default value is style-dependent. This is the maximum size that the icons will have. Icons are not scaled up if they are of smaller size.

        This property was introduced in Qt 4.2.

        **Access functions:**

        QSize **iconSize** () const
        void **setIconSize** (const QSize & **size** )

        **See also** **QTabBar::iconSize** .
        """
        ...

    def indexOf(self, widget: PySide2.QtWidgets.QWidget) -> int:
        """
        **int QTabWidget::indexOf(QWidget * w ) const**

        Returns the index position of the page occupied by the widget **w** , or -1 if the widget cannot be found.
        """
        ...

    def initStyleOption(
        self, option: PySide2.QtWidgets.QStyleOptionTabWidgetFrame
    ) -> None:
        """
        **[protected] void QTabWidget::initStyleOption(QStyleOptionTabWidgetFrame * option ) const**

        Initialize **option** with the values from this **QTabWidget** . This method is useful for subclasses when they need a **QStyleOptionTabWidgetFrame** , but don't want to fill in all the information themselves.

        **See also** **QStyleOption::initFrom** () and **QTabBar::initStyleOption** ().
        """
        ...

    @typing.overload
    def insertTab(
        self, index: int, widget: PySide2.QtWidgets.QWidget, arg__3: str
    ) -> int:
        """
        **int QTabWidget::insertTab(int index , QWidget * page , const QString & label )**

        Inserts a tab with the given **label** and **page** into the tab widget at the specified **index** , and returns the index of the inserted tab in the tab bar. Ownership of **page** is passed on to the **QTabWidget** .

        The label is displayed in the tab and may vary in appearance depending on the configuration of the tab widget.

        If the tab\'s **label** contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes a shortcut which will move the focus to this tab.

        If **index** is out of range, the tab is simply appended. Otherwise it is inserted at the specified position.

        If the **QTabWidget**  was empty before this function is called, the new page becomes the current page. Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current page.

        **Note:** If you call insertTab() after **show** (), the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the **QWidget::updatesEnabled**  property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.

        **See also** **addTab** ().
        """
        ...

    @typing.overload
    def insertTab(
        self,
        index: int,
        widget: PySide2.QtWidgets.QWidget,
        icon: PySide2.QtGui.QIcon,
        label: str,
    ) -> int:
        """
        **int QTabWidget::insertTab(int index , QWidget * page , const QString & label )**

        Inserts a tab with the given **label** and **page** into the tab widget at the specified **index** , and returns the index of the inserted tab in the tab bar. Ownership of **page** is passed on to the **QTabWidget** .

        The label is displayed in the tab and may vary in appearance depending on the configuration of the tab widget.

        If the tab\'s **label** contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes a shortcut which will move the focus to this tab.

        If **index** is out of range, the tab is simply appended. Otherwise it is inserted at the specified position.

        If the **QTabWidget**  was empty before this function is called, the new page becomes the current page. Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current page.

        **Note:** If you call insertTab() after **show** (), the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the **QWidget::updatesEnabled**  property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.

        **See also** **addTab** ().
        """
        ...

    def isMovable(self) -> bool:
        ...

    def isTabEnabled(self, index: int) -> bool:
        """
        **bool QTabWidget::isTabEnabled(int index ) const**

        Returns `true` if the page at position **index** is enabled; otherwise returns `false`.

        **See also** **setTabEnabled** () and **QWidget::isEnabled** ().
        """
        ...

    def isTabVisible(self, index: int) -> bool:
        """
        **bool QTabWidget::isTabVisible(int index ) const**

        Returns true if the page at position **index** is visible; otherwise returns false.

        This function was introduced in Qt 5.15.

        **See also** **setTabVisible** ().
        """
        ...

    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None:
        """
        **[override virtual protected] void QTabWidget::keyPressEvent(QKeyEvent * e )**

        Reimplements: **QWidget::keyPressEvent** (QKeyEvent *event).
        """
        ...

    def minimumSizeHint(self) -> PySide2.QtCore.QSize:
        """
        **[override virtual] QSize QTabWidget::minimumSizeHint() const**

        Reimplements an access function for property: **QWidget::minimumSizeHint** .

        Returns a suitable minimum size for the tab widget.
        """
        ...

    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None:
        """
        **[override virtual protected] void QTabWidget::paintEvent(QPaintEvent * event )**

        Reimplements: **QWidget::paintEvent** (QPaintEvent *event).

        Paints the tab widget's tab bar in response to the paint **event**.
        """
        ...

    def removeTab(self, index: int) -> None:
        """
        **void QTabWidget::removeTab(int index )**

        Removes the tab at position **index** from this stack of widgets. The page widget itself is not deleted.

        **See also** **addTab** () and **insertTab** ().
        """
        ...

    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None:
        """
        **[override virtual protected] void QTabWidget::resizeEvent(QResizeEvent * e )**

        Reimplements: **QWidget::resizeEvent** (QResizeEvent *event).
        """
        ...

    def setCornerWidget(
        self, w: PySide2.QtWidgets.QWidget, corner: PySide2.QtCore.Qt.Corner = ...
    ) -> None:
        """
        **void QTabWidget::setCornerWidget(QWidget * widget , Qt::Corner corner = Qt::TopRightCorner)**

        Sets the given **widget** to be shown in the specified **corner** of the tab widget. The geometry of the widget is determined based on the widget's **sizeHint** () and the **style** ().

        Only the horizontal element of the **corner** will be used.

        Passing `nullptr` shows no widget in the corner.

        Any previously set corner widget is hidden.

        All widgets set here will be deleted by the tab widget when it is destroyed unless you separately reparent the widget after setting some other corner widget (or `nullptr`).

        Note: Corner widgets are designed for **North**  and **South**  tab positions; other orientations are known to not work properly.

        **See also** **cornerWidget** () and **setTabPosition** ().
        """
        ...

    def setCurrentIndex(self, index: int) -> None:
        """
        **currentIndex : int**

        This property holds the index position of the current tab page

        The current index is -1 if there is no current widget.

        By default, this property contains a value of -1 because there are initially no tabs in the widget.

        **Access functions:**

        int **currentIndex** () const
        void **setCurrentIndex** (int **index** )

        **Notifier signal:**

        void ****currentChanged** ** (int **index** )
        """
        ...

    def setCurrentWidget(self, widget: PySide2.QtWidgets.QWidget) -> None:
        """
        **[slot] void QTabWidget::setCurrentWidget(QWidget * widget )**

        Makes **widget** the current widget. The **widget** used must be a page in this tab widget.

        **See also** **addTab** (), **setCurrentIndex** (), and **currentWidget** ().
        """
        ...

    def setDocumentMode(self, set: bool) -> None:
        """
        **documentMode : bool**

        This property holds whether or not the tab widget is rendered in a mode suitable for document pages. This is the same as document mode on macOS.

        When this property is set the tab widget frame is not rendered. This mode is useful for showing document-type pages where the page covers most of the tab widget area.

        This property was introduced in Qt 4.5.

        **Access functions:**

        bool **documentMode** () const
        void **setDocumentMode** (bool **set** )

        **See also** **elideMode** , **QTabBar::documentMode** , **QTabBar::usesScrollButtons** , and **QStyle::SH_TabBar_PreferNoArrows** .
        """
        ...

    def setElideMode(self, mode: PySide2.QtCore.Qt.TextElideMode) -> None:
        """
        **elideMode : Qt::TextElideMode**

        how to elide text in the tab bar

        This property controls how items are elided when there is not enough space to show them for a given tab bar size.

        By default the value is style dependant.

        This property was introduced in Qt 4.2.

        **Access functions:**

        Qt::TextElideMode **elideMode** () const
        void **setElideMode** (Qt::TextElideMode **mode** )

        **See also** **QTabBar::elideMode** , **usesScrollButtons** , and **QStyle::SH_TabBar_ElideMode** .
        """
        ...

    def setIconSize(self, size: PySide2.QtCore.QSize) -> None:
        """
        **iconSize : QSize**

        This property holds the size for icons in the tab bar

        The default value is style-dependent. This is the maximum size that the icons will have. Icons are not scaled up if they are of smaller size.

        This property was introduced in Qt 4.2.

        **Access functions:**

        QSize **iconSize** () const
        void **setIconSize** (const QSize & **size** )

        **See also** **QTabBar::iconSize** .
        """
        ...

    def setMovable(self, movable: bool) -> None:
        """
        **movable : bool**

        This property holds whether the user can move the tabs within the tabbar area.

        By default, this property is `false`;

        This property was introduced in Qt 4.5.

        **Access functions:**

        bool **isMovable** () const
        void **setMovable** (bool **movable** )
        """
        ...

    def setTabBar(self, arg__1: PySide2.QtWidgets.QTabBar) -> None:
        """
        **[protected] void QTabWidget::setTabBar(QTabBar * tb )**

        Replaces the dialog's **QTabBar**  heading with the tab bar **tb**. Note that this must be called **before** any tabs have been added, or the behavior is undefined.

        **See also** **tabBar** ().
        """
        ...

    def setTabBarAutoHide(self, enabled: bool) -> None:
        """
        **tabBarAutoHide : bool**

        If true, the tab bar is automatically hidden when it contains less than 2 tabs.

        By default, this property is false.

        This property was introduced in Qt 5.4.

        **Access functions:**

        bool **tabBarAutoHide** () const
        void **setTabBarAutoHide** (bool **enabled** )

        **See also** **QWidget::visible** .
        """
        ...

    def setTabEnabled(self, index: int, enabled: bool) -> None:
        """
        **void QTabWidget::setTabEnabled(int index , bool enable )**

        If **enable** is true, the page at position **index** is enabled; otherwise the page at position **index** is disabled. The page's tab is redrawn appropriately.

        **QTabWidget**  uses **QWidget::setEnabled** () internally, rather than keeping a separate flag.

        Note that even a disabled tab/page may be visible. If the page is visible already, **QTabWidget**  will not hide it; if all the pages are disabled, **QTabWidget**  will show one of them.

        **See also** **isTabEnabled** () and **QWidget::setEnabled** ().
        """
        ...

    def setTabIcon(self, index: int, icon: PySide2.QtGui.QIcon) -> None:
        """
        **void QTabWidget::setTabIcon(int index , const QIcon & icon )**

        Sets the **icon** for the tab at position **index**.

        **See also** **tabIcon** ().
        """
        ...

    def setTabPosition(
        self, position: PySide2.QtWidgets.QTabWidget.TabPosition
    ) -> None:
        """
        **tabPosition : TabPosition**

        This property holds the position of the tabs in this tab widget

        Possible values for this property are described by the **TabPosition**  enum.

        By default, this property is set to **North** .

        **Access functions:**

        QTabWidget::TabPosition **tabPosition** () const
        void **setTabPosition** (QTabWidget::TabPosition **position** )

        **See also** **TabPosition** .
        """
        ...

    def setTabShape(self, s: PySide2.QtWidgets.QTabWidget.TabShape) -> None:
        """
        **tabShape : TabShape**

        This property holds the shape of the tabs in this tab widget

        Possible values for this property are **QTabWidget::Rounded**  (default) or **QTabWidget::Triangular** .

        **Access functions:**

        QTabWidget::TabShape **tabShape** () const
        void **setTabShape** (QTabWidget::TabShape **s** )

        **See also** **TabShape** .
        """
        ...

    def setTabText(self, index: int, text: str) -> None:
        """
        **void QTabWidget::setTabText(int index , const QString & label )**

        Defines a new **label** for the page at position **index** 's tab.

        If the provided text contains an ampersand character ('&'), a shortcut is automatically created for it. The character that follows the '&' will be used as the shortcut key. Any previous shortcut will be overwritten, or cleared if no shortcut is defined by the text. See the **QShortcut**  documentation for details (to display an actual ampersand, use '&&').

        **See also** **tabText** ().
        """
        ...

    def setTabToolTip(self, index: int, tip: str) -> None:
        """
        **void QTabWidget::setTabToolTip(int index , const QString & tip )**

        Sets the tab tool tip for the page at position **index** to **tip**.

        **See also** **tabToolTip** ().
        """
        ...

    def setTabVisible(self, index: int, visible: bool) -> None:
        """
        **void QTabWidget::setTabVisible(int index , bool visible )**

        If **visible** is true, the page at position **index** is visible; otherwise the page at position **index** is hidden. The page's tab is redrawn appropriately.

        This function was introduced in Qt 5.15.

        **See also** **isTabVisible** ().
        """
        ...

    def setTabWhatsThis(self, index: int, text: str) -> None:
        """
        **void QTabWidget::setTabWhatsThis(int index , const QString & text )**

        Sets the What's This help text for the page at position **index** to **text**.

        This function was introduced in Qt 4.1.

        **See also** **tabWhatsThis** ().
        """
        ...

    def setTabsClosable(self, closeable: bool) -> None:
        """
        **tabsClosable : bool**

        This property holds whether close buttons are automatically added to each tab.

        This property was introduced in Qt 4.5.

        **Access functions:**

        bool **tabsClosable** () const
        void **setTabsClosable** (bool **closeable** )

        **See also** **QTabBar::tabsClosable** ().
        """
        ...

    def setUsesScrollButtons(self, useButtons: bool) -> None:
        """
        **usesScrollButtons : bool**

        This property holds whether or not a tab bar should use buttons to scroll tabs when it has many tabs.

        When there are too many tabs in a tab bar for its size, the tab bar can either choose to expand its size or to add buttons that allow you to scroll through the tabs.

        By default the value is style dependant.

        This property was introduced in Qt 4.2.

        **Access functions:**

        bool **usesScrollButtons** () const
        void **setUsesScrollButtons** (bool **useButtons** )

        **See also** **elideMode** , **QTabBar::usesScrollButtons** , and **QStyle::SH_TabBar_PreferNoArrows** .

        **Member Function Documentation**
        """
        ...

    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None:
        """
        **[override virtual protected] void QTabWidget::showEvent( QShowEvent * )**

        Reimplements: **QWidget::showEvent** (QShowEvent *event).
        """
        ...

    def sizeHint(self) -> PySide2.QtCore.QSize:
        """
        **[override virtual] QSize QTabWidget::sizeHint() const**

        Reimplements an access function for property: **QWidget::sizeHint** .
        """
        ...

    def tabBar(self) -> PySide2.QtWidgets.QTabBar:
        """
        **QTabBar *QTabWidget::tabBar() const**

        Returns the current **QTabBar** .

        **See also** **setTabBar** ().
        """
        ...

    def tabBarAutoHide(self) -> bool:
        """
        **tabBarAutoHide : bool**

        If true, the tab bar is automatically hidden when it contains less than 2 tabs.

        By default, this property is false.

        This property was introduced in Qt 5.4.

        **Access functions:**

        bool **tabBarAutoHide** () const
        void **setTabBarAutoHide** (bool **enabled** )

        **See also** **QWidget::visible** .
        """
        ...

    def tabIcon(self, index: int) -> PySide2.QtGui.QIcon:
        """
        **QIcon QTabWidget::tabIcon(int index ) const**

        Returns the icon for the tab on the page at position **index**.

        **See also** **setTabIcon** ().
        """
        ...

    def tabInserted(self, index: int) -> None:
        """
        **[virtual protected] void QTabWidget::tabInserted(int index )**

        This virtual handler is called after a new tab was added or inserted at position **index**.

        **See also** **tabRemoved** ().
        """
        ...

    def tabPosition(self) -> PySide2.QtWidgets.QTabWidget.TabPosition:
        """
        **tabPosition : TabPosition**

        This property holds the position of the tabs in this tab widget

        Possible values for this property are described by the **TabPosition**  enum.

        By default, this property is set to **North** .

        **Access functions:**

        QTabWidget::TabPosition **tabPosition** () const
        void **setTabPosition** (QTabWidget::TabPosition **position** )

        **See also** **TabPosition** .
        """
        ...

    def tabRemoved(self, index: int) -> None:
        """
        **[virtual protected] void QTabWidget::tabRemoved(int index )**

        This virtual handler is called after a tab was removed from position **index**.

        **See also** **tabInserted** ().
        """
        ...

    def tabShape(self) -> PySide2.QtWidgets.QTabWidget.TabShape:
        """
        **tabShape : TabShape**

        This property holds the shape of the tabs in this tab widget

        Possible values for this property are **QTabWidget::Rounded**  (default) or **QTabWidget::Triangular** .

        **Access functions:**

        QTabWidget::TabShape **tabShape** () const
        void **setTabShape** (QTabWidget::TabShape **s** )

        **See also** **TabShape** .
        """
        ...

    def tabText(self, index: int) -> str:
        """
        **QString QTabWidget::tabText(int index ) const**

        Returns the label text for the tab on the page at position **index**.

        **See also** **setTabText** ().
        """
        ...

    def tabToolTip(self, index: int) -> str:
        """
        **QString QTabWidget::tabToolTip(int index ) const**

        Returns the tab tool tip for the page at position **index** or an empty string if no tool tip has been set.

        **See also** **setTabToolTip** ().
        """
        ...

    def tabWhatsThis(self, index: int) -> str:
        """
        **QString QTabWidget::tabWhatsThis(int index ) const**

        Returns the What's This help text for the page at position **index** , or an empty string if no help text has been set.

        This function was introduced in Qt 4.1.

        **See also** **setTabWhatsThis** ().
        """
        ...

    def tabsClosable(self) -> bool:
        """
        **tabsClosable : bool**

        This property holds whether close buttons are automatically added to each tab.

        This property was introduced in Qt 4.5.

        **Access functions:**

        bool **tabsClosable** () const
        void **setTabsClosable** (bool **closeable** )

        **See also** **QTabBar::tabsClosable** ().
        """
        ...

    def usesScrollButtons(self) -> bool:
        """
        **usesScrollButtons : bool**

        This property holds whether or not a tab bar should use buttons to scroll tabs when it has many tabs.

        When there are too many tabs in a tab bar for its size, the tab bar can either choose to expand its size or to add buttons that allow you to scroll through the tabs.

        By default the value is style dependant.

        This property was introduced in Qt 4.2.

        **Access functions:**

        bool **usesScrollButtons** () const
        void **setUsesScrollButtons** (bool **useButtons** )

        **See also** **elideMode** , **QTabBar::usesScrollButtons** , and **QStyle::SH_TabBar_PreferNoArrows** .

        **Member Function Documentation**
        """
        ...

    def widget(self, index: int) -> PySide2.QtWidgets.QWidget:
        """
        **QWidget *QTabWidget::widget(int index ) const**

        Returns the tab page at index position **index** or `nullptr` if the **index** is out of range.
        """
        ...

    @property
    def currentChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QTabWidget::currentChanged(int index )**

        This signal is emitted whenever the current page index changes. The parameter is the new current page **index** position, or -1 if there isn't a new one (for example, if there are no widgets in the **QTabWidget** )

        **Note:** Notifier signal for property **currentIndex** .

        **See also** **currentWidget** () and **currentIndex** .
        """
        ...

    @property
    def tabBarClicked(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QTabWidget::tabBarClicked(int index )**

        This signal is emitted when user clicks on a tab at an **index**.

        **index** refers to the tab clicked, or -1 if no tab is under the cursor.

        This function was introduced in Qt 5.2.
        """
        ...

    @property
    def tabBarDoubleClicked(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QTabWidget::tabBarDoubleClicked(int index )**

        This signal is emitted when the user double clicks on a tab at an **index**.

        **index** is the index of a clicked tab, or -1 if no tab is under the cursor.

        This function was introduced in Qt 5.2.
        """
        ...

    @property
    def tabCloseRequested(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QTabWidget::tabCloseRequested(int index )**

        This signal is emitted when the close button on a tab is clicked. The **index** is the index that should be removed.

        This function was introduced in Qt 4.5.

        **See also** **setTabsClosable** ().
        """
        ...
