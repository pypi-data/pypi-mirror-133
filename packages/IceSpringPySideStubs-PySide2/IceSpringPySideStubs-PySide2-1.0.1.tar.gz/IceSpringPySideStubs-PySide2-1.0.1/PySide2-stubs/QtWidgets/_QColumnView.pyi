"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QColumnView(PySide2.QtWidgets.QAbstractItemView):
    """
    **Detailed Description**

    QColumnView displays a model in a number of QListViews, one for each hierarchy in the tree. This is sometimes referred to as a cascading list.

    The QColumnView class is one of the **Model/View Classes**  and is part of Qt's **model/view framework** .

    QColumnView implements the interfaces defined by the **QAbstractItemView**  class to allow it to display data provided by models derived from the **QAbstractItemModel**  class.

    ![](images/qcolumnview.png)

    **See also** **Model/View Programming** .
    """

    def __init__(
        self, parent: typing.Optional[PySide2.QtWidgets.QWidget] = ...
    ) -> None:
        """
        **QColumnView::QColumnView(QWidget * parent = nullptr)**

        Constructs a column view with a **parent** to represent a model's data. Use **setModel** () to set the model.

        **See also** **QAbstractItemModel** .
        """
        ...

    def columnWidths(self) -> typing.List:
        """
        **QList<int> QColumnView::columnWidths() const**

        Returns a list of the width of all the columns in this view.

        **See also** **setColumnWidths** ().
        """
        ...

    def createColumn(
        self, rootIndex: PySide2.QtCore.QModelIndex
    ) -> PySide2.QtWidgets.QAbstractItemView:
        """
        **[virtual protected] QAbstractItemView *QColumnView::createColumn(const QModelIndex & index )**

        To use a custom widget for the final column when you select an item overload this function and return a widget. **index** is the root index that will be assigned to the view.

        Return the new view. **QColumnView**  will automatically take ownership of the widget.

        **See also** **setPreviewWidget** ().
        """
        ...

    def currentChanged(
        self, current: PySide2.QtCore.QModelIndex, previous: PySide2.QtCore.QModelIndex
    ) -> None:
        """
        **[override virtual protected] void QColumnView::currentChanged(const QModelIndex & current , const QModelIndex & previous )**

        Reimplements: **QAbstractItemView::currentChanged** (const QModelIndex &current, const QModelIndex &previous).
        """
        ...

    def horizontalOffset(self) -> int:
        """
        **[override virtual protected] int QColumnView::horizontalOffset() const**

        Reimplements: **QAbstractItemView::horizontalOffset** () const.
        """
        ...

    def indexAt(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex:
        """
        **[override virtual] QModelIndex QColumnView::indexAt(const QPoint & point ) const**

        Reimplements: **QAbstractItemView::indexAt** (const QPoint &point) const.
        """
        ...

    def initializeColumn(self, column: PySide2.QtWidgets.QAbstractItemView) -> None:
        """
        **[protected] void QColumnView::initializeColumn(QAbstractItemView * column ) const**

        Copies the behavior and options of the column view and applies them to the **column** such as the **iconSize** (), **textElideMode** () and **alternatingRowColors** (). This can be useful when reimplementing **createColumn** ().

        This function was introduced in Qt 4.4.

        **See also** **createColumn** ().
        """
        ...

    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool:
        """
        **[override virtual protected] bool QColumnView::isIndexHidden(const QModelIndex & index ) const**

        Reimplements: **QAbstractItemView::isIndexHidden** (const QModelIndex &index) const.
        """
        ...

    def moveCursor(
        self,
        cursorAction: PySide2.QtWidgets.QAbstractItemView.CursorAction,
        modifiers: PySide2.QtCore.Qt.KeyboardModifiers,
    ) -> PySide2.QtCore.QModelIndex:
        """
        **[override virtual protected] QModelIndex QColumnView::moveCursor(QAbstractItemView::CursorAction cursorAction , Qt::KeyboardModifiers modifiers )**

        Reimplements: **QAbstractItemView::moveCursor** (QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers).

        Move left should go to the parent index Move right should go to the child index or down if there is no child
        """
        ...

    def previewWidget(self) -> PySide2.QtWidgets.QWidget:
        """
        **QWidget *QColumnView::previewWidget() const**

        Returns the preview widget, or `nullptr` if there is none.

        **See also** **setPreviewWidget** () and **updatePreviewWidget** ().
        """
        ...

    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None:
        """
        **[override virtual protected] void QColumnView::resizeEvent(QResizeEvent * event )**

        Reimplements: **QAbstractItemView::resizeEvent** (QResizeEvent *event).
        """
        ...

    def resizeGripsVisible(self) -> bool:
        """
        **resizeGripsVisible : bool**

        This property holds the way to specify if the list views gets resize grips or not

        By default, `visible` is set to true

        **Access functions:**

        bool **resizeGripsVisible** () const
        void **setResizeGripsVisible** (bool **visible** )

        **See also** **setRootIndex** ().

        **Member Function Documentation**
        """
        ...

    def rowsInserted(
        self, parent: PySide2.QtCore.QModelIndex, start: int, end: int
    ) -> None:
        """
        **[override virtual protected] void QColumnView::rowsInserted(const QModelIndex & parent , int start , int end )**

        Reimplements: **QAbstractItemView::rowsInserted** (const QModelIndex &parent, int start, int end).
        """
        ...

    def scrollContentsBy(self, dx: int, dy: int) -> None:
        """
        **[override virtual protected] void QColumnView::scrollContentsBy(int dx , int dy )**

        Reimplements: **QAbstractScrollArea::scrollContentsBy** (int dx, int dy).
        """
        ...

    def scrollTo(
        self,
        index: PySide2.QtCore.QModelIndex,
        hint: PySide2.QtWidgets.QAbstractItemView.ScrollHint = ...,
    ) -> None:
        """
        **[override virtual] void QColumnView::scrollTo(const QModelIndex & index , QAbstractItemView::ScrollHint hint = EnsureVisible)**

        Reimplements: **QAbstractItemView::scrollTo** (const QModelIndex &index, QAbstractItemView::ScrollHint hint).
        """
        ...

    def selectAll(self) -> None:
        """
        **[override virtual] void QColumnView::selectAll()**

        Reimplements: **QAbstractItemView::selectAll** ().
        """
        ...

    def setColumnWidths(self, list: typing.Sequence) -> None:
        """
        **void QColumnView::setColumnWidths(const QList<int> & list )**

        Sets the column widths to the values given in the **list**. Extra values in the list are kept and used when the columns are created.

        If list contains too few values, only width of the rest of the columns will not be modified.

        **See also** **columnWidths** () and **createColumn** ().
        """
        ...

    def setModel(self, model: PySide2.QtCore.QAbstractItemModel) -> None:
        """
        **[override virtual] void QColumnView::setModel(QAbstractItemModel * model )**

        Reimplements: **QAbstractItemView::setModel** (QAbstractItemModel *model).
        """
        ...

    def setPreviewWidget(self, widget: PySide2.QtWidgets.QWidget) -> None:
        """
        **void QColumnView::setPreviewWidget(QWidget * widget )**

        Sets the preview **widget**.

        The **widget** becomes a child of the column view, and will be destroyed when the column area is deleted or when a new widget is set.

        **See also** **previewWidget** () and **updatePreviewWidget** ().
        """
        ...

    def setResizeGripsVisible(self, visible: bool) -> None:
        """
        **resizeGripsVisible : bool**

        This property holds the way to specify if the list views gets resize grips or not

        By default, `visible` is set to true

        **Access functions:**

        bool **resizeGripsVisible** () const
        void **setResizeGripsVisible** (bool **visible** )

        **See also** **setRootIndex** ().

        **Member Function Documentation**
        """
        ...

    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None:
        """
        **[override virtual] void QColumnView::setRootIndex(const QModelIndex & index )**

        Reimplements: **QAbstractItemView::setRootIndex** (const QModelIndex &index).
        """
        ...

    def setSelection(
        self,
        rect: PySide2.QtCore.QRect,
        command: PySide2.QtCore.QItemSelectionModel.SelectionFlags,
    ) -> None:
        """
        **[override virtual protected] void QColumnView::setSelection(const QRect & rect , QItemSelectionModel::SelectionFlags command )**

        Reimplements: **QAbstractItemView::setSelection** (const QRect &rect, QItemSelectionModel::SelectionFlags flags).
        """
        ...

    def setSelectionModel(
        self, selectionModel: PySide2.QtCore.QItemSelectionModel
    ) -> None:
        """
        **[override virtual] void QColumnView::setSelectionModel(QItemSelectionModel * newSelectionModel )**

        Reimplements: **QAbstractItemView::setSelectionModel** (QItemSelectionModel *selectionModel).
        """
        ...

    def sizeHint(self) -> PySide2.QtCore.QSize:
        """
        **[override virtual] QSize QColumnView::sizeHint() const**

        Reimplements: **QAbstractScrollArea::sizeHint** () const.
        """
        ...

    def verticalOffset(self) -> int:
        """
        **[override virtual protected] int QColumnView::verticalOffset() const**

        Reimplements: **QAbstractItemView::verticalOffset** () const.
        """
        ...

    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect:
        """
        **[override virtual] QRect QColumnView::visualRect(const QModelIndex & index ) const**

        Reimplements: **QAbstractItemView::visualRect** (const QModelIndex &index) const.
        """
        ...

    def visualRegionForSelection(
        self, selection: PySide2.QtCore.QItemSelection
    ) -> PySide2.QtGui.QRegion:
        """
        **[override virtual protected] QRegion QColumnView::visualRegionForSelection(const QItemSelection & selection ) const**

        Reimplements: **QAbstractItemView::visualRegionForSelection** (const QItemSelection &selection) const.
        """
        ...

    @property
    def updatePreviewWidget(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QColumnView::updatePreviewWidget(const QModelIndex & index )**

        This signal is emitted when the preview widget should be updated to provide rich information about **index**

        **See also** **previewWidget** ().
        """
        ...
