"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QToolTip(object):
    """
    **Detailed Description**

    The tip is a short piece of text reminding the user of the widget's function. It is drawn immediately below the given position in a distinctive black-on-yellow color combination. The tip can be any **rich text**  formatted string.

    Rich text displayed in a tool tip is implicitly word-wrapped unless specified differently with `<p style='white-space:pre'>`.

    The simplest and most common way to set a widget's tool tip is by calling its **QWidget::setToolTip** () function.

    It is also possible to show different tool tips for different regions of a widget, by using a **QHelpEvent**  of type **QEvent::ToolTip** . Intercept the help event in your widget's **event()**  function and call **QToolTip::showText** () with the text you want to display. The **Tooltips**  example illustrates this technique.

    If you are calling **QToolTip::hideText** (), or **QToolTip::showText** () with an empty string, as a result of a **ToolTip** -event you should also call **ignore()**  on the event, to signal that you don't want to start any tooltip specific modes.

    Note that, if you want to show tooltips in an item view, the model/view architecture provides functionality to set an item's tool tip; e.g., the **QTableWidgetItem::setToolTip** () function. However, if you want to provide custom tool tips in an item view, you must intercept the help event in the **QAbstractItemView::viewportEvent** () function and handle it yourself.

    The default tool tip color and font can be customized with **setPalette** () and **setFont** (). When a tooltip is currently on display, **isVisible** () returns `true` and **text** () the currently visible text.

    **Note:** Tool tips use the inactive color group of **QPalette** , because tool tips are not active windows.

    **See also** **QWidget::toolTip** , **QAction::toolTip** , and **Tool Tips Example** .
    """

    @staticmethod
    def font() -> PySide2.QtGui.QFont:
        """
        **[static] QFont QToolTip::font()**

        Returns the font used to render tooltips.

        This function was introduced in Qt 4.2.

        **See also** **setFont** ().
        """
        ...

    @staticmethod
    def hideText() -> None:
        """
        **[static] void QToolTip::hideText()**

        Hides the tool tip. This is the same as calling **showText** () with an empty string.

        This function was introduced in Qt 4.2.

        **See also** **showText** ().
        """
        ...

    @staticmethod
    def isVisible() -> bool:
        """
        **[static] bool QToolTip::isVisible()**

        Returns `true` if this tooltip is currently shown.

        This function was introduced in Qt 4.4.

        **See also** **showText** ().
        """
        ...

    @staticmethod
    def palette() -> PySide2.QtGui.QPalette:
        """
        **[static] QPalette QToolTip::palette()**

        Returns the palette used to render tooltips.

        **Note:** Tool tips use the inactive color group of **QPalette** , because tool tips are not active windows.

        **See also** **setPalette** ().
        """
        ...

    @staticmethod
    def setFont(arg__1: PySide2.QtGui.QFont) -> None:
        """
        **[static] void QToolTip::setFont(const QFont & font )**

        Sets the **font** used to render tooltips.

        This function was introduced in Qt 4.2.

        **See also** **font** ().
        """
        ...

    @staticmethod
    def setPalette(arg__1: PySide2.QtGui.QPalette) -> None:
        """
        **[static] void QToolTip::setPalette(const QPalette & palette )**

        Sets the **palette** used to render tooltips.

        **Note:** Tool tips use the inactive color group of **QPalette** , because tool tips are not active windows.

        This function was introduced in Qt 4.2.

        **See also** **palette** ().
        """
        ...

    @typing.overload
    @staticmethod
    def showText(
        pos: PySide2.QtCore.QPoint,
        text: str,
        w: PySide2.QtWidgets.QWidget,
        rect: PySide2.QtCore.QRect,
    ) -> None:
        """
        **[static] void QToolTip::showText(const QPoint & pos , const QString & text , QWidget * w , const QRect & rect )**

        Shows **text** as a tool tip, with the global position **pos** as the point of interest. The tool tip will be shown with a platform specific offset from this point of interest.

        If you specify a non-empty rect the tip will be hidden as soon as you move your cursor out of this area.

        The **rect** is in the coordinates of the widget you specify with **w**. If the **rect** is not empty you must specify a widget. Otherwise this argument can be `nullptr` but it is used to determine the appropriate screen on multi-head systems.

        If **text** is empty the tool tip is hidden. If the text is the same as the currently shown tooltip, the tip will **not** move. You can force moving by first hiding the tip with an empty text, and then showing the new tip at the new position.
        """
        ...

    @typing.overload
    @staticmethod
    def showText(
        pos: PySide2.QtCore.QPoint,
        text: str,
        w: PySide2.QtWidgets.QWidget,
        rect: PySide2.QtCore.QRect,
        msecShowTime: int,
    ) -> None:
        """
        **[static] void QToolTip::showText(const QPoint & pos , const QString & text , QWidget * w , const QRect & rect )**

        Shows **text** as a tool tip, with the global position **pos** as the point of interest. The tool tip will be shown with a platform specific offset from this point of interest.

        If you specify a non-empty rect the tip will be hidden as soon as you move your cursor out of this area.

        The **rect** is in the coordinates of the widget you specify with **w**. If the **rect** is not empty you must specify a widget. Otherwise this argument can be `nullptr` but it is used to determine the appropriate screen on multi-head systems.

        If **text** is empty the tool tip is hidden. If the text is the same as the currently shown tooltip, the tip will **not** move. You can force moving by first hiding the tip with an empty text, and then showing the new tip at the new position.
        """
        ...

    @typing.overload
    @staticmethod
    def showText(
        pos: PySide2.QtCore.QPoint,
        text: str,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        **[static] void QToolTip::showText(const QPoint & pos , const QString & text , QWidget * w , const QRect & rect )**

        Shows **text** as a tool tip, with the global position **pos** as the point of interest. The tool tip will be shown with a platform specific offset from this point of interest.

        If you specify a non-empty rect the tip will be hidden as soon as you move your cursor out of this area.

        The **rect** is in the coordinates of the widget you specify with **w**. If the **rect** is not empty you must specify a widget. Otherwise this argument can be `nullptr` but it is used to determine the appropriate screen on multi-head systems.

        If **text** is empty the tool tip is hidden. If the text is the same as the currently shown tooltip, the tip will **not** move. You can force moving by first hiding the tip with an empty text, and then showing the new tip at the new position.
        """
        ...

    @staticmethod
    def text() -> str:
        """
        **[static] QString QToolTip::text()**

        Returns the tooltip text, if a tooltip is visible, or an empty string if a tooltip is not visible.

        This function was introduced in Qt 4.4.
        """
        ...
