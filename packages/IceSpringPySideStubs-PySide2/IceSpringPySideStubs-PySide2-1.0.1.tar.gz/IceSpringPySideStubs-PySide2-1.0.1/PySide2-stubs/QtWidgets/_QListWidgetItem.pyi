"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QListWidgetItem(object):
    """
    **Detailed Description**

    A QListWidgetItem represents a single item in a **QListWidget** . Each item can hold several pieces of information, and will display them appropriately.

    The item view convenience classes use a classic item-based interface rather than a pure model/view approach. For a more flexible list view widget, consider using the **QListView**  class with a standard model.

    List items can be inserted automatically into a list, when they are constructed, by specifying the list widget:

    new **QListWidgetItem** (tr("Hazel"), listWidget);

    Alternatively, list items can also be created without a parent widget, and later inserted into a list using **QListWidget::insertItem** ().

    List items are typically used to display **text** () and an **icon** (). These are set with the **setText** () and **setIcon** () functions. The appearance of the text can be customized with **setFont** (), **setForeground** (), and **setBackground** (). Text in list items can be aligned using the **setTextAlignment** () function. Tooltips, status tips and "What\'s This?" help can be added to list items with **setToolTip** (), **setStatusTip** (), and **setWhatsThis** ().

    By default, items are enabled, selectable, checkable, and can be the source of drag and drop operations.

    Each item\'s flags can be changed by calling **setFlags** () with the appropriate value (see **Qt::ItemFlags** ). Checkable items can be checked, unchecked and partially checked with the **setCheckState** () function. The corresponding **checkState** () function indicates the item\'s current check state.

    The **isHidden** () function can be used to determine whether the item is hidden. To hide an item, use **setHidden** ().

    **Subclassing**

    When subclassing QListWidgetItem to provide custom items, it is possible to define new types for them enabling them to be distinguished from standard items. For subclasses that require this feature, ensure that you call the base class constructor with a new type value equal to or greater than **UserType** , within **your** constructor.

    **See also** **QListWidget** , **Model/View Programming** , **QTreeWidgetItem** , and **QTableWidgetItem** .
    """

    Type: QListWidgetItem = ...
    UserType: QListWidgetItem = ...

    class ItemType(object):
        Type: QListWidgetItem.ItemType = ...
        UserType: QListWidgetItem.ItemType = ...

    @typing.overload
    def __init__(
        self,
        icon: PySide2.QtGui.QIcon,
        text: str,
        listview: typing.Optional[PySide2.QtWidgets.QListWidget] = ...,
        type: int = ...,
    ) -> None:
        """
        **QListWidgetItem::QListWidgetItem(QListWidget * parent = nullptr, int type = Type)**

        Constructs an empty list widget item of the specified **type** with the given **parent**. If **parent** is not specified, the item will need to be inserted into a list widget with **QListWidget::insertItem** ().

        This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the `'<'` operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use **QListWidget::insertItem** () instead.

        **See also** **type** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        listview: typing.Optional[PySide2.QtWidgets.QListWidget] = ...,
        type: int = ...,
    ) -> None:
        """
        **QListWidgetItem::QListWidgetItem(QListWidget * parent = nullptr, int type = Type)**

        Constructs an empty list widget item of the specified **type** with the given **parent**. If **parent** is not specified, the item will need to be inserted into a list widget with **QListWidget::insertItem** ().

        This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the `'<'` operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use **QListWidget::insertItem** () instead.

        **See also** **type** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtWidgets.QListWidgetItem) -> None:
        """
        **QListWidgetItem::QListWidgetItem(QListWidget * parent = nullptr, int type = Type)**

        Constructs an empty list widget item of the specified **type** with the given **parent**. If **parent** is not specified, the item will need to be inserted into a list widget with **QListWidget::insertItem** ().

        This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the `'<'` operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use **QListWidget::insertItem** () instead.

        **See also** **type** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        text: str,
        listview: typing.Optional[PySide2.QtWidgets.QListWidget] = ...,
        type: int = ...,
    ) -> None:
        """
        **QListWidgetItem::QListWidgetItem(QListWidget * parent = nullptr, int type = Type)**

        Constructs an empty list widget item of the specified **type** with the given **parent**. If **parent** is not specified, the item will need to be inserted into a list widget with **QListWidget::insertItem** ().

        This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the `'<'` operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use **QListWidget::insertItem** () instead.

        **See also** **type** ().
        """
        ...

    def __lshift__(self, out: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(self, in_: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream:
        ...

    def background(self) -> PySide2.QtGui.QBrush:
        """
        **QBrush QListWidgetItem::background() const**

        Returns the brush used to display the list item's background.

        This function was introduced in Qt 4.2.

        **See also** **setBackground** () and **foreground** ().
        """
        ...

    def backgroundColor(self) -> PySide2.QtGui.QColor:
        ...

    def checkState(self) -> PySide2.QtCore.Qt.CheckState:
        """
        **Qt::CheckState QListWidgetItem::checkState() const**

        Returns the checked state of the list item (see **Qt::CheckState** ).

        **See also** **setCheckState** () and **flags** ().
        """
        ...

    def clone(self) -> PySide2.QtWidgets.QListWidgetItem:
        """
        **[virtual] QListWidgetItem *QListWidgetItem::clone() const**

        Creates an exact copy of the item.
        """
        ...

    def data(self, role: int) -> typing.Any:
        """
        **[virtual] QVariant QListWidgetItem::data(int role ) const**

        Returns the item's data for a given **role**. Reimplement this function if you need extra roles or special behavior for certain roles.

        **See also** **Qt::ItemDataRole**  and **setData** ().
        """
        ...

    def flags(self) -> PySide2.QtCore.Qt.ItemFlags:
        """
        **Qt::ItemFlags QListWidgetItem::flags() const**

        Returns the item flags for this item (see **Qt::ItemFlags** ).

        **See also** **setFlags** ().
        """
        ...

    def font(self) -> PySide2.QtGui.QFont:
        """
        **QFont QListWidgetItem::font() const**

        Returns the font used to display this list item's text.

        **See also** **setFont** ().
        """
        ...

    def foreground(self) -> PySide2.QtGui.QBrush:
        """
        **QBrush QListWidgetItem::foreground() const**

        Returns the brush used to display the list item's foreground (e.g. text).

        This function was introduced in Qt 4.2.

        **See also** **setForeground** () and **background** ().
        """
        ...

    def icon(self) -> PySide2.QtGui.QIcon:
        """
        **QIcon QListWidgetItem::icon() const**

        Returns the list item's icon.

        **See also** **setIcon** () and **iconSize** .
        """
        ...

    def isHidden(self) -> bool:
        """
        **bool QListWidgetItem::isHidden() const**

        Returns `true` if the item is hidden; otherwise returns `false`.

        This function was introduced in Qt 4.2.

        **See also** **setHidden** ().
        """
        ...

    def isSelected(self) -> bool:
        """
        **bool QListWidgetItem::isSelected() const**

        Returns `true` if the item is selected; otherwise returns `false`.

        This function was introduced in Qt 4.2.

        **See also** **setSelected** ().
        """
        ...

    def listWidget(self) -> PySide2.QtWidgets.QListWidget:
        """
        **QListWidget *QListWidgetItem::listWidget() const**

        Returns the list widget containing the item.
        """
        ...

    def read(self, in_: PySide2.QtCore.QDataStream) -> None:
        """
        **[virtual] void QListWidgetItem::read(QDataStream & in )**

        Reads the item from stream **in**.

        **See also** **write** ().
        """
        ...

    def setBackground(self, brush: PySide2.QtGui.QBrush) -> None:
        """
        **void QListWidgetItem::setBackground(const QBrush & brush )**

        Sets the background brush of the list item to the given **brush**. Setting a default-constructed brush will let the view use the default color from the style.

        This function was introduced in Qt 4.2.

        **See also** **background** () and **setForeground** ().
        """
        ...

    def setBackgroundColor(self, color: PySide2.QtGui.QColor) -> None:
        ...

    def setCheckState(self, state: PySide2.QtCore.Qt.CheckState) -> None:
        """
        **void QListWidgetItem::setCheckState(Qt::CheckState state )**

        Sets the check state of the list item to **state**.

        **See also** **checkState** ().
        """
        ...

    def setData(self, role: int, value: typing.Any) -> None:
        """
        **[virtual] void QListWidgetItem::setData(int role , const QVariant & value )**

        Sets the data for a given **role** to the given **value**. Reimplement this function if you need extra roles or special behavior for certain roles.

        **Note:** The default implementation treats **Qt::EditRole**  and **Qt::DisplayRole**  as referring to the same data.

        **See also** **Qt::ItemDataRole**  and **data** ().
        """
        ...

    def setFlags(self, flags: PySide2.QtCore.Qt.ItemFlags) -> None:
        """
        **void QListWidgetItem::setFlags(Qt::ItemFlags flags )**

        Sets the item flags for the list item to **flags**.

        **See also** **flags** () and **Qt::ItemFlags** .
        """
        ...

    def setFont(self, font: PySide2.QtGui.QFont) -> None:
        """
        **void QListWidgetItem::setFont(const QFont & font )**

        Sets the font used when painting the item to the given **font**.

        **See also** **font** ().
        """
        ...

    def setForeground(self, brush: PySide2.QtGui.QBrush) -> None:
        """
        **void QListWidgetItem::setForeground(const QBrush & brush )**

        Sets the foreground brush of the list item to the given **brush**. Setting a default-constructed brush will let the view use the default color from the style.

        This function was introduced in Qt 4.2.

        **See also** **foreground** () and **setBackground** ().
        """
        ...

    def setHidden(self, hide: bool) -> None:
        """
        **void QListWidgetItem::setHidden(bool hide )**

        Hides the item if **hide** is true; otherwise shows the item.

        This function was introduced in Qt 4.2.

        **See also** **isHidden** ().
        """
        ...

    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None:
        """
        **void QListWidgetItem::setIcon(const QIcon & icon )**

        Sets the icon for the list item to the given **icon**.

        **See also** **icon** (), **text** (), and **iconSize** .
        """
        ...

    def setSelected(self, select: bool) -> None:
        """
        **void QListWidgetItem::setSelected(bool select )**

        Sets the selected state of the item to **select**.

        This function was introduced in Qt 4.2.

        **See also** **isSelected** ().
        """
        ...

    def setSizeHint(self, size: PySide2.QtCore.QSize) -> None:
        """
        **void QListWidgetItem::setSizeHint(const QSize & size )**

        Sets the size hint for the list item to be **size**. If no size hint is set or **size** is invalid, the item delegate will compute the size hint based on the item data.

        This function was introduced in Qt 4.1.

        **See also** **sizeHint** ().
        """
        ...

    def setStatusTip(self, statusTip: str) -> None:
        """
        **void QListWidgetItem::setStatusTip(const QString & statusTip )**

        Sets the status tip for the list item to the text specified by **statusTip**. **QListWidget**  mouseTracking needs to be enabled for this feature to work.

        **See also** **statusTip** (), **setToolTip** (), **setWhatsThis** (), and **QWidget::setMouseTracking** ().
        """
        ...

    def setText(self, text: str) -> None:
        """
        **void QListWidgetItem::setText(const QString & text )**

        Sets the text for the list widget item's to the given **text**.

        **See also** **text** ().
        """
        ...

    def setTextAlignment(self, alignment: int) -> None:
        """
        **void QListWidgetItem::setTextAlignment(int alignment )**

        Sets the list item's text alignment to **alignment**.

        **See also** **textAlignment** () and **Qt::AlignmentFlag** .
        """
        ...

    def setTextColor(self, color: PySide2.QtGui.QColor) -> None:
        ...

    def setToolTip(self, toolTip: str) -> None:
        """
        **void QListWidgetItem::setToolTip(const QString & toolTip )**

        Sets the tooltip for the list item to the text specified by **toolTip**.

        **See also** **toolTip** (), **setStatusTip** (), and **setWhatsThis** ().
        """
        ...

    def setWhatsThis(self, whatsThis: str) -> None:
        """
        **void QListWidgetItem::setWhatsThis(const QString & whatsThis )**

        Sets the "What\'s This?" help for the list item to the text specified by **whatsThis**.

        **See also** **whatsThis** (), **setStatusTip** (), and **setToolTip** ().
        """
        ...

    def sizeHint(self) -> PySide2.QtCore.QSize:
        """
        **QSize QListWidgetItem::sizeHint() const**

        Returns the size hint set for the list item.

        This function was introduced in Qt 4.1.

        **See also** **setSizeHint** ().
        """
        ...

    def statusTip(self) -> str:
        """
        **QString QListWidgetItem::statusTip() const**

        Returns the list item's status tip.

        **See also** **setStatusTip** ().
        """
        ...

    def text(self) -> str:
        """
        **QString QListWidgetItem::text() const**

        Returns the list item's text.

        **See also** **setText** ().
        """
        ...

    def textAlignment(self) -> int:
        """
        **int QListWidgetItem::textAlignment() const**

        Returns the text alignment for the list item.

        **See also** **setTextAlignment** () and **Qt::AlignmentFlag** .
        """
        ...

    def textColor(self) -> PySide2.QtGui.QColor:
        ...

    def toolTip(self) -> str:
        """
        **QString QListWidgetItem::toolTip() const**

        Returns the list item's tooltip.

        **See also** **setToolTip** (), **statusTip** (), and **whatsThis** ().
        """
        ...

    def type(self) -> int:
        """
        **int QListWidgetItem::type() const**

        Returns the type passed to the **QListWidgetItem**  constructor.
        """
        ...

    def whatsThis(self) -> str:
        """
        **QString QListWidgetItem::whatsThis() const**

        Returns the list item\'s "What\'s This?" help text.

        **See also** **setWhatsThis** (), **statusTip** (), and **toolTip** ().
        """
        ...

    def write(self, out: PySide2.QtCore.QDataStream) -> None:
        """
        **[virtual] void QListWidgetItem::write(QDataStream & out ) const**

        Writes the item to stream **out**.

        **See also** **read** ().
        """
        ...
