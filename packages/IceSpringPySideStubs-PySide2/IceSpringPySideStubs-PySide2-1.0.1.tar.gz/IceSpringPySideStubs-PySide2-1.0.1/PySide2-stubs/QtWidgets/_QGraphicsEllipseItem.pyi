"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QGraphicsEllipseItem(PySide2.QtWidgets.QAbstractGraphicsShapeItem):
    """
    **Detailed Description**

    QGraphicsEllipseItem respresents an ellipse with a fill and an outline, and you can also use it for ellipse segments (see **startAngle** (), **spanAngle** ()).

    ![](images/graphicsview-ellipseitem.png)![](images/graphicsview-ellipseitem-pie.png)

    To set the item's ellipse, pass a **QRectF**  to QGraphicsEllipseItem's constructor, or call **setRect** (). The **rect** () function returns the current ellipse geometry.

    QGraphicsEllipseItem uses the rect and the pen width to provide a reasonable implementation of **boundingRect** (), **shape** (), and **contains** (). The **paint** () function draws the ellipse using the item's associated pen and brush, which you can set by calling **setPen** () and **setBrush** ().

    **See also** **QGraphicsPathItem** , **QGraphicsRectItem** , **QGraphicsPolygonItem** , **QGraphicsTextItem** , **QGraphicsLineItem** , **QGraphicsPixmapItem** , and **Graphics View Framework** .
    """

    @typing.overload
    def __init__(
        self, parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...
    ) -> None:
        """
        **QGraphicsEllipseItem::QGraphicsEllipseItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsEllipseItem. **parent** is passed to **QAbstractGraphicsShapeItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        rect: PySide2.QtCore.QRectF,
        parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...,
    ) -> None:
        """
        **QGraphicsEllipseItem::QGraphicsEllipseItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsEllipseItem. **parent** is passed to **QAbstractGraphicsShapeItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        x: float,
        y: float,
        w: float,
        h: float,
        parent: typing.Optional[PySide2.QtWidgets.QGraphicsItem] = ...,
    ) -> None:
        """
        **QGraphicsEllipseItem::QGraphicsEllipseItem(QGraphicsItem * parent = nullptr)**

        Constructs a QGraphicsEllipseItem. **parent** is passed to **QAbstractGraphicsShapeItem** 's constructor.

        **See also** **QGraphicsScene::addItem** ().
        """
        ...

    def boundingRect(self) -> PySide2.QtCore.QRectF:
        """
        **[override virtual] QRectF QGraphicsEllipseItem::boundingRect() const**

        Reimplements: **QGraphicsItem::boundingRect** () const.
        """
        ...

    def contains(self, point: PySide2.QtCore.QPointF) -> bool:
        """
        **[override virtual] bool QGraphicsEllipseItem::contains(const QPointF & point ) const**

        Reimplements: **QGraphicsItem::contains** (const QPointF &point) const.
        """
        ...

    def extension(self, variant: typing.Any) -> typing.Any:
        ...

    def isObscuredBy(self, item: PySide2.QtWidgets.QGraphicsItem) -> bool:
        """
        **[override virtual] bool QGraphicsEllipseItem::isObscuredBy(const QGraphicsItem * item ) const**

        Reimplements: **QAbstractGraphicsShapeItem::isObscuredBy** (const QGraphicsItem *item) const.
        """
        ...

    def opaqueArea(self) -> PySide2.QtGui.QPainterPath:
        """
        **[override virtual] QPainterPath QGraphicsEllipseItem::opaqueArea() const**

        Reimplements: **QAbstractGraphicsShapeItem::opaqueArea** () const.
        """
        ...

    def paint(
        self,
        painter: PySide2.QtGui.QPainter,
        option: PySide2.QtWidgets.QStyleOptionGraphicsItem,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        **[override virtual] void QGraphicsEllipseItem::paint(QPainter * painter , const QStyleOptionGraphicsItem * option , QWidget * widget = nullptr)**

        Reimplements: **QGraphicsItem::paint** (QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget).
        """
        ...

    def rect(self) -> PySide2.QtCore.QRectF:
        """
        **QRectF QGraphicsEllipseItem::rect() const**

        Returns the item's ellipse geometry as a **QRectF** .

        **See also** **setRect** () and **QPainter::drawEllipse** ().
        """
        ...

    @typing.overload
    def setRect(self, rect: PySide2.QtCore.QRectF) -> None:
        """
        **void QGraphicsEllipseItem::setRect(const QRectF & rect )**

        Sets the item's ellipse geometry to **rect**. The rectangle's left edge defines the left edge of the ellipse, and the rectangle's top edge describes the top of the ellipse. The height and width of the rectangle describe the height and width of the ellipse.

        **See also** **rect** () and **QPainter::drawEllipse** ().
        """
        ...

    @typing.overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None:
        """
        **void QGraphicsEllipseItem::setRect(const QRectF & rect )**

        Sets the item's ellipse geometry to **rect**. The rectangle's left edge defines the left edge of the ellipse, and the rectangle's top edge describes the top of the ellipse. The height and width of the rectangle describe the height and width of the ellipse.

        **See also** **rect** () and **QPainter::drawEllipse** ().
        """
        ...

    def setSpanAngle(self, angle: int) -> None:
        """
        **void QGraphicsEllipseItem::setSpanAngle(int angle )**

        Sets the span angle for an ellipse segment to **angle** , which is in 16ths of a degree. This angle is used together with **startAngle** () to represent an ellipse segment (a pie). By default, the span angle is 5760 (360 * 16, a full ellipse).

        **See also** **spanAngle** (), **setStartAngle** (), and **QPainter::drawPie** ().
        """
        ...

    def setStartAngle(self, angle: int) -> None:
        """
        **void QGraphicsEllipseItem::setStartAngle(int angle )**

        Sets the start angle for an ellipse segment to **angle** , which is in 16ths of a degree. This angle is used together with **spanAngle** () for representing an ellipse segment (a pie). By default, the start angle is 0.

        **See also** **startAngle** (), **setSpanAngle** (), and **QPainter::drawPie** ().
        """
        ...

    def shape(self) -> PySide2.QtGui.QPainterPath:
        """
        **[override virtual] QPainterPath QGraphicsEllipseItem::shape() const**

        Reimplements: **QGraphicsItem::shape** () const.
        """
        ...

    def spanAngle(self) -> int:
        """
        **int QGraphicsEllipseItem::spanAngle() const**

        Returns the span angle of an ellipse segment in 16ths of a degree. This angle is used together with **startAngle** () for representing an ellipse segment (a pie). By default, this function returns 5760 (360 * 16, a full ellipse).

        **See also** **setSpanAngle** () and **startAngle** ().
        """
        ...

    def startAngle(self) -> int:
        """
        **int QGraphicsEllipseItem::startAngle() const**

        Returns the start angle for an ellipse segment in 16ths of a degree. This angle is used together with **spanAngle** () for representing an ellipse segment (a pie). By default, the start angle is 0.

        **See also** **setStartAngle** () and **spanAngle** ().
        """
        ...

    def type(self) -> int:
        """
        **[override virtual] int QGraphicsEllipseItem::type() const**

        Reimplements: **QGraphicsItem::type** () const.
        """
        ...
