"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtNetwork
import PySide2.QtWebEngineCore

bytes = str


class QWebEngineUrlScheme(object):
    """
    **Detailed Description**

    A web engine URL scheme describes a URL scheme from the web engine\'s perspective, specifying how URLs of this scheme should be parsed, and which security restrictions should be placed on resources originating from such URLs.

    Custom URL schemes must be configured early at application startup, before creating any Qt WebEngine classes. In general this means the schemes need to be configured before a **QGuiApplication**  or **QApplication**  instance is created.

    Every registered scheme configuration applies globally to all profiles.

    int main(int argc, char **argv)
        {
            **QWebEngineUrlScheme**  scheme("myscheme");
            scheme.setSyntax(**QWebEngineUrlScheme** ::Syntax::HostAndPort);
            scheme.setDefaultPort(2345);
            scheme.setFlags(**QWebEngineUrlScheme** ::SecureScheme);
            **QWebEngineUrlScheme** ::registerScheme(scheme);
            ...
        }

    To actually make use of the custom URL scheme, a **QWebEngineUrlSchemeHandler**  must be created and registered in a profile.

    **See also** **QWebEngineUrlSchemeHandler** .
    """

    PortUnspecified: QWebEngineUrlScheme = ...
    SecureScheme: QWebEngineUrlScheme = ...
    LocalScheme: QWebEngineUrlScheme = ...
    LocalAccessAllowed: QWebEngineUrlScheme = ...
    NoAccessAllowed: QWebEngineUrlScheme = ...
    ServiceWorkersAllowed: QWebEngineUrlScheme = ...
    ViewSourceAllowed: QWebEngineUrlScheme = ...
    ContentSecurityPolicyIgnored: QWebEngineUrlScheme = ...
    CorsEnabled: QWebEngineUrlScheme = ...

    class Flag(object):
        SecureScheme: QWebEngineUrlScheme.Flag = ...
        LocalScheme: QWebEngineUrlScheme.Flag = ...
        LocalAccessAllowed: QWebEngineUrlScheme.Flag = ...
        NoAccessAllowed: QWebEngineUrlScheme.Flag = ...
        ServiceWorkersAllowed: QWebEngineUrlScheme.Flag = ...
        ViewSourceAllowed: QWebEngineUrlScheme.Flag = ...
        ContentSecurityPolicyIgnored: QWebEngineUrlScheme.Flag = ...
        CorsEnabled: QWebEngineUrlScheme.Flag = ...

    class Flags(object):
        ...

    class SpecialPort(object):
        PortUnspecified: QWebEngineUrlScheme.SpecialPort = ...

    class Syntax(object):
        HostPortAndUserInformation: QWebEngineUrlScheme.Syntax = ...
        HostAndPort: QWebEngineUrlScheme.Syntax = ...
        Host: QWebEngineUrlScheme.Syntax = ...
        Path: QWebEngineUrlScheme.Syntax = ...

    @typing.overload
    def __init__(self) -> None:
        """
        **QWebEngineUrlScheme::QWebEngineUrlScheme()**

        Constructs a web engine URL scheme with default values.
        """
        ...

    @typing.overload
    def __init__(self, name: PySide2.QtCore.QByteArray) -> None:
        """
        **QWebEngineUrlScheme::QWebEngineUrlScheme()**

        Constructs a web engine URL scheme with default values.
        """
        ...

    @typing.overload
    def __init__(self, that: PySide2.QtWebEngineCore.QWebEngineUrlScheme) -> None:
        """
        **QWebEngineUrlScheme::QWebEngineUrlScheme()**

        Constructs a web engine URL scheme with default values.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def defaultPort(self) -> int:
        """
        **int QWebEngineUrlScheme::defaultPort() const**

        Returns the default port of this URL scheme.

        The default value is `PortUnspecified`.

        **See also** **setDefaultPort** ().
        """
        ...

    def flags(self) -> PySide2.QtWebEngineCore.QWebEngineUrlScheme.Flags:
        """
        **QWebEngineUrlScheme::Flags QWebEngineUrlScheme::flags() const**

        Returns the flags for this URL scheme.

        The default value is an empty set of flags.

        **See also** **Flags**  and **setFlags** ().
        """
        ...

    def name(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QWebEngineUrlScheme::name() const**

        Returns the name of this URL scheme.

        The default value is an empty string.

        **See also** **setName** ().
        """
        ...

    @staticmethod
    def registerScheme(scheme: PySide2.QtWebEngineCore.QWebEngineUrlScheme) -> None:
        """
        **[static] void QWebEngineUrlScheme::registerScheme(const QWebEngineUrlScheme & scheme )**

        Registers **scheme** with the web engine's URL parser and security model.

        It is recommended that all custom URL schemes are first registered with this function at application startup, even if the default options are to be used.

        **Warning:** This function must be called early at application startup, before creating any **WebEngine**  classes. Late calls will be ignored.

        **See also** **schemeByName** ().
        """
        ...

    @staticmethod
    def schemeByName(
        name: PySide2.QtCore.QByteArray,
    ) -> PySide2.QtWebEngineCore.QWebEngineUrlScheme:
        """
        **[static] QWebEngineUrlScheme QWebEngineUrlScheme::schemeByName(const QByteArray & name )**

        Returns the web engine URL scheme with the given **name** or the default-constructed scheme.

        **See also** **registerScheme** ().
        """
        ...

    def setDefaultPort(self, newValue: int) -> None:
        """
        **void QWebEngineUrlScheme::setDefaultPort(int newValue )**

        Sets the default port of this URL scheme to **newValue**.

        **See also** **defaultPort** ().
        """
        ...

    def setFlags(
        self, newValue: PySide2.QtWebEngineCore.QWebEngineUrlScheme.Flags
    ) -> None:
        """
        **void QWebEngineUrlScheme::setFlags(QWebEngineUrlScheme::Flags newValue )**

        Sets the flags for this URL scheme to **newValue**.

        **See also** **Flags**  and **flags** ().
        """
        ...

    def setName(self, newValue: PySide2.QtCore.QByteArray) -> None:
        """
        **void QWebEngineUrlScheme::setName(const QByteArray & newValue )**

        Sets the name of this URL scheme to **newValue**.

        **Note:** The name is automatically converted to lower case.

        **See also** **name** ().
        """
        ...

    def setSyntax(
        self, newValue: PySide2.QtWebEngineCore.QWebEngineUrlScheme.Syntax
    ) -> None:
        """
        **void QWebEngineUrlScheme::setSyntax(QWebEngineUrlScheme::Syntax newValue )**

        Sets the syntax type of this URL scheme to **newValue**.

        **See also** **Syntax**  and **syntax** ().
        """
        ...

    def syntax(self) -> PySide2.QtWebEngineCore.QWebEngineUrlScheme.Syntax:
        """
        **QWebEngineUrlScheme::Syntax QWebEngineUrlScheme::syntax() const**

        Returns the syntax type of this URL scheme.

        The default value is `Path`.

        **See also** **Syntax**  and **setSyntax** ().
        """
        ...
