"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QReadWriteLock(object):
    """
    **Detailed Description**

    A read-write lock is a synchronization tool for protecting resources that can be accessed for reading and writing. This type of lock is useful if you want to allow multiple threads to have simultaneous read-only access, but as soon as one thread wants to write to the resource, all other threads must be blocked until the writing is complete.

    In many cases, QReadWriteLock is a direct competitor to **QMutex** . QReadWriteLock is a good choice if there are many concurrent reads and writing occurs infrequently.

    Example:

    **QReadWriteLock**  lock;

        void ReaderThread::run()
        {
            ...
            lock.lockForRead();
            read_file();
            lock.unlock();
            ...
        }

        void WriterThread::run()
        {
            ...
            lock.lockForWrite();
            write_file();
            lock.unlock();
            ...
        }

    To ensure that writers aren't blocked forever by readers, readers attempting to obtain a lock will not succeed if there is a blocked writer waiting for access, even if the lock is currently only accessed by other readers. Also, if the lock is accessed by a writer and another writer comes in, that writer will have priority over any readers that might also be waiting.

    Like **QMutex** , a QReadWriteLock can be recursively locked by the same thread when constructed with **QReadWriteLock::Recursive**  as **QReadWriteLock::RecursionMode** . In such cases, **unlock** () must be called the same number of times **lockForWrite** () or **lockForRead** () was called. Note that the lock type cannot be changed when trying to lock recursively, i.e. it is not possible to lock for reading in a thread that already has locked for writing (and vice versa).

    **See also** **QReadLocker** , **QWriteLocker** , **QMutex** , and **QSemaphore** .
    """

    NonRecursive: QReadWriteLock = ...
    Recursive: QReadWriteLock = ...

    class RecursionMode(object):
        NonRecursive: QReadWriteLock.RecursionMode = ...
        Recursive: QReadWriteLock.RecursionMode = ...

    def __init__(
        self, recursionMode: PySide2.QtCore.QReadWriteLock.RecursionMode = ...
    ) -> None:
        """
        **QReadWriteLock::QReadWriteLock(QReadWriteLock::RecursionMode recursionMode = NonRecursive)**

        Constructs a QReadWriteLock object in the given **recursionMode**.

        The default recursion mode is **NonRecursive** .

        This function was introduced in Qt 4.4.

        **See also** **lockForRead** (), **lockForWrite** (), and **RecursionMode** .
        """
        ...

    def lockForRead(self) -> None:
        """
        **void QReadWriteLock::lockForRead()**

        Locks the lock for reading. This function will block the current thread if another thread has locked for writing.

        It is not possible to lock for read if the thread already has locked for write.

        **See also** **unlock** (), **lockForWrite** (), and **tryLockForRead** ().
        """
        ...

    def lockForWrite(self) -> None:
        """
        **void QReadWriteLock::lockForWrite()**

        Locks the lock for writing. This function will block the current thread if another thread (including the current) has locked for reading or writing (unless the lock has been created using the **QReadWriteLock::Recursive**  mode).

        It is not possible to lock for write if the thread already has locked for read.

        **See also** **unlock** (), **lockForRead** (), and **tryLockForWrite** ().
        """
        ...

    @typing.overload
    def tryLockForRead(self) -> bool:
        """
        **bool QReadWriteLock::tryLockForRead()**

        Attempts to lock for reading. If the lock was obtained, this function returns `true`, otherwise it returns `false` instead of waiting for the lock to become available, i.e. it does not block.

        The lock attempt will fail if another thread has locked for writing.

        If the lock was obtained, the lock must be unlocked with **unlock** () before another thread can successfully lock it for writing.

        It is not possible to lock for read if the thread already has locked for write.

        **See also** **unlock** () and **lockForRead** ().
        """
        ...

    @typing.overload
    def tryLockForRead(self, timeout: int) -> bool:
        """
        **bool QReadWriteLock::tryLockForRead()**

        Attempts to lock for reading. If the lock was obtained, this function returns `true`, otherwise it returns `false` instead of waiting for the lock to become available, i.e. it does not block.

        The lock attempt will fail if another thread has locked for writing.

        If the lock was obtained, the lock must be unlocked with **unlock** () before another thread can successfully lock it for writing.

        It is not possible to lock for read if the thread already has locked for write.

        **See also** **unlock** () and **lockForRead** ().
        """
        ...

    @typing.overload
    def tryLockForWrite(self) -> bool:
        """
        **bool QReadWriteLock::tryLockForWrite()**

        Attempts to lock for writing. If the lock was obtained, this function returns `true`; otherwise, it returns `false` immediately.

        The lock attempt will fail if another thread has locked for reading or writing.

        If the lock was obtained, the lock must be unlocked with **unlock** () before another thread can successfully lock it.

        It is not possible to lock for write if the thread already has locked for read.

        **See also** **unlock** () and **lockForWrite** ().
        """
        ...

    @typing.overload
    def tryLockForWrite(self, timeout: int) -> bool:
        """
        **bool QReadWriteLock::tryLockForWrite()**

        Attempts to lock for writing. If the lock was obtained, this function returns `true`; otherwise, it returns `false` immediately.

        The lock attempt will fail if another thread has locked for reading or writing.

        If the lock was obtained, the lock must be unlocked with **unlock** () before another thread can successfully lock it.

        It is not possible to lock for write if the thread already has locked for read.

        **See also** **unlock** () and **lockForWrite** ().
        """
        ...

    def unlock(self) -> None:
        """
        **void QReadWriteLock::unlock()**

        Unlocks the lock.

        Attempting to unlock a lock that is not locked is an error, and will result in program termination.

        **See also** **lockForRead** (), **lockForWrite** (), **tryLockForRead** (), and **tryLockForWrite** ().
        """
        ...
