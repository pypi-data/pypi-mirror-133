"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QItemSelectionRange(object):
    """
    **Detailed Description**

    A QItemSelectionRange contains information about a range of selected items in a model. A range of items is a contiguous array of model items, extending to cover a number of adjacent rows and columns with a common parent item; this can be visualized as a two-dimensional block of cells in a table. A selection range has a **top** (), **left** () a **bottom** (), **right** () and a **parent** ().

    The QItemSelectionRange class is one of the **Model/View Classes**  and is part of Qt's **model/view framework** .

    The model items contained in the selection range can be obtained using the **indexes** () function. Use **QItemSelectionModel::selectedIndexes** () to get a list of all selected items for a view.

    You can determine whether a given model item lies within a particular range by using the **contains** () function. Ranges can also be compared using the overloaded operators for equality and inequality, and the **intersects** () function allows you to determine whether two ranges overlap.

    **See also** **Model/View Programming** , **QAbstractItemModel** , **QItemSelection** , and **QItemSelectionModel** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QItemSelectionRange::QItemSelectionRange()**

        Constructs an empty selection range.
        """
        ...

    @typing.overload
    def __init__(self, index: PySide2.QtCore.QModelIndex) -> None:
        """
        **QItemSelectionRange::QItemSelectionRange()**

        Constructs an empty selection range.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QItemSelectionRange) -> None:
        """
        **QItemSelectionRange::QItemSelectionRange()**

        Constructs an empty selection range.
        """
        ...

    @typing.overload
    def __init__(
        self, topL: PySide2.QtCore.QModelIndex, bottomR: PySide2.QtCore.QModelIndex
    ) -> None:
        """
        **QItemSelectionRange::QItemSelectionRange()**

        Constructs an empty selection range.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def bottom(self) -> int:
        """
        **int QItemSelectionRange::bottom() const**

        Returns the row index corresponding to the lowermost selected row in the selection range.
        """
        ...

    def bottomRight(self) -> PySide2.QtCore.QPersistentModelIndex:
        """
        **const QPersistentModelIndex &QItemSelectionRange::bottomRight() const**

        Returns the index for the item located at the bottom-right corner of the selection range.

        **See also** **bottom** (), **right** (), and **topLeft** ().
        """
        ...

    @typing.overload
    def contains(self, index: PySide2.QtCore.QModelIndex) -> bool:
        """
        **bool QItemSelectionRange::contains(const QModelIndex & index ) const**

        Returns `true` if the model item specified by the **index** lies within the range of selected items; otherwise returns `false`.
        """
        ...

    @typing.overload
    def contains(
        self, row: int, column: int, parentIndex: PySide2.QtCore.QModelIndex
    ) -> bool:
        """
        **bool QItemSelectionRange::contains(const QModelIndex & index ) const**

        Returns `true` if the model item specified by the **index** lies within the range of selected items; otherwise returns `false`.
        """
        ...

    def height(self) -> int:
        """
        **int QItemSelectionRange::height() const**

        Returns the number of selected rows in the selection range.
        """
        ...

    def indexes(self) -> typing.List:
        """
        **QModelIndexList QItemSelectionRange::indexes() const**

        Returns the list of model index items stored in the selection.
        """
        ...

    def intersected(
        self, other: PySide2.QtCore.QItemSelectionRange
    ) -> PySide2.QtCore.QItemSelectionRange:
        """
        **QItemSelectionRange QItemSelectionRange::intersected(const QItemSelectionRange & other ) const**

        Returns a new selection range containing only the items that are found in both the selection range and the **other** selection range.

        This function was introduced in Qt 4.2.
        """
        ...

    def intersects(self, other: PySide2.QtCore.QItemSelectionRange) -> bool:
        """
        **bool QItemSelectionRange::intersects(const QItemSelectionRange & other ) const**

        Returns `true` if this selection range intersects (overlaps with) the **other** range given; otherwise returns `false`.
        """
        ...

    def isEmpty(self) -> bool:
        """
        **bool QItemSelectionRange::isEmpty() const**

        Returns `true` if the selection range contains no selectable item

        This function was introduced in Qt 4.7.
        """
        ...

    def isValid(self) -> bool:
        """
        **bool QItemSelectionRange::isValid() const**

        Returns `true` if the selection range is valid; otherwise returns `false`.
        """
        ...

    def left(self) -> int:
        """
        **int QItemSelectionRange::left() const**

        Returns the column index corresponding to the leftmost selected column in the selection range.
        """
        ...

    def model(self) -> PySide2.QtCore.QAbstractItemModel:
        """
        **const QAbstractItemModel *QItemSelectionRange::model() const**

        Returns the model that the items in the selection range belong to.
        """
        ...

    def parent(self) -> PySide2.QtCore.QModelIndex:
        """
        **QModelIndex QItemSelectionRange::parent() const**

        Returns the parent model item index of the items in the selection range.
        """
        ...

    def right(self) -> int:
        """
        **int QItemSelectionRange::right() const**

        Returns the column index corresponding to the rightmost selected column in the selection range.
        """
        ...

    def swap(self, other: PySide2.QtCore.QItemSelectionRange) -> None:
        """
        **void QItemSelectionRange::swap(QItemSelectionRange & other )**

        Swaps this selection range's contents with **other**. This function is very fast and never fails.

        This function was introduced in Qt 5.6.
        """
        ...

    def top(self) -> int:
        """
        **int QItemSelectionRange::top() const**

        Returns the row index corresponding to the uppermost selected row in the selection range.
        """
        ...

    def topLeft(self) -> PySide2.QtCore.QPersistentModelIndex:
        """
        **const QPersistentModelIndex &QItemSelectionRange::topLeft() const**

        Returns the index for the item located at the top-left corner of the selection range.

        **See also** **top** (), **left** (), and **bottomRight** ().
        """
        ...

    def width(self) -> int:
        """
        **int QItemSelectionRange::width() const**

        Returns the number of selected columns in the selection range.
        """
        ...
