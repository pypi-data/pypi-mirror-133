"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QXmlStreamAttributes(object):
    """
    **Detailed Description**

    Attributes are returned by a **QXmlStreamReader**  in **attributes()**  when the reader reports a **start element** . The class can also be used with a **QXmlStreamWriter**  as an argument to **writeAttributes()** .

    The convenience function **value** () loops over the vector and returns an attribute value for a given namespaceUri and an attribute's name.

    New attributes can be added with **append** ().
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QXmlStreamAttributes::QXmlStreamAttributes()**

        A constructor for QXmlStreamAttributes.
        """
        ...

    @typing.overload
    def __init__(
        self, QXmlStreamAttributes: PySide2.QtCore.QXmlStreamAttributes
    ) -> None:
        """
        **QXmlStreamAttributes::QXmlStreamAttributes()**

        A constructor for QXmlStreamAttributes.
        """
        ...

    def __add__(self, l: typing.List) -> typing.List:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __iadd__(self, t: PySide2.QtCore.QXmlStreamAttribute) -> typing.List:
        ...

    @typing.overload
    def __lshift__(self, l: typing.List) -> typing.List:
        ...

    @typing.overload
    def __lshift__(self, t: PySide2.QtCore.QXmlStreamAttribute) -> typing.List:
        ...

    @typing.overload
    def append(self, namespaceUri: str, name: str, value: str) -> None:
        """
        **void QXmlStreamAttributes::append(const QString & namespaceUri , const QString & name , const QString & value )**

        Appends a new attribute with **name** in the namespace described with **namespaceUri** , and value **value**. The **namespaceUri** can be empty.
        """
        ...

    @typing.overload
    def append(self, qualifiedName: str, value: str) -> None:
        """
        **void QXmlStreamAttributes::append(const QString & namespaceUri , const QString & name , const QString & value )**

        Appends a new attribute with **name** in the namespace described with **namespaceUri** , and value **value**. The **namespaceUri** can be empty.
        """
        ...

    def at(self, i: int) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def back(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def capacity(self) -> int:
        ...

    def clear(self) -> None:
        ...

    def constData(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def constFirst(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def constLast(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def contains(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool:
        ...

    @typing.overload
    def count(self) -> int:
        ...

    @typing.overload
    def count(self, t: PySide2.QtCore.QXmlStreamAttribute) -> int:
        ...

    def data(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def empty(self) -> bool:
        ...

    def endsWith(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool:
        ...

    def fill(
        self, t: PySide2.QtCore.QXmlStreamAttribute, size: int = ...
    ) -> typing.List:
        ...

    def first(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def front(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    @typing.overload
    def hasAttribute(self, namespaceUri: str, name: str) -> bool:
        """
        **bool QXmlStreamAttributes::hasAttribute(const QString & qualifiedName ) const**

        Returns `true` if this **QXmlStreamAttributes**  has an attribute whose qualified name is **qualifiedName** ; otherwise returns `false`.

        Note that this is not namespace aware. For instance, if this **QXmlStreamAttributes**  contains an attribute whose lexical name is "xlink:href" this doesn\'t tell that an attribute named `href` in the XLink namespace is present, since the `xlink` prefix can be bound to any namespace. Use the overload that takes a namespace URI and a local name as parameter, for namespace aware code.

        This function was introduced in Qt 4.5.
        """
        ...

    @typing.overload
    def hasAttribute(self, qualifiedName: str) -> bool:
        """
        **bool QXmlStreamAttributes::hasAttribute(const QString & qualifiedName ) const**

        Returns `true` if this **QXmlStreamAttributes**  has an attribute whose qualified name is **qualifiedName** ; otherwise returns `false`.

        Note that this is not namespace aware. For instance, if this **QXmlStreamAttributes**  contains an attribute whose lexical name is "xlink:href" this doesn\'t tell that an attribute named `href` in the XLink namespace is present, since the `xlink` prefix can be bound to any namespace. Use the overload that takes a namespace URI and a local name as parameter, for namespace aware code.

        This function was introduced in Qt 4.5.
        """
        ...

    def indexOf(self, t: PySide2.QtCore.QXmlStreamAttribute, from_: int = ...) -> int:
        ...

    @typing.overload
    def insert(self, i: int, n: int, t: PySide2.QtCore.QXmlStreamAttribute) -> None:
        ...

    @typing.overload
    def insert(self, i: int, t: PySide2.QtCore.QXmlStreamAttribute) -> None:
        ...

    def isEmpty(self) -> bool:
        ...

    def isSharedWith(self, other: typing.List) -> bool:
        ...

    def last(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def lastIndexOf(
        self, t: PySide2.QtCore.QXmlStreamAttribute, from_: int = ...
    ) -> int:
        ...

    def length(self) -> int:
        ...

    def mid(self, pos: int, len: int = ...) -> typing.List:
        ...

    def move(self, from_: int, to: int) -> None:
        ...

    def prepend(self, t: PySide2.QtCore.QXmlStreamAttribute) -> None:
        ...

    @typing.overload
    def remove(self, i: int) -> None:
        ...

    @typing.overload
    def remove(self, i: int, n: int) -> None:
        ...

    def removeAll(self, t: PySide2.QtCore.QXmlStreamAttribute) -> int:
        ...

    def removeAt(self, i: int) -> None:
        ...

    def removeFirst(self) -> None:
        ...

    def removeLast(self) -> None:
        ...

    def removeOne(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool:
        ...

    def replace(self, i: int, t: PySide2.QtCore.QXmlStreamAttribute) -> None:
        ...

    def reserve(self, size: int) -> None:
        ...

    def resize(self, size: int) -> None:
        ...

    def setSharable(self, sharable: bool) -> None:
        ...

    def shrink_to_fit(self) -> None:
        ...

    def size(self) -> int:
        ...

    def squeeze(self) -> None:
        ...

    def startsWith(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool:
        ...

    def swap(self, other: typing.List) -> None:
        ...

    def swapItemsAt(self, i: int, j: int) -> None:
        ...

    def takeAt(self, i: int) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def takeFirst(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    def takeLast(self) -> PySide2.QtCore.QXmlStreamAttribute:
        ...

    @typing.overload
    def value(self, namespaceUri: str, name: str) -> str:
        """
        **QStringRef QXmlStreamAttributes::value(const QString & namespaceUri , const QString & name ) const**

        Returns the value of the attribute **name** in the namespace described with **namespaceUri** , or an empty string reference if the attribute is not defined. The **namespaceUri** can be empty.
        """
        ...

    @typing.overload
    def value(self, qualifiedName: str) -> str:
        """
        **QStringRef QXmlStreamAttributes::value(const QString & namespaceUri , const QString & name ) const**

        Returns the value of the attribute **name** in the namespace described with **namespaceUri** , or an empty string reference if the attribute is not defined. The **namespaceUri** can be empty.
        """
        ...
