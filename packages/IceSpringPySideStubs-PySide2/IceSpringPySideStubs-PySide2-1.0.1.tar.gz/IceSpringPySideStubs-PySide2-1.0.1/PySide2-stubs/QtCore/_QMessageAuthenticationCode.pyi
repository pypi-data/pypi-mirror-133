"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QMessageAuthenticationCode(object):
    """
    **Detailed Description**

    QMessageAuthenticationCode supports all cryptographic hashes which are supported by **QCryptographicHash** .

    To generate message authentication code, pass hash algorithm **QCryptographicHash::Algorithm**  to constructor, then set key and message by **setKey** () and **addData** () functions. Result can be acquired by **result** () function.

    **QByteArray**  key = "key";
            **QByteArray**  message = "The quick brown fox jumps over the lazy dog";
            ...
            **QMessageAuthenticationCode**  code(**QCryptographicHash** ::Sha1);
            code.setKey(key);
            code.addData(message);
            code.result().toHex();      // returns "de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9"

    Alternatively, this effect can be achieved by providing message, key and method to **hash** () method.

    **QMessageAuthenticationCode** ::hash(message, key, **QCryptographicHash** ::Sha1).toHex();

    **See also** **QCryptographicHash** .
    """

    def __init__(
        self,
        method: PySide2.QtCore.QCryptographicHash.Algorithm,
        key: PySide2.QtCore.QByteArray = ...,
    ) -> None:
        """
        **QMessageAuthenticationCode::QMessageAuthenticationCode(QCryptographicHash::Algorithm method , const QByteArray & key = QByteArray())**

        Constructs an object that can be used to create a cryptographic hash from data using method **method** and key **key**.
        """
        ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray) -> None:
        """
        **void QMessageAuthenticationCode::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the message.
        """
        ...

    @typing.overload
    def addData(self, data: bytes, length: int) -> None:
        """
        **void QMessageAuthenticationCode::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the message.
        """
        ...

    @typing.overload
    def addData(self, device: PySide2.QtCore.QIODevice) -> bool:
        """
        **void QMessageAuthenticationCode::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the message.
        """
        ...

    @staticmethod
    def hash(
        message: PySide2.QtCore.QByteArray,
        key: PySide2.QtCore.QByteArray,
        method: PySide2.QtCore.QCryptographicHash.Algorithm,
    ) -> PySide2.QtCore.QByteArray:
        """
        **[static] QByteArray QMessageAuthenticationCode::hash(const QByteArray & message , const QByteArray & key , QCryptographicHash::Algorithm method )**

        Returns the authentication code for the message **message** using the key **key** and the method **method**.
        """
        ...

    def reset(self) -> None:
        """
        **void QMessageAuthenticationCode::reset()**

        Resets message data. Calling this method doesn't affect the key.
        """
        ...

    def result(self) -> PySide2.QtCore.QByteArray:
        """
        **QByteArray QMessageAuthenticationCode::result() const**

        Returns the final authentication code.

        **See also** **QByteArray::toHex** ().
        """
        ...

    def setKey(self, key: PySide2.QtCore.QByteArray) -> None:
        """
        **void QMessageAuthenticationCode::setKey(const QByteArray & key )**

        Sets secret **key**. Calling this method automatically resets the object state.
        """
        ...
