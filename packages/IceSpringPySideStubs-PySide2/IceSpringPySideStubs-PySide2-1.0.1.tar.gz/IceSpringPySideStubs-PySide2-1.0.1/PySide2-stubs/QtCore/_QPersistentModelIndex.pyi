"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QPersistentModelIndex(object):
    """
    **Detailed Description**

    A QPersistentModelIndex is a model index that can be stored by an application, and later used to access information in a model. Unlike the **QModelIndex**  class, it is safe to store a QPersistentModelIndex since the model will ensure that references to items will continue to be valid as long as they can be accessed by the model.

    It is good practice to check that persistent model indexes are valid before using them.

    **Note:** You cannot store a **QStandardItemModel** 's QPersistentModelIndex in one of the model's items.

    **See also** **Model/View Programming** , **QModelIndex** , and **QAbstractItemModel** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        **QPersistentModelIndex::QPersistentModelIndex(const QModelIndex & index )**

        Creates a new QPersistentModelIndex that is a copy of the model **index**.
        """
        ...

    @typing.overload
    def __init__(self, index: PySide2.QtCore.QModelIndex) -> None:
        """
        **QPersistentModelIndex::QPersistentModelIndex(const QModelIndex & index )**

        Creates a new QPersistentModelIndex that is a copy of the model **index**.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QPersistentModelIndex) -> None:
        """
        **QPersistentModelIndex::QPersistentModelIndex(const QModelIndex & index )**

        Creates a new QPersistentModelIndex that is a copy of the model **index**.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def child(self, row: int, column: int) -> PySide2.QtCore.QModelIndex:
        ...

    def column(self) -> int:
        """
        **int QPersistentModelIndex::column() const**

        Returns the column this persistent model index refers to.
        """
        ...

    def data(self, role: int = ...) -> typing.Any:
        """
        **QVariant QPersistentModelIndex::data(int role = Qt::DisplayRole) const**

        Returns the data for the given **role** for the item referred to by the index.

        **See also** **Qt::ItemDataRole**  and **QAbstractItemModel::setData** ().
        """
        ...

    def flags(self) -> PySide2.QtCore.Qt.ItemFlags:
        """
        **Qt::ItemFlags QPersistentModelIndex::flags() const**

        Returns the flags for the item referred to by the index.

        This function was introduced in Qt 4.2.
        """
        ...

    def internalId(self) -> int:
        ...

    def internalPointer(self) -> int:
        ...

    def isValid(self) -> bool:
        """
        **bool QPersistentModelIndex::isValid() const**

        Returns `true` if this persistent model index is valid; otherwise returns `false`.

        A valid index belongs to a model, and has non-negative row and column numbers.

        **See also** **model** (), **row** (), and **column** ().
        """
        ...

    def model(self) -> PySide2.QtCore.QAbstractItemModel:
        """
        **const QAbstractItemModel *QPersistentModelIndex::model() const**

        Returns the model that the index belongs to.
        """
        ...

    def parent(self) -> PySide2.QtCore.QModelIndex:
        """
        **QModelIndex QPersistentModelIndex::parent() const**

        Returns the parent **QModelIndex**  for this persistent index, or an invalid **QModelIndex**  if it has no parent.

        **See also** **sibling** () and **model** ().
        """
        ...

    def row(self) -> int:
        """
        **int QPersistentModelIndex::row() const**

        Returns the row this persistent model index refers to.
        """
        ...

    def sibling(self, row: int, column: int) -> PySide2.QtCore.QModelIndex:
        """
        **QModelIndex QPersistentModelIndex::sibling(int row , int column ) const**

        Returns the sibling at **row** and **column** or an invalid **QModelIndex**  if there is no sibling at this position.

        **See also** **parent** ().
        """
        ...

    def swap(self, other: PySide2.QtCore.QPersistentModelIndex) -> None:
        """
        **void QPersistentModelIndex::swap(QPersistentModelIndex & other )**

        Swaps this persistent modelindex with **other**. This function is very fast and never fails.

        This function was introduced in Qt 5.0.
        """
        ...
