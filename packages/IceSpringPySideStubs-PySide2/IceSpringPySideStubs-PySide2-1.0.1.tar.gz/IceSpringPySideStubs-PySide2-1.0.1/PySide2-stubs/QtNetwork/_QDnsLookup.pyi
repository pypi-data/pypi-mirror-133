"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtNetwork

bytes = str


class QDnsLookup(PySide2.QtCore.QObject):
    """
    **Detailed Description**

    QDnsLookup uses the mechanisms provided by the operating system to perform DNS lookups. To perform a lookup you need to specify a **name**  and **type**  then invoke the **lookup()**  slot. The **finished()**  signal will be emitted upon completion.

    For example, you can determine which servers an XMPP chat client should connect to for a given domain with:

    void MyObject::lookupServers()
        {
            // Create a DNS lookup.
            dns = new **QDnsLookup** (this);
            connect(dns, SIGNAL(finished()),
                    this, SLOT(handleServers()));

            // Find the XMPP servers for gmail.com
            dns->setType(**QDnsLookup** ::SRV);
            dns->setName("_xmpp-client._tcp.gmail.com");
            dns->lookup();
        }

    Once the request finishes you can handle the results with:

    void MyObject::handleServers()
        {
            // Check the lookup succeeded.
            if (dns->error() != **QDnsLookup** ::NoError) {
                **qWarning** ("DNS lookup failed");
                dns->deleteLater();
                return;
            }

            // Handle the results.
            const auto records = dns->serviceRecords();
            for (const **QDnsServiceRecord**  &record : records) {
                ...
            }
            dns->deleteLater();
        }

    **Note:** If you simply want to find the IP address(es) associated with a host name, or the host name associated with an IP address you should use **QHostInfo**  instead.
    """

    NoError: QDnsLookup = ...
    A: QDnsLookup = ...
    ResolverError: QDnsLookup = ...
    NS: QDnsLookup = ...
    OperationCancelledError: QDnsLookup = ...
    InvalidRequestError: QDnsLookup = ...
    InvalidReplyError: QDnsLookup = ...
    CNAME: QDnsLookup = ...
    ServerFailureError: QDnsLookup = ...
    ServerRefusedError: QDnsLookup = ...
    NotFoundError: QDnsLookup = ...
    PTR: QDnsLookup = ...
    MX: QDnsLookup = ...
    TXT: QDnsLookup = ...
    AAAA: QDnsLookup = ...
    SRV: QDnsLookup = ...
    ANY: QDnsLookup = ...

    class Error(object):
        NoError: QDnsLookup.Error = ...
        ResolverError: QDnsLookup.Error = ...
        OperationCancelledError: QDnsLookup.Error = ...
        InvalidRequestError: QDnsLookup.Error = ...
        InvalidReplyError: QDnsLookup.Error = ...
        ServerFailureError: QDnsLookup.Error = ...
        ServerRefusedError: QDnsLookup.Error = ...
        NotFoundError: QDnsLookup.Error = ...

    class Type(object):
        A: QDnsLookup.Type = ...
        NS: QDnsLookup.Type = ...
        CNAME: QDnsLookup.Type = ...
        PTR: QDnsLookup.Type = ...
        MX: QDnsLookup.Type = ...
        TXT: QDnsLookup.Type = ...
        AAAA: QDnsLookup.Type = ...
        SRV: QDnsLookup.Type = ...
        ANY: QDnsLookup.Type = ...

    @typing.overload
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        **QDnsLookup::QDnsLookup(QObject * parent = nullptr)**

        Constructs a QDnsLookup object and sets **parent** as the parent object.

        The **type**  property will default to **QDnsLookup::A** .
        """
        ...

    @typing.overload
    def __init__(
        self,
        type: PySide2.QtNetwork.QDnsLookup.Type,
        name: str,
        nameserver: PySide2.QtNetwork.QHostAddress,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QDnsLookup::QDnsLookup(QObject * parent = nullptr)**

        Constructs a QDnsLookup object and sets **parent** as the parent object.

        The **type**  property will default to **QDnsLookup::A** .
        """
        ...

    @typing.overload
    def __init__(
        self,
        type: PySide2.QtNetwork.QDnsLookup.Type,
        name: str,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        **QDnsLookup::QDnsLookup(QObject * parent = nullptr)**

        Constructs a QDnsLookup object and sets **parent** as the parent object.

        The **type**  property will default to **QDnsLookup::A** .
        """
        ...

    def abort(self) -> None:
        """
        **[slot] void QDnsLookup::abort()**

        Aborts the DNS lookup operation.

        If the lookup is already finished, does nothing.
        """
        ...

    def canonicalNameRecords(self) -> typing.List:
        """
        **QList<QDnsDomainNameRecord> QDnsLookup::canonicalNameRecords() const**

        Returns the list of canonical name records associated with this lookup.
        """
        ...

    def error(self) -> PySide2.QtNetwork.QDnsLookup.Error:
        """
        **error : const Error**

        This property holds the type of error that occurred if the DNS lookup failed, or **NoError** .

        **Access functions:**

        QDnsLookup::Error **error** () const

        **Notifier signal:**

        void ****finished** ** ()
        """
        ...

    def errorString(self) -> str:
        """
        **errorString : const QString**

        This property holds a human-readable description of the error if the DNS lookup failed.

        **Access functions:**

        QString **errorString** () const

        **Notifier signal:**

        void ****finished** ** ()
        """
        ...

    def hostAddressRecords(self) -> typing.List:
        """
        **QList<QDnsHostAddressRecord> QDnsLookup::hostAddressRecords() const**

        Returns the list of host address records associated with this lookup.
        """
        ...

    def isFinished(self) -> bool:
        """
        **bool QDnsLookup::isFinished() const**

        Returns whether the reply has finished or was aborted.
        """
        ...

    def lookup(self) -> None:
        """
        **[slot] void QDnsLookup::lookup()**

        Performs the DNS lookup.

        The **finished()**  signal is emitted upon completion.
        """
        ...

    def mailExchangeRecords(self) -> typing.List:
        """
        **QList<QDnsMailExchangeRecord> QDnsLookup::mailExchangeRecords() const**

        Returns the list of mail exchange records associated with this lookup.

        The records are sorted according to **RFC 5321** , so if you use them to connect to servers, you should try them in the order they are listed.
        """
        ...

    def name(self) -> str:
        """
        **name : QString**

        This property holds the name to lookup.

        **Note:** The name will be encoded using IDNA, which means it's unsuitable for querying SRV records compatible with the DNS-SD specification.

        **Access functions:**

        QString **name** () const
        void **setName** (const QString & **name** )

        **Notifier signal:**

        void ****nameChanged** ** (const QString & **name** )
        """
        ...

    def nameServerRecords(self) -> typing.List:
        """
        **QList<QDnsDomainNameRecord> QDnsLookup::nameServerRecords() const**

        Returns the list of name server records associated with this lookup.
        """
        ...

    def nameserver(self) -> PySide2.QtNetwork.QHostAddress:
        """
        **nameserver : QHostAddress**

        This property holds the nameserver to use for DNS lookup.

        **Access functions:**

        QHostAddress **nameserver** () const
        void **setNameserver** (const QHostAddress & **nameserver** )

        **Notifier signal:**

        void **nameserverChanged** (const QHostAddress & **nameserver** )
        """
        ...

    def pointerRecords(self) -> typing.List:
        """
        **QList<QDnsDomainNameRecord> QDnsLookup::pointerRecords() const**

        Returns the list of pointer records associated with this lookup.
        """
        ...

    def serviceRecords(self) -> typing.List:
        """
        **QList<QDnsServiceRecord> QDnsLookup::serviceRecords() const**

        Returns the list of service records associated with this lookup.

        The records are sorted according to **RFC 2782** , so if you use them to connect to servers, you should try them in the order they are listed.
        """
        ...

    def setName(self, name: str) -> None:
        """
        **name : QString**

        This property holds the name to lookup.

        **Note:** The name will be encoded using IDNA, which means it's unsuitable for querying SRV records compatible with the DNS-SD specification.

        **Access functions:**

        QString **name** () const
        void **setName** (const QString & **name** )

        **Notifier signal:**

        void ****nameChanged** ** (const QString & **name** )
        """
        ...

    def setNameserver(self, nameserver: PySide2.QtNetwork.QHostAddress) -> None:
        """
        **nameserver : QHostAddress**

        This property holds the nameserver to use for DNS lookup.

        **Access functions:**

        QHostAddress **nameserver** () const
        void **setNameserver** (const QHostAddress & **nameserver** )

        **Notifier signal:**

        void **nameserverChanged** (const QHostAddress & **nameserver** )
        """
        ...

    def setType(self, arg__1: PySide2.QtNetwork.QDnsLookup.Type) -> None:
        """
        **type : Type**

        This property holds the type of DNS lookup.

        **Access functions:**

        QDnsLookup::Type **type** () const
        void **setType** ( **QDnsLookup::Type** )

        **Notifier signal:**

        void ****typeChanged** ** (QDnsLookup::Type **type** )

        **Member Function Documentation**
        """
        ...

    def textRecords(self) -> typing.List:
        """
        **QList<QDnsTextRecord> QDnsLookup::textRecords() const**

        Returns the list of text records associated with this lookup.
        """
        ...

    def type(self) -> PySide2.QtNetwork.QDnsLookup.Type:
        """
        **type : Type**

        This property holds the type of DNS lookup.

        **Access functions:**

        QDnsLookup::Type **type** () const
        void **setType** ( **QDnsLookup::Type** )

        **Notifier signal:**

        void ****typeChanged** ** (QDnsLookup::Type **type** )

        **Member Function Documentation**
        """
        ...

    @property
    def finished(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QDnsLookup::finished()**

        This signal is emitted when the reply has finished processing.

        **Note:** Notifier signal for property **error** . Notifier signal for property **errorString** .
        """
        ...

    @property
    def nameChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QDnsLookup::nameChanged(const QString & name )**

        This signal is emitted when the lookup **name**  changes. **name** is the new lookup name.

        **Note:** Notifier signal for property **name** .
        """
        ...

    @property
    def nameserverChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def typeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        **[signal] void QDnsLookup::typeChanged(QDnsLookup::Type type )**

        This signal is emitted when the lookup **type**  changes. **type** is the new lookup type.

        **Note:** Notifier signal for property **type** .
        """
        ...
