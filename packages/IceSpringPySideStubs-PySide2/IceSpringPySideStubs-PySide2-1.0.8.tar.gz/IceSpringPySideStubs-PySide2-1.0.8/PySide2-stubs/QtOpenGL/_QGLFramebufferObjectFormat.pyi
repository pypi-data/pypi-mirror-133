"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtOpenGL

bytes = str


class QGLFramebufferObjectFormat(object):
    """
    https://doc.qt.io/qt-5/qglframebufferobjectformat.html

    **Detailed Description**

    A framebuffer object has several characteristics:

    * **Number of samples per pixels.**
      * **Depth and/or stencil
    attachments.**
      * **Texture target.**
      * **Internal texture format.**

    Note that the desired attachments or number of samples per pixels might not
    be supported by the hardware driver. Call **QGLFramebufferObject::format**
    () after creating a **QGLFramebufferObject**  to find the exact format that
    was used to create the frame buffer object.

    **Note:** This class has been deprecated in favor of
    **QOpenGLFramebufferObjectFormat** .

    **See also** **QGLFramebufferObject** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#QGLFramebufferObj
        ectFormat

        **QGLFramebufferObjectFormat::QGLFramebufferObjectFormat()**

        Creates a QGLFramebufferObjectFormat object for specifying the format of
        an OpenGL framebuffer object.

        By default the format specifies a non-multisample framebuffer object
        with no attachments, texture target `GL_TEXTURE_2D`, and internal format
        `GL_RGBA8`. On OpenGL/ES systems, the default internal format is
        `GL_RGBA`.

        **See also** **samples** (), **attachment** (), and
        **internalTextureFormat** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtOpenGL.QGLFramebufferObjectFormat) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#QGLFramebufferObj
        ectFormat-1

        **QGLFramebufferObjectFormat::QGLFramebufferObjectFormat(const
        QGLFramebufferObjectFormat & other )**

        Constructs a copy of **other**.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def attachment(self) -> PySide2.QtOpenGL.QGLFramebufferObject.Attachment:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#attachment

        **QGLFramebufferObject::Attachment
        QGLFramebufferObjectFormat::attachment() const**

        Returns the configuration of the depth and stencil buffers attached to a
        framebuffer object. The default is
        **QGLFramebufferObject::NoAttachment** .

        **See also** **setAttachment** ().
        """
        ...

    def internalTextureFormat(self) -> int:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#internalTextureFo
        rmat

        **GLenum QGLFramebufferObjectFormat::internalTextureFormat() const**

        Returns the internal format of a framebuffer object's texture or
        multisample framebuffer object's color buffer. The default is `GL_RGBA8`
        on desktop OpenGL systems, and `GL_RGBA` on OpenGL/ES systems.

        **See also** **setInternalTextureFormat** ().
        """
        ...

    def mipmap(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#mipmap

        **bool QGLFramebufferObjectFormat::mipmap() const**

        Returns `true` if mipmapping is enabled.

        This function was introduced in Qt 4.8.

        **See also** **setMipmap** ().
        """
        ...

    def samples(self) -> int:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#samples

        **int QGLFramebufferObjectFormat::samples() const**

        Returns the number of samples per pixel if a framebuffer object is a
        multisample framebuffer object. Otherwise, returns 0. The default value
        is 0.

        **See also** **setSamples** ().
        """
        ...

    def setAttachment(
        self, attachment: PySide2.QtOpenGL.QGLFramebufferObject.Attachment
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#setAttachment

        **void QGLFramebufferObjectFormat::setAttachment(QGLFramebufferObject::A
        ttachment attachment )**

        Sets the attachment configuration of a framebuffer object to
        **attachment**.

        **See also** **attachment** ().
        """
        ...

    def setInternalTextureFormat(self, internalTextureFormat: int) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#setInternalTextur
        eFormat

        **void QGLFramebufferObjectFormat::setInternalTextureFormat(GLenum
        internalTextureFormat )**

        Sets the internal format of a framebuffer object's texture or
        multisample framebuffer object's color buffer to
        **internalTextureFormat**.

        **See also** **internalTextureFormat** ().
        """
        ...

    def setMipmap(self, enabled: bool) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#setMipmap

        **void QGLFramebufferObjectFormat::setMipmap(bool enabled )**

        Enables mipmapping if **enabled** is true; otherwise disables it.

        Mipmapping is disabled by default.

        If mipmapping is enabled, additional memory will be allocated for the
        mipmap levels. The mipmap levels can be updated by binding the texture
        and calling glGenerateMipmap(). Mipmapping cannot be enabled for
        multisampled framebuffer objects.

        This function was introduced in Qt 4.8.

        **See also** **mipmap** () and **QGLFramebufferObject::texture** ().
        """
        ...

    def setSamples(self, samples: int) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#setSamples

        **void QGLFramebufferObjectFormat::setSamples(int samples )**

        Sets the number of samples per pixel for a multisample framebuffer
        object to **samples**. The default sample count of 0 represents a
        regular non-multisample framebuffer object.

        If the desired amount of samples per pixel is not supported by the
        hardware then the maximum number of samples per pixel will be used. Note
        that multisample framebuffer objects cannot be bound as textures. Also,
        the `GL_EXT_framebuffer_multisample` extension is required to create a
        framebuffer with more than one sample per pixel.

        **See also** **samples** ().
        """
        ...

    def setTextureTarget(self, target: int) -> None:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#setTextureTarget

        **void QGLFramebufferObjectFormat::setTextureTarget(GLenum target )**

        Sets the texture target of the texture attached to a framebuffer object
        to **target**. Ignored for multisample framebuffer objects.

        **See also** **textureTarget** () and **samples** ().
        """
        ...

    def textureTarget(self) -> int:
        """
        https://doc.qt.io/qt-5/qglframebufferobjectformat.html#textureTarget

        **GLenum QGLFramebufferObjectFormat::textureTarget() const**

        Returns the texture target of the texture attached to a framebuffer
        object. Ignored for multisample framebuffer objects. The default is
        `GL_TEXTURE_2D`.

        **See also** **setTextureTarget** () and **samples** ().
        """
        ...
