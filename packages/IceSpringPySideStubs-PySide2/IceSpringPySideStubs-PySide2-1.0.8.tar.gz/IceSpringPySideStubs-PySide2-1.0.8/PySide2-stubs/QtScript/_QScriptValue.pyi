"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptValue(object):
    """
    https://doc.qt.io/qt-5/qscriptvalue.html

    **Detailed Description**

    QScriptValue supports the types defined in the **ECMA-262**  standard: The
    primitive types, which are Undefined, Null, Boolean, Number, and String; and
    the Object type. Additionally, Qt Script has built-in support for
    **QVariant** , **QObject**  and **QMetaObject** .

    For the object-based types (including Date and RegExp), use the newT()
    functions in **QScriptEngine**  (e.g. **QScriptEngine::newObject** ()) to
    create a QScriptValue of the desired type. For the primitive types, use one
    of the QScriptValue constructor overloads.

    The methods named isT() (e.g. **isBool** (), **isUndefined** ()) can be used
    to test if a value is of a certain type. The methods named toT() (e.g.
    **toBool** (), **toString** ()) can be used to convert a QScriptValue to
    another type. You can also use the generic **qscriptvalue_cast** ()
    function.

    Object values have zero or more properties which are themselves
    QScriptValues. Use **setProperty** () to set a property of an object, and
    call **property** () to retrieve the value of a property.

    **QScriptEngine**  myEngine;
        **QScriptValue**  myObject =
    myEngine.newObject();
        **QScriptValue**  myOtherObject =
    myEngine.newObject();
        myObject.setProperty("myChild", myOtherObject);
    myObject.setProperty("name", "John Doe");

    Each property can have a set of attributes; these are specified as the third
    (optional) argument to **setProperty** (). The attributes of a property can
    be queried by calling the **propertyFlags** () function. The following code
    snippet creates a property that cannot be modified by script code:

    **QScriptValue**  val(&myEngine, 123);
    myObject.setProperty("myReadOnlyProperty", val, **QScriptValue**
    ::ReadOnly);

    If you want to iterate over the properties of a script object, use the
    **QScriptValueIterator**  class.

    Object values have an internal `prototype` property, which can be accessed
    with **prototype** () and **setPrototype** (). Properties added to a
    prototype are shared by all objects having that prototype; this is referred
    to as prototype-based inheritance. In practice, it means that (by default)
    the **property** () function will automatically attempt to look up look the
    property in the **prototype** () (and in the prototype of the **prototype**
    (), and so on), if the object itself does not have the requested property.
    Note that this prototype-based lookup is not performed by **setProperty**
    (); **setProperty** () will always create the property in the script object
    itself. For more information, see the **Qt Script**  documentation.

    Function objects (objects for which **isFunction** () returns true) can be
    invoked by calling **call** (). Constructor functions can be used to
    construct new objects by calling **construct** ().

    Use **equals** (), **strictlyEquals** () and **lessThan** () to compare a
    QScriptValue to another.

    Object values can have custom data associated with them; see the **setData**
    () and **data** () functions. By default, this data is not accessible to
    scripts; it can be used to store any data you want to associate with the
    script object. Typically this is used by custom class objects (see
    **QScriptClass** ) to store a C++ type that contains the "native" object
    data.

    Note that a QScriptValue for which **isObject** () is true only carries a
    reference to an actual object; copying the QScriptValue will only copy the
    object reference, not the object itself. If you want to clone an object
    (i.e. copy an object\'s properties to another object), you can do so with the
    help of a `for-in` statement in script code, or **QScriptValueIterator**  in
    C++.

    **See also** **QScriptEngine**  and **QScriptValueIterator** .
    """

    UserRange: QScriptValue = ...
    NullValue: QScriptValue = ...
    ResolveLocal: QScriptValue = ...
    ReadOnly: QScriptValue = ...
    ResolvePrototype: QScriptValue = ...
    UndefinedValue: QScriptValue = ...
    ResolveScope: QScriptValue = ...
    Undeletable: QScriptValue = ...
    ResolveFull: QScriptValue = ...
    SkipInEnumeration: QScriptValue = ...
    PropertyGetter: QScriptValue = ...
    PropertySetter: QScriptValue = ...
    QObjectMember: QScriptValue = ...
    KeepExistingFlags: QScriptValue = ...

    class PropertyFlag(object):
        UserRange: QScriptValue.PropertyFlag = ...
        ReadOnly: QScriptValue.PropertyFlag = ...
        Undeletable: QScriptValue.PropertyFlag = ...
        SkipInEnumeration: QScriptValue.PropertyFlag = ...
        PropertyGetter: QScriptValue.PropertyFlag = ...
        PropertySetter: QScriptValue.PropertyFlag = ...
        QObjectMember: QScriptValue.PropertyFlag = ...
        KeepExistingFlags: QScriptValue.PropertyFlag = ...

    class PropertyFlags(object):
        ...

    class ResolveFlag(object):
        ResolveLocal: QScriptValue.ResolveFlag = ...
        ResolvePrototype: QScriptValue.ResolveFlag = ...
        ResolveScope: QScriptValue.ResolveFlag = ...
        ResolveFull: QScriptValue.ResolveFlag = ...

    class ResolveFlags(object):
        ...

    class SpecialValue(object):
        NullValue: QScriptValue.SpecialValue = ...
        UndefinedValue: QScriptValue.SpecialValue = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#QScriptValue

        **QScriptValue::QScriptValue()**

        Constructs an invalid QScriptValue.
        """
        ...

    @typing.overload
    def __init__(
        self,
        engine: PySide2.QtScript.QScriptEngine,
        val: PySide2.QtScript.QScriptValue.SpecialValue,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#QScriptValue-1

        **QScriptValue::QScriptValue(const QScriptValue & other )**

        Constructs a new QScriptValue that is a copy of **other**.

        Note that if **other** is an object (i.e., **isObject** () would return
        true), then only a reference to the underlying object is copied into the
        new script value (i.e., the object itself is not copied).
        """
        ...

    @typing.overload
    def __init__(self, engine: PySide2.QtScript.QScriptEngine, val: str) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#QScriptValue-9

        **QScriptValue::QScriptValue(QScriptValue::SpecialValue value )**

        Constructs a new QScriptValue with a special **value**.

        This function was introduced in Qt 4.5.
        """
        ...

    @typing.overload
    def __init__(self, engine: PySide2.QtScript.QScriptEngine, val: bool) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#QScriptValue-10

        **QScriptValue::QScriptValue(bool value )**

        Constructs a new QScriptValue with a boolean **value**.

        This function was introduced in Qt 4.5.
        """
        ...

    @typing.overload
    def __init__(self, engine: PySide2.QtScript.QScriptEngine, val: bytes) -> None:
        ...

    @typing.overload
    def __init__(self, engine: PySide2.QtScript.QScriptEngine, val: float) -> None:
        ...

    @typing.overload
    def __init__(self, engine: PySide2.QtScript.QScriptEngine, val: int) -> None:
        ...

    @typing.overload
    def __init__(self, engine: PySide2.QtScript.QScriptEngine, val: int) -> None:
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtScript.QScriptValue) -> None:
        ...

    @typing.overload
    def __init__(self, value: PySide2.QtScript.QScriptValue.SpecialValue) -> None:
        ...

    @typing.overload
    def __init__(self, value: str) -> None:
        ...

    @typing.overload
    def __init__(self, value: bool) -> None:
        ...

    @typing.overload
    def __init__(self, value: bytes) -> None:
        ...

    @typing.overload
    def __init__(self, value: float) -> None:
        ...

    @typing.overload
    def __init__(self, value: int) -> None:
        ...

    @typing.overload
    def __init__(self, value: int) -> None:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __iter__(self) -> object:
        ...

    def __repr__(self) -> object:
        ...

    @typing.overload
    def call(
        self,
        thisObject: PySide2.QtScript.QScriptValue,
        arguments: PySide2.QtScript.QScriptValue,
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#call

        **QScriptValue QScriptValue::call(const QScriptValue & thisObject =
        QScriptValue(), const QScriptValueList & args = QScriptValueList())**

        Calls this **QScriptValue**  as a function, using **thisObject** as the
        `this\' object in the function call, and passing **args** as arguments to
        the function. Returns the value returned from the function.

        If this **QScriptValue**  is not a function, call() does nothing and
        returns an invalid **QScriptValue** .

        Note that if **thisObject** is not an object, the global object (see
        **QScriptEngine::globalObject** ()) will be used as the `this\' object.

        Calling call() can cause an exception to occur in the script engine; in
        that case, call() returns the value that was thrown (typically an
        `Error` object). You can call **QScriptEngine::hasUncaughtException** ()
        to determine if an exception occurred.

        **QScriptEngine**  engine;
            engine.evaluate("function fullName() {
        return this.firstName + \' \' + this.lastName; }");
        engine.evaluate("somePerson = { firstName: \'John\', lastName: \'Doe\' }");
        **QScriptValue**  global = engine.globalObject();
            **QScriptValue**
        fullName = global.property("fullName");
            **QScriptValue**  who =
        global.property("somePerson");
            **qDebug** () <<
        fullName.call(who).toString(); // "John Doe"
        engine.evaluate("function cube(x) { return x * x * x; }");
        **QScriptValue**  cube = global.property("cube");
            QScriptValueList
        args;
            args << 3;
            **qDebug** () << cube.call(**QScriptValue** (),
        args).toNumber(); // 27

        **See also** **construct** ().
        """
        ...

    @typing.overload
    def call(
        self,
        thisObject: PySide2.QtScript.QScriptValue = ...,
        args: typing.Sequence = ...,
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#call-1

        **QScriptValue QScriptValue::call(const QScriptValue & thisObject ,
        const QScriptValue & arguments )**

        Calls this **QScriptValue**  as a function, using **thisObject** as the
        `this' object in the function call, and passing **arguments** as
        arguments to the function. Returns the value returned from the function.

        If this **QScriptValue**  is not a function, call() does nothing and
        returns an invalid **QScriptValue** .

        **arguments** can be an arguments object, an array, null or undefined;
        any other type will cause a TypeError to be thrown.

        Note that if **thisObject** is not an object, the global object (see
        **QScriptEngine::globalObject** ()) will be used as the `this' object.

        One common usage of this function is to forward native function calls to
        another function:

        **QScriptValue**  myNativeFunction(**QScriptContext**  *ctx,
        **QScriptEngine**  *)
            {
                **QScriptValue**  otherFunction =
        ...;
                return otherFunction.call(ctx->thisObject(),
        ctx->argumentsObject());
            }

        **See also** **construct** () and **QScriptContext::argumentsObject**
        ().
        """
        ...

    @typing.overload
    def construct(self, args: typing.Sequence = ...) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#construct

        **QScriptValue QScriptValue::construct(const QScriptValueList & args =
        QScriptValueList())**

        Creates a new `Object` and calls this **QScriptValue**  as a
        constructor, using the created object as the `this' object and passing
        **args** as arguments. If the return value from the constructor call is
        an object, then that object is returned; otherwise the default
        constructed object is returned.

        If this **QScriptValue**  is not a function, construct() does nothing
        and returns an invalid **QScriptValue** .

        Calling construct() can cause an exception to occur in the script
        engine; in that case, construct() returns the value that was thrown
        (typically an `Error` object). You can call
        **QScriptEngine::hasUncaughtException** () to determine if an exception
        occurred.

        **See also** **call** () and **QScriptEngine::newObject** ().
        """
        ...

    @typing.overload
    def construct(
        self, arguments: PySide2.QtScript.QScriptValue
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#construct-1

        **QScriptValue QScriptValue::construct(const QScriptValue & arguments
        )**

        Creates a new `Object` and calls this **QScriptValue**  as a
        constructor, using the created object as the `this' object and passing
        **arguments** as arguments. If the return value from the constructor
        call is an object, then that object is returned; otherwise the default
        constructed object is returned.

        If this **QScriptValue**  is not a function, construct() does nothing
        and returns an invalid **QScriptValue** .

        **arguments** can be an arguments object, an array, null or undefined.
        Any other type will cause a TypeError to be thrown.

        **See also** **call** (), **QScriptEngine::newObject** (), and
        **QScriptContext::argumentsObject** ().
        """
        ...

    def data(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#data

        **QScriptValue QScriptValue::data() const**

        Returns the internal data of this **QScriptValue**  object. Qt Script
        uses this property to store the primitive value of Date, String, Number
        and Boolean objects. For other types of object, custom data may be
        stored using **setData** ().

        This function was introduced in Qt 4.4.

        **See also** **setData** ().
        """
        ...

    def engine(self) -> PySide2.QtScript.QScriptEngine:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#engine

        **QScriptEngine *QScriptValue::engine() const**

        Returns the **QScriptEngine**  that created this **QScriptValue** , or 0
        if this **QScriptValue**  is invalid or the value is not associated with
        a particular engine.
        """
        ...

    def equals(self, other: PySide2.QtScript.QScriptValue) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#equals

        **bool QScriptValue::equals(const QScriptValue & other ) const**

        Returns true if this **QScriptValue**  is equal to **other** , otherwise
        returns false. The comparison follows the behavior described in
        **ECMA-262**  section 11.9.3, "The Abstract Equality Comparison
        Algorithm".

        This function can return true even if the type of this **QScriptValue**
        is different from the type of the **other** value; i.e. the comparison
        is not strict. For example, comparing the number 9 to the string "9"
        returns true; comparing an undefined value to a null value returns true;
        comparing a `Number` object whose primitive value is 6 to a `String`
        object whose primitive value is "6" returns true; and comparing the
        number 1 to the boolean value `true` returns true. If you want to
        perform a comparison without such implicit value conversion, use
        **strictlyEquals** ().

        Note that if this **QScriptValue**  or the **other** value are objects,
        calling this function has side effects on the script engine, since the
        engine will call the object\'s valueOf() function (and possibly
        **toString** ()) in an attempt to convert the object to a primitive
        value (possibly resulting in an uncaught script exception).

        **See also** **strictlyEquals** () and **lessThan** ().
        """
        ...

    def instanceOf(self, other: PySide2.QtScript.QScriptValue) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#instanceOf

        **bool QScriptValue::instanceOf(const QScriptValue & other ) const**

        Returns true if this **QScriptValue**  is an instance of **other** ;
        otherwise returns false.

        This **QScriptValue**  is considered to be an instance of **other** if
        **other** is a function and the value of the `prototype` property of
        **other** is in the prototype chain of this **QScriptValue** .
        """
        ...

    def isArray(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isArray

        **bool QScriptValue::isArray() const**

        Returns true if this **QScriptValue**  is an object of the Array class;
        otherwise returns false.

        **See also** **QScriptEngine::newArray** ().
        """
        ...

    def isBool(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isBool

        **bool QScriptValue::isBool() const**

        Returns true if this **QScriptValue**  is of the primitive type Boolean;
        otherwise returns false.

        This function was introduced in Qt 4.5.

        **See also** **toBool** ().
        """
        ...

    def isBoolean(self) -> bool:
        ...

    def isDate(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isDate

        **bool QScriptValue::isDate() const**

        Returns true if this **QScriptValue**  is an object of the Date class;
        otherwise returns false.

        **See also** **QScriptEngine::newDate** ().
        """
        ...

    def isError(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isError

        **bool QScriptValue::isError() const**

        Returns true if this **QScriptValue**  is an object of the Error class;
        otherwise returns false.

        **See also** **QScriptContext::throwError** ().
        """
        ...

    def isFunction(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isFunction

        **bool QScriptValue::isFunction() const**

        Returns true if this **QScriptValue**  is a function; otherwise returns
        false.

        **See also** **call** ().
        """
        ...

    def isNull(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isNull

        **bool QScriptValue::isNull() const**

        Returns true if this **QScriptValue**  is of the primitive type Null;
        otherwise returns false.

        **See also** **QScriptEngine::nullValue** ().
        """
        ...

    def isNumber(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isNumber

        **bool QScriptValue::isNumber() const**

        Returns true if this **QScriptValue**  is of the primitive type Number;
        otherwise returns false.

        **See also** **toNumber** ().
        """
        ...

    def isObject(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isObject

        **bool QScriptValue::isObject() const**

        Returns true if this **QScriptValue**  is of the Object type; otherwise
        returns false.

        Note that function values, variant values, and **QObject**  values are
        objects, so this function returns true for such values.

        **See also** **toObject** () and **QScriptEngine::newObject** ().
        """
        ...

    def isQMetaObject(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isQMetaObject

        **bool QScriptValue::isQMetaObject() const**

        Returns true if this **QScriptValue**  is a **QMetaObject** ; otherwise
        returns false.

        **See also** **toQMetaObject** () and **QScriptEngine::newQMetaObject**
        ().
        """
        ...

    def isQObject(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isQObject

        **bool QScriptValue::isQObject() const**

        Returns true if this **QScriptValue**  is a **QObject** ; otherwise
        returns false.

        Note: This function returns true even if the **QObject**  that this
        **QScriptValue**  wraps has been deleted.

        **See also** **toQObject** () and **QScriptEngine::newQObject** ().
        """
        ...

    def isRegExp(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isRegExp

        **bool QScriptValue::isRegExp() const**

        Returns true if this **QScriptValue**  is an object of the RegExp class;
        otherwise returns false.

        **See also** **QScriptEngine::newRegExp** ().
        """
        ...

    def isString(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isString

        **bool QScriptValue::isString() const**

        Returns true if this **QScriptValue**  is of the primitive type String;
        otherwise returns false.

        **See also** **toString** ().
        """
        ...

    def isUndefined(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isUndefined

        **bool QScriptValue::isUndefined() const**

        Returns true if this **QScriptValue**  is of the primitive type
        Undefined; otherwise returns false.

        **See also** **QScriptEngine::undefinedValue** ().
        """
        ...

    def isValid(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isValid

        **bool QScriptValue::isValid() const**

        Returns true if this **QScriptValue**  is valid; otherwise returns
        false.
        """
        ...

    def isVariant(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#isVariant

        **bool QScriptValue::isVariant() const**

        Returns true if this **QScriptValue**  is a variant value; otherwise
        returns false.

        **See also** **toVariant** () and **QScriptEngine::newVariant** ().
        """
        ...

    def lessThan(self, other: PySide2.QtScript.QScriptValue) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#lessThan

        **bool QScriptValue::lessThan(const QScriptValue & other ) const**

        Returns true if this **QScriptValue**  is less than **other** ,
        otherwise returns false. The comparison follows the behavior described
        in **ECMA-262**  section 11.8.5, "The Abstract Relational Comparison
        Algorithm".

        Note that if this **QScriptValue**  or the **other** value are objects,
        calling this function has side effects on the script engine, since the
        engine will call the object\'s valueOf() function (and possibly
        **toString** ()) in an attempt to convert the object to a primitive
        value (possibly resulting in an uncaught script exception).

        **See also** **equals** ().
        """
        ...

    def objectId(self) -> int:
        ...

    @typing.overload
    def property(
        self, arrayIndex: int, mode: PySide2.QtScript.QScriptValue.ResolveFlags = ...
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#property

        **QScriptValue QScriptValue::property(const QString & name , const
        QScriptValue::ResolveFlags & mode = ResolvePrototype) const**

        Returns the value of this **QScriptValue** 's property with the given
        **name** , using the given **mode** to resolve the property.

        If no such property exists, an invalid **QScriptValue**  is returned.

        If the property is implemented using a getter function (i.e. has the
        **PropertyGetter**  flag set), calling property() has side-effects on
        the script engine, since the getter function will be called (possibly
        resulting in an uncaught script exception). If an exception occurred,
        property() returns the value that was thrown (typically an `Error`
        object).

        **See also** **setProperty** (), **propertyFlags** (), and
        **QScriptValueIterator** .
        """
        ...

    @typing.overload
    def property(
        self,
        name: PySide2.QtScript.QScriptString,
        mode: PySide2.QtScript.QScriptValue.ResolveFlags = ...,
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#property-1

        **QScriptValue QScriptValue::property(quint32 arrayIndex , const
        QScriptValue::ResolveFlags & mode = ResolvePrototype) const**

        This is an overloaded function.

        Returns the property at the given **arrayIndex** , using the given
        **mode** to resolve the property.

        This function is provided for convenience and performance when working
        with array objects.

        If this **QScriptValue**  is not an Array object, this function behaves
        as if property() was called with the string representation of
        **arrayIndex**.
        """
        ...

    @typing.overload
    def property(
        self, name: str, mode: PySide2.QtScript.QScriptValue.ResolveFlags = ...
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#property-2

        **QScriptValue QScriptValue::property(const QScriptString & name , const
        QScriptValue::ResolveFlags & mode = ResolvePrototype) const**

        Returns the value of this **QScriptValue** 's property with the given
        **name** , using the given **mode** to resolve the property.

        This overload of property() is useful when you need to look up the same
        property repeatedly, since the lookup can be performed faster when the
        name is represented as an interned string.

        This function was introduced in Qt 4.4.

        **See also** **QScriptEngine::toStringHandle** () and **setProperty**
        ().
        """
        ...

    @typing.overload
    def propertyFlags(
        self,
        name: PySide2.QtScript.QScriptString,
        mode: PySide2.QtScript.QScriptValue.ResolveFlags = ...,
    ) -> PySide2.QtScript.QScriptValue.PropertyFlags:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#propertyFlags

        **QScriptValue::PropertyFlags QScriptValue::propertyFlags(const QString
        & name , const QScriptValue::ResolveFlags & mode = ResolvePrototype)
        const**

        Returns the flags of the property with the given **name** , using the
        given **mode** to resolve the property.

        **See also** **property** ().
        """
        ...

    @typing.overload
    def propertyFlags(
        self, name: str, mode: PySide2.QtScript.QScriptValue.ResolveFlags = ...
    ) -> PySide2.QtScript.QScriptValue.PropertyFlags:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#propertyFlags-1

        **QScriptValue::PropertyFlags QScriptValue::propertyFlags(const
        QScriptString & name , const QScriptValue::ResolveFlags & mode =
        ResolvePrototype) const**

        Returns the flags of the property with the given **name** , using the
        given **mode** to resolve the property.

        This function was introduced in Qt 4.4.

        **See also** **property** ().
        """
        ...

    def prototype(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#prototype

        **QScriptValue QScriptValue::prototype() const**

        If this **QScriptValue**  is an object, returns the internal prototype
        (`__proto__` property) of this object; otherwise returns an invalid
        **QScriptValue** .

        **See also** **setPrototype** () and **isObject** ().
        """
        ...

    def scope(self) -> PySide2.QtScript.QScriptValue:
        ...

    def scriptClass(self) -> PySide2.QtScript.QScriptClass:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#scriptClass

        **QScriptClass *QScriptValue::scriptClass() const**

        Returns the custom script class that this script object is an instance
        of, or 0 if the object is not of a custom class.

        This function was introduced in Qt 4.4.

        **See also** **setScriptClass** ().
        """
        ...

    def setData(self, data: PySide2.QtScript.QScriptValue) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#setData

        **void QScriptValue::setData(const QScriptValue & data )**

        Sets the internal **data** of this **QScriptValue**  object. You can use
        this function to set object-specific data that won't be directly
        accessible to scripts, but may be retrieved in C++ using the **data** ()
        function.

        This function was introduced in Qt 4.4.

        **See also** **data** () and
        **QScriptEngine::reportAdditionalMemoryCost** ().
        """
        ...

    @typing.overload
    def setProperty(
        self,
        arrayIndex: int,
        value: PySide2.QtScript.QScriptValue,
        flags: PySide2.QtScript.QScriptValue.PropertyFlags = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#setProperty

        **void QScriptValue::setProperty(const QString & name , const
        QScriptValue & value , const QScriptValue::PropertyFlags & flags =
        KeepExistingFlags)**

        Sets the value of this **QScriptValue** 's property with the given
        **name** to the given **value**.

        If this **QScriptValue**  is not an object, this function does nothing.

        If this **QScriptValue**  does not already have a property with name
        **name** , a new property is created; the given **flags** then specify
        how this property may be accessed by script code.

        If **value** is invalid, the property is removed.

        If the property is implemented using a setter function (i.e. has the
        **PropertySetter**  flag set), calling setProperty() has side-effects on
        the script engine, since the setter function will be called with the
        given **value** as argument (possibly resulting in an uncaught script
        exception).

        Note that you cannot specify custom getter or setter functions for
        built-in properties, such as the `length` property of Array objects or
        meta properties of **QObject**  objects.

        **See also** **property** ().
        """
        ...

    @typing.overload
    def setProperty(
        self,
        name: PySide2.QtScript.QScriptString,
        value: PySide2.QtScript.QScriptValue,
        flags: PySide2.QtScript.QScriptValue.PropertyFlags = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#setProperty-1

        **void QScriptValue::setProperty(quint32 arrayIndex , const QScriptValue
        & value , const QScriptValue::PropertyFlags & flags =
        KeepExistingFlags)**

        This is an overloaded function.

        Sets the property at the given **arrayIndex** to the given **value**.

        This function is provided for convenience and performance when working
        with array objects.

        If this **QScriptValue**  is not an Array object, this function behaves
        as if setProperty() was called with the string representation of
        **arrayIndex**.
        """
        ...

    @typing.overload
    def setProperty(
        self,
        name: str,
        value: PySide2.QtScript.QScriptValue,
        flags: PySide2.QtScript.QScriptValue.PropertyFlags = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#setProperty-2

        **void QScriptValue::setProperty(const QScriptString & name , const
        QScriptValue & value , const QScriptValue::PropertyFlags & flags =
        KeepExistingFlags)**

        Sets the value of this **QScriptValue** 's property with the given
        **name** to the given **value**. The given **flags** specify how this
        property may be accessed by script code.

        This overload of setProperty() is useful when you need to set the same
        property repeatedly, since the operation can be performed faster when
        the name is represented as an interned string.

        This function was introduced in Qt 4.4.

        **See also** **QScriptEngine::toStringHandle** ().
        """
        ...

    def setPrototype(self, prototype: PySide2.QtScript.QScriptValue) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#setPrototype

        **void QScriptValue::setPrototype(const QScriptValue & prototype )**

        If this **QScriptValue**  is an object, sets the internal prototype
        (`__proto__` property) of this object to be **prototype** ; otherwise
        does nothing.

        The internal prototype should not be confused with the public property
        with name "prototype"; the public prototype is usually only set on
        functions that act as constructors.

        **See also** **prototype** () and **isObject** ().
        """
        ...

    def setScope(self, scope: PySide2.QtScript.QScriptValue) -> None:
        ...

    def setScriptClass(self, scriptClass: PySide2.QtScript.QScriptClass) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#setScriptClass

        **void QScriptValue::setScriptClass(QScriptClass * scriptClass )**

        Sets the custom script class of this script object to **scriptClass**.
        This can be used to "promote" a plain script object (e.g. created by the
        "new" operator in a script, or by **QScriptEngine::newObject** () in
        C++) to an object of a custom type.

        If **scriptClass** is 0, the object will be demoted to a plain script
        object.

        This function was introduced in Qt 4.4.

        **See also** **scriptClass** () and **setData** ().
        """
        ...

    def strictlyEquals(self, other: PySide2.QtScript.QScriptValue) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#strictlyEquals

        **bool QScriptValue::strictlyEquals(const QScriptValue & other ) const**

        Returns true if this **QScriptValue**  is equal to **other** using
        strict comparison (no conversion), otherwise returns false. The
        comparison follows the behavior described in **ECMA-262**  section
        11.9.6, "The Strict Equality Comparison Algorithm".

        If the type of this **QScriptValue**  is different from the type of the
        **other** value, this function returns false. If the types are equal,
        the result depends on the type, as shown in the following table:

        TypeResult
        Undefinedtrue
        Nulltrue
        Booleantrue if both values are
        true, false otherwise
        Numberfalse if either value is NaN (Not-a-
        Number); true if values are equal, false otherwise
        Stringtrue if both
        values are exactly the same sequence of characters, false otherwise
        Objecttrue if both values refer to the same object, false otherwise

        **See also** **equals** ().
        """
        ...

    def toBool(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toBool

        **bool QScriptValue::toBool() const**

        Returns the boolean value of this **QScriptValue** , using the
        conversion rules described in **ECMA-262**  section 9.2, "ToBoolean".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s valueOf() function (and possibly **toString** ()) in an attempt
        to convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        This function was introduced in Qt 4.5.

        **See also** **isBool** ().
        """
        ...

    def toBoolean(self) -> bool:
        ...

    def toDateTime(self) -> PySide2.QtCore.QDateTime:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toDateTime

        **QDateTime QScriptValue::toDateTime() const**

        Returns a **QDateTime**  representation of this value, in local time. If
        this **QScriptValue**  is not a date, or the value of the date is NaN
        (Not-a-Number), an invalid **QDateTime**  is returned.

        **See also** **isDate** ().
        """
        ...

    def toInt32(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toInt32

        **qint32 QScriptValue::toInt32() const**

        Returns the signed 32-bit integer value of this **QScriptValue** , using
        the conversion rules described in **ECMA-262**  section 9.5, "ToInt32".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s valueOf() function (and possibly **toString** ()) in an attempt
        to convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        **See also** **toNumber** () and **toUInt32** ().
        """
        ...

    def toInteger(self) -> float:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toInteger

        **qsreal QScriptValue::toInteger() const**

        Returns the integer value of this **QScriptValue** , using the
        conversion rules described in **ECMA-262**  section 9.4, "ToInteger".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s valueOf() function (and possibly **toString** ()) in an attempt
        to convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        **See also** **toNumber** ().
        """
        ...

    def toNumber(self) -> float:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toNumber

        **qsreal QScriptValue::toNumber() const**

        Returns the number value of this **QScriptValue** , as defined in
        **ECMA-262**  section 9.3, "ToNumber".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s valueOf() function (and possibly **toString** ()) in an attempt
        to convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        **See also** **isNumber** (), **toInteger** (), **toInt32** (),
        **toUInt32** (), and **toUInt16** ().
        """
        ...

    def toObject(self) -> PySide2.QtScript.QScriptValue:
        ...

    def toQMetaObject(self) -> PySide2.QtCore.QMetaObject:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toQMetaObject

        **const QMetaObject *QScriptValue::toQMetaObject() const**

        If this **QScriptValue**  is a **QMetaObject** , returns the
        **QMetaObject**  pointer that the **QScriptValue**  represents;
        otherwise, returns 0.

        **See also** **isQMetaObject** ().
        """
        ...

    def toQObject(self) -> PySide2.QtCore.QObject:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toQObject

        **QObject *QScriptValue::toQObject() const**

        If this **QScriptValue**  is a **QObject** , returns the **QObject**
        pointer that the **QScriptValue**  represents; otherwise, returns 0.

        If the **QObject**  that this **QScriptValue**  wraps has been deleted,
        this function returns 0 (i.e. it is possible for toQObject() to return 0
        even when **isQObject** () returns true).

        **See also** **isQObject** ().
        """
        ...

    def toRegExp(self) -> PySide2.QtCore.QRegExp:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toRegExp

        **QRegExp QScriptValue::toRegExp() const**

        Returns the **QRegExp**  representation of this value. If this
        **QScriptValue**  is not a regular expression, an empty **QRegExp**  is
        returned.

        **See also** **isRegExp** ().
        """
        ...

    def toString(self) -> str:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toString

        **QString QScriptValue::toString() const**

        Returns the string value of this **QScriptValue** , as defined in
        **ECMA-262**  section 9.8, "ToString".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s toString() function (and possibly valueOf()) in an attempt to
        convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        **See also** **isString** ().
        """
        ...

    def toUInt16(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toUInt16

        **quint16 QScriptValue::toUInt16() const**

        Returns the unsigned 16-bit integer value of this **QScriptValue** ,
        using the conversion rules described in **ECMA-262**  section 9.7,
        "ToUint16".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s valueOf() function (and possibly **toString** ()) in an attempt
        to convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        **See also** **toNumber** ().
        """
        ...

    def toUInt32(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toUInt32

        **quint32 QScriptValue::toUInt32() const**

        Returns the unsigned 32-bit integer value of this **QScriptValue** ,
        using the conversion rules described in **ECMA-262**  section 9.6,
        "ToUint32".

        Note that if this **QScriptValue**  is an object, calling this function
        has side effects on the script engine, since the engine will call the
        object\'s valueOf() function (and possibly **toString** ()) in an attempt
        to convert the object to a primitive value (possibly resulting in an
        uncaught script exception).

        **See also** **toNumber** () and **toInt32** ().
        """
        ...

    def toVariant(self) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qscriptvalue.html#toVariant

        **QVariant QScriptValue::toVariant() const**

        Returns the **QVariant**  value of this **QScriptValue** , if it can be
        converted to a **QVariant** ; otherwise returns an invalid **QVariant**
        . The conversion is performed according to the following table:

        Input TypeResult
        UndefinedAn invalid **QVariant** .
        NullAn invalid
        **QVariant** .
        BooleanA **QVariant**  containing the value of the
        boolean.
        NumberA **QVariant**  containing the value of the number.
        StringA **QVariant**  containing the value of the string.
        **QVariant**
        ObjectThe result is the **QVariant**  value of the object (no
        conversion).
        **QObject**  ObjectA **QVariant**  containing a pointer
        to the **QObject** .
        Date ObjectA **QVariant**  containing the date
        value (**toDateTime** ()).
        RegExp ObjectA **QVariant**  containing the
        regular expression value (**toRegExp** ()).
        Array ObjectThe array is
        converted to a **QVariantList** . Each element is converted to a
        **QVariant** , recursively; cyclic references are not followed.
        ObjectThe object is converted to a **QVariantMap** . Each property is
        converted to a **QVariant** , recursively; cyclic references are not
        followed.

        **See also** **isVariant** ().
        """
        ...
