"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.Qt3DCore
import PySide2.Qt3DRender

bytes = str


class Qt3DRender(object):
    """
    https://doc.qt.io/qt-5/qt3drender.html

    **Detailed Description**
    """

    class API(object):
        OpenGL: Qt3DRender.API = ...
        Vulkan: Qt3DRender.API = ...
        DirectX: Qt3DRender.API = ...
        Metal: Qt3DRender.API = ...
        Null: Qt3DRender.API = ...

    class PropertyReaderInterface(object):
        def __init__(self) -> None:
            ...

        def readProperty(self, v: typing.Any) -> typing.Any:
            ...

    class QAbstractFunctor(object):
        def __init__(self) -> None:
            ...

        def id(self) -> int:
            ...

    class QAbstractLight(PySide2.Qt3DCore.QComponent):
        PointLight: Qt3DRender.QAbstractLight = ...
        DirectionalLight: Qt3DRender.QAbstractLight = ...
        SpotLight: Qt3DRender.QAbstractLight = ...

        class Type(object):
            PointLight: Qt3DRender.QAbstractLight.Type = ...
            DirectionalLight: Qt3DRender.QAbstractLight.Type = ...
            SpotLight: Qt3DRender.QAbstractLight.Type = ...

        def color(self) -> PySide2.QtGui.QColor:
            ...

        def intensity(self) -> float:
            ...

        def setColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setIntensity(self, intensity: float) -> None:
            ...

        def type(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractLight.Type:
            ...

    class QAbstractRayCaster(PySide2.Qt3DCore.QComponent):
        AcceptAnyMatchingLayers: Qt3DRender.QAbstractRayCaster = ...
        Continuous: Qt3DRender.QAbstractRayCaster = ...
        AcceptAllMatchingLayers: Qt3DRender.QAbstractRayCaster = ...
        SingleShot: Qt3DRender.QAbstractRayCaster = ...
        DiscardAnyMatchingLayers: Qt3DRender.QAbstractRayCaster = ...
        DiscardAllMatchingLayers: Qt3DRender.QAbstractRayCaster = ...

        class FilterMode(object):
            AcceptAnyMatchingLayers: Qt3DRender.QAbstractRayCaster.FilterMode = ...
            AcceptAllMatchingLayers: Qt3DRender.QAbstractRayCaster.FilterMode = ...
            DiscardAnyMatchingLayers: Qt3DRender.QAbstractRayCaster.FilterMode = ...
            DiscardAllMatchingLayers: Qt3DRender.QAbstractRayCaster.FilterMode = ...

        class RunMode(object):
            Continuous: Qt3DRender.QAbstractRayCaster.RunMode = ...
            SingleShot: Qt3DRender.QAbstractRayCaster.RunMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addLayer(self, layer: PySide2.Qt3DRender.Qt3DRender.QLayer) -> None:
            ...

        def filterMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractRayCaster.FilterMode:
            ...

        def hits(self) -> typing.List:
            ...

        def layers(self) -> typing.List:
            ...

        def removeLayer(self, layer: PySide2.Qt3DRender.Qt3DRender.QLayer) -> None:
            ...

        def runMode(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractRayCaster.RunMode:
            ...

        def setFilterMode(
            self,
            filterMode: PySide2.Qt3DRender.Qt3DRender.QAbstractRayCaster.FilterMode,
        ) -> None:
            ...

        def setRunMode(
            self, runMode: PySide2.Qt3DRender.Qt3DRender.QAbstractRayCaster.RunMode
        ) -> None:
            ...

    class QAbstractTexture(PySide2.Qt3DCore.QNode):
        CompareNone: Qt3DRender.QAbstractTexture = ...
        NoFormat: Qt3DRender.QAbstractTexture = ...
        NoHandle: Qt3DRender.QAbstractTexture = ...
        None_: Qt3DRender.QAbstractTexture = ...
        TargetAutomatic: Qt3DRender.QAbstractTexture = ...
        Automatic: Qt3DRender.QAbstractTexture = ...
        Loading: Qt3DRender.QAbstractTexture = ...
        OpenGLTextureId: Qt3DRender.QAbstractTexture = ...
        Ready: Qt3DRender.QAbstractTexture = ...
        Error: Qt3DRender.QAbstractTexture = ...
        CompareNever: Qt3DRender.QAbstractTexture = ...
        CompareLess: Qt3DRender.QAbstractTexture = ...
        CompareEqual: Qt3DRender.QAbstractTexture = ...
        CompareLessEqual: Qt3DRender.QAbstractTexture = ...
        CompareGreater: Qt3DRender.QAbstractTexture = ...
        CommpareNotEqual: Qt3DRender.QAbstractTexture = ...
        CompareGreaterEqual: Qt3DRender.QAbstractTexture = ...
        CompareAlways: Qt3DRender.QAbstractTexture = ...
        Target1D: Qt3DRender.QAbstractTexture = ...
        Target2D: Qt3DRender.QAbstractTexture = ...
        DepthFormat: Qt3DRender.QAbstractTexture = ...
        AlphaFormat: Qt3DRender.QAbstractTexture = ...
        RGBFormat: Qt3DRender.QAbstractTexture = ...
        RGBAFormat: Qt3DRender.QAbstractTexture = ...
        LuminanceFormat: Qt3DRender.QAbstractTexture = ...
        LuminanceAlphaFormat: Qt3DRender.QAbstractTexture = ...
        Nearest: Qt3DRender.QAbstractTexture = ...
        Linear: Qt3DRender.QAbstractTexture = ...
        NearestMipMapNearest: Qt3DRender.QAbstractTexture = ...
        LinearMipMapNearest: Qt3DRender.QAbstractTexture = ...
        NearestMipMapLinear: Qt3DRender.QAbstractTexture = ...
        LinearMipMapLinear: Qt3DRender.QAbstractTexture = ...
        RG3B2: Qt3DRender.QAbstractTexture = ...
        RGB8_UNorm: Qt3DRender.QAbstractTexture = ...
        RGB16_UNorm: Qt3DRender.QAbstractTexture = ...
        RGBA4: Qt3DRender.QAbstractTexture = ...
        RGB5A1: Qt3DRender.QAbstractTexture = ...
        RGBA8_UNorm: Qt3DRender.QAbstractTexture = ...
        RGB10A2: Qt3DRender.QAbstractTexture = ...
        RGBA16_UNorm: Qt3DRender.QAbstractTexture = ...
        Target3D: Qt3DRender.QAbstractTexture = ...
        D16: Qt3DRender.QAbstractTexture = ...
        D24: Qt3DRender.QAbstractTexture = ...
        D32: Qt3DRender.QAbstractTexture = ...
        R8_UNorm: Qt3DRender.QAbstractTexture = ...
        R16_UNorm: Qt3DRender.QAbstractTexture = ...
        RG8_UNorm: Qt3DRender.QAbstractTexture = ...
        RG16_UNorm: Qt3DRender.QAbstractTexture = ...
        R16F: Qt3DRender.QAbstractTexture = ...
        R32F: Qt3DRender.QAbstractTexture = ...
        RG16F: Qt3DRender.QAbstractTexture = ...
        RG32F: Qt3DRender.QAbstractTexture = ...
        R8I: Qt3DRender.QAbstractTexture = ...
        R8U: Qt3DRender.QAbstractTexture = ...
        R16I: Qt3DRender.QAbstractTexture = ...
        R16U: Qt3DRender.QAbstractTexture = ...
        R32I: Qt3DRender.QAbstractTexture = ...
        R32U: Qt3DRender.QAbstractTexture = ...
        RG8I: Qt3DRender.QAbstractTexture = ...
        RG8U: Qt3DRender.QAbstractTexture = ...
        RG16I: Qt3DRender.QAbstractTexture = ...
        RG16U: Qt3DRender.QAbstractTexture = ...
        RG32I: Qt3DRender.QAbstractTexture = ...
        RG32U: Qt3DRender.QAbstractTexture = ...
        RGB_DXT1: Qt3DRender.QAbstractTexture = ...
        RGBA_DXT1: Qt3DRender.QAbstractTexture = ...
        RGBA_DXT3: Qt3DRender.QAbstractTexture = ...
        RGBA_DXT5: Qt3DRender.QAbstractTexture = ...
        TargetRectangle: Qt3DRender.QAbstractTexture = ...
        TargetCubeMap: Qt3DRender.QAbstractTexture = ...
        CubeMapPositiveX: Qt3DRender.QAbstractTexture = ...
        CubeMapNegativeX: Qt3DRender.QAbstractTexture = ...
        CubeMapPositiveY: Qt3DRender.QAbstractTexture = ...
        CubeMapNegativeY: Qt3DRender.QAbstractTexture = ...
        CubeMapPositiveZ: Qt3DRender.QAbstractTexture = ...
        CubeMapNegativeZ: Qt3DRender.QAbstractTexture = ...
        AllFaces: Qt3DRender.QAbstractTexture = ...
        RGBA32F: Qt3DRender.QAbstractTexture = ...
        RGB32F: Qt3DRender.QAbstractTexture = ...
        RGBA16F: Qt3DRender.QAbstractTexture = ...
        RGB16F: Qt3DRender.QAbstractTexture = ...
        CompareRefToTexture: Qt3DRender.QAbstractTexture = ...
        D24S8: Qt3DRender.QAbstractTexture = ...
        Target1DArray: Qt3DRender.QAbstractTexture = ...
        Target2DArray: Qt3DRender.QAbstractTexture = ...
        TargetBuffer: Qt3DRender.QAbstractTexture = ...
        RG11B10F: Qt3DRender.QAbstractTexture = ...
        RGB9E5: Qt3DRender.QAbstractTexture = ...
        SRGB8: Qt3DRender.QAbstractTexture = ...
        SRGB8_Alpha8: Qt3DRender.QAbstractTexture = ...
        SRGB_DXT1: Qt3DRender.QAbstractTexture = ...
        SRGB_Alpha_DXT1: Qt3DRender.QAbstractTexture = ...
        SRGB_Alpha_DXT3: Qt3DRender.QAbstractTexture = ...
        SRGB_Alpha_DXT5: Qt3DRender.QAbstractTexture = ...
        D32F: Qt3DRender.QAbstractTexture = ...
        D32FS8X24: Qt3DRender.QAbstractTexture = ...
        R5G6B5: Qt3DRender.QAbstractTexture = ...
        RGB8_ETC1: Qt3DRender.QAbstractTexture = ...
        RGBA32U: Qt3DRender.QAbstractTexture = ...
        RGB32U: Qt3DRender.QAbstractTexture = ...
        RGBA16U: Qt3DRender.QAbstractTexture = ...
        RGB16U: Qt3DRender.QAbstractTexture = ...
        RGBA8U: Qt3DRender.QAbstractTexture = ...
        RGB8U: Qt3DRender.QAbstractTexture = ...
        RGBA32I: Qt3DRender.QAbstractTexture = ...
        RGB32I: Qt3DRender.QAbstractTexture = ...
        RGBA16I: Qt3DRender.QAbstractTexture = ...
        RGB16I: Qt3DRender.QAbstractTexture = ...
        RGBA8I: Qt3DRender.QAbstractTexture = ...
        RGB8I: Qt3DRender.QAbstractTexture = ...
        R_ATI1N_UNorm: Qt3DRender.QAbstractTexture = ...
        R_ATI1N_SNorm: Qt3DRender.QAbstractTexture = ...
        RG_ATI2N_UNorm: Qt3DRender.QAbstractTexture = ...
        RG_ATI2N_SNorm: Qt3DRender.QAbstractTexture = ...
        RGB_BP_UNorm: Qt3DRender.QAbstractTexture = ...
        SRGB_BP_UNorm: Qt3DRender.QAbstractTexture = ...
        RGB_BP_SIGNED_FLOAT: Qt3DRender.QAbstractTexture = ...
        RGB_BP_UNSIGNED_FLOAT: Qt3DRender.QAbstractTexture = ...
        R8_SNorm: Qt3DRender.QAbstractTexture = ...
        RG8_SNorm: Qt3DRender.QAbstractTexture = ...
        RGB8_SNorm: Qt3DRender.QAbstractTexture = ...
        RGBA8_SNorm: Qt3DRender.QAbstractTexture = ...
        R16_SNorm: Qt3DRender.QAbstractTexture = ...
        RG16_SNorm: Qt3DRender.QAbstractTexture = ...
        RGB16_SNorm: Qt3DRender.QAbstractTexture = ...
        RGBA16_SNorm: Qt3DRender.QAbstractTexture = ...
        TargetCubeMapArray: Qt3DRender.QAbstractTexture = ...
        RGB10A2U: Qt3DRender.QAbstractTexture = ...
        Target2DMultisample: Qt3DRender.QAbstractTexture = ...
        Target2DMultisampleArray: Qt3DRender.QAbstractTexture = ...
        R11_EAC_UNorm: Qt3DRender.QAbstractTexture = ...
        R11_EAC_SNorm: Qt3DRender.QAbstractTexture = ...
        RG11_EAC_UNorm: Qt3DRender.QAbstractTexture = ...
        RG11_EAC_SNorm: Qt3DRender.QAbstractTexture = ...
        RGB8_ETC2: Qt3DRender.QAbstractTexture = ...
        SRGB8_ETC2: Qt3DRender.QAbstractTexture = ...
        RGB8_PunchThrough_Alpha1_ETC2: Qt3DRender.QAbstractTexture = ...
        SRGB8_PunchThrough_Alpha1_ETC2: Qt3DRender.QAbstractTexture = ...
        RGBA8_ETC2_EAC: Qt3DRender.QAbstractTexture = ...
        SRGB8_Alpha8_ETC2_EAC: Qt3DRender.QAbstractTexture = ...

        class ComparisonFunction(object):
            CompareNever: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CompareLess: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CompareEqual: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CompareLessEqual: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CompareGreater: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CommpareNotEqual: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CompareGreaterEqual: Qt3DRender.QAbstractTexture.ComparisonFunction = ...
            CompareAlways: Qt3DRender.QAbstractTexture.ComparisonFunction = ...

        class ComparisonMode(object):
            CompareNone: Qt3DRender.QAbstractTexture.ComparisonMode = ...
            CompareRefToTexture: Qt3DRender.QAbstractTexture.ComparisonMode = ...

        class CubeMapFace(object):
            CubeMapPositiveX: Qt3DRender.QAbstractTexture.CubeMapFace = ...
            CubeMapNegativeX: Qt3DRender.QAbstractTexture.CubeMapFace = ...
            CubeMapPositiveY: Qt3DRender.QAbstractTexture.CubeMapFace = ...
            CubeMapNegativeY: Qt3DRender.QAbstractTexture.CubeMapFace = ...
            CubeMapPositiveZ: Qt3DRender.QAbstractTexture.CubeMapFace = ...
            CubeMapNegativeZ: Qt3DRender.QAbstractTexture.CubeMapFace = ...
            AllFaces: Qt3DRender.QAbstractTexture.CubeMapFace = ...

        class Filter(object):
            Nearest: Qt3DRender.QAbstractTexture.Filter = ...
            Linear: Qt3DRender.QAbstractTexture.Filter = ...
            NearestMipMapNearest: Qt3DRender.QAbstractTexture.Filter = ...
            LinearMipMapNearest: Qt3DRender.QAbstractTexture.Filter = ...
            NearestMipMapLinear: Qt3DRender.QAbstractTexture.Filter = ...
            LinearMipMapLinear: Qt3DRender.QAbstractTexture.Filter = ...

        class HandleType(object):
            NoHandle: Qt3DRender.QAbstractTexture.HandleType = ...
            OpenGLTextureId: Qt3DRender.QAbstractTexture.HandleType = ...

        class Status(object):
            None_: Qt3DRender.QAbstractTexture.Status = ...
            Loading: Qt3DRender.QAbstractTexture.Status = ...
            Ready: Qt3DRender.QAbstractTexture.Status = ...
            Error: Qt3DRender.QAbstractTexture.Status = ...

        class Target(object):
            TargetAutomatic: Qt3DRender.QAbstractTexture.Target = ...
            Target1D: Qt3DRender.QAbstractTexture.Target = ...
            Target2D: Qt3DRender.QAbstractTexture.Target = ...
            Target3D: Qt3DRender.QAbstractTexture.Target = ...
            TargetRectangle: Qt3DRender.QAbstractTexture.Target = ...
            TargetCubeMap: Qt3DRender.QAbstractTexture.Target = ...
            Target1DArray: Qt3DRender.QAbstractTexture.Target = ...
            Target2DArray: Qt3DRender.QAbstractTexture.Target = ...
            TargetBuffer: Qt3DRender.QAbstractTexture.Target = ...
            TargetCubeMapArray: Qt3DRender.QAbstractTexture.Target = ...
            Target2DMultisample: Qt3DRender.QAbstractTexture.Target = ...
            Target2DMultisampleArray: Qt3DRender.QAbstractTexture.Target = ...

        class TextureFormat(object):
            NoFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            Automatic: Qt3DRender.QAbstractTexture.TextureFormat = ...
            DepthFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            AlphaFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBAFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            LuminanceFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            LuminanceAlphaFormat: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG3B2: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB16_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA4: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB5A1: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA8_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB10A2: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA16_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            D16: Qt3DRender.QAbstractTexture.TextureFormat = ...
            D24: Qt3DRender.QAbstractTexture.TextureFormat = ...
            D32: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R8_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R16_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG8_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG16_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R16F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R32F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG16F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG32F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R8I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R8U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R16I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R16U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R32I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R32U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG8I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG8U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG16I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG16U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG32I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG32U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB_DXT1: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA_DXT1: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA_DXT3: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA_DXT5: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA32F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB32F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA16F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB16F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            D24S8: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG11B10F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB9E5: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB8: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB8_Alpha8: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB_DXT1: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB_Alpha_DXT1: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB_Alpha_DXT3: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB_Alpha_DXT5: Qt3DRender.QAbstractTexture.TextureFormat = ...
            D32F: Qt3DRender.QAbstractTexture.TextureFormat = ...
            D32FS8X24: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R5G6B5: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8_ETC1: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA32U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB32U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA16U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB16U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA8U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA32I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB32I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA16I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB16I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA8I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8I: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R_ATI1N_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R_ATI1N_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG_ATI2N_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG_ATI2N_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB_BP_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB_BP_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB_BP_SIGNED_FLOAT: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB_BP_UNSIGNED_FLOAT: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R8_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG8_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA8_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R16_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG16_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB16_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGBA16_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB10A2U: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R11_EAC_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            R11_EAC_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG11_EAC_UNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RG11_EAC_SNorm: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8_ETC2: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB8_ETC2: Qt3DRender.QAbstractTexture.TextureFormat = ...
            RGB8_PunchThrough_Alpha1_ETC2: Qt3DRender.QAbstractTexture.TextureFormat = (
                ...
            )
            SRGB8_PunchThrough_Alpha1_ETC2: Qt3DRender.QAbstractTexture.TextureFormat = (
                ...
            )
            RGBA8_ETC2_EAC: Qt3DRender.QAbstractTexture.TextureFormat = ...
            SRGB8_Alpha8_ETC2_EAC: Qt3DRender.QAbstractTexture.TextureFormat = ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            target: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Target,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        def addTextureImage(
            self, textureImage: PySide2.Qt3DRender.Qt3DRender.QAbstractTextureImage
        ) -> None:
            ...

        def comparisonFunction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction:
            ...

        def comparisonMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode:
            ...

        def depth(self) -> int:
            ...

        def format(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat:
            ...

        def generateMipMaps(self) -> bool:
            ...

        def handle(self) -> typing.Any:
            ...

        def handleType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.HandleType:
            ...

        def height(self) -> int:
            ...

        def layers(self) -> int:
            ...

        def magnificationFilter(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter:
            ...

        def maximumAnisotropy(self) -> float:
            ...

        def minificationFilter(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter:
            ...

        def removeTextureImage(
            self, textureImage: PySide2.Qt3DRender.Qt3DRender.QAbstractTextureImage
        ) -> None:
            ...

        def samples(self) -> int:
            ...

        def setComparisonFunction(
            self,
            function: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction,
        ) -> None:
            ...

        def setComparisonMode(
            self, mode: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode
        ) -> None:
            ...

        def setDepth(self, depth: int) -> None:
            ...

        def setFormat(
            self, format: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat
        ) -> None:
            ...

        def setGenerateMipMaps(self, gen: bool) -> None:
            ...

        def setHandle(self, handle: typing.Any) -> None:
            ...

        def setHandleType(
            self, type: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.HandleType
        ) -> None:
            ...

        def setHeight(self, height: int) -> None:
            ...

        def setLayers(self, layers: int) -> None:
            ...

        def setMagnificationFilter(
            self, f: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter
        ) -> None:
            ...

        def setMaximumAnisotropy(self, anisotropy: float) -> None:
            ...

        def setMinificationFilter(
            self, f: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter
        ) -> None:
            ...

        def setSamples(self, samples: int) -> None:
            ...

        def setSize(self, width: int, height: int = ..., depth: int = ...) -> None:
            ...

        def setStatus(
            self, status: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Status
        ) -> None:
            ...

        def setWidth(self, width: int) -> None:
            ...

        def setWrapMode(
            self, wrapMode: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode
        ) -> None:
            ...

        def status(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Status:
            ...

        def target(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Target:
            ...

        def textureImages(self) -> typing.List:
            ...

        def width(self) -> int:
            ...

        def wrapMode(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode:
            ...

    class QAbstractTextureImage(PySide2.Qt3DCore.QNode):
        def face(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace:
            ...

        def layer(self) -> int:
            ...

        def mipLevel(self) -> int:
            ...

        def notifyDataGeneratorChanged(self) -> None:
            ...

        def setFace(
            self, face: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace
        ) -> None:
            ...

        def setLayer(self, layer: int) -> None:
            ...

        def setMipLevel(self, level: int) -> None:
            ...

    class QAlphaCoverage(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QAlphaTest(PySide2.Qt3DRender.QRenderState):
        Never: Qt3DRender.QAlphaTest = ...
        Less: Qt3DRender.QAlphaTest = ...
        Equal: Qt3DRender.QAlphaTest = ...
        LessOrEqual: Qt3DRender.QAlphaTest = ...
        Greater: Qt3DRender.QAlphaTest = ...
        NotEqual: Qt3DRender.QAlphaTest = ...
        GreaterOrEqual: Qt3DRender.QAlphaTest = ...
        Always: Qt3DRender.QAlphaTest = ...

        class AlphaFunction(object):
            Never: Qt3DRender.QAlphaTest.AlphaFunction = ...
            Less: Qt3DRender.QAlphaTest.AlphaFunction = ...
            Equal: Qt3DRender.QAlphaTest.AlphaFunction = ...
            LessOrEqual: Qt3DRender.QAlphaTest.AlphaFunction = ...
            Greater: Qt3DRender.QAlphaTest.AlphaFunction = ...
            NotEqual: Qt3DRender.QAlphaTest.AlphaFunction = ...
            GreaterOrEqual: Qt3DRender.QAlphaTest.AlphaFunction = ...
            Always: Qt3DRender.QAlphaTest.AlphaFunction = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def alphaFunction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAlphaTest.AlphaFunction:
            ...

        def referenceValue(self) -> float:
            ...

        def setAlphaFunction(
            self, alphaFunction: PySide2.Qt3DRender.Qt3DRender.QAlphaTest.AlphaFunction
        ) -> None:
            ...

        def setReferenceValue(self, referenceValue: float) -> None:
            ...

    class QAttribute(PySide2.Qt3DCore.QNode):
        Byte: Qt3DRender.QAttribute = ...
        VertexAttribute: Qt3DRender.QAttribute = ...
        IndexAttribute: Qt3DRender.QAttribute = ...
        UnsignedByte: Qt3DRender.QAttribute = ...
        DrawIndirectAttribute: Qt3DRender.QAttribute = ...
        Short: Qt3DRender.QAttribute = ...
        UnsignedShort: Qt3DRender.QAttribute = ...
        Int: Qt3DRender.QAttribute = ...
        UnsignedInt: Qt3DRender.QAttribute = ...
        HalfFloat: Qt3DRender.QAttribute = ...
        Float: Qt3DRender.QAttribute = ...
        Double: Qt3DRender.QAttribute = ...

        class AttributeType(object):
            VertexAttribute: Qt3DRender.QAttribute.AttributeType = ...
            IndexAttribute: Qt3DRender.QAttribute.AttributeType = ...
            DrawIndirectAttribute: Qt3DRender.QAttribute.AttributeType = ...

        class VertexBaseType(object):
            Byte: Qt3DRender.QAttribute.VertexBaseType = ...
            UnsignedByte: Qt3DRender.QAttribute.VertexBaseType = ...
            Short: Qt3DRender.QAttribute.VertexBaseType = ...
            UnsignedShort: Qt3DRender.QAttribute.VertexBaseType = ...
            Int: Qt3DRender.QAttribute.VertexBaseType = ...
            UnsignedInt: Qt3DRender.QAttribute.VertexBaseType = ...
            HalfFloat: Qt3DRender.QAttribute.VertexBaseType = ...
            Float: Qt3DRender.QAttribute.VertexBaseType = ...
            Double: Qt3DRender.QAttribute.VertexBaseType = ...

        @typing.overload
        def __init__(
            self,
            buf: PySide2.Qt3DRender.Qt3DRender.QBuffer,
            name: str,
            vertexBaseType: PySide2.Qt3DRender.Qt3DRender.QAttribute.VertexBaseType,
            vertexSize: int,
            count: int,
            offset: int = ...,
            stride: int = ...,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            buf: PySide2.Qt3DRender.Qt3DRender.QBuffer,
            vertexBaseType: PySide2.Qt3DRender.Qt3DRender.QAttribute.VertexBaseType,
            vertexSize: int,
            count: int,
            offset: int = ...,
            stride: int = ...,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def attributeType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAttribute.AttributeType:
            ...

        def buffer(self) -> PySide2.Qt3DRender.Qt3DRender.QBuffer:
            ...

        def byteOffset(self) -> int:
            ...

        def byteStride(self) -> int:
            ...

        def count(self) -> int:
            ...

        @staticmethod
        def defaultColorAttributeName() -> str:
            ...

        @staticmethod
        def defaultJointIndicesAttributeName() -> str:
            ...

        @staticmethod
        def defaultJointWeightsAttributeName() -> str:
            ...

        @staticmethod
        def defaultNormalAttributeName() -> str:
            ...

        @staticmethod
        def defaultPositionAttributeName() -> str:
            ...

        @staticmethod
        def defaultTangentAttributeName() -> str:
            ...

        @staticmethod
        def defaultTextureCoordinate1AttributeName() -> str:
            ...

        @staticmethod
        def defaultTextureCoordinate2AttributeName() -> str:
            ...

        @staticmethod
        def defaultTextureCoordinateAttributeName() -> str:
            ...

        def divisor(self) -> int:
            ...

        def name(self) -> str:
            ...

        def setAttributeType(
            self, attributeType: PySide2.Qt3DRender.Qt3DRender.QAttribute.AttributeType
        ) -> None:
            ...

        def setBuffer(self, buffer: PySide2.Qt3DRender.Qt3DRender.QBuffer) -> None:
            ...

        def setByteOffset(self, byteOffset: int) -> None:
            ...

        def setByteStride(self, byteStride: int) -> None:
            ...

        def setCount(self, count: int) -> None:
            ...

        def setDataSize(self, size: int) -> None:
            ...

        def setDataType(
            self, type: PySide2.Qt3DRender.Qt3DRender.QAttribute.VertexBaseType
        ) -> None:
            ...

        def setDivisor(self, divisor: int) -> None:
            ...

        def setName(self, name: str) -> None:
            ...

        def setVertexBaseType(
            self, type: PySide2.Qt3DRender.Qt3DRender.QAttribute.VertexBaseType
        ) -> None:
            ...

        def setVertexSize(self, size: int) -> None:
            ...

        def vertexBaseType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAttribute.VertexBaseType:
            ...

        def vertexSize(self) -> int:
            ...

    class QBlendEquation(PySide2.Qt3DRender.QRenderState):
        Add: Qt3DRender.QBlendEquation = ...
        Min: Qt3DRender.QBlendEquation = ...
        Max: Qt3DRender.QBlendEquation = ...
        Subtract: Qt3DRender.QBlendEquation = ...
        ReverseSubtract: Qt3DRender.QBlendEquation = ...

        class BlendFunction(object):
            Add: Qt3DRender.QBlendEquation.BlendFunction = ...
            Min: Qt3DRender.QBlendEquation.BlendFunction = ...
            Max: Qt3DRender.QBlendEquation.BlendFunction = ...
            Subtract: Qt3DRender.QBlendEquation.BlendFunction = ...
            ReverseSubtract: Qt3DRender.QBlendEquation.BlendFunction = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def blendFunction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction:
            ...

        def setBlendFunction(
            self,
            blendFunction: PySide2.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction,
        ) -> None:
            ...

    class QBlendEquationArguments(PySide2.Qt3DRender.QRenderState):
        Zero: Qt3DRender.QBlendEquationArguments = ...
        One: Qt3DRender.QBlendEquationArguments = ...
        SourceColor: Qt3DRender.QBlendEquationArguments = ...
        OneMinusSourceColor: Qt3DRender.QBlendEquationArguments = ...
        SourceAlpha: Qt3DRender.QBlendEquationArguments = ...
        OneMinusSourceAlpha: Qt3DRender.QBlendEquationArguments = ...
        Source1Alpha: Qt3DRender.QBlendEquationArguments = ...
        DestinationAlpha: Qt3DRender.QBlendEquationArguments = ...
        Source1Color: Qt3DRender.QBlendEquationArguments = ...
        OneMinusDestinationAlpha: Qt3DRender.QBlendEquationArguments = ...
        DestinationColor: Qt3DRender.QBlendEquationArguments = ...
        OneMinusDestinationColor: Qt3DRender.QBlendEquationArguments = ...
        SourceAlphaSaturate: Qt3DRender.QBlendEquationArguments = ...
        ConstantColor: Qt3DRender.QBlendEquationArguments = ...
        OneMinusConstantColor: Qt3DRender.QBlendEquationArguments = ...
        ConstantAlpha: Qt3DRender.QBlendEquationArguments = ...
        OneMinusConstantAlpha: Qt3DRender.QBlendEquationArguments = ...
        OneMinusSource1Alpha: Qt3DRender.QBlendEquationArguments = ...
        OneMinusSource1Color: Qt3DRender.QBlendEquationArguments = ...
        OneMinusSource1Color0: Qt3DRender.QBlendEquationArguments = ...

        class Blending(object):
            Zero: Qt3DRender.QBlendEquationArguments.Blending = ...
            One: Qt3DRender.QBlendEquationArguments.Blending = ...
            SourceColor: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusSourceColor: Qt3DRender.QBlendEquationArguments.Blending = ...
            SourceAlpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusSourceAlpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            Source1Alpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            DestinationAlpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            Source1Color: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusDestinationAlpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            DestinationColor: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusDestinationColor: Qt3DRender.QBlendEquationArguments.Blending = ...
            SourceAlphaSaturate: Qt3DRender.QBlendEquationArguments.Blending = ...
            ConstantColor: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusConstantColor: Qt3DRender.QBlendEquationArguments.Blending = ...
            ConstantAlpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusConstantAlpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusSource1Alpha: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusSource1Color: Qt3DRender.QBlendEquationArguments.Blending = ...
            OneMinusSource1Color0: Qt3DRender.QBlendEquationArguments.Blending = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def bufferIndex(self) -> int:
            ...

        def destinationAlpha(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending:
            ...

        def destinationRgb(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending:
            ...

        def setBufferIndex(self, index: int) -> None:
            ...

        def setDestinationAlpha(
            self,
            destinationAlpha: PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending,
        ) -> None:
            ...

        def setDestinationRgb(
            self,
            destinationRgb: PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending,
        ) -> None:
            ...

        def setDestinationRgba(
            self,
            destinationRgba: PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending,
        ) -> None:
            ...

        def setSourceAlpha(
            self,
            sourceAlpha: PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending,
        ) -> None:
            ...

        def setSourceRgb(
            self,
            sourceRgb: PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending,
        ) -> None:
            ...

        def setSourceRgba(
            self,
            sourceRgba: PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending,
        ) -> None:
            ...

        def sourceAlpha(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending:
            ...

        def sourceRgb(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending:
            ...

    class QBlitFramebuffer(PySide2.Qt3DRender.QFrameGraphNode):
        Nearest: Qt3DRender.QBlitFramebuffer = ...
        Linear: Qt3DRender.QBlitFramebuffer = ...

        class InterpolationMethod(object):
            Nearest: Qt3DRender.QBlitFramebuffer.InterpolationMethod = ...
            Linear: Qt3DRender.QBlitFramebuffer.InterpolationMethod = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def destination(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderTarget:
            ...

        def destinationAttachmentPoint(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint:
            ...

        def destinationRect(self) -> PySide2.QtCore.QRectF:
            ...

        def interpolationMethod(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QBlitFramebuffer.InterpolationMethod:
            ...

        def setDestination(
            self, destination: PySide2.Qt3DRender.Qt3DRender.QRenderTarget
        ) -> None:
            ...

        def setDestinationAttachmentPoint(
            self,
            destinationAttachmentPoint: PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint,
        ) -> None:
            ...

        def setDestinationRect(self, destinationRect: PySide2.QtCore.QRectF) -> None:
            ...

        def setInterpolationMethod(
            self,
            interpolationMethod: PySide2.Qt3DRender.Qt3DRender.QBlitFramebuffer.InterpolationMethod,
        ) -> None:
            ...

        def setSource(
            self, source: PySide2.Qt3DRender.Qt3DRender.QRenderTarget
        ) -> None:
            ...

        def setSourceAttachmentPoint(
            self,
            sourceAttachmentPoint: PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint,
        ) -> None:
            ...

        def setSourceRect(self, sourceRect: PySide2.QtCore.QRectF) -> None:
            ...

        def source(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderTarget:
            ...

        def sourceAttachmentPoint(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint:
            ...

        def sourceRect(self) -> PySide2.QtCore.QRectF:
            ...

    class QBuffer(PySide2.Qt3DCore.QNode):
        Write: Qt3DRender.QBuffer = ...
        Read: Qt3DRender.QBuffer = ...
        ReadWrite: Qt3DRender.QBuffer = ...
        VertexBuffer: Qt3DRender.QBuffer = ...
        IndexBuffer: Qt3DRender.QBuffer = ...
        StreamDraw: Qt3DRender.QBuffer = ...
        StreamRead: Qt3DRender.QBuffer = ...
        StreamCopy: Qt3DRender.QBuffer = ...
        StaticDraw: Qt3DRender.QBuffer = ...
        StaticRead: Qt3DRender.QBuffer = ...
        StaticCopy: Qt3DRender.QBuffer = ...
        DynamicDraw: Qt3DRender.QBuffer = ...
        DynamicRead: Qt3DRender.QBuffer = ...
        DynamicCopy: Qt3DRender.QBuffer = ...
        PixelPackBuffer: Qt3DRender.QBuffer = ...
        PixelUnpackBuffer: Qt3DRender.QBuffer = ...
        UniformBuffer: Qt3DRender.QBuffer = ...
        DrawIndirectBuffer: Qt3DRender.QBuffer = ...
        ShaderStorageBuffer: Qt3DRender.QBuffer = ...

        class AccessType(object):
            Write: Qt3DRender.QBuffer.AccessType = ...
            Read: Qt3DRender.QBuffer.AccessType = ...
            ReadWrite: Qt3DRender.QBuffer.AccessType = ...

        class BufferType(object):
            VertexBuffer: Qt3DRender.QBuffer.BufferType = ...
            IndexBuffer: Qt3DRender.QBuffer.BufferType = ...
            PixelPackBuffer: Qt3DRender.QBuffer.BufferType = ...
            PixelUnpackBuffer: Qt3DRender.QBuffer.BufferType = ...
            UniformBuffer: Qt3DRender.QBuffer.BufferType = ...
            DrawIndirectBuffer: Qt3DRender.QBuffer.BufferType = ...
            ShaderStorageBuffer: Qt3DRender.QBuffer.BufferType = ...

        class UsageType(object):
            StreamDraw: Qt3DRender.QBuffer.UsageType = ...
            StreamRead: Qt3DRender.QBuffer.UsageType = ...
            StreamCopy: Qt3DRender.QBuffer.UsageType = ...
            StaticDraw: Qt3DRender.QBuffer.UsageType = ...
            StaticRead: Qt3DRender.QBuffer.UsageType = ...
            StaticCopy: Qt3DRender.QBuffer.UsageType = ...
            DynamicDraw: Qt3DRender.QBuffer.UsageType = ...
            DynamicRead: Qt3DRender.QBuffer.UsageType = ...
            DynamicCopy: Qt3DRender.QBuffer.UsageType = ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            ty: PySide2.Qt3DRender.Qt3DRender.QBuffer.BufferType,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        def accessType(self) -> PySide2.Qt3DRender.Qt3DRender.QBuffer.AccessType:
            ...

        def data(self) -> PySide2.QtCore.QByteArray:
            ...

        def isSyncData(self) -> bool:
            ...

        def setAccessType(
            self, access: PySide2.Qt3DRender.Qt3DRender.QBuffer.AccessType
        ) -> None:
            ...

        def setData(self, bytes: PySide2.QtCore.QByteArray) -> None:
            ...

        def setSyncData(self, syncData: bool) -> None:
            ...

        def setType(
            self, type: PySide2.Qt3DRender.Qt3DRender.QBuffer.BufferType
        ) -> None:
            ...

        def setUsage(
            self, usage: PySide2.Qt3DRender.Qt3DRender.QBuffer.UsageType
        ) -> None:
            ...

        def type(self) -> PySide2.Qt3DRender.Qt3DRender.QBuffer.BufferType:
            ...

        def updateData(self, offset: int, bytes: PySide2.QtCore.QByteArray) -> None:
            ...

        def usage(self) -> PySide2.Qt3DRender.Qt3DRender.QBuffer.UsageType:
            ...

    class QBufferCapture(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QBufferDataGenerator(PySide2.Qt3DRender.QAbstractFunctor):
        def __init__(self) -> None:
            ...

    class QCamera(PySide2.Qt3DCore.QEntity):
        TranslateViewCenter: Qt3DRender.QCamera = ...
        DontTranslateViewCenter: Qt3DRender.QCamera = ...

        class CameraTranslationOption(object):
            TranslateViewCenter: Qt3DRender.QCamera.CameraTranslationOption = ...
            DontTranslateViewCenter: Qt3DRender.QCamera.CameraTranslationOption = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def aspectRatio(self) -> float:
            ...

        def bottom(self) -> float:
            ...

        def exposure(self) -> float:
            ...

        def farPlane(self) -> float:
            ...

        def fieldOfView(self) -> float:
            ...

        def left(self) -> float:
            ...

        def lens(self) -> PySide2.Qt3DRender.Qt3DRender.QCameraLens:
            ...

        def nearPlane(self) -> float:
            ...

        @typing.overload
        def pan(self, angle: float) -> None:
            ...

        @typing.overload
        def pan(self, angle: float, axis: PySide2.QtGui.QVector3D) -> None:
            ...

        @typing.overload
        def panAboutViewCenter(self, angle: float) -> None:
            ...

        @typing.overload
        def panAboutViewCenter(
            self, angle: float, axis: PySide2.QtGui.QVector3D
        ) -> None:
            ...

        def panRotation(self, angle: float) -> PySide2.QtGui.QQuaternion:
            ...

        def position(self) -> PySide2.QtGui.QVector3D:
            ...

        def projectionMatrix(self) -> PySide2.QtGui.QMatrix4x4:
            ...

        def projectionType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType:
            ...

        def right(self) -> float:
            ...

        def roll(self, angle: float) -> None:
            ...

        def rollAboutViewCenter(self, angle: float) -> None:
            ...

        def rollRotation(self, angle: float) -> PySide2.QtGui.QQuaternion:
            ...

        def rotate(self, q: PySide2.QtGui.QQuaternion) -> None:
            ...

        def rotateAboutViewCenter(self, q: PySide2.QtGui.QQuaternion) -> None:
            ...

        def rotation(
            self, angle: float, axis: PySide2.QtGui.QVector3D
        ) -> PySide2.QtGui.QQuaternion:
            ...

        def setAspectRatio(self, aspectRatio: float) -> None:
            ...

        def setBottom(self, bottom: float) -> None:
            ...

        def setExposure(self, exposure: float) -> None:
            ...

        def setFarPlane(self, farPlane: float) -> None:
            ...

        def setFieldOfView(self, fieldOfView: float) -> None:
            ...

        def setLeft(self, left: float) -> None:
            ...

        def setNearPlane(self, nearPlane: float) -> None:
            ...

        def setPosition(self, position: PySide2.QtGui.QVector3D) -> None:
            ...

        def setProjectionMatrix(
            self, projectionMatrix: PySide2.QtGui.QMatrix4x4
        ) -> None:
            ...

        def setProjectionType(
            self, type: PySide2.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType
        ) -> None:
            ...

        def setRight(self, right: float) -> None:
            ...

        def setTop(self, top: float) -> None:
            ...

        def setUpVector(self, upVector: PySide2.QtGui.QVector3D) -> None:
            ...

        def setViewCenter(self, viewCenter: PySide2.QtGui.QVector3D) -> None:
            ...

        def tilt(self, angle: float) -> None:
            ...

        def tiltAboutViewCenter(self, angle: float) -> None:
            ...

        def tiltRotation(self, angle: float) -> PySide2.QtGui.QQuaternion:
            ...

        def top(self) -> float:
            ...

        def transform(self) -> PySide2.Qt3DCore.Qt3DCore.QTransform:
            ...

        def translate(
            self,
            vLocal: PySide2.QtGui.QVector3D,
            option: PySide2.Qt3DRender.Qt3DRender.QCamera.CameraTranslationOption = ...,
        ) -> None:
            ...

        def translateWorld(
            self,
            vWorld: PySide2.QtGui.QVector3D,
            option: PySide2.Qt3DRender.Qt3DRender.QCamera.CameraTranslationOption = ...,
        ) -> None:
            ...

        def upVector(self) -> PySide2.QtGui.QVector3D:
            ...

        def viewAll(self) -> None:
            ...

        def viewCenter(self) -> PySide2.QtGui.QVector3D:
            ...

        def viewEntity(self, entity: PySide2.Qt3DCore.Qt3DCore.QEntity) -> None:
            ...

        def viewMatrix(self) -> PySide2.QtGui.QMatrix4x4:
            ...

        def viewSphere(self, center: PySide2.QtGui.QVector3D, radius: float) -> None:
            ...

        def viewVector(self) -> PySide2.QtGui.QVector3D:
            ...

    class QCameraLens(PySide2.Qt3DCore.QComponent):
        OrthographicProjection: Qt3DRender.QCameraLens = ...
        PerspectiveProjection: Qt3DRender.QCameraLens = ...
        FrustumProjection: Qt3DRender.QCameraLens = ...
        CustomProjection: Qt3DRender.QCameraLens = ...

        class ProjectionType(object):
            OrthographicProjection: Qt3DRender.QCameraLens.ProjectionType = ...
            PerspectiveProjection: Qt3DRender.QCameraLens.ProjectionType = ...
            FrustumProjection: Qt3DRender.QCameraLens.ProjectionType = ...
            CustomProjection: Qt3DRender.QCameraLens.ProjectionType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def aspectRatio(self) -> float:
            ...

        def bottom(self) -> float:
            ...

        def exposure(self) -> float:
            ...

        def farPlane(self) -> float:
            ...

        def fieldOfView(self) -> float:
            ...

        def left(self) -> float:
            ...

        def nearPlane(self) -> float:
            ...

        def projectionMatrix(self) -> PySide2.QtGui.QMatrix4x4:
            ...

        def projectionType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType:
            ...

        def right(self) -> float:
            ...

        def setAspectRatio(self, aspectRatio: float) -> None:
            ...

        def setBottom(self, bottom: float) -> None:
            ...

        def setExposure(self, exposure: float) -> None:
            ...

        def setFarPlane(self, farPlane: float) -> None:
            ...

        def setFieldOfView(self, fieldOfView: float) -> None:
            ...

        def setFrustumProjection(
            self,
            left: float,
            right: float,
            bottom: float,
            top: float,
            nearPlane: float,
            farPlane: float,
        ) -> None:
            ...

        def setLeft(self, left: float) -> None:
            ...

        def setNearPlane(self, nearPlane: float) -> None:
            ...

        def setOrthographicProjection(
            self,
            left: float,
            right: float,
            bottom: float,
            top: float,
            nearPlane: float,
            farPlane: float,
        ) -> None:
            ...

        def setPerspectiveProjection(
            self, fieldOfView: float, aspect: float, nearPlane: float, farPlane: float
        ) -> None:
            ...

        def setProjectionMatrix(
            self, projectionMatrix: PySide2.QtGui.QMatrix4x4
        ) -> None:
            ...

        def setProjectionType(
            self,
            projectionType: PySide2.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType,
        ) -> None:
            ...

        def setRight(self, right: float) -> None:
            ...

        def setTop(self, top: float) -> None:
            ...

        def top(self) -> float:
            ...

        def viewAll(self, cameraId: PySide2.Qt3DCore.Qt3DCore.QNodeId) -> None:
            ...

        def viewEntity(
            self,
            entityId: PySide2.Qt3DCore.Qt3DCore.QNodeId,
            cameraId: PySide2.Qt3DCore.Qt3DCore.QNodeId,
        ) -> None:
            ...

    class QCameraSelector(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def camera(self) -> PySide2.Qt3DCore.Qt3DCore.QEntity:
            ...

        def setCamera(self, camera: PySide2.Qt3DCore.Qt3DCore.QEntity) -> None:
            ...

    class QClearBuffers(PySide2.Qt3DRender.QFrameGraphNode):
        AllBuffers: Qt3DRender.QClearBuffers = ...
        None_: Qt3DRender.QClearBuffers = ...
        ColorBuffer: Qt3DRender.QClearBuffers = ...
        DepthBuffer: Qt3DRender.QClearBuffers = ...
        ColorDepthBuffer: Qt3DRender.QClearBuffers = ...
        StencilBuffer: Qt3DRender.QClearBuffers = ...
        DepthStencilBuffer: Qt3DRender.QClearBuffers = ...
        ColorDepthStencilBuffer: Qt3DRender.QClearBuffers = ...

        class BufferType(object):
            AllBuffers: Qt3DRender.QClearBuffers.BufferType = ...
            None_: Qt3DRender.QClearBuffers.BufferType = ...
            ColorBuffer: Qt3DRender.QClearBuffers.BufferType = ...
            DepthBuffer: Qt3DRender.QClearBuffers.BufferType = ...
            ColorDepthBuffer: Qt3DRender.QClearBuffers.BufferType = ...
            StencilBuffer: Qt3DRender.QClearBuffers.BufferType = ...
            DepthStencilBuffer: Qt3DRender.QClearBuffers.BufferType = ...
            ColorDepthStencilBuffer: Qt3DRender.QClearBuffers.BufferType = ...

        class BufferTypeFlags(object):
            ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def buffers(self) -> PySide2.Qt3DRender.Qt3DRender.QClearBuffers.BufferType:
            ...

        def clearColor(self) -> PySide2.QtGui.QColor:
            ...

        def clearDepthValue(self) -> float:
            ...

        def clearStencilValue(self) -> int:
            ...

        def colorBuffer(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput:
            ...

        def setBuffers(
            self, buffers: PySide2.Qt3DRender.Qt3DRender.QClearBuffers.BufferType
        ) -> None:
            ...

        def setClearColor(self, color: PySide2.QtGui.QColor) -> None:
            ...

        def setClearDepthValue(self, clearDepthValue: float) -> None:
            ...

        def setClearStencilValue(self, clearStencilValue: int) -> None:
            ...

        def setColorBuffer(
            self, buffer: PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput
        ) -> None:
            ...

    class QClipPlane(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def distance(self) -> float:
            ...

        def normal(self) -> PySide2.QtGui.QVector3D:
            ...

        def planeIndex(self) -> int:
            ...

        def setDistance(self, arg__1: float) -> None:
            ...

        def setNormal(self, arg__1: PySide2.QtGui.QVector3D) -> None:
            ...

        def setPlaneIndex(self, arg__1: int) -> None:
            ...

    class QColorMask(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def isAlphaMasked(self) -> bool:
            ...

        def isBlueMasked(self) -> bool:
            ...

        def isGreenMasked(self) -> bool:
            ...

        def isRedMasked(self) -> bool:
            ...

        def setAlphaMasked(self, alphaMasked: bool) -> None:
            ...

        def setBlueMasked(self, blueMasked: bool) -> None:
            ...

        def setGreenMasked(self, greenMasked: bool) -> None:
            ...

        def setRedMasked(self, redMasked: bool) -> None:
            ...

    class QComputeCommand(PySide2.Qt3DCore.QComponent):
        Continuous: Qt3DRender.QComputeCommand = ...
        Manual: Qt3DRender.QComputeCommand = ...

        class RunType(object):
            Continuous: Qt3DRender.QComputeCommand.RunType = ...
            Manual: Qt3DRender.QComputeCommand.RunType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def runType(self) -> PySide2.Qt3DRender.Qt3DRender.QComputeCommand.RunType:
            ...

        def setRunType(
            self, runType: PySide2.Qt3DRender.Qt3DRender.QComputeCommand.RunType
        ) -> None:
            ...

        def setWorkGroupX(self, workGroupX: int) -> None:
            ...

        def setWorkGroupY(self, workGroupY: int) -> None:
            ...

        def setWorkGroupZ(self, workGroupZ: int) -> None:
            ...

        @typing.overload
        def trigger(self, frameCount: int = ...) -> None:
            ...

        @typing.overload
        def trigger(
            self,
            workGroupX: int,
            workGroupY: int,
            workGroupZ: int,
            frameCount: int = ...,
        ) -> None:
            ...

        def workGroupX(self) -> int:
            ...

        def workGroupY(self) -> int:
            ...

        def workGroupZ(self) -> int:
            ...

    class QCullFace(PySide2.Qt3DRender.QRenderState):
        NoCulling: Qt3DRender.QCullFace = ...
        Front: Qt3DRender.QCullFace = ...
        Back: Qt3DRender.QCullFace = ...
        FrontAndBack: Qt3DRender.QCullFace = ...

        class CullingMode(object):
            NoCulling: Qt3DRender.QCullFace.CullingMode = ...
            Front: Qt3DRender.QCullFace.CullingMode = ...
            Back: Qt3DRender.QCullFace.CullingMode = ...
            FrontAndBack: Qt3DRender.QCullFace.CullingMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def mode(self) -> PySide2.Qt3DRender.Qt3DRender.QCullFace.CullingMode:
            ...

        def setMode(
            self, mode: PySide2.Qt3DRender.Qt3DRender.QCullFace.CullingMode
        ) -> None:
            ...

    class QDepthTest(PySide2.Qt3DRender.QRenderState):
        Never: Qt3DRender.QDepthTest = ...
        Less: Qt3DRender.QDepthTest = ...
        Equal: Qt3DRender.QDepthTest = ...
        LessOrEqual: Qt3DRender.QDepthTest = ...
        Greater: Qt3DRender.QDepthTest = ...
        NotEqual: Qt3DRender.QDepthTest = ...
        GreaterOrEqual: Qt3DRender.QDepthTest = ...
        Always: Qt3DRender.QDepthTest = ...

        class DepthFunction(object):
            Never: Qt3DRender.QDepthTest.DepthFunction = ...
            Less: Qt3DRender.QDepthTest.DepthFunction = ...
            Equal: Qt3DRender.QDepthTest.DepthFunction = ...
            LessOrEqual: Qt3DRender.QDepthTest.DepthFunction = ...
            Greater: Qt3DRender.QDepthTest.DepthFunction = ...
            NotEqual: Qt3DRender.QDepthTest.DepthFunction = ...
            GreaterOrEqual: Qt3DRender.QDepthTest.DepthFunction = ...
            Always: Qt3DRender.QDepthTest.DepthFunction = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def depthFunction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QDepthTest.DepthFunction:
            ...

        def setDepthFunction(
            self, depthFunction: PySide2.Qt3DRender.Qt3DRender.QDepthTest.DepthFunction
        ) -> None:
            ...

    class QDirectionalLight(PySide2.Qt3DRender.QAbstractLight):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setWorldDirection(self, worldDirection: PySide2.QtGui.QVector3D) -> None:
            ...

        def worldDirection(self) -> PySide2.QtGui.QVector3D:
            ...

    class QDispatchCompute(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setWorkGroupX(self, workGroupX: int) -> None:
            ...

        def setWorkGroupY(self, workGroupY: int) -> None:
            ...

        def setWorkGroupZ(self, workGroupZ: int) -> None:
            ...

        def workGroupX(self) -> int:
            ...

        def workGroupY(self) -> int:
            ...

        def workGroupZ(self) -> int:
            ...

    class QDithering(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QEffect(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addParameter(
            self, parameter: PySide2.Qt3DRender.Qt3DRender.QParameter
        ) -> None:
            ...

        def addTechnique(self, t: PySide2.Qt3DRender.Qt3DRender.QTechnique) -> None:
            ...

        def parameters(self) -> typing.List:
            ...

        def removeParameter(
            self, parameter: PySide2.Qt3DRender.Qt3DRender.QParameter
        ) -> None:
            ...

        def removeTechnique(self, t: PySide2.Qt3DRender.Qt3DRender.QTechnique) -> None:
            ...

        def techniques(self) -> typing.List:
            ...

    class QEnvironmentLight(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def irradiance(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture:
            ...

        def setIrradiance(
            self, irradiance: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture
        ) -> None:
            ...

        def setSpecular(
            self, specular: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture
        ) -> None:
            ...

        def specular(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture:
            ...

    class QFilterKey(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def name(self) -> str:
            ...

        def setName(self, customType: str) -> None:
            ...

        def setValue(self, value: typing.Any) -> None:
            ...

        def value(self) -> typing.Any:
            ...

    class QFrameGraphNode(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def parentFrameGraphNode(self) -> PySide2.Qt3DRender.Qt3DRender.QFrameGraphNode:
            ...

    class QFrameGraphNodeCreatedChangeBase(PySide2.Qt3DCore.QNodeCreatedChangeBase):
        def __init__(self, node: PySide2.Qt3DRender.Qt3DRender.QFrameGraphNode) -> None:
            ...

        def parentFrameGraphNodeId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

    class QFrontFace(PySide2.Qt3DRender.QRenderState):
        ClockWise: Qt3DRender.QFrontFace = ...
        CounterClockWise: Qt3DRender.QFrontFace = ...

        class WindingDirection(object):
            ClockWise: Qt3DRender.QFrontFace.WindingDirection = ...
            CounterClockWise: Qt3DRender.QFrontFace.WindingDirection = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def direction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QFrontFace.WindingDirection:
            ...

        def setDirection(
            self, direction: PySide2.Qt3DRender.Qt3DRender.QFrontFace.WindingDirection
        ) -> None:
            ...

    class QFrustumCulling(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QGeometry(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addAttribute(
            self, attribute: PySide2.Qt3DRender.Qt3DRender.QAttribute
        ) -> None:
            ...

        def attributes(self) -> typing.List:
            ...

        def boundingVolumePositionAttribute(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAttribute:
            ...

        def maxExtent(self) -> PySide2.QtGui.QVector3D:
            ...

        def minExtent(self) -> PySide2.QtGui.QVector3D:
            ...

        def removeAttribute(
            self, attribute: PySide2.Qt3DRender.Qt3DRender.QAttribute
        ) -> None:
            ...

        def setBoundingVolumePositionAttribute(
            self,
            boundingVolumePositionAttribute: PySide2.Qt3DRender.Qt3DRender.QAttribute,
        ) -> None:
            ...

    class QGeometryFactory(PySide2.Qt3DRender.QAbstractFunctor):
        def __init__(self) -> None:
            ...

    class QGeometryRenderer(PySide2.Qt3DCore.QComponent):
        Points: Qt3DRender.QGeometryRenderer = ...
        Lines: Qt3DRender.QGeometryRenderer = ...
        LineLoop: Qt3DRender.QGeometryRenderer = ...
        LineStrip: Qt3DRender.QGeometryRenderer = ...
        Triangles: Qt3DRender.QGeometryRenderer = ...
        TriangleStrip: Qt3DRender.QGeometryRenderer = ...
        TriangleFan: Qt3DRender.QGeometryRenderer = ...
        LinesAdjacency: Qt3DRender.QGeometryRenderer = ...
        LineStripAdjacency: Qt3DRender.QGeometryRenderer = ...
        TrianglesAdjacency: Qt3DRender.QGeometryRenderer = ...
        TriangleStripAdjacency: Qt3DRender.QGeometryRenderer = ...
        Patches: Qt3DRender.QGeometryRenderer = ...

        class PrimitiveType(object):
            Points: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            Lines: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            LineLoop: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            LineStrip: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            Triangles: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            TriangleStrip: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            TriangleFan: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            LinesAdjacency: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            LineStripAdjacency: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            TrianglesAdjacency: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            TriangleStripAdjacency: Qt3DRender.QGeometryRenderer.PrimitiveType = ...
            Patches: Qt3DRender.QGeometryRenderer.PrimitiveType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def firstInstance(self) -> int:
            ...

        def firstVertex(self) -> int:
            ...

        def geometry(self) -> PySide2.Qt3DRender.Qt3DRender.QGeometry:
            ...

        def indexBufferByteOffset(self) -> int:
            ...

        def indexOffset(self) -> int:
            ...

        def instanceCount(self) -> int:
            ...

        def primitiveRestartEnabled(self) -> bool:
            ...

        def primitiveType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType:
            ...

        def restartIndexValue(self) -> int:
            ...

        def setFirstInstance(self, firstInstance: int) -> None:
            ...

        def setFirstVertex(self, firstVertex: int) -> None:
            ...

        def setGeometry(
            self, geometry: PySide2.Qt3DRender.Qt3DRender.QGeometry
        ) -> None:
            ...

        def setIndexBufferByteOffset(self, offset: int) -> None:
            ...

        def setIndexOffset(self, indexOffset: int) -> None:
            ...

        def setInstanceCount(self, instanceCount: int) -> None:
            ...

        def setPrimitiveRestartEnabled(self, enabled: bool) -> None:
            ...

        def setPrimitiveType(
            self,
            primitiveType: PySide2.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType,
        ) -> None:
            ...

        def setRestartIndexValue(self, index: int) -> None:
            ...

        def setVertexCount(self, vertexCount: int) -> None:
            ...

        def setVerticesPerPatch(self, verticesPerPatch: int) -> None:
            ...

        def vertexCount(self) -> int:
            ...

        def verticesPerPatch(self) -> int:
            ...

    class QGraphicsApiFilter(PySide2.QtCore.QObject):
        NoProfile: Qt3DRender.QGraphicsApiFilter = ...
        CoreProfile: Qt3DRender.QGraphicsApiFilter = ...
        OpenGL: Qt3DRender.QGraphicsApiFilter = ...
        CompatibilityProfile: Qt3DRender.QGraphicsApiFilter = ...
        OpenGLES: Qt3DRender.QGraphicsApiFilter = ...
        Vulkan: Qt3DRender.QGraphicsApiFilter = ...
        DirectX: Qt3DRender.QGraphicsApiFilter = ...
        RHI: Qt3DRender.QGraphicsApiFilter = ...

        class Api(object):
            OpenGL: Qt3DRender.QGraphicsApiFilter.Api = ...
            OpenGLES: Qt3DRender.QGraphicsApiFilter.Api = ...
            Vulkan: Qt3DRender.QGraphicsApiFilter.Api = ...
            DirectX: Qt3DRender.QGraphicsApiFilter.Api = ...
            RHI: Qt3DRender.QGraphicsApiFilter.Api = ...

        class OpenGLProfile(object):
            NoProfile: Qt3DRender.QGraphicsApiFilter.OpenGLProfile = ...
            CoreProfile: Qt3DRender.QGraphicsApiFilter.OpenGLProfile = ...
            CompatibilityProfile: Qt3DRender.QGraphicsApiFilter.OpenGLProfile = ...

        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def api(self) -> PySide2.Qt3DRender.Qt3DRender.QGraphicsApiFilter.Api:
            ...

        def extensions(self) -> typing.List:
            ...

        def majorVersion(self) -> int:
            ...

        def minorVersion(self) -> int:
            ...

        def profile(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QGraphicsApiFilter.OpenGLProfile:
            ...

        def setApi(
            self, api: PySide2.Qt3DRender.Qt3DRender.QGraphicsApiFilter.Api
        ) -> None:
            ...

        def setExtensions(self, extensions: typing.Sequence) -> None:
            ...

        def setMajorVersion(self, majorVersion: int) -> None:
            ...

        def setMinorVersion(self, minorVersion: int) -> None:
            ...

        def setProfile(
            self,
            profile: PySide2.Qt3DRender.Qt3DRender.QGraphicsApiFilter.OpenGLProfile,
        ) -> None:
            ...

        def setVendor(self, vendor: str) -> None:
            ...

        def vendor(self) -> str:
            ...

    class QLayer(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def recursive(self) -> bool:
            ...

        def setRecursive(self, recursive: bool) -> None:
            ...

    class QLayerFilter(PySide2.Qt3DRender.QFrameGraphNode):
        AcceptAnyMatchingLayers: Qt3DRender.QLayerFilter = ...
        AcceptAllMatchingLayers: Qt3DRender.QLayerFilter = ...
        DiscardAnyMatchingLayers: Qt3DRender.QLayerFilter = ...
        DiscardAllMatchingLayers: Qt3DRender.QLayerFilter = ...

        class FilterMode(object):
            AcceptAnyMatchingLayers: Qt3DRender.QLayerFilter.FilterMode = ...
            AcceptAllMatchingLayers: Qt3DRender.QLayerFilter.FilterMode = ...
            DiscardAnyMatchingLayers: Qt3DRender.QLayerFilter.FilterMode = ...
            DiscardAllMatchingLayers: Qt3DRender.QLayerFilter.FilterMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addLayer(self, layer: PySide2.Qt3DRender.Qt3DRender.QLayer) -> None:
            ...

        def filterMode(self) -> PySide2.Qt3DRender.Qt3DRender.QLayerFilter.FilterMode:
            ...

        def layers(self) -> typing.List:
            ...

        def removeLayer(self, layer: PySide2.Qt3DRender.Qt3DRender.QLayer) -> None:
            ...

        def setFilterMode(
            self, filterMode: PySide2.Qt3DRender.Qt3DRender.QLayerFilter.FilterMode
        ) -> None:
            ...

    class QLevelOfDetail(PySide2.Qt3DCore.QComponent):
        DistanceToCameraThreshold: Qt3DRender.QLevelOfDetail = ...
        ProjectedScreenPixelSizeThreshold: Qt3DRender.QLevelOfDetail = ...

        class ThresholdType(object):
            DistanceToCameraThreshold: Qt3DRender.QLevelOfDetail.ThresholdType = ...
            ProjectedScreenPixelSizeThreshold: Qt3DRender.QLevelOfDetail.ThresholdType = (
                ...
            )

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def camera(self) -> PySide2.Qt3DRender.Qt3DRender.QCamera:
            ...

        def createBoundingSphere(
            self, center: PySide2.QtGui.QVector3D, radius: float
        ) -> PySide2.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere:
            ...

        def currentIndex(self) -> int:
            ...

        def setCamera(self, camera: PySide2.Qt3DRender.Qt3DRender.QCamera) -> None:
            ...

        def setCurrentIndex(self, currentIndex: int) -> None:
            ...

        def setThresholdType(
            self,
            thresholdType: PySide2.Qt3DRender.Qt3DRender.QLevelOfDetail.ThresholdType,
        ) -> None:
            ...

        def setThresholds(self, thresholds: typing.List) -> None:
            ...

        def setVolumeOverride(
            self,
            volumeOverride: PySide2.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere,
        ) -> None:
            ...

        def thresholdType(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QLevelOfDetail.ThresholdType:
            ...

        def thresholds(self) -> typing.List:
            ...

        def volumeOverride(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere:
            ...

    class QLevelOfDetailBoundingSphere(object):
        @typing.overload
        def __init__(
            self, center: PySide2.QtGui.QVector3D = ..., radius: float = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, other: PySide2.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere
        ) -> None:
            ...

        def center(self) -> PySide2.QtGui.QVector3D:
            ...

        def isEmpty(self) -> bool:
            ...

        def radius(self) -> float:
            ...

    class QLevelOfDetailSwitch(PySide2.Qt3DRender.QLevelOfDetail):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QLineWidth(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setSmooth(self, enabled: bool) -> None:
            ...

        def setValue(self, value: float) -> None:
            ...

        def smooth(self) -> bool:
            ...

        def value(self) -> float:
            ...

    class QMaterial(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addParameter(
            self, parameter: PySide2.Qt3DRender.Qt3DRender.QParameter
        ) -> None:
            ...

        def effect(self) -> PySide2.Qt3DRender.Qt3DRender.QEffect:
            ...

        def parameters(self) -> typing.List:
            ...

        def removeParameter(
            self, parameter: PySide2.Qt3DRender.Qt3DRender.QParameter
        ) -> None:
            ...

        def setEffect(self, effect: PySide2.Qt3DRender.Qt3DRender.QEffect) -> None:
            ...

    class QMemoryBarrier(PySide2.Qt3DRender.QFrameGraphNode):
        All: Qt3DRender.QMemoryBarrier = ...
        None_: Qt3DRender.QMemoryBarrier = ...
        VertexAttributeArray: Qt3DRender.QMemoryBarrier = ...
        ElementArray: Qt3DRender.QMemoryBarrier = ...
        Uniform: Qt3DRender.QMemoryBarrier = ...
        TextureFetch: Qt3DRender.QMemoryBarrier = ...
        ShaderImageAccess: Qt3DRender.QMemoryBarrier = ...
        Command: Qt3DRender.QMemoryBarrier = ...
        PixelBuffer: Qt3DRender.QMemoryBarrier = ...
        TextureUpdate: Qt3DRender.QMemoryBarrier = ...
        BufferUpdate: Qt3DRender.QMemoryBarrier = ...
        FrameBuffer: Qt3DRender.QMemoryBarrier = ...
        TransformFeedback: Qt3DRender.QMemoryBarrier = ...
        AtomicCounter: Qt3DRender.QMemoryBarrier = ...
        ShaderStorage: Qt3DRender.QMemoryBarrier = ...
        QueryBuffer: Qt3DRender.QMemoryBarrier = ...

        class Operation(object):
            All: Qt3DRender.QMemoryBarrier.Operation = ...
            None_: Qt3DRender.QMemoryBarrier.Operation = ...
            VertexAttributeArray: Qt3DRender.QMemoryBarrier.Operation = ...
            ElementArray: Qt3DRender.QMemoryBarrier.Operation = ...
            Uniform: Qt3DRender.QMemoryBarrier.Operation = ...
            TextureFetch: Qt3DRender.QMemoryBarrier.Operation = ...
            ShaderImageAccess: Qt3DRender.QMemoryBarrier.Operation = ...
            Command: Qt3DRender.QMemoryBarrier.Operation = ...
            PixelBuffer: Qt3DRender.QMemoryBarrier.Operation = ...
            TextureUpdate: Qt3DRender.QMemoryBarrier.Operation = ...
            BufferUpdate: Qt3DRender.QMemoryBarrier.Operation = ...
            FrameBuffer: Qt3DRender.QMemoryBarrier.Operation = ...
            TransformFeedback: Qt3DRender.QMemoryBarrier.Operation = ...
            AtomicCounter: Qt3DRender.QMemoryBarrier.Operation = ...
            ShaderStorage: Qt3DRender.QMemoryBarrier.Operation = ...
            QueryBuffer: Qt3DRender.QMemoryBarrier.Operation = ...

        class Operations(object):
            ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setWaitOperations(
            self, operations: PySide2.Qt3DRender.Qt3DRender.QMemoryBarrier.Operations
        ) -> None:
            ...

        def waitOperations(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QMemoryBarrier.Operations:
            ...

    class QMesh(PySide2.Qt3DRender.QGeometryRenderer):
        None_: Qt3DRender.QMesh = ...
        Loading: Qt3DRender.QMesh = ...
        Ready: Qt3DRender.QMesh = ...
        Error: Qt3DRender.QMesh = ...

        class Status(object):
            None_: Qt3DRender.QMesh.Status = ...
            Loading: Qt3DRender.QMesh.Status = ...
            Ready: Qt3DRender.QMesh.Status = ...
            Error: Qt3DRender.QMesh.Status = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def meshName(self) -> str:
            ...

        def setMeshName(self, meshName: str) -> None:
            ...

        def setSource(self, source: PySide2.QtCore.QUrl) -> None:
            ...

        def source(self) -> PySide2.QtCore.QUrl:
            ...

        def status(self) -> PySide2.Qt3DRender.Qt3DRender.QMesh.Status:
            ...

    class QMultiSampleAntiAliasing(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QNoDepthMask(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QNoDraw(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QNoPicking(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QObjectPicker(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def containsMouse(self) -> bool:
            ...

        def isDragEnabled(self) -> bool:
            ...

        def isHoverEnabled(self) -> bool:
            ...

        def isPressed(self) -> bool:
            ...

        def priority(self) -> int:
            ...

        def setDragEnabled(self, dragEnabled: bool) -> None:
            ...

        def setHoverEnabled(self, hoverEnabled: bool) -> None:
            ...

        def setPriority(self, priority: int) -> None:
            ...

    class QPaintedTextureImage(PySide2.Qt3DRender.QAbstractTextureImage):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def height(self) -> int:
            ...

        def paint(self, painter: PySide2.QtGui.QPainter) -> None:
            ...

        def setHeight(self, h: int) -> None:
            ...

        def setSize(self, size: PySide2.QtCore.QSize) -> None:
            ...

        def setWidth(self, w: int) -> None:
            ...

        def size(self) -> PySide2.QtCore.QSize:
            ...

        def update(self, rect: PySide2.QtCore.QRect = ...) -> None:
            ...

        def width(self) -> int:
            ...

    class QParameter(PySide2.Qt3DCore.QNode):
        @typing.overload
        def __init__(
            self,
            name: str,
            texture: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            name: str,
            value: typing.Any,
            parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def name(self) -> str:
            ...

        def setName(self, name: str) -> None:
            ...

        def setValue(self, dv: typing.Any) -> None:
            ...

        def value(self) -> typing.Any:
            ...

    class QPickEvent(PySide2.QtCore.QObject):
        NoButton: Qt3DRender.QPickEvent = ...
        NoModifier: Qt3DRender.QPickEvent = ...
        LeftButton: Qt3DRender.QPickEvent = ...
        RightButton: Qt3DRender.QPickEvent = ...
        MiddleButton: Qt3DRender.QPickEvent = ...
        BackButton: Qt3DRender.QPickEvent = ...
        ShiftModifier: Qt3DRender.QPickEvent = ...
        ControlModifier: Qt3DRender.QPickEvent = ...
        AltModifier: Qt3DRender.QPickEvent = ...
        MetaModifier: Qt3DRender.QPickEvent = ...
        KeypadModifier: Qt3DRender.QPickEvent = ...

        class Buttons(object):
            NoButton: Qt3DRender.QPickEvent.Buttons = ...
            LeftButton: Qt3DRender.QPickEvent.Buttons = ...
            RightButton: Qt3DRender.QPickEvent.Buttons = ...
            MiddleButton: Qt3DRender.QPickEvent.Buttons = ...
            BackButton: Qt3DRender.QPickEvent.Buttons = ...

        class Modifiers(object):
            NoModifier: Qt3DRender.QPickEvent.Modifiers = ...
            ShiftModifier: Qt3DRender.QPickEvent.Modifiers = ...
            ControlModifier: Qt3DRender.QPickEvent.Modifiers = ...
            AltModifier: Qt3DRender.QPickEvent.Modifiers = ...
            MetaModifier: Qt3DRender.QPickEvent.Modifiers = ...
            KeypadModifier: Qt3DRender.QPickEvent.Modifiers = ...

        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtCore.QPointF,
            worldIntersection: PySide2.QtGui.QVector3D,
            localIntersection: PySide2.QtGui.QVector3D,
            distance: float,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtCore.QPointF,
            worldIntersection: PySide2.QtGui.QVector3D,
            localIntersection: PySide2.QtGui.QVector3D,
            distance: float,
            button: PySide2.Qt3DRender.Qt3DRender.QPickEvent.Buttons,
            buttons: int,
            modifiers: int,
        ) -> None:
            ...

        def button(self) -> PySide2.Qt3DRender.Qt3DRender.QPickEvent.Buttons:
            ...

        def buttons(self) -> int:
            ...

        def distance(self) -> float:
            ...

        def entity(self) -> PySide2.Qt3DCore.Qt3DCore.QEntity:
            ...

        def isAccepted(self) -> bool:
            ...

        def localIntersection(self) -> PySide2.QtGui.QVector3D:
            ...

        def modifiers(self) -> int:
            ...

        def position(self) -> PySide2.QtCore.QPointF:
            ...

        def setAccepted(self, accepted: bool) -> None:
            ...

        def viewport(self) -> PySide2.Qt3DRender.Qt3DRender.QViewport:
            ...

        def worldIntersection(self) -> PySide2.QtGui.QVector3D:
            ...

    class QPickLineEvent(PySide2.Qt3DRender.QPickEvent):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtCore.QPointF,
            worldIntersection: PySide2.QtGui.QVector3D,
            localIntersection: PySide2.QtGui.QVector3D,
            distance: float,
            edgeIndex: int,
            vertex1Index: int,
            vertex2Index: int,
            button: PySide2.Qt3DRender.Qt3DRender.QPickEvent.Buttons,
            buttons: int,
            modifiers: int,
        ) -> None:
            ...

        def edgeIndex(self) -> int:
            ...

        def vertex1Index(self) -> int:
            ...

        def vertex2Index(self) -> int:
            ...

    class QPickPointEvent(PySide2.Qt3DRender.QPickEvent):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtCore.QPointF,
            worldIntersection: PySide2.QtGui.QVector3D,
            localIntersection: PySide2.QtGui.QVector3D,
            distance: float,
            pointIndex: int,
            button: PySide2.Qt3DRender.Qt3DRender.QPickEvent.Buttons,
            buttons: int,
            modifiers: int,
        ) -> None:
            ...

        def pointIndex(self) -> int:
            ...

    class QPickTriangleEvent(PySide2.Qt3DRender.QPickEvent):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtCore.QPointF,
            worldIntersection: PySide2.QtGui.QVector3D,
            localIntersection: PySide2.QtGui.QVector3D,
            distance: float,
            triangleIndex: int,
            vertex1Index: int,
            vertex2Index: int,
            vertex3Index: int,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            position: PySide2.QtCore.QPointF,
            worldIntersection: PySide2.QtGui.QVector3D,
            localIntersection: PySide2.QtGui.QVector3D,
            distance: float,
            triangleIndex: int,
            vertex1Index: int,
            vertex2Index: int,
            vertex3Index: int,
            button: PySide2.Qt3DRender.Qt3DRender.QPickEvent.Buttons,
            buttons: int,
            modifiers: int,
            uvw: PySide2.QtGui.QVector3D,
        ) -> None:
            ...

        def triangleIndex(self) -> int:
            ...

        def uvw(self) -> PySide2.QtGui.QVector3D:
            ...

        def vertex1Index(self) -> int:
            ...

        def vertex2Index(self) -> int:
            ...

        def vertex3Index(self) -> int:
            ...

    class QPickingSettings(PySide2.Qt3DCore.QNode):
        BoundingVolumePicking: Qt3DRender.QPickingSettings = ...
        NearestPick: Qt3DRender.QPickingSettings = ...
        AllPicks: Qt3DRender.QPickingSettings = ...
        FrontFace: Qt3DRender.QPickingSettings = ...
        TrianglePicking: Qt3DRender.QPickingSettings = ...
        BackFace: Qt3DRender.QPickingSettings = ...
        LinePicking: Qt3DRender.QPickingSettings = ...
        NearestPriorityPick: Qt3DRender.QPickingSettings = ...
        FrontAndBackFace: Qt3DRender.QPickingSettings = ...
        PointPicking: Qt3DRender.QPickingSettings = ...
        PrimitivePicking: Qt3DRender.QPickingSettings = ...

        class FaceOrientationPickingMode(object):
            FrontFace: Qt3DRender.QPickingSettings.FaceOrientationPickingMode = ...
            BackFace: Qt3DRender.QPickingSettings.FaceOrientationPickingMode = ...
            FrontAndBackFace: Qt3DRender.QPickingSettings.FaceOrientationPickingMode = (
                ...
            )

        class PickMethod(object):
            BoundingVolumePicking: Qt3DRender.QPickingSettings.PickMethod = ...
            TrianglePicking: Qt3DRender.QPickingSettings.PickMethod = ...
            LinePicking: Qt3DRender.QPickingSettings.PickMethod = ...
            PointPicking: Qt3DRender.QPickingSettings.PickMethod = ...
            PrimitivePicking: Qt3DRender.QPickingSettings.PickMethod = ...

        class PickResultMode(object):
            NearestPick: Qt3DRender.QPickingSettings.PickResultMode = ...
            AllPicks: Qt3DRender.QPickingSettings.PickResultMode = ...
            NearestPriorityPick: Qt3DRender.QPickingSettings.PickResultMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def faceOrientationPickingMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QPickingSettings.FaceOrientationPickingMode:
            ...

        def pickMethod(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QPickingSettings.PickMethod:
            ...

        def pickResultMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QPickingSettings.PickResultMode:
            ...

        def setFaceOrientationPickingMode(
            self,
            faceOrientationPickingMode: PySide2.Qt3DRender.Qt3DRender.QPickingSettings.FaceOrientationPickingMode,
        ) -> None:
            ...

        def setPickMethod(
            self, pickMethod: PySide2.Qt3DRender.Qt3DRender.QPickingSettings.PickMethod
        ) -> None:
            ...

        def setPickResultMode(
            self,
            pickResultMode: PySide2.Qt3DRender.Qt3DRender.QPickingSettings.PickResultMode,
        ) -> None:
            ...

        def setWorldSpaceTolerance(self, worldSpaceTolerance: float) -> None:
            ...

        def worldSpaceTolerance(self) -> float:
            ...

    class QPointLight(PySide2.Qt3DRender.QAbstractLight):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def constantAttenuation(self) -> float:
            ...

        def linearAttenuation(self) -> float:
            ...

        def quadraticAttenuation(self) -> float:
            ...

        def setConstantAttenuation(self, value: float) -> None:
            ...

        def setLinearAttenuation(self, value: float) -> None:
            ...

        def setQuadraticAttenuation(self, value: float) -> None:
            ...

    class QPointSize(PySide2.Qt3DRender.QRenderState):
        Fixed: Qt3DRender.QPointSize = ...
        Programmable: Qt3DRender.QPointSize = ...

        class SizeMode(object):
            Fixed: Qt3DRender.QPointSize.SizeMode = ...
            Programmable: Qt3DRender.QPointSize.SizeMode = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setSizeMode(
            self, sizeMode: PySide2.Qt3DRender.Qt3DRender.QPointSize.SizeMode
        ) -> None:
            ...

        def setValue(self, value: float) -> None:
            ...

        def sizeMode(self) -> PySide2.Qt3DRender.Qt3DRender.QPointSize.SizeMode:
            ...

        def value(self) -> float:
            ...

    class QPolygonOffset(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def depthSteps(self) -> float:
            ...

        def scaleFactor(self) -> float:
            ...

        def setDepthSteps(self, depthSteps: float) -> None:
            ...

        def setScaleFactor(self, scaleFactor: float) -> None:
            ...

    class QProximityFilter(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def distanceThreshold(self) -> float:
            ...

        def entity(self) -> PySide2.Qt3DCore.Qt3DCore.QEntity:
            ...

        def setDistanceThreshold(self, distanceThreshold: float) -> None:
            ...

        def setEntity(self, entity: PySide2.Qt3DCore.Qt3DCore.QEntity) -> None:
            ...

    class QRayCaster(PySide2.Qt3DRender.QAbstractRayCaster):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def direction(self) -> PySide2.QtGui.QVector3D:
            ...

        def length(self) -> float:
            ...

        def origin(self) -> PySide2.QtGui.QVector3D:
            ...

        def setDirection(self, direction: PySide2.QtGui.QVector3D) -> None:
            ...

        def setLength(self, length: float) -> None:
            ...

        def setOrigin(self, origin: PySide2.QtGui.QVector3D) -> None:
            ...

        @typing.overload
        def trigger(self) -> None:
            ...

        @typing.overload
        def trigger(
            self,
            origin: PySide2.QtGui.QVector3D,
            direction: PySide2.QtGui.QVector3D,
            length: float,
        ) -> None:
            ...

    class QRayCasterHit(object):
        TriangleHit: Qt3DRender.QRayCasterHit = ...
        LineHit: Qt3DRender.QRayCasterHit = ...
        PointHit: Qt3DRender.QRayCasterHit = ...
        EntityHit: Qt3DRender.QRayCasterHit = ...

        class HitType(object):
            TriangleHit: Qt3DRender.QRayCasterHit.HitType = ...
            LineHit: Qt3DRender.QRayCasterHit.HitType = ...
            PointHit: Qt3DRender.QRayCasterHit.HitType = ...
            EntityHit: Qt3DRender.QRayCasterHit.HitType = ...

        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(self, other: PySide2.Qt3DRender.Qt3DRender.QRayCasterHit) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            type: PySide2.Qt3DRender.Qt3DRender.QRayCasterHit.HitType,
            id: PySide2.Qt3DCore.Qt3DCore.QNodeId,
            distance: float,
            localIntersect: PySide2.QtGui.QVector3D,
            worldIntersect: PySide2.QtGui.QVector3D,
            primitiveIndex: int,
            v1: int,
            v2: int,
            v3: int,
        ) -> None:
            ...

        @staticmethod
        def __copy__() -> None:
            ...

        def distance(self) -> float:
            ...

        def entity(self) -> PySide2.Qt3DCore.Qt3DCore.QEntity:
            ...

        def entityId(self) -> PySide2.Qt3DCore.Qt3DCore.QNodeId:
            ...

        def localIntersection(self) -> PySide2.QtGui.QVector3D:
            ...

        def primitiveIndex(self) -> int:
            ...

        def type(self) -> PySide2.Qt3DRender.Qt3DRender.QRayCasterHit.HitType:
            ...

        def vertex1Index(self) -> int:
            ...

        def vertex2Index(self) -> int:
            ...

        def vertex3Index(self) -> int:
            ...

        def worldIntersection(self) -> PySide2.QtGui.QVector3D:
            ...

    class QRenderAspect(PySide2.Qt3DCore.QAbstractAspect):
        Synchronous: Qt3DRender.QRenderAspect = ...
        Threaded: Qt3DRender.QRenderAspect = ...

        class RenderType(object):
            Synchronous: Qt3DRender.QRenderAspect.RenderType = ...
            Threaded: Qt3DRender.QRenderAspect.RenderType = ...

        @typing.overload
        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            type: PySide2.Qt3DRender.Qt3DRender.QRenderAspect.RenderType,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

    class QRenderCapabilities(PySide2.QtCore.QObject):
        NoProfile: Qt3DRender.QRenderCapabilities = ...
        CoreProfile: Qt3DRender.QRenderCapabilities = ...
        OpenGL: Qt3DRender.QRenderCapabilities = ...
        CompatibilityProfile: Qt3DRender.QRenderCapabilities = ...
        OpenGLES: Qt3DRender.QRenderCapabilities = ...
        Vulkan: Qt3DRender.QRenderCapabilities = ...
        DirectX: Qt3DRender.QRenderCapabilities = ...
        RHI: Qt3DRender.QRenderCapabilities = ...

        class API(object):
            OpenGL: Qt3DRender.QRenderCapabilities.API = ...
            OpenGLES: Qt3DRender.QRenderCapabilities.API = ...
            Vulkan: Qt3DRender.QRenderCapabilities.API = ...
            DirectX: Qt3DRender.QRenderCapabilities.API = ...
            RHI: Qt3DRender.QRenderCapabilities.API = ...

        class Profile(object):
            NoProfile: Qt3DRender.QRenderCapabilities.Profile = ...
            CoreProfile: Qt3DRender.QRenderCapabilities.Profile = ...
            CompatibilityProfile: Qt3DRender.QRenderCapabilities.Profile = ...

        def __init__(
            self, parent: typing.Optional[PySide2.QtCore.QObject] = ...
        ) -> None:
            ...

        def api(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderCapabilities.API:
            ...

        def driverVersion(self) -> str:
            ...

        def extensions(self) -> typing.List:
            ...

        def glslVersion(self) -> str:
            ...

        def isValid(self) -> bool:
            ...

        def majorVersion(self) -> int:
            ...

        def maxComputeInvocations(self) -> int:
            ...

        def maxComputeSharedMemorySize(self) -> int:
            ...

        def maxImageUnits(self) -> int:
            ...

        def maxSSBOBindings(self) -> int:
            ...

        def maxSSBOSize(self) -> int:
            ...

        def maxSamples(self) -> int:
            ...

        def maxTextureLayers(self) -> int:
            ...

        def maxTextureSize(self) -> int:
            ...

        def maxTextureUnits(self) -> int:
            ...

        def maxUBOBindings(self) -> int:
            ...

        def maxUBOSize(self) -> int:
            ...

        def maxWorkGroupCountX(self) -> int:
            ...

        def maxWorkGroupCountY(self) -> int:
            ...

        def maxWorkGroupCountZ(self) -> int:
            ...

        def maxWorkGroupSizeX(self) -> int:
            ...

        def maxWorkGroupSizeY(self) -> int:
            ...

        def maxWorkGroupSizeZ(self) -> int:
            ...

        def minorVersion(self) -> int:
            ...

        def profile(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderCapabilities.Profile:
            ...

        def renderer(self) -> str:
            ...

        def supportsCompute(self) -> bool:
            ...

        def supportsImageStore(self) -> bool:
            ...

        def supportsSSBO(self) -> bool:
            ...

        def supportsUBO(self) -> bool:
            ...

        def vendor(self) -> str:
            ...

    class QRenderCapture(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        @typing.overload
        def requestCapture(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderCaptureReply:
            ...

        @typing.overload
        def requestCapture(
            self, captureId: int
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderCaptureReply:
            ...

        @typing.overload
        def requestCapture(
            self, rect: PySide2.QtCore.QRect
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderCaptureReply:
            ...

    class QRenderCaptureReply(PySide2.QtCore.QObject):
        def captureId(self) -> int:
            ...

        def image(self) -> PySide2.QtGui.QImage:
            ...

        def isComplete(self) -> bool:
            ...

        def saveImage(self, fileName: str) -> bool:
            ...

        def saveToFile(self, fileName: str) -> None:
            ...

    class QRenderPass(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addFilterKey(
            self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey
        ) -> None:
            ...

        def addParameter(self, p: PySide2.Qt3DRender.Qt3DRender.QParameter) -> None:
            ...

        def addRenderState(
            self, state: PySide2.Qt3DRender.Qt3DRender.QRenderState
        ) -> None:
            ...

        def filterKeys(self) -> typing.List:
            ...

        def parameters(self) -> typing.List:
            ...

        def removeFilterKey(
            self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey
        ) -> None:
            ...

        def removeParameter(self, p: PySide2.Qt3DRender.Qt3DRender.QParameter) -> None:
            ...

        def removeRenderState(
            self, state: PySide2.Qt3DRender.Qt3DRender.QRenderState
        ) -> None:
            ...

        def renderStates(self) -> typing.List:
            ...

        def setShaderProgram(
            self, shaderProgram: PySide2.Qt3DRender.Qt3DRender.QShaderProgram
        ) -> None:
            ...

        def shaderProgram(self) -> PySide2.Qt3DRender.Qt3DRender.QShaderProgram:
            ...

    class QRenderPassFilter(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addMatch(self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey) -> None:
            ...

        def addParameter(
            self, parameter: PySide2.Qt3DRender.Qt3DRender.QParameter
        ) -> None:
            ...

        def matchAny(self) -> typing.List:
            ...

        def parameters(self) -> typing.List:
            ...

        def removeMatch(
            self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey
        ) -> None:
            ...

        def removeParameter(
            self, parameter: PySide2.Qt3DRender.Qt3DRender.QParameter
        ) -> None:
            ...

    class QRenderSettings(PySide2.Qt3DCore.QComponent):
        OnDemand: Qt3DRender.QRenderSettings = ...
        Always: Qt3DRender.QRenderSettings = ...

        class RenderPolicy(object):
            OnDemand: Qt3DRender.QRenderSettings.RenderPolicy = ...
            Always: Qt3DRender.QRenderSettings.RenderPolicy = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def activeFrameGraph(self) -> PySide2.Qt3DRender.Qt3DRender.QFrameGraphNode:
            ...

        def pickingSettings(self) -> PySide2.Qt3DRender.Qt3DRender.QPickingSettings:
            ...

        def renderCapabilities(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderCapabilities:
            ...

        def renderPolicy(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderSettings.RenderPolicy:
            ...

        def setActiveFrameGraph(
            self, activeFrameGraph: PySide2.Qt3DRender.Qt3DRender.QFrameGraphNode
        ) -> None:
            ...

        def setRenderPolicy(
            self,
            renderPolicy: PySide2.Qt3DRender.Qt3DRender.QRenderSettings.RenderPolicy,
        ) -> None:
            ...

    class QRenderState(PySide2.Qt3DCore.QNode):
        ...

    class QRenderStateSet(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addRenderState(
            self, state: PySide2.Qt3DRender.Qt3DRender.QRenderState
        ) -> None:
            ...

        def removeRenderState(
            self, state: PySide2.Qt3DRender.Qt3DRender.QRenderState
        ) -> None:
            ...

        def renderStates(self) -> typing.List:
            ...

    class QRenderSurfaceSelector(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def externalRenderTargetSize(self) -> PySide2.QtCore.QSize:
            ...

        def setExternalRenderTargetSize(self, size: PySide2.QtCore.QSize) -> None:
            ...

        def setSurface(self, surfaceObject: PySide2.QtCore.QObject) -> None:
            ...

        def setSurfacePixelRatio(self, ratio: float) -> None:
            ...

        def surface(self) -> PySide2.QtCore.QObject:
            ...

        def surfacePixelRatio(self) -> float:
            ...

    class QRenderTarget(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addOutput(
            self, output: PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput
        ) -> None:
            ...

        def outputs(self) -> typing.List:
            ...

        def removeOutput(
            self, output: PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput
        ) -> None:
            ...

    class QRenderTargetOutput(PySide2.Qt3DCore.QNode):
        Color0: Qt3DRender.QRenderTargetOutput = ...
        Color1: Qt3DRender.QRenderTargetOutput = ...
        Color2: Qt3DRender.QRenderTargetOutput = ...
        Color3: Qt3DRender.QRenderTargetOutput = ...
        Color4: Qt3DRender.QRenderTargetOutput = ...
        Color5: Qt3DRender.QRenderTargetOutput = ...
        Color6: Qt3DRender.QRenderTargetOutput = ...
        Color7: Qt3DRender.QRenderTargetOutput = ...
        Color8: Qt3DRender.QRenderTargetOutput = ...
        Color9: Qt3DRender.QRenderTargetOutput = ...
        Color10: Qt3DRender.QRenderTargetOutput = ...
        Color11: Qt3DRender.QRenderTargetOutput = ...
        Color12: Qt3DRender.QRenderTargetOutput = ...
        Color13: Qt3DRender.QRenderTargetOutput = ...
        Color14: Qt3DRender.QRenderTargetOutput = ...
        Color15: Qt3DRender.QRenderTargetOutput = ...
        Depth: Qt3DRender.QRenderTargetOutput = ...
        Stencil: Qt3DRender.QRenderTargetOutput = ...
        DepthStencil: Qt3DRender.QRenderTargetOutput = ...

        class AttachmentPoint(object):
            Color0: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color1: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color2: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color3: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color4: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color5: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color6: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color7: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color8: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color9: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color10: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color11: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color12: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color13: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color14: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Color15: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Depth: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            Stencil: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...
            DepthStencil: Qt3DRender.QRenderTargetOutput.AttachmentPoint = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def attachmentPoint(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint:
            ...

        def face(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace:
            ...

        def layer(self) -> int:
            ...

        def mipLevel(self) -> int:
            ...

        def setAttachmentPoint(
            self,
            attachmentPoint: PySide2.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint,
        ) -> None:
            ...

        def setFace(
            self, face: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace
        ) -> None:
            ...

        def setLayer(self, layer: int) -> None:
            ...

        def setMipLevel(self, level: int) -> None:
            ...

        def setTexture(
            self, texture: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture
        ) -> None:
            ...

        def texture(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture:
            ...

    class QRenderTargetSelector(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def outputs(self) -> typing.List:
            ...

        def setOutputs(self, buffers: typing.List) -> None:
            ...

        def setTarget(
            self, target: PySide2.Qt3DRender.Qt3DRender.QRenderTarget
        ) -> None:
            ...

        def target(self) -> PySide2.Qt3DRender.Qt3DRender.QRenderTarget:
            ...

    class QSceneLoader(PySide2.Qt3DCore.QComponent):
        None_: Qt3DRender.QSceneLoader = ...
        UnknownComponent: Qt3DRender.QSceneLoader = ...
        GeometryRendererComponent: Qt3DRender.QSceneLoader = ...
        Loading: Qt3DRender.QSceneLoader = ...
        Ready: Qt3DRender.QSceneLoader = ...
        TransformComponent: Qt3DRender.QSceneLoader = ...
        Error: Qt3DRender.QSceneLoader = ...
        MaterialComponent: Qt3DRender.QSceneLoader = ...
        LightComponent: Qt3DRender.QSceneLoader = ...
        CameraLensComponent: Qt3DRender.QSceneLoader = ...

        class ComponentType(object):
            UnknownComponent: Qt3DRender.QSceneLoader.ComponentType = ...
            GeometryRendererComponent: Qt3DRender.QSceneLoader.ComponentType = ...
            TransformComponent: Qt3DRender.QSceneLoader.ComponentType = ...
            MaterialComponent: Qt3DRender.QSceneLoader.ComponentType = ...
            LightComponent: Qt3DRender.QSceneLoader.ComponentType = ...
            CameraLensComponent: Qt3DRender.QSceneLoader.ComponentType = ...

        class Status(object):
            None_: Qt3DRender.QSceneLoader.Status = ...
            Loading: Qt3DRender.QSceneLoader.Status = ...
            Ready: Qt3DRender.QSceneLoader.Status = ...
            Error: Qt3DRender.QSceneLoader.Status = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def component(
            self,
            entityName: str,
            componentType: PySide2.Qt3DRender.Qt3DRender.QSceneLoader.ComponentType,
        ) -> PySide2.Qt3DCore.Qt3DCore.QComponent:
            ...

        def entity(self, entityName: str) -> PySide2.Qt3DCore.Qt3DCore.QEntity:
            ...

        def entityNames(self) -> typing.List:
            ...

        def setSource(self, arg: PySide2.QtCore.QUrl) -> None:
            ...

        def setStatus(
            self, status: PySide2.Qt3DRender.Qt3DRender.QSceneLoader.Status
        ) -> None:
            ...

        def source(self) -> PySide2.QtCore.QUrl:
            ...

        def status(self) -> PySide2.Qt3DRender.Qt3DRender.QSceneLoader.Status:
            ...

    class QScissorTest(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def bottom(self) -> int:
            ...

        def height(self) -> int:
            ...

        def left(self) -> int:
            ...

        def setBottom(self, bottom: int) -> None:
            ...

        def setHeight(self, height: int) -> None:
            ...

        def setLeft(self, left: int) -> None:
            ...

        def setWidth(self, width: int) -> None:
            ...

        def width(self) -> int:
            ...

    class QScreenRayCaster(PySide2.Qt3DRender.QAbstractRayCaster):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def position(self) -> PySide2.QtCore.QPoint:
            ...

        def setPosition(self, position: PySide2.QtCore.QPoint) -> None:
            ...

        @typing.overload
        def trigger(self) -> None:
            ...

        @typing.overload
        def trigger(self, position: PySide2.QtCore.QPoint) -> None:
            ...

    class QSeamlessCubemap(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QSetFence(PySide2.Qt3DRender.QFrameGraphNode):
        NoHandle: Qt3DRender.QSetFence = ...
        OpenGLFenceId: Qt3DRender.QSetFence = ...

        class HandleType(object):
            NoHandle: Qt3DRender.QSetFence.HandleType = ...
            OpenGLFenceId: Qt3DRender.QSetFence.HandleType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def handle(self) -> typing.Any:
            ...

        def handleType(self) -> PySide2.Qt3DRender.Qt3DRender.QSetFence.HandleType:
            ...

    class QShaderData(PySide2.Qt3DCore.QComponent):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def event(self, event: PySide2.QtCore.QEvent) -> bool:
            ...

    class QShaderImage(PySide2.Qt3DCore.QNode):
        NoFormat: Qt3DRender.QShaderImage = ...
        ReadOnly: Qt3DRender.QShaderImage = ...
        Automatic: Qt3DRender.QShaderImage = ...
        WriteOnly: Qt3DRender.QShaderImage = ...
        ReadWrite: Qt3DRender.QShaderImage = ...
        RGBA8_UNorm: Qt3DRender.QShaderImage = ...
        RGB10A2: Qt3DRender.QShaderImage = ...
        RGBA16_UNorm: Qt3DRender.QShaderImage = ...
        R8_UNorm: Qt3DRender.QShaderImage = ...
        R16_UNorm: Qt3DRender.QShaderImage = ...
        RG8_UNorm: Qt3DRender.QShaderImage = ...
        RG16_UNorm: Qt3DRender.QShaderImage = ...
        R16F: Qt3DRender.QShaderImage = ...
        R32F: Qt3DRender.QShaderImage = ...
        RG16F: Qt3DRender.QShaderImage = ...
        RG32F: Qt3DRender.QShaderImage = ...
        R8I: Qt3DRender.QShaderImage = ...
        R8U: Qt3DRender.QShaderImage = ...
        R16I: Qt3DRender.QShaderImage = ...
        R16U: Qt3DRender.QShaderImage = ...
        R32I: Qt3DRender.QShaderImage = ...
        R32U: Qt3DRender.QShaderImage = ...
        RG8I: Qt3DRender.QShaderImage = ...
        RG8U: Qt3DRender.QShaderImage = ...
        RG16I: Qt3DRender.QShaderImage = ...
        RG16U: Qt3DRender.QShaderImage = ...
        RG32I: Qt3DRender.QShaderImage = ...
        RG32U: Qt3DRender.QShaderImage = ...
        RGBA32F: Qt3DRender.QShaderImage = ...
        RGBA16F: Qt3DRender.QShaderImage = ...
        RG11B10F: Qt3DRender.QShaderImage = ...
        RGBA32U: Qt3DRender.QShaderImage = ...
        RGBA16U: Qt3DRender.QShaderImage = ...
        RGBA8U: Qt3DRender.QShaderImage = ...
        RGBA32I: Qt3DRender.QShaderImage = ...
        RGBA16I: Qt3DRender.QShaderImage = ...
        RGBA8I: Qt3DRender.QShaderImage = ...
        R8_SNorm: Qt3DRender.QShaderImage = ...
        RG8_SNorm: Qt3DRender.QShaderImage = ...
        RGBA8_SNorm: Qt3DRender.QShaderImage = ...
        R16_SNorm: Qt3DRender.QShaderImage = ...
        RG16_SNorm: Qt3DRender.QShaderImage = ...
        RGBA16_SNorm: Qt3DRender.QShaderImage = ...
        RGB10A2U: Qt3DRender.QShaderImage = ...

        class Access(object):
            ReadOnly: Qt3DRender.QShaderImage.Access = ...
            WriteOnly: Qt3DRender.QShaderImage.Access = ...
            ReadWrite: Qt3DRender.QShaderImage.Access = ...

        class ImageFormat(object):
            NoFormat: Qt3DRender.QShaderImage.ImageFormat = ...
            Automatic: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA8_UNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RGB10A2: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA16_UNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            R8_UNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            R16_UNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RG8_UNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RG16_UNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            R16F: Qt3DRender.QShaderImage.ImageFormat = ...
            R32F: Qt3DRender.QShaderImage.ImageFormat = ...
            RG16F: Qt3DRender.QShaderImage.ImageFormat = ...
            RG32F: Qt3DRender.QShaderImage.ImageFormat = ...
            R8I: Qt3DRender.QShaderImage.ImageFormat = ...
            R8U: Qt3DRender.QShaderImage.ImageFormat = ...
            R16I: Qt3DRender.QShaderImage.ImageFormat = ...
            R16U: Qt3DRender.QShaderImage.ImageFormat = ...
            R32I: Qt3DRender.QShaderImage.ImageFormat = ...
            R32U: Qt3DRender.QShaderImage.ImageFormat = ...
            RG8I: Qt3DRender.QShaderImage.ImageFormat = ...
            RG8U: Qt3DRender.QShaderImage.ImageFormat = ...
            RG16I: Qt3DRender.QShaderImage.ImageFormat = ...
            RG16U: Qt3DRender.QShaderImage.ImageFormat = ...
            RG32I: Qt3DRender.QShaderImage.ImageFormat = ...
            RG32U: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA32F: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA16F: Qt3DRender.QShaderImage.ImageFormat = ...
            RG11B10F: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA32U: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA16U: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA8U: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA32I: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA16I: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA8I: Qt3DRender.QShaderImage.ImageFormat = ...
            R8_SNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RG8_SNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA8_SNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            R16_SNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RG16_SNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RGBA16_SNorm: Qt3DRender.QShaderImage.ImageFormat = ...
            RGB10A2U: Qt3DRender.QShaderImage.ImageFormat = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def access(self) -> PySide2.Qt3DRender.Qt3DRender.QShaderImage.Access:
            ...

        def format(self) -> PySide2.Qt3DRender.Qt3DRender.QShaderImage.ImageFormat:
            ...

        def layer(self) -> int:
            ...

        def layered(self) -> bool:
            ...

        def mipLevel(self) -> int:
            ...

        def setAccess(
            self, access: PySide2.Qt3DRender.Qt3DRender.QShaderImage.Access
        ) -> None:
            ...

        def setFormat(
            self, format: PySide2.Qt3DRender.Qt3DRender.QShaderImage.ImageFormat
        ) -> None:
            ...

        def setLayer(self, layer: int) -> None:
            ...

        def setLayered(self, layered: bool) -> None:
            ...

        def setMipLevel(self, mipLevel: int) -> None:
            ...

        def setTexture(
            self, texture: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture
        ) -> None:
            ...

        def texture(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture:
            ...

    class QShaderProgram(PySide2.Qt3DCore.QNode):
        GLSL: Qt3DRender.QShaderProgram = ...
        NotReady: Qt3DRender.QShaderProgram = ...
        Vertex: Qt3DRender.QShaderProgram = ...
        Fragment: Qt3DRender.QShaderProgram = ...
        Ready: Qt3DRender.QShaderProgram = ...
        SPIRV: Qt3DRender.QShaderProgram = ...
        Error: Qt3DRender.QShaderProgram = ...
        TessellationControl: Qt3DRender.QShaderProgram = ...
        TessellationEvaluation: Qt3DRender.QShaderProgram = ...
        Geometry: Qt3DRender.QShaderProgram = ...
        Compute: Qt3DRender.QShaderProgram = ...

        class Format(object):
            GLSL: Qt3DRender.QShaderProgram.Format = ...
            SPIRV: Qt3DRender.QShaderProgram.Format = ...

        class ShaderType(object):
            Vertex: Qt3DRender.QShaderProgram.ShaderType = ...
            Fragment: Qt3DRender.QShaderProgram.ShaderType = ...
            TessellationControl: Qt3DRender.QShaderProgram.ShaderType = ...
            TessellationEvaluation: Qt3DRender.QShaderProgram.ShaderType = ...
            Geometry: Qt3DRender.QShaderProgram.ShaderType = ...
            Compute: Qt3DRender.QShaderProgram.ShaderType = ...

        class Status(object):
            NotReady: Qt3DRender.QShaderProgram.Status = ...
            Ready: Qt3DRender.QShaderProgram.Status = ...
            Error: Qt3DRender.QShaderProgram.Status = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def computeShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def format(self) -> PySide2.Qt3DRender.Qt3DRender.QShaderProgram.Format:
            ...

        def fragmentShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def geometryShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        @staticmethod
        def loadSource(sourceUrl: PySide2.QtCore.QUrl) -> PySide2.QtCore.QByteArray:
            ...

        def log(self) -> str:
            ...

        def setComputeShaderCode(
            self, computeShaderCode: PySide2.QtCore.QByteArray
        ) -> None:
            ...

        def setFormat(
            self, format: PySide2.Qt3DRender.Qt3DRender.QShaderProgram.Format
        ) -> None:
            ...

        def setFragmentShaderCode(
            self, fragmentShaderCode: PySide2.QtCore.QByteArray
        ) -> None:
            ...

        def setGeometryShaderCode(
            self, geometryShaderCode: PySide2.QtCore.QByteArray
        ) -> None:
            ...

        def setShaderCode(
            self,
            type: PySide2.Qt3DRender.Qt3DRender.QShaderProgram.ShaderType,
            shaderCode: PySide2.QtCore.QByteArray,
        ) -> None:
            ...

        def setTessellationControlShaderCode(
            self, tessellationControlShaderCode: PySide2.QtCore.QByteArray
        ) -> None:
            ...

        def setTessellationEvaluationShaderCode(
            self, tessellationEvaluationShaderCode: PySide2.QtCore.QByteArray
        ) -> None:
            ...

        def setVertexShaderCode(
            self, vertexShaderCode: PySide2.QtCore.QByteArray
        ) -> None:
            ...

        def shaderCode(
            self, type: PySide2.Qt3DRender.Qt3DRender.QShaderProgram.ShaderType
        ) -> PySide2.QtCore.QByteArray:
            ...

        def status(self) -> PySide2.Qt3DRender.Qt3DRender.QShaderProgram.Status:
            ...

        def tessellationControlShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def tessellationEvaluationShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def vertexShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

    class QShaderProgramBuilder(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def computeShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def computeShaderGraph(self) -> PySide2.QtCore.QUrl:
            ...

        def enabledLayers(self) -> typing.List:
            ...

        def fragmentShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def fragmentShaderGraph(self) -> PySide2.QtCore.QUrl:
            ...

        def geometryShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def geometryShaderGraph(self) -> PySide2.QtCore.QUrl:
            ...

        def setComputeShaderGraph(
            self, computeShaderGraph: PySide2.QtCore.QUrl
        ) -> None:
            ...

        def setEnabledLayers(self, layers: typing.Sequence) -> None:
            ...

        def setFragmentShaderGraph(
            self, fragmentShaderGraph: PySide2.QtCore.QUrl
        ) -> None:
            ...

        def setGeometryShaderGraph(
            self, geometryShaderGraph: PySide2.QtCore.QUrl
        ) -> None:
            ...

        def setShaderProgram(
            self, program: PySide2.Qt3DRender.Qt3DRender.QShaderProgram
        ) -> None:
            ...

        def setTessellationControlShaderGraph(
            self, tessellationControlShaderGraph: PySide2.QtCore.QUrl
        ) -> None:
            ...

        def setTessellationEvaluationShaderGraph(
            self, tessellationEvaluationShaderGraph: PySide2.QtCore.QUrl
        ) -> None:
            ...

        def setVertexShaderGraph(self, vertexShaderGraph: PySide2.QtCore.QUrl) -> None:
            ...

        def shaderProgram(self) -> PySide2.Qt3DRender.Qt3DRender.QShaderProgram:
            ...

        def tessellationControlShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def tessellationControlShaderGraph(self) -> PySide2.QtCore.QUrl:
            ...

        def tessellationEvaluationShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def tessellationEvaluationShaderGraph(self) -> PySide2.QtCore.QUrl:
            ...

        def vertexShaderCode(self) -> PySide2.QtCore.QByteArray:
            ...

        def vertexShaderGraph(self) -> PySide2.QtCore.QUrl:
            ...

    class QSharedGLTexture(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def setTextureId(self, id: int) -> None:
            ...

        def textureId(self) -> int:
            ...

    class QSortPolicy(PySide2.Qt3DRender.QFrameGraphNode):
        StateChangeCost: Qt3DRender.QSortPolicy = ...
        BackToFront: Qt3DRender.QSortPolicy = ...
        Material: Qt3DRender.QSortPolicy = ...
        FrontToBack: Qt3DRender.QSortPolicy = ...
        Texture: Qt3DRender.QSortPolicy = ...
        Uniform: Qt3DRender.QSortPolicy = ...

        class SortType(object):
            StateChangeCost: Qt3DRender.QSortPolicy.SortType = ...
            BackToFront: Qt3DRender.QSortPolicy.SortType = ...
            Material: Qt3DRender.QSortPolicy.SortType = ...
            FrontToBack: Qt3DRender.QSortPolicy.SortType = ...
            Texture: Qt3DRender.QSortPolicy.SortType = ...
            Uniform: Qt3DRender.QSortPolicy.SortType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        @typing.overload
        def setSortTypes(self, sortTypes: typing.List) -> None:
            ...

        @typing.overload
        def setSortTypes(self, sortTypesInt: typing.List) -> None:
            ...

        def sortTypes(self) -> typing.List:
            ...

        def sortTypesInt(self) -> typing.List:
            ...

    class QSpotLight(PySide2.Qt3DRender.QAbstractLight):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def constantAttenuation(self) -> float:
            ...

        def cutOffAngle(self) -> float:
            ...

        def linearAttenuation(self) -> float:
            ...

        def localDirection(self) -> PySide2.QtGui.QVector3D:
            ...

        def quadraticAttenuation(self) -> float:
            ...

        def setConstantAttenuation(self, value: float) -> None:
            ...

        def setCutOffAngle(self, cutOffAngle: float) -> None:
            ...

        def setLinearAttenuation(self, value: float) -> None:
            ...

        def setLocalDirection(self, localDirection: PySide2.QtGui.QVector3D) -> None:
            ...

        def setQuadraticAttenuation(self, value: float) -> None:
            ...

    class QStencilMask(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def backOutputMask(self) -> int:
            ...

        def frontOutputMask(self) -> int:
            ...

        def setBackOutputMask(self, backOutputMask: int) -> None:
            ...

        def setFrontOutputMask(self, frontOutputMask: int) -> None:
            ...

    class QStencilOperation(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def back(self) -> PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments:
            ...

        def front(self) -> PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments:
            ...

    class QStencilOperationArguments(PySide2.QtCore.QObject):
        Zero: Qt3DRender.QStencilOperationArguments = ...
        Front: Qt3DRender.QStencilOperationArguments = ...
        Back: Qt3DRender.QStencilOperationArguments = ...
        FrontAndBack: Qt3DRender.QStencilOperationArguments = ...
        Invert: Qt3DRender.QStencilOperationArguments = ...
        Keep: Qt3DRender.QStencilOperationArguments = ...
        Replace: Qt3DRender.QStencilOperationArguments = ...
        Increment: Qt3DRender.QStencilOperationArguments = ...
        Decrement: Qt3DRender.QStencilOperationArguments = ...
        IncrementWrap: Qt3DRender.QStencilOperationArguments = ...
        DecrementWrap: Qt3DRender.QStencilOperationArguments = ...

        class FaceMode(object):
            Front: Qt3DRender.QStencilOperationArguments.FaceMode = ...
            Back: Qt3DRender.QStencilOperationArguments.FaceMode = ...
            FrontAndBack: Qt3DRender.QStencilOperationArguments.FaceMode = ...

        class Operation(object):
            Zero: Qt3DRender.QStencilOperationArguments.Operation = ...
            Invert: Qt3DRender.QStencilOperationArguments.Operation = ...
            Keep: Qt3DRender.QStencilOperationArguments.Operation = ...
            Replace: Qt3DRender.QStencilOperationArguments.Operation = ...
            Increment: Qt3DRender.QStencilOperationArguments.Operation = ...
            Decrement: Qt3DRender.QStencilOperationArguments.Operation = ...
            IncrementWrap: Qt3DRender.QStencilOperationArguments.Operation = ...
            DecrementWrap: Qt3DRender.QStencilOperationArguments.Operation = ...

        def allTestsPassOperation(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation:
            ...

        def depthTestFailureOperation(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation:
            ...

        def faceMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.FaceMode:
            ...

        def setAllTestsPassOperation(
            self,
            operation: PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation,
        ) -> None:
            ...

        def setDepthTestFailureOperation(
            self,
            operation: PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation,
        ) -> None:
            ...

        def setStencilTestFailureOperation(
            self,
            operation: PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation,
        ) -> None:
            ...

        def stencilTestFailureOperation(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation:
            ...

    class QStencilTest(PySide2.Qt3DRender.QRenderState):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def back(self) -> PySide2.Qt3DRender.Qt3DRender.QStencilTestArguments:
            ...

        def front(self) -> PySide2.Qt3DRender.Qt3DRender.QStencilTestArguments:
            ...

    class QStencilTestArguments(PySide2.QtCore.QObject):
        Never: Qt3DRender.QStencilTestArguments = ...
        Less: Qt3DRender.QStencilTestArguments = ...
        Equal: Qt3DRender.QStencilTestArguments = ...
        LessOrEqual: Qt3DRender.QStencilTestArguments = ...
        Greater: Qt3DRender.QStencilTestArguments = ...
        NotEqual: Qt3DRender.QStencilTestArguments = ...
        GreaterOrEqual: Qt3DRender.QStencilTestArguments = ...
        Always: Qt3DRender.QStencilTestArguments = ...
        Front: Qt3DRender.QStencilTestArguments = ...
        Back: Qt3DRender.QStencilTestArguments = ...
        FrontAndBack: Qt3DRender.QStencilTestArguments = ...

        class StencilFaceMode(object):
            Front: Qt3DRender.QStencilTestArguments.StencilFaceMode = ...
            Back: Qt3DRender.QStencilTestArguments.StencilFaceMode = ...
            FrontAndBack: Qt3DRender.QStencilTestArguments.StencilFaceMode = ...

        class StencilFunction(object):
            Never: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            Less: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            Equal: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            LessOrEqual: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            Greater: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            NotEqual: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            GreaterOrEqual: Qt3DRender.QStencilTestArguments.StencilFunction = ...
            Always: Qt3DRender.QStencilTestArguments.StencilFunction = ...

        def comparisonMask(self) -> int:
            ...

        def faceMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QStencilTestArguments.StencilFaceMode:
            ...

        def referenceValue(self) -> int:
            ...

        def setComparisonMask(self, comparisonMask: int) -> None:
            ...

        def setReferenceValue(self, referenceValue: int) -> None:
            ...

        def setStencilFunction(
            self,
            stencilFunction: PySide2.Qt3DRender.Qt3DRender.QStencilTestArguments.StencilFunction,
        ) -> None:
            ...

        def stencilFunction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QStencilTestArguments.StencilFunction:
            ...

    class QTechnique(PySide2.Qt3DCore.QNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addFilterKey(
            self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey
        ) -> None:
            ...

        def addParameter(self, p: PySide2.Qt3DRender.Qt3DRender.QParameter) -> None:
            ...

        def addRenderPass(
            self, pass_: PySide2.Qt3DRender.Qt3DRender.QRenderPass
        ) -> None:
            ...

        def filterKeys(self) -> typing.List:
            ...

        def graphicsApiFilter(self) -> PySide2.Qt3DRender.Qt3DRender.QGraphicsApiFilter:
            ...

        def parameters(self) -> typing.List:
            ...

        def removeFilterKey(
            self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey
        ) -> None:
            ...

        def removeParameter(self, p: PySide2.Qt3DRender.Qt3DRender.QParameter) -> None:
            ...

        def removeRenderPass(
            self, pass_: PySide2.Qt3DRender.Qt3DRender.QRenderPass
        ) -> None:
            ...

        def renderPasses(self) -> typing.List:
            ...

    class QTechniqueFilter(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def addMatch(self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey) -> None:
            ...

        def addParameter(self, p: PySide2.Qt3DRender.Qt3DRender.QParameter) -> None:
            ...

        def matchAll(self) -> typing.List:
            ...

        def parameters(self) -> typing.List:
            ...

        def removeMatch(
            self, filterKey: PySide2.Qt3DRender.Qt3DRender.QFilterKey
        ) -> None:
            ...

        def removeParameter(self, p: PySide2.Qt3DRender.Qt3DRender.QParameter) -> None:
            ...

    class QTexture1D(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTexture1DArray(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTexture2D(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTexture2DArray(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTexture2DMultisample(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTexture2DMultisampleArray(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTexture3D(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTextureBuffer(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTextureCubeMap(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTextureCubeMapArray(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTextureData(object):
        def __init__(self) -> None:
            ...

        def comparisonFunction(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction:
            ...

        def comparisonMode(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode:
            ...

        def depth(self) -> int:
            ...

        def format(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat:
            ...

        def height(self) -> int:
            ...

        def isAutoMipMapGenerationEnabled(self) -> bool:
            ...

        def layers(self) -> int:
            ...

        def magnificationFilter(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter:
            ...

        def maximumAnisotropy(self) -> float:
            ...

        def minificationFilter(
            self,
        ) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter:
            ...

        def setAutoMipMapGenerationEnabled(
            self, isAutoMipMapGenerationEnabled: bool
        ) -> None:
            ...

        def setComparisonFunction(
            self,
            comparisonFunction: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction,
        ) -> None:
            ...

        def setComparisonMode(
            self,
            comparisonMode: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode,
        ) -> None:
            ...

        def setDepth(self, depth: int) -> None:
            ...

        def setFormat(
            self, arg__1: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat
        ) -> None:
            ...

        def setHeight(self, height: int) -> None:
            ...

        def setLayers(self, layers: int) -> None:
            ...

        def setMagnificationFilter(
            self, filter: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter
        ) -> None:
            ...

        def setMaximumAnisotropy(self, maximumAnisotropy: float) -> None:
            ...

        def setMinificationFilter(
            self, filter: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Filter
        ) -> None:
            ...

        def setTarget(
            self, target: PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Target
        ) -> None:
            ...

        def setWidth(self, width: int) -> None:
            ...

        def setWrapModeX(
            self, wrapModeX: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode
        ) -> None:
            ...

        def setWrapModeY(
            self, wrapModeY: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode
        ) -> None:
            ...

        def setWrapModeZ(
            self, wrapModeZ: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode
        ) -> None:
            ...

        def target(self) -> PySide2.Qt3DRender.Qt3DRender.QAbstractTexture.Target:
            ...

        def width(self) -> int:
            ...

        def wrapModeX(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode:
            ...

        def wrapModeY(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode:
            ...

        def wrapModeZ(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode:
            ...

    class QTextureGenerator(PySide2.Qt3DRender.QAbstractFunctor):
        ...

    class QTextureImage(PySide2.Qt3DRender.QAbstractTextureImage):
        None_: Qt3DRender.QTextureImage = ...
        Loading: Qt3DRender.QTextureImage = ...
        Ready: Qt3DRender.QTextureImage = ...
        Error: Qt3DRender.QTextureImage = ...

        class Status(object):
            None_: Qt3DRender.QTextureImage.Status = ...
            Loading: Qt3DRender.QTextureImage.Status = ...
            Ready: Qt3DRender.QTextureImage.Status = ...
            Error: Qt3DRender.QTextureImage.Status = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def isMirrored(self) -> bool:
            ...

        def setMirrored(self, mirrored: bool) -> None:
            ...

        def setSource(self, source: PySide2.QtCore.QUrl) -> None:
            ...

        def setStatus(
            self, status: PySide2.Qt3DRender.Qt3DRender.QTextureImage.Status
        ) -> None:
            ...

        def source(self) -> PySide2.QtCore.QUrl:
            ...

        def status(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureImage.Status:
            ...

    class QTextureImageData(object):
        def __init__(self) -> None:
            ...

        def cleanup(self) -> None:
            ...

        def data(
            self, layer: int = ..., face: int = ..., mipmapLevel: int = ...
        ) -> PySide2.QtCore.QByteArray:
            ...

        def depth(self) -> int:
            ...

        def faces(self) -> int:
            ...

        def format(self) -> PySide2.QtGui.QOpenGLTexture.TextureFormat:
            ...

        def height(self) -> int:
            ...

        def isCompressed(self) -> bool:
            ...

        def layers(self) -> int:
            ...

        def mipLevels(self) -> int:
            ...

        def pixelFormat(self) -> PySide2.QtGui.QOpenGLTexture.PixelFormat:
            ...

        def pixelType(self) -> PySide2.QtGui.QOpenGLTexture.PixelType:
            ...

        def setData(
            self,
            data: PySide2.QtCore.QByteArray,
            blockSize: int,
            isCompressed: bool = ...,
        ) -> None:
            ...

        def setDepth(self, depth: int) -> None:
            ...

        def setFaces(self, faces: int) -> None:
            ...

        def setFormat(self, format: PySide2.QtGui.QOpenGLTexture.TextureFormat) -> None:
            ...

        def setHeight(self, height: int) -> None:
            ...

        def setImage(self, arg__1: PySide2.QtGui.QImage) -> None:
            ...

        def setLayers(self, layers: int) -> None:
            ...

        def setMipLevels(self, mipLevels: int) -> None:
            ...

        def setPixelFormat(
            self, pixelFormat: PySide2.QtGui.QOpenGLTexture.PixelFormat
        ) -> None:
            ...

        def setPixelType(
            self, pixelType: PySide2.QtGui.QOpenGLTexture.PixelType
        ) -> None:
            ...

        def setTarget(self, target: PySide2.QtGui.QOpenGLTexture.Target) -> None:
            ...

        def setWidth(self, width: int) -> None:
            ...

        def target(self) -> PySide2.QtGui.QOpenGLTexture.Target:
            ...

        def width(self) -> int:
            ...

    class QTextureImageDataGenerator(PySide2.Qt3DRender.QAbstractFunctor):
        ...

    class QTextureLoader(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def isMirrored(self) -> bool:
            ...

        def setMirrored(self, mirrored: bool) -> None:
            ...

        def setSource(self, source: PySide2.QtCore.QUrl) -> None:
            ...

        def source(self) -> PySide2.QtCore.QUrl:
            ...

    class QTextureRectangle(PySide2.Qt3DRender.QAbstractTexture):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

    class QTextureWrapMode(PySide2.QtCore.QObject):
        Repeat: Qt3DRender.QTextureWrapMode = ...
        ClampToBorder: Qt3DRender.QTextureWrapMode = ...
        ClampToEdge: Qt3DRender.QTextureWrapMode = ...
        MirroredRepeat: Qt3DRender.QTextureWrapMode = ...

        class WrapMode(object):
            Repeat: Qt3DRender.QTextureWrapMode.WrapMode = ...
            ClampToBorder: Qt3DRender.QTextureWrapMode.WrapMode = ...
            ClampToEdge: Qt3DRender.QTextureWrapMode.WrapMode = ...
            MirroredRepeat: Qt3DRender.QTextureWrapMode.WrapMode = ...

        @typing.overload
        def __init__(
            self,
            wrapMode: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode = ...,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            x: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,
            y: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,
            z: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,
            parent: typing.Optional[PySide2.QtCore.QObject] = ...,
        ) -> None:
            ...

        def setX(
            self, x: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode
        ) -> None:
            ...

        def setY(
            self, y: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode
        ) -> None:
            ...

        def setZ(
            self, z: PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode
        ) -> None:
            ...

        def x(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode:
            ...

        def y(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode:
            ...

        def z(self) -> PySide2.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode:
            ...

    class QViewport(PySide2.Qt3DRender.QFrameGraphNode):
        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def gamma(self) -> float:
            ...

        def normalizedRect(self) -> PySide2.QtCore.QRectF:
            ...

        def setGamma(self, gamma: float) -> None:
            ...

        def setNormalizedRect(self, normalizedRect: PySide2.QtCore.QRectF) -> None:
            ...

    class QWaitFence(PySide2.Qt3DRender.QFrameGraphNode):
        NoHandle: Qt3DRender.QWaitFence = ...
        OpenGLFenceId: Qt3DRender.QWaitFence = ...

        class HandleType(object):
            NoHandle: Qt3DRender.QWaitFence.HandleType = ...
            OpenGLFenceId: Qt3DRender.QWaitFence.HandleType = ...

        def __init__(
            self, parent: typing.Optional[PySide2.Qt3DCore.Qt3DCore.QNode] = ...
        ) -> None:
            ...

        def handle(self) -> typing.Any:
            ...

        def handleType(self) -> PySide2.Qt3DRender.Qt3DRender.QWaitFence.HandleType:
            ...

        def setHandle(self, handle: typing.Any) -> None:
            ...

        def setHandleType(
            self, type: PySide2.Qt3DRender.Qt3DRender.QWaitFence.HandleType
        ) -> None:
            ...

        def setTimeout(self, timeout: int) -> None:
            ...

        def setWaitOnCPU(self, waitOnCPU: bool) -> None:
            ...

        def timeout(self) -> int:
            ...

        def waitOnCPU(self) -> bool:
            ...
