"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

bytes = str


class QCommonStyle(PySide2.QtWidgets.QStyle):
    """
    https://doc.qt.io/qt-5/qcommonstyle.html

    **Detailed Description**

    This abstract class implements some of the widget's look and feel that is
    common to all GUI styles provided and shipped as part of Qt.

    Since QCommonStyle inherits **QStyle** , all of its functions are fully
    documented in the **QStyle**  documentation.

    **See also** **QStyle**  and **QProxyStyle** .
    """

    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#QCommonStyle

        **QCommonStyle::QCommonStyle()**

        Constructs a QCommonStyle.
        """
        ...

    def drawComplexControl(
        self,
        cc: PySide2.QtWidgets.QStyle.ComplexControl,
        opt: PySide2.QtWidgets.QStyleOptionComplex,
        p: PySide2.QtGui.QPainter,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#drawComplexControl

        **[override virtual] void
        QCommonStyle::drawComplexControl(QStyle::ComplexControl cc , const
        QStyleOptionComplex * opt , QPainter * p , const QWidget * widget =
        nullptr) const**

        Reimplements: **QStyle::drawComplexControl** (QStyle::ComplexControl
        control, const QStyleOptionComplex *option, QPainter *painter, const
        QWidget *widget) const.
        """
        ...

    def drawControl(
        self,
        element: PySide2.QtWidgets.QStyle.ControlElement,
        opt: PySide2.QtWidgets.QStyleOption,
        p: PySide2.QtGui.QPainter,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#drawControl

        **[override virtual] void
        QCommonStyle::drawControl(QStyle::ControlElement element , const
        QStyleOption * opt , QPainter * p , const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::drawControl** (QStyle::ControlElement element,
        const QStyleOption *option, QPainter *painter, const QWidget *widget)
        const.
        """
        ...

    def drawPrimitive(
        self,
        pe: PySide2.QtWidgets.QStyle.PrimitiveElement,
        opt: PySide2.QtWidgets.QStyleOption,
        p: PySide2.QtGui.QPainter,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#drawPrimitive

        **[override virtual] void
        QCommonStyle::drawPrimitive(QStyle::PrimitiveElement pe , const
        QStyleOption * opt , QPainter * p , const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::drawPrimitive** (QStyle::PrimitiveElement
        element, const QStyleOption *option, QPainter *painter, const QWidget
        *widget) const.
        """
        ...

    def generatedIconPixmap(
        self,
        iconMode: PySide2.QtGui.QIcon.Mode,
        pixmap: PySide2.QtGui.QPixmap,
        opt: PySide2.QtWidgets.QStyleOption,
    ) -> PySide2.QtGui.QPixmap:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#generatedIconPixmap

        **[override virtual] QPixmap
        QCommonStyle::generatedIconPixmap(QIcon::Mode iconMode , const QPixmap &
        pixmap , const QStyleOption * opt ) const**

        Reimplements: **QStyle::generatedIconPixmap** (QIcon::Mode iconMode,
        const QPixmap &pixmap, const QStyleOption *option) const.
        """
        ...

    def hitTestComplexControl(
        self,
        cc: PySide2.QtWidgets.QStyle.ComplexControl,
        opt: PySide2.QtWidgets.QStyleOptionComplex,
        pt: PySide2.QtCore.QPoint,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> PySide2.QtWidgets.QStyle.SubControl:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#hitTestComplexControl

        **[override virtual] QStyle::SubControl
        QCommonStyle::hitTestComplexControl(QStyle::ComplexControl cc , const
        QStyleOptionComplex * opt , const QPoint & pt , const QWidget * widget =
        nullptr) const**

        Reimplements: **QStyle::hitTestComplexControl** (QStyle::ComplexControl
        control, const QStyleOptionComplex *option, const QPoint &position,
        const QWidget *widget) const.
        """
        ...

    def layoutSpacing(
        self,
        control1: PySide2.QtWidgets.QSizePolicy.ControlType,
        control2: PySide2.QtWidgets.QSizePolicy.ControlType,
        orientation: PySide2.QtCore.Qt.Orientation,
        option: typing.Optional[PySide2.QtWidgets.QStyleOption] = ...,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> int:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#layoutSpacing

        **[override virtual] int
        QCommonStyle::layoutSpacing(QSizePolicy::ControlType control1 ,
        QSizePolicy::ControlType control2 , Qt::Orientation orientation , const
        QStyleOption * option = nullptr, const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::layoutSpacing** (QSizePolicy::ControlType
        control1, QSizePolicy::ControlType control2, Qt::Orientation
        orientation, const QStyleOption *option, const QWidget *widget) const.
        """
        ...

    def pixelMetric(
        self,
        m: PySide2.QtWidgets.QStyle.PixelMetric,
        opt: typing.Optional[PySide2.QtWidgets.QStyleOption] = ...,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> int:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#pixelMetric

        **[override virtual] int QCommonStyle::pixelMetric(QStyle::PixelMetric m
        , const QStyleOption * opt = nullptr, const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::pixelMetric** (QStyle::PixelMetric metric, const
        QStyleOption *option, const QWidget *widget) const.
        """
        ...

    @typing.overload
    def polish(self, app: PySide2.QtWidgets.QApplication) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#polish

        **[override virtual] void QCommonStyle::polish(QPalette & pal )**

        Reimplements: **QStyle::polish** (QPalette &palette).
        """
        ...

    @typing.overload
    def polish(self, application: PySide2.QtWidgets.QApplication) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#polish-1

        **[override virtual] void QCommonStyle::polish(QApplication * app )**

        Reimplements: **QStyle::polish** (QApplication *application).
        """
        ...

    @typing.overload
    def polish(self, arg__1: PySide2.QtGui.QPalette) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#polish-2

        **[override virtual] void QCommonStyle::polish(QWidget * widget )**

        Reimplements: **QStyle::polish** (QWidget *widget).
        """
        ...

    @typing.overload
    def polish(self, widget: PySide2.QtWidgets.QWidget) -> None:
        ...

    def sizeFromContents(
        self,
        ct: PySide2.QtWidgets.QStyle.ContentsType,
        opt: PySide2.QtWidgets.QStyleOption,
        contentsSize: PySide2.QtCore.QSize,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> PySide2.QtCore.QSize:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#sizeFromContents

        **[override virtual] QSize
        QCommonStyle::sizeFromContents(QStyle::ContentsType ct , const
        QStyleOption * opt , const QSize & csz , const QWidget * widget =
        nullptr) const**

        Reimplements: **QStyle::sizeFromContents** (QStyle::ContentsType type,
        const QStyleOption *option, const QSize &contentsSize, const QWidget
        *widget) const.
        """
        ...

    def standardIcon(
        self,
        standardIcon: PySide2.QtWidgets.QStyle.StandardPixmap,
        opt: typing.Optional[PySide2.QtWidgets.QStyleOption] = ...,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> PySide2.QtGui.QIcon:
        ...

    def standardPixmap(
        self,
        sp: PySide2.QtWidgets.QStyle.StandardPixmap,
        opt: typing.Optional[PySide2.QtWidgets.QStyleOption] = ...,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> PySide2.QtGui.QPixmap:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#standardPixmap

        **[override virtual] QPixmap
        QCommonStyle::standardPixmap(QStyle::StandardPixmap sp , const
        QStyleOption * option = nullptr, const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::standardPixmap** (QStyle::StandardPixmap
        standardPixmap, const QStyleOption *option, const QWidget *widget)
        const.
        """
        ...

    def styleHint(
        self,
        sh: PySide2.QtWidgets.QStyle.StyleHint,
        opt: typing.Optional[PySide2.QtWidgets.QStyleOption] = ...,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
        shret: typing.Optional[PySide2.QtWidgets.QStyleHintReturn] = ...,
    ) -> int:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#styleHint

        **[override virtual] int QCommonStyle::styleHint(QStyle::StyleHint sh ,
        const QStyleOption * opt = nullptr, const QWidget * widget = nullptr,
        QStyleHintReturn * hret = nullptr) const**

        Reimplements: **QStyle::styleHint** (QStyle::StyleHint hint, const
        QStyleOption *option, const QWidget *widget, QStyleHintReturn
        *returnData) const.
        """
        ...

    def subControlRect(
        self,
        cc: PySide2.QtWidgets.QStyle.ComplexControl,
        opt: PySide2.QtWidgets.QStyleOptionComplex,
        sc: PySide2.QtWidgets.QStyle.SubControl,
        w: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#subControlRect

        **[override virtual] QRect
        QCommonStyle::subControlRect(QStyle::ComplexControl cc , const
        QStyleOptionComplex * opt , QStyle::SubControl sc , const QWidget *
        widget = nullptr) const**

        Reimplements: **QStyle::subControlRect** (QStyle::ComplexControl
        control, const QStyleOptionComplex *option, QStyle::SubControl
        subControl, const QWidget *widget) const.
        """
        ...

    def subElementRect(
        self,
        r: PySide2.QtWidgets.QStyle.SubElement,
        opt: PySide2.QtWidgets.QStyleOption,
        widget: typing.Optional[PySide2.QtWidgets.QWidget] = ...,
    ) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#subElementRect

        **[override virtual] QRect
        QCommonStyle::subElementRect(QStyle::SubElement sr , const QStyleOption
        * opt , const QWidget * widget = nullptr) const**

        Reimplements: **QStyle::subElementRect** (QStyle::SubElement element,
        const QStyleOption *option, const QWidget *widget) const.
        """
        ...

    @typing.overload
    def unpolish(self, application: PySide2.QtWidgets.QApplication) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#unpolish

        **[override virtual] void QCommonStyle::unpolish(QWidget * widget )**

        Reimplements: **QStyle::unpolish** (QWidget *widget).
        """
        ...

    @typing.overload
    def unpolish(self, widget: PySide2.QtWidgets.QWidget) -> None:
        """
        https://doc.qt.io/qt-5/qcommonstyle.html#unpolish-1

        **[override virtual] void QCommonStyle::unpolish(QApplication *
        application )**

        Reimplements: **QStyle::unpolish** (QApplication *application).
        """
        ...
