"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

Licence: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtWebEngineWidgets, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtPrintSupport
import PySide2.QtWebChannel
import PySide2.QtWebEngineCore
import PySide2.QtWebEngineWidgets

bytes = str


class QWebEngineCertificateError(object):
    """
    https://doc.qt.io/qt-5/qwebenginecertificateerror.html

    **Detailed Description**

    Provides information about a certificate error. This class is used as a
    parameter of **QWebEnginePage::certificateError** ().
    """

    CertificateKnownInterceptionBlocked: QWebEngineCertificateError = ...
    CertificateTransparencyRequired: QWebEngineCertificateError = ...
    CertificateValidityTooLong: QWebEngineCertificateError = ...
    CertificateNameConstraintViolation: QWebEngineCertificateError = ...
    CertificateWeakKey: QWebEngineCertificateError = ...
    CertificateNonUniqueName: QWebEngineCertificateError = ...
    CertificateWeakSignatureAlgorithm: QWebEngineCertificateError = ...
    CertificateInvalid: QWebEngineCertificateError = ...
    CertificateRevoked: QWebEngineCertificateError = ...
    CertificateUnableToCheckRevocation: QWebEngineCertificateError = ...
    CertificateNoRevocationMechanism: QWebEngineCertificateError = ...
    CertificateContainsErrors: QWebEngineCertificateError = ...
    CertificateAuthorityInvalid: QWebEngineCertificateError = ...
    CertificateDateInvalid: QWebEngineCertificateError = ...
    CertificateCommonNameInvalid: QWebEngineCertificateError = ...
    SslPinnedKeyNotInCertificateChain: QWebEngineCertificateError = ...

    class Error(object):
        CertificateKnownInterceptionBlocked: QWebEngineCertificateError.Error = ...
        CertificateTransparencyRequired: QWebEngineCertificateError.Error = ...
        CertificateValidityTooLong: QWebEngineCertificateError.Error = ...
        CertificateNameConstraintViolation: QWebEngineCertificateError.Error = ...
        CertificateWeakKey: QWebEngineCertificateError.Error = ...
        CertificateNonUniqueName: QWebEngineCertificateError.Error = ...
        CertificateWeakSignatureAlgorithm: QWebEngineCertificateError.Error = ...
        CertificateInvalid: QWebEngineCertificateError.Error = ...
        CertificateRevoked: QWebEngineCertificateError.Error = ...
        CertificateUnableToCheckRevocation: QWebEngineCertificateError.Error = ...
        CertificateNoRevocationMechanism: QWebEngineCertificateError.Error = ...
        CertificateContainsErrors: QWebEngineCertificateError.Error = ...
        CertificateAuthorityInvalid: QWebEngineCertificateError.Error = ...
        CertificateDateInvalid: QWebEngineCertificateError.Error = ...
        CertificateCommonNameInvalid: QWebEngineCertificateError.Error = ...
        SslPinnedKeyNotInCertificateChain: QWebEngineCertificateError.Error = ...

    @typing.overload
    def __init__(
        self,
        error: int,
        url: PySide2.QtCore.QUrl,
        overridable: bool,
        errorDescription: str,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self, other: PySide2.QtWebEngineWidgets.QWebEngineCertificateError
    ) -> None:
        ...

    def answered(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#answered

        **bool QWebEngineCertificateError::answered() const**

        Returns `true` if the error was explicitly rejected or ignored.

        This function was introduced in Qt 5.14.
        """
        ...

    def certificateChain(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#certificateChain

        **QList<QSslCertificate> QWebEngineCertificateError::certificateChain()
        const**

        Returns the peer's chain of digital certificates.

        Chain starts with the peer's immediate certificate and ending with the
        CA's certificate.

        This function was introduced in Qt 5.14.
        """
        ...

    def defer(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#defer

        **void QWebEngineCertificateError::defer()**

        Marks the certificate error for delayed handling.

        This function should be called when there is a need to postpone the
        decision whether to ignore a certificate error, for example, while
        waiting for user input. When called, the function pauses the URL request
        until **ignoreCertificateError** () or **rejectCertificate** () is
        called.

        **Note:** It is only possible to defer overridable certificate errors.

        This function was introduced in Qt 5.14.

        **See also** **isOverridable** () and **deferred** ().
        """
        ...

    def deferred(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#deferred

        **bool QWebEngineCertificateError::deferred() const**

        Returns whether the decision for error handling was delayed and the URL
        load was halted.

        This function was introduced in Qt 5.14.
        """
        ...

    def error(self) -> PySide2.QtWebEngineWidgets.QWebEngineCertificateError.Error:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#error

        **QWebEngineCertificateError::Error QWebEngineCertificateError::error()
        const**

        Returns the type of the error.

        **See also** **errorDescription** () and **isOverridable** ().
        """
        ...

    def errorDescription(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#errorDescription

        **QString QWebEngineCertificateError::errorDescription() const**

        Returns a short localized human-readable description of the error.

        **See also** **error** (), **url** (), and **isOverridable** ().
        """
        ...

    def ignoreCertificateError(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#ignoreCertificate
        Error

        **void QWebEngineCertificateError::ignoreCertificateError()**

        Ignores the certificate error and continues the loading of the requested
        URL.

        This function was introduced in Qt 5.14.
        """
        ...

    def isOverridable(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#isOverridable

        **bool QWebEngineCertificateError::isOverridable() const**

        Returns whether this error can be overridden and accepted.

        **See also** **error** () and **errorDescription** ().
        """
        ...

    def rejectCertificate(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#rejectCertificate

        **void QWebEngineCertificateError::rejectCertificate()**

        Rejects the certificate and aborts the loading of the requested URL.

        This function was introduced in Qt 5.14.
        """
        ...

    def url(self) -> PySide2.QtCore.QUrl:
        """
        https://doc.qt.io/qt-5/qwebenginecertificateerror.html#url

        **QUrl QWebEngineCertificateError::url() const**

        Returns the URL that triggered the error.

        **See also** **error** () and **errorDescription** ().
        """
        ...
