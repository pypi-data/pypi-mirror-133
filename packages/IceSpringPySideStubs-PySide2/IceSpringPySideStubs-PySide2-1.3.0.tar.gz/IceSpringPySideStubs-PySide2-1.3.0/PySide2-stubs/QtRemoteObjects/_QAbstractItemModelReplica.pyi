"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

Licence: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtRemoteObjects, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtRemoteObjects

bytes = str


class QAbstractItemModelReplica(PySide2.QtCore.QAbstractItemModel):
    def availableRoles(self) -> typing.List:
        ...

    def columnCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int:
        ...

    def data(self, index: PySide2.QtCore.QModelIndex, role: int = ...) -> typing.Any:
        ...

    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags:
        ...

    def hasChildren(self, parent: PySide2.QtCore.QModelIndex = ...) -> bool:
        ...

    def hasData(self, index: PySide2.QtCore.QModelIndex, role: int) -> bool:
        ...

    def headerData(
        self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int
    ) -> typing.Any:
        ...

    def index(
        self, row: int, column: int, parent: PySide2.QtCore.QModelIndex = ...
    ) -> PySide2.QtCore.QModelIndex:
        ...

    def isInitialized(self) -> bool:
        ...

    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject:
        ...

    @typing.overload
    def parent(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex:
        ...

    def roleNames(self) -> typing.Dict:
        ...

    def rowCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int:
        ...

    def selectionModel(self) -> PySide2.QtCore.QItemSelectionModel:
        ...

    def setData(
        self, index: PySide2.QtCore.QModelIndex, value: typing.Any, role: int = ...
    ) -> bool:
        ...
