"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore

bytes = str


class QEventLoop(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qeventloop.html

    **Detailed Description**

    At any time, you can create a QEventLoop object and call **exec** () on it
    to start a local event loop. From within the event loop, calling **exit** ()
    will force **exec** () to return.

    **See also** **QAbstractEventDispatcher** .
    """

    AllEvents: QEventLoop = ...
    ExcludeUserInputEvents: QEventLoop = ...
    ExcludeSocketNotifiers: QEventLoop = ...
    WaitForMoreEvents: QEventLoop = ...
    X11ExcludeTimers: QEventLoop = ...
    EventLoopExec: QEventLoop = ...
    DialogExec: QEventLoop = ...

    class ProcessEventsFlag(object):
        AllEvents: QEventLoop.ProcessEventsFlag = ...
        ExcludeUserInputEvents: QEventLoop.ProcessEventsFlag = ...
        ExcludeSocketNotifiers: QEventLoop.ProcessEventsFlag = ...
        WaitForMoreEvents: QEventLoop.ProcessEventsFlag = ...
        X11ExcludeTimers: QEventLoop.ProcessEventsFlag = ...
        EventLoopExec: QEventLoop.ProcessEventsFlag = ...
        DialogExec: QEventLoop.ProcessEventsFlag = ...

    class ProcessEventsFlags(object):
        ...

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qeventloop.html#QEventLoop

        **QEventLoop::QEventLoop(QObject * parent = nullptr)**

        Constructs an event loop object with the given **parent**.
        """
        ...

    def event(self, event: PySide2.QtCore.QEvent) -> bool:
        """
        https://doc.qt.io/qt-5/qeventloop.html#event

        **[override virtual] bool QEventLoop::event(QEvent * event )**

        Reimplements: **QObject::event** (QEvent *e).
        """
        ...

    def exec_(self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags = ...) -> int:
        ...

    def exit(self, returnCode: int = ...) -> None:
        """
        https://doc.qt.io/qt-5/qeventloop.html#exit

        **void QEventLoop::exit(int returnCode = 0)**

        Tells the event loop to exit with a return code.

        After this function has been called, the event loop returns from the
        call to **exec** (). The **exec** () function returns **returnCode**.

        By convention, a **returnCode** of 0 means success, and any non-zero
        value indicates an error.

        Note that unlike the C library function of the same name, this function
        **does** return to the caller -- it is event processing that stops.

        **See also** **QCoreApplication::quit** (), **quit** (), and **exec**
        ().
        """
        ...

    def isRunning(self) -> bool:
        """
        https://doc.qt.io/qt-5/qeventloop.html#isRunning

        **bool QEventLoop::isRunning() const**

        Returns `true` if the event loop is running; otherwise returns false.
        The event loop is considered running from the time when **exec** () is
        called until **exit** () is called.

        **See also** **exec** () and **exit** ().
        """
        ...

    @typing.overload
    def processEvents(
        self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags, maximumTime: int
    ) -> None:
        """
        https://doc.qt.io/qt-5/qeventloop.html#processEvents

        **bool QEventLoop::processEvents(QEventLoop::ProcessEventsFlags flags =
        AllEvents)**

        Processes pending events that match **flags** until there are no more
        events to process. Returns `true` if pending events were handled;
        otherwise returns `false`.

        This function is especially useful if you have a long running operation
        and want to show its progress without allowing user input; i.e. by using
        the **ExcludeUserInputEvents**  flag.

        This function is simply a wrapper for
        **QAbstractEventDispatcher::processEvents** (). See the documentation
        for that function for details.
        """
        ...

    @typing.overload
    def processEvents(
        self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags = ...
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qeventloop.html#processEvents

        **bool QEventLoop::processEvents(QEventLoop::ProcessEventsFlags flags =
        AllEvents)**

        Processes pending events that match **flags** until there are no more
        events to process. Returns `true` if pending events were handled;
        otherwise returns `false`.

        This function is especially useful if you have a long running operation
        and want to show its progress without allowing user input; i.e. by using
        the **ExcludeUserInputEvents**  flag.

        This function is simply a wrapper for
        **QAbstractEventDispatcher::processEvents** (). See the documentation
        for that function for details.
        """
        ...

    def quit(self) -> None:
        """
        https://doc.qt.io/qt-5/qeventloop.html#quit

        **[slot] void QEventLoop::quit()**

        Tells the event loop to exit normally.

        Same as exit(0).

        **See also** **QCoreApplication::quit** () and **exit** ().
        """
        ...

    def wakeUp(self) -> None:
        """
        https://doc.qt.io/qt-5/qeventloop.html#wakeUp

        **void QEventLoop::wakeUp()**

        Wakes up the event loop.

        **See also** **QAbstractEventDispatcher::wakeUp** ().
        """
        ...
