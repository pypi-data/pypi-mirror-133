"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QPalette(object):
    """
    https://doc.qt.io/qt-5/qpalette.html

    **Detailed Description**

    A palette consists of three color groups: **Active** , **Disabled** , and
    **Inactive**. All widgets in Qt contain a palette and use their palette to
    draw themselves. This makes the user interface easily configurable and
    easier to keep consistent.

    If you create a new widget we strongly recommend that you use the colors in
    the palette rather than hard-coding specific colors.

    The color groups:

    * The Active group is used for the window that has keyboard focus.
      * The
    Inactive group is used for other windows.
      * The Disabled group is used for
    widgets (not windows) that are disabled for some reason.

    Both active and inactive windows can contain disabled widgets. (Disabled
    widgets are often called **inaccessible** or **grayed out**.)

    In most styles, Active and Inactive look the same.

    Colors and brushes can be set for particular roles in any of a palette\'s
    color groups with **setColor** () and **setBrush** (). A color group
    contains a group of colors used by widgets for drawing themselves. We
    recommend that widgets use color group roles from the palette such as
    "foreground" and "base" rather than literal colors like "red" or
    "turquoise". The color roles are enumerated and defined in the **ColorRole**
    documentation.

    We strongly recommend that you use the default palette of the current style
    (returned by **QGuiApplication::palette** ()) and modify that as necessary.
    This is done by Qt\'s widgets when they are drawn.

    To modify a color group you call the functions **setColor** () and
    **setBrush** (), depending on whether you want a pure color or a pixmap
    pattern.

    There are also corresponding **color** () and **brush** () getters, and a
    commonly used convenience function to get the **ColorRole**  for the current
    **ColorGroup** : **window** (), **windowText** (), **base** (), etc.

    You can copy a palette using the copy constructor and test to see if two
    palettes are **identical** using **isCopyOf** ().

    QPalette is optimized by the use of **implicit sharing** , so it is very
    efficient to pass QPalette objects as arguments.

    **Warning:** Some styles do not use the palette for all drawing, for
    instance, if they make use of native theme engines. This is the case for
    both the Windows Vista and the macOS styles.

    **See also** **QApplication::setPalette** (), **QWidget::setPalette** (),
    and **QColor** .
    """

    Active: QPalette = ...
    Foreground: QPalette = ...
    Normal: QPalette = ...
    WindowText: QPalette = ...
    Button: QPalette = ...
    Disabled: QPalette = ...
    Inactive: QPalette = ...
    Light: QPalette = ...
    Midlight: QPalette = ...
    NColorGroups: QPalette = ...
    Current: QPalette = ...
    Dark: QPalette = ...
    All: QPalette = ...
    Mid: QPalette = ...
    Text: QPalette = ...
    BrightText: QPalette = ...
    ButtonText: QPalette = ...
    Base: QPalette = ...
    Background: QPalette = ...
    Window: QPalette = ...
    Shadow: QPalette = ...
    Highlight: QPalette = ...
    HighlightedText: QPalette = ...
    Link: QPalette = ...
    LinkVisited: QPalette = ...
    AlternateBase: QPalette = ...
    NoRole: QPalette = ...
    ToolTipBase: QPalette = ...
    ToolTipText: QPalette = ...
    PlaceholderText: QPalette = ...
    NColorRoles: QPalette = ...

    class ColorGroup(object):
        Active: QPalette.ColorGroup = ...
        Normal: QPalette.ColorGroup = ...
        Disabled: QPalette.ColorGroup = ...
        Inactive: QPalette.ColorGroup = ...
        NColorGroups: QPalette.ColorGroup = ...
        Current: QPalette.ColorGroup = ...
        All: QPalette.ColorGroup = ...

    class ColorRole(object):
        Foreground: QPalette.ColorRole = ...
        WindowText: QPalette.ColorRole = ...
        Button: QPalette.ColorRole = ...
        Light: QPalette.ColorRole = ...
        Midlight: QPalette.ColorRole = ...
        Dark: QPalette.ColorRole = ...
        Mid: QPalette.ColorRole = ...
        Text: QPalette.ColorRole = ...
        BrightText: QPalette.ColorRole = ...
        ButtonText: QPalette.ColorRole = ...
        Base: QPalette.ColorRole = ...
        Background: QPalette.ColorRole = ...
        Window: QPalette.ColorRole = ...
        Shadow: QPalette.ColorRole = ...
        Highlight: QPalette.ColorRole = ...
        HighlightedText: QPalette.ColorRole = ...
        Link: QPalette.ColorRole = ...
        LinkVisited: QPalette.ColorRole = ...
        AlternateBase: QPalette.ColorRole = ...
        NoRole: QPalette.ColorRole = ...
        ToolTipBase: QPalette.ColorRole = ...
        ToolTipText: QPalette.ColorRole = ...
        PlaceholderText: QPalette.ColorRole = ...
        NColorRoles: QPalette.ColorRole = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @typing.overload
    def __init__(self, button: PySide2.QtCore.Qt.GlobalColor) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @typing.overload
    def __init__(self, button: PySide2.QtGui.QColor) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @typing.overload
    def __init__(
        self, button: PySide2.QtGui.QColor, window: PySide2.QtGui.QColor
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @typing.overload
    def __init__(self, palette: PySide2.QtGui.QPalette) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        windowText: PySide2.QtGui.QBrush,
        button: PySide2.QtGui.QBrush,
        light: PySide2.QtGui.QBrush,
        dark: PySide2.QtGui.QBrush,
        mid: PySide2.QtGui.QBrush,
        text: PySide2.QtGui.QBrush,
        bright_text: PySide2.QtGui.QBrush,
        base: PySide2.QtGui.QBrush,
        window: PySide2.QtGui.QBrush,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        windowText: PySide2.QtGui.QColor,
        window: PySide2.QtGui.QColor,
        light: PySide2.QtGui.QColor,
        dark: PySide2.QtGui.QColor,
        mid: PySide2.QtGui.QColor,
        text: PySide2.QtGui.QColor,
        base: PySide2.QtGui.QColor,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#QPalette

        **QPalette::QPalette()**

        Constructs a palette object that uses the application's default palette.

        **See also** **QApplication::setPalette** () and
        **QApplication::palette** ().
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __lshift__(self, ds: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(self, ds: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream:
        ...

    def alternateBase(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#alternateBase

        **const QBrush &QPalette::alternateBase() const**

        Returns the alternate base brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def background(self) -> PySide2.QtGui.QBrush:
        ...

    def base(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#base

        **const QBrush &QPalette::base() const**

        Returns the base brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def brightText(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#brightText

        **const QBrush &QPalette::brightText() const**

        Returns the bright text foreground brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    @typing.overload
    def brush(
        self,
        cg: PySide2.QtGui.QPalette.ColorGroup,
        cr: PySide2.QtGui.QPalette.ColorRole,
    ) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#brush

        **const QBrush &QPalette::brush(QPalette::ColorGroup group ,
        QPalette::ColorRole role ) const**

        Returns the brush in the specified color **group** , used for the given
        color **role**.

        **See also** **color** (), **setBrush** (), and **ColorRole** .
        """
        ...

    @typing.overload
    def brush(self, cr: PySide2.QtGui.QPalette.ColorRole) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#brush

        **const QBrush &QPalette::brush(QPalette::ColorGroup group ,
        QPalette::ColorRole role ) const**

        Returns the brush in the specified color **group** , used for the given
        color **role**.

        **See also** **color** (), **setBrush** (), and **ColorRole** .
        """
        ...

    def button(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#button

        **const QBrush &QPalette::button() const**

        Returns the button brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def buttonText(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#buttonText

        **const QBrush &QPalette::buttonText() const**

        Returns the button text foreground brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def cacheKey(self) -> int:
        """
        https://doc.qt.io/qt-5/qpalette.html#cacheKey

        **qint64 QPalette::cacheKey() const**

        Returns a number that identifies the contents of this **QPalette**
        object. Distinct **QPalette**  objects can have the same key if they
        refer to the same contents.

        The cacheKey() will change when the palette is altered.
        """
        ...

    @typing.overload
    def color(
        self,
        cg: PySide2.QtGui.QPalette.ColorGroup,
        cr: PySide2.QtGui.QPalette.ColorRole,
    ) -> PySide2.QtGui.QColor:
        """
        https://doc.qt.io/qt-5/qpalette.html#color

        **const QColor &QPalette::color(QPalette::ColorGroup group ,
        QPalette::ColorRole role ) const**

        Returns the color in the specified color **group** , used for the given
        color **role**.

        **See also** **brush** (), **setColor** (), and **ColorRole** .
        """
        ...

    @typing.overload
    def color(self, cr: PySide2.QtGui.QPalette.ColorRole) -> PySide2.QtGui.QColor:
        """
        https://doc.qt.io/qt-5/qpalette.html#color

        **const QColor &QPalette::color(QPalette::ColorGroup group ,
        QPalette::ColorRole role ) const**

        Returns the color in the specified color **group** , used for the given
        color **role**.

        **See also** **brush** (), **setColor** (), and **ColorRole** .
        """
        ...

    def currentColorGroup(self) -> PySide2.QtGui.QPalette.ColorGroup:
        """
        https://doc.qt.io/qt-5/qpalette.html#currentColorGroup

        **QPalette::ColorGroup QPalette::currentColorGroup() const**

        Returns the palette's current color group.

        **See also** **setCurrentColorGroup** ().
        """
        ...

    def dark(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#dark

        **const QBrush &QPalette::dark() const**

        Returns the dark brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def foreground(self) -> PySide2.QtGui.QBrush:
        ...

    def highlight(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#highlight

        **const QBrush &QPalette::highlight() const**

        Returns the highlight brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def highlightedText(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#highlightedText

        **const QBrush &QPalette::highlightedText() const**

        Returns the highlighted text brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def isBrushSet(
        self,
        cg: PySide2.QtGui.QPalette.ColorGroup,
        cr: PySide2.QtGui.QPalette.ColorRole,
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qpalette.html#isBrushSet

        **bool QPalette::isBrushSet(QPalette::ColorGroup cg ,
        QPalette::ColorRole cr ) const**

        Returns `true` if the **ColorGroup**  **cg** and **ColorRole**  **cr**
        has been set previously on this palette; otherwise returns `false`.

        This function was introduced in Qt 4.2.

        **See also** **setBrush** ().
        """
        ...

    def isCopyOf(self, p: PySide2.QtGui.QPalette) -> bool:
        """
        https://doc.qt.io/qt-5/qpalette.html#isCopyOf

        **bool QPalette::isCopyOf(const QPalette & p ) const**

        Returns `true` if this palette and **p** are copies of each other, i.e.
        one of them was created as a copy of the other and neither was
        subsequently modified; otherwise returns `false`. This is much stricter
        than equality.

        **See also** **operator=** () and **operator==** ().
        """
        ...

    def isEqual(
        self,
        cr1: PySide2.QtGui.QPalette.ColorGroup,
        cr2: PySide2.QtGui.QPalette.ColorGroup,
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qpalette.html#isEqual

        **bool QPalette::isEqual(QPalette::ColorGroup cg1 , QPalette::ColorGroup
        cg2 ) const**

        Returns `true` (usually quickly) if color group **cg1** is equal to
        **cg2** ; otherwise returns `false`.
        """
        ...

    def light(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#light

        **const QBrush &QPalette::light() const**

        Returns the light brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def link(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#link

        **const QBrush &QPalette::link() const**

        Returns the unvisited link text brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def linkVisited(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#linkVisited

        **const QBrush &QPalette::linkVisited() const**

        Returns the visited link text brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def mid(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#mid

        **const QBrush &QPalette::mid() const**

        Returns the mid brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def midlight(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#midlight

        **const QBrush &QPalette::midlight() const**

        Returns the midlight brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def placeholderText(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#placeholderText

        **const QBrush &QPalette::placeholderText() const**

        Returns the placeholder text brush of the current color group.

        **Note:** Before Qt 5.12, the placeholder text color was hard-coded in
        the code as **QPalette::text** ().**color** () where an alpha of 128 was
        applied. We continue to support this behavior by default, unless you set
        your own brush. One can get back the original placeholder color setting
        the special **QBrush**  default constructor as placeholder brush.

        This function was introduced in Qt 5.12.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    @typing.overload
    def resolve(self) -> int:
        """
        https://doc.qt.io/qt-5/qpalette.html#resolve

        **QPalette QPalette::resolve(const QPalette & other ) const**

        Returns a new **QPalette**  that is a union of this instance and
        **other**. Color roles set in this instance take precedence.
        """
        ...

    @typing.overload
    def resolve(self, arg__1: PySide2.QtGui.QPalette) -> PySide2.QtGui.QPalette:
        """
        https://doc.qt.io/qt-5/qpalette.html#resolve

        **QPalette QPalette::resolve(const QPalette & other ) const**

        Returns a new **QPalette**  that is a union of this instance and
        **other**. Color roles set in this instance take precedence.
        """
        ...

    @typing.overload
    def resolve(self, mask: int) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#resolve

        **QPalette QPalette::resolve(const QPalette & other ) const**

        Returns a new **QPalette**  that is a union of this instance and
        **other**. Color roles set in this instance take precedence.
        """
        ...

    @typing.overload
    def setBrush(
        self,
        cg: PySide2.QtGui.QPalette.ColorGroup,
        cr: PySide2.QtGui.QPalette.ColorRole,
        brush: PySide2.QtGui.QBrush,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#setBrush

        **void QPalette::setBrush(QPalette::ColorRole role , const QBrush &
        brush )**

        Sets the brush for the given color **role** to the specified **brush**
        for all groups in the palette.

        **See also** **brush** (), **setColor** (), and **ColorRole** .
        """
        ...

    @typing.overload
    def setBrush(
        self, cr: PySide2.QtGui.QPalette.ColorRole, brush: PySide2.QtGui.QBrush
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#setBrush

        **void QPalette::setBrush(QPalette::ColorRole role , const QBrush &
        brush )**

        Sets the brush for the given color **role** to the specified **brush**
        for all groups in the palette.

        **See also** **brush** (), **setColor** (), and **ColorRole** .
        """
        ...

    @typing.overload
    def setColor(
        self,
        cg: PySide2.QtGui.QPalette.ColorGroup,
        cr: PySide2.QtGui.QPalette.ColorRole,
        color: PySide2.QtGui.QColor,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#setColor

        **void QPalette::setColor(QPalette::ColorGroup group ,
        QPalette::ColorRole role , const QColor & color )**

        Sets the color in the specified color **group** , used for the given
        color **role** , to the specified solid **color**.

        **See also** **setBrush** (), **color** (), and **ColorRole** .
        """
        ...

    @typing.overload
    def setColor(
        self, cr: PySide2.QtGui.QPalette.ColorRole, color: PySide2.QtGui.QColor
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#setColor

        **void QPalette::setColor(QPalette::ColorGroup group ,
        QPalette::ColorRole role , const QColor & color )**

        Sets the color in the specified color **group** , used for the given
        color **role** , to the specified solid **color**.

        **See also** **setBrush** (), **color** (), and **ColorRole** .
        """
        ...

    def setColorGroup(
        self,
        cr: PySide2.QtGui.QPalette.ColorGroup,
        windowText: PySide2.QtGui.QBrush,
        button: PySide2.QtGui.QBrush,
        light: PySide2.QtGui.QBrush,
        dark: PySide2.QtGui.QBrush,
        mid: PySide2.QtGui.QBrush,
        text: PySide2.QtGui.QBrush,
        bright_text: PySide2.QtGui.QBrush,
        base: PySide2.QtGui.QBrush,
        window: PySide2.QtGui.QBrush,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#setColorGroup

        **void QPalette::setColorGroup(QPalette::ColorGroup cg , const QBrush &
        windowText , const QBrush & button , const QBrush & light , const QBrush
        & dark , const QBrush & mid , const QBrush & text , const QBrush &
        bright_text , const QBrush & base , const QBrush & window )**

        Sets a the group at **cg**. You can pass either brushes, pixmaps or
        plain colors for **windowText** , **button** , **light** , **dark** ,
        **mid** , **text** , **bright_text** , **base** and **window**.

        **See also** **QBrush** .
        """
        ...

    def setCurrentColorGroup(self, cg: PySide2.QtGui.QPalette.ColorGroup) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#setCurrentColorGroup

        **void QPalette::setCurrentColorGroup(QPalette::ColorGroup cg )**

        Set the palette's current color group to **cg**.

        **See also** **currentColorGroup** ().
        """
        ...

    def shadow(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#shadow

        **const QBrush &QPalette::shadow() const**

        Returns the shadow brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def swap(self, other: PySide2.QtGui.QPalette) -> None:
        """
        https://doc.qt.io/qt-5/qpalette.html#swap

        **void QPalette::swap(QPalette & other )**

        Swaps this palette instance with **other**. This function is very fast
        and never fails.

        This function was introduced in Qt 5.0.
        """
        ...

    def text(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#text

        **const QBrush &QPalette::text() const**

        Returns the text foreground brush of the current color group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def toolTipBase(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#toolTipBase

        **const QBrush &QPalette::toolTipBase() const**

        Returns the tool tip base brush of the current color group. This brush
        is used by **QToolTip**  and **QWhatsThis** .

        **Note:** Tool tips use the Inactive color group of **QPalette** ,
        because tool tips are not active windows.

        This function was introduced in Qt 4.4.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def toolTipText(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#toolTipText

        **const QBrush &QPalette::toolTipText() const**

        Returns the tool tip text brush of the current color group. This brush
        is used by **QToolTip**  and **QWhatsThis** .

        **Note:** Tool tips use the Inactive color group of **QPalette** ,
        because tool tips are not active windows.

        This function was introduced in Qt 4.4.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def window(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#window

        **const QBrush &QPalette::window() const**

        Returns the window (general background) brush of the current color
        group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...

    def windowText(self) -> PySide2.QtGui.QBrush:
        """
        https://doc.qt.io/qt-5/qpalette.html#windowText

        **const QBrush &QPalette::windowText() const**

        Returns the window text (general foreground) brush of the current color
        group.

        **See also** **ColorRole**  and **brush** ().
        """
        ...
