"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QMatrix(object):
    """
    https://doc.qt.io/qt-5/qmatrix.html

    **Detailed Description**

    A matrix specifies how to translate, scale, shear or rotate the coordinate system, and is typically used when rendering graphics. QMatrix, in contrast to **QTransform** , does not allow perspective transformations. **QTransform**  is the recommended transformation class in Qt.

    A QMatrix object can be built using the **setMatrix** (), **scale** (), **rotate** (), **translate** () and **shear** () functions. Alternatively, it can be built by applying **basic matrix operations** . The matrix can also be defined when constructed, and it can be reset to the identity matrix (the default) using the **reset** () function.

    The QMatrix class supports mapping of graphic primitives: A given point, line, polygon, region, or painter path can be mapped to the coordinate system defined by **this** matrix using the **map** () function. In case of a rectangle, its coordinates can be transformed using the **mapRect** () function. A rectangle can also be transformed into a **polygon** (mapped to the coordinate system defined by **this** matrix), using the **mapToPolygon** () function.

    QMatrix provides the **isIdentity** () function which returns `true` if the matrix is the identity matrix, and the **isInvertible** () function which returns `true` if the matrix is non-singular (i.e. AB = BA = I). The **inverted** () function returns an inverted copy of **this** matrix if it is invertible (otherwise it returns the identity matrix). In addition, QMatrix provides the **determinant** () function returning the matrix\'s determinant.

    Finally, the QMatrix class supports matrix multiplication, and objects of the class can be streamed as well as compared.

    **Rendering Graphics**

    When rendering graphics, the matrix defines the transformations but the actual transformation is performed by the drawing routines in **QPainter** .

    By default, **QPainter**  operates on the associated device\'s own coordinate system. The standard coordinate system of a **QPaintDevice**  has its origin located at the top-left position. The **x** values increase to the right; **y** values increase downward. For a complete description, see the **coordinate system**  documentation.

    **QPainter**  has functions to translate, scale, shear and rotate the coordinate system without using a QMatrix. For example:

    ![](images/qmatrix-simpletransformation.png)



        void SimpleTransformation::paintEvent(**QPaintEvent**  *)
        {
            **QPainter**  painter(this);
            painter.setPen(**QPen** (Qt::blue, 1, Qt::DashLine));
            painter.drawRect(0, 0, 100, 100);

            painter.rotate(45);

            painter.setFont(**QFont** ("Helvetica", 24));
            painter.setPen(**QPen** (Qt::black, 1));
            painter.drawText(20, 10, "QMatrix");
        }

    Although these functions are very convenient, it can be more efficient to build a QMatrix and call **QPainter::setMatrix** () if you want to perform more than a single transform operation. For example:

    ![](images/qmatrix-combinedtransformation.png)



        void CombinedTransformation::paintEvent(**QPaintEvent**  *)
        {
            **QPainter**  painter(this);
            painter.setPen(**QPen** (Qt::blue, 1, Qt::DashLine));
            painter.drawRect(0, 0, 100, 100);

            QMatrix matrix;
            matrix.translate(50, 50);
            matrix.rotate(45);
            matrix.scale(0.5, 1.0);
            painter.setMatrix(matrix);

            painter.setFont(**QFont** ("Helvetica", 24));
            painter.setPen(**QPen** (Qt::black, 1));
            painter.drawText(20, 10, "QMatrix");
        }

    **Basic Matrix Operations**

    ![](images/qmatrix-representation.png)

    A QMatrix object contains a 3 x 3 matrix. The `dx` and `dy` elements specify horizontal and vertical translation. The `m11` and `m22` elements specify horizontal and vertical scaling. And finally, the `m21` and `m12` elements specify horizontal and vertical **shearing**.

    QMatrix transforms a point in the plane to another point using the following formulas:

    x\' = m11*x + m21*y + dx
        y\' = m22*y + m12*x + dy

    The point **(x, y)** is the original point, and **(x\', y\')** is the transformed point. **(x\', y\')** can be transformed back to **(x, y)** by performing the same operation on the **inverted** () matrix.

    The various matrix elements can be set when constructing the matrix, or by using the **setMatrix** () function later on. They can also be manipulated using the **translate** (), **rotate** (), **scale** () and **shear** () convenience functions, The currently set values can be retrieved using the **m11** (), **m12** (), **m21** (), **m22** (), **dx** () and **dy** () functions.

    Translation is the simplest transformation. Setting `dx` and `dy` will move the coordinate system `dx` units along the X axis and `dy` units along the Y axis. Scaling can be done by setting `m11` and `m22`. For example, setting `m11` to 2 and `m22` to 1.5 will double the height and increase the width by 50%. The identity matrix has `m11` and `m22` set to 1 (all others are set to 0) mapping a point to itself. Shearing is controlled by `m12` and `m21`. Setting these elements to values different from zero will twist the coordinate system. Rotation is achieved by carefully setting both the shearing factors and the scaling factors.

    Here\'s the combined transformations example using basic matrix operations:

    ![](images/qmatrix-combinedtransformation.png)



        void BasicOperations::paintEvent(**QPaintEvent**  *)
        {
            double pi = 3.14;

            double a    = pi/180 * 45.0;
            double sina = sin(a);
            double cosa = cos(a);

            QMatrix translationMatrix(1, 0, 0, 1, 50.0, 50.0);
            QMatrix rotationMatrix(cosa, sina, -sina, cosa, 0, 0);
            QMatrix scalingMatrix(0.5, 0, 0, 1.0, 0, 0);

            QMatrix matrix;
            matrix =  scalingMatrix * rotationMatrix * translationMatrix;

            **QPainter**  painter(this);
            painter.setPen(**QPen** (Qt::blue, 1, Qt::DashLine));
            painter.drawRect(0, 0, 100, 100);

            painter.setMatrix(matrix);

            painter.setFont(**QFont** ("Helvetica", 24));
            painter.setPen(**QPen** (Qt::black, 1));
            painter.drawText(20, 10, "QMatrix");
        }

    **See also** **QPainter** , **QTransform** , **Coordinate System** , **Affine Transformations Example** , and **Transformations Example** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qmatrix.html#QMatrix-1

        **QMatrix::QMatrix()**

        Constructs an identity matrix.

        All elements are set to zero except `m11` and `m22` (specifying the scale), which are set to 1.

        **See also** **reset** ().
        """
        ...

    @typing.overload
    def __init__(
        self, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float
    ) -> None:
        """
        https://doc.qt.io/qt-5/qmatrix.html#QMatrix-1

        **QMatrix::QMatrix()**

        Constructs an identity matrix.

        All elements are set to zero except `m11` and `m22` (specifying the scale), which are set to 1.

        **See also** **reset** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtGui.QMatrix) -> None:
        """
        https://doc.qt.io/qt-5/qmatrix.html#QMatrix-1

        **QMatrix::QMatrix()**

        Constructs an identity matrix.

        All elements are set to zero except `m11` and `m22` (specifying the scale), which are set to 1.

        **See also** **reset** ().
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __imul__(self, arg__1: PySide2.QtGui.QMatrix) -> PySide2.QtGui.QMatrix:
        ...

    def __lshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    @typing.overload
    def __mul__(self, l: PySide2.QtCore.QLine) -> PySide2.QtCore.QLine:
        ...

    @typing.overload
    def __mul__(self, l: PySide2.QtCore.QLineF) -> PySide2.QtCore.QLineF:
        ...

    @typing.overload
    def __mul__(self, o: PySide2.QtGui.QMatrix) -> PySide2.QtGui.QMatrix:
        ...

    @typing.overload
    def __mul__(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint:
        ...

    @typing.overload
    def __mul__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF:
        ...

    def __reduce__(self) -> object:
        ...

    def __repr__(self) -> object:
        ...

    def __rshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def determinant(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#determinant

        **qreal QMatrix::determinant() const**

        Returns the matrix's determinant.

        This function was introduced in Qt 4.6.
        """
        ...

    def dx(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#dx

        **qreal QMatrix::dx() const**

        Returns the horizontal translation factor.

        **See also** **translate** () and **Basic Matrix Operations** .
        """
        ...

    def dy(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#dy

        **qreal QMatrix::dy() const**

        Returns the vertical translation factor.

        **See also** **translate** () and **Basic Matrix Operations** .
        """
        ...

    def inverted(self) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qmatrix.html#inverted

        **QMatrix QMatrix::inverted(bool * invertible = nullptr) const**

        Returns an inverted copy of this matrix.

        If the matrix is singular (not invertible), the returned matrix is the identity matrix. If **invertible** is valid (i.e. not 0), its value is set to true if the matrix is invertible, otherwise it is set to false.

        **See also** **isInvertible** ().
        """
        ...

    def isIdentity(self) -> bool:
        """
        https://doc.qt.io/qt-5/qmatrix.html#isIdentity

        **bool QMatrix::isIdentity() const**

        Returns `true` if the matrix is the identity matrix, otherwise returns `false`.

        **See also** **reset** ().
        """
        ...

    def isInvertible(self) -> bool:
        """
        https://doc.qt.io/qt-5/qmatrix.html#isInvertible

        **bool QMatrix::isInvertible() const**

        Returns `true` if the matrix is invertible, otherwise returns `false`.

        **See also** **inverted** ().
        """
        ...

    def m11(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#m11

        **qreal QMatrix::m11() const**

        Returns the horizontal scaling factor.

        **See also** **scale** () and **Basic Matrix Operations** .
        """
        ...

    def m12(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#m12

        **qreal QMatrix::m12() const**

        Returns the vertical shearing factor.

        **See also** **shear** () and **Basic Matrix Operations** .
        """
        ...

    def m21(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#m21

        **qreal QMatrix::m21() const**

        Returns the horizontal shearing factor.

        **See also** **shear** () and **Basic Matrix Operations** .
        """
        ...

    def m22(self) -> float:
        """
        https://doc.qt.io/qt-5/qmatrix.html#m22

        **qreal QMatrix::m22() const**

        Returns the vertical scaling factor.

        **See also** **scale** () and **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, a: PySide2.QtGui.QPolygon) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, a: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, l: PySide2.QtCore.QLine) -> PySide2.QtCore.QLine:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, l: PySide2.QtCore.QLineF) -> PySide2.QtCore.QLineF:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, p: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, x: int, y: int) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def map(self, x: float, y: float) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qmatrix.html#map

        **void QMatrix::map(qreal x , qreal y , qreal * tx , qreal * ty ) const**

        Maps the given coordinates **x** and **y** into the coordinate system defined by this matrix. The resulting values are put in * **tx** and * **ty** , respectively.

        The coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        The point (x, y) is the original point, and (x', y') is the transformed point.

        **See also** **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def mapRect(self, arg__1: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qmatrix.html#mapRect

        **QRectF QMatrix::mapRect(const QRectF & rectangle ) const**

        Creates and returns a **QRectF**  object that is a copy of the given **rectangle** , mapped into the coordinate system defined by this matrix.

        The rectangle's coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        If rotation or shearing has been specified, this function returns the **bounding** rectangle. To retrieve the exact region the given **rectangle** maps to, use the **mapToPolygon** () function instead.

        **See also** **mapToPolygon** () and **Basic Matrix Operations** .
        """
        ...

    @typing.overload
    def mapRect(self, arg__1: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF:
        """
        https://doc.qt.io/qt-5/qmatrix.html#mapRect

        **QRectF QMatrix::mapRect(const QRectF & rectangle ) const**

        Creates and returns a **QRectF**  object that is a copy of the given **rectangle** , mapped into the coordinate system defined by this matrix.

        The rectangle's coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        If rotation or shearing has been specified, this function returns the **bounding** rectangle. To retrieve the exact region the given **rectangle** maps to, use the **mapToPolygon** () function instead.

        **See also** **mapToPolygon** () and **Basic Matrix Operations** .
        """
        ...

    def mapToPolygon(self, r: PySide2.QtCore.QRect) -> PySide2.QtGui.QPolygon:
        """
        https://doc.qt.io/qt-5/qmatrix.html#mapToPolygon

        **QPolygon QMatrix::mapToPolygon(const QRect & rectangle ) const**

        Creates and returns a **QPolygon**  representation of the given **rectangle** , mapped into the coordinate system defined by this matrix.

        The rectangle's coordinates are transformed using the following formulas:

        x' = m11*x + m21*y + dx
            y' = m22*y + m12*x + dy

        Polygons and rectangles behave slightly differently when transformed (due to integer rounding), so `matrix.map(QPolygon(rectangle))` is not always the same as `matrix.mapToPolygon(rectangle)`.

        **See also** **mapRect** () and **Basic Matrix Operations** .
        """
        ...

    def reset(self) -> None:
        """
        https://doc.qt.io/qt-5/qmatrix.html#reset

        **void QMatrix::reset()**

        Resets the matrix to an identity matrix, i.e. all elements are set to zero, except `m11` and `m22` (specifying the scale) which are set to 1.

        **See also** **QMatrix** (), **isIdentity** (), and **Basic Matrix Operations** .
        """
        ...

    def rotate(self, a: float) -> PySide2.QtGui.QMatrix:
        """
        https://doc.qt.io/qt-5/qmatrix.html#rotate

        **QMatrix &QMatrix::rotate(qreal degrees )**

        Rotates the coordinate system the given **degrees** counterclockwise.

        Note that if you apply a **QMatrix**  to a point defined in widget coordinates, the direction of the rotation will be clockwise because the y-axis points downwards.

        Returns a reference to the matrix.

        **See also** **setMatrix** ().
        """
        ...

    def scale(self, sx: float, sy: float) -> PySide2.QtGui.QMatrix:
        """
        https://doc.qt.io/qt-5/qmatrix.html#scale

        **QMatrix &QMatrix::scale(qreal sx , qreal sy )**

        Scales the coordinate system by **sx** horizontally and **sy** vertically, and returns a reference to the matrix.

        **See also** **setMatrix** ().
        """
        ...

    def setMatrix(
        self, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float
    ) -> None:
        """
        https://doc.qt.io/qt-5/qmatrix.html#setMatrix

        **void QMatrix::setMatrix(qreal m11 , qreal m12 , qreal m21 , qreal m22 , qreal dx , qreal dy )**

        Sets the matrix elements to the specified values, **m11** , **m12** , **m21** , **m22** , **dx** and **dy**.

        Note that this function replaces the previous values. **QMatrix**  provide the **translate** (), **rotate** (), **scale** () and **shear** () convenience functions to manipulate the various matrix elements based on the currently defined coordinate system.

        **See also** **QMatrix** ().
        """
        ...

    def shear(self, sh: float, sv: float) -> PySide2.QtGui.QMatrix:
        """
        https://doc.qt.io/qt-5/qmatrix.html#shear

        **QMatrix &QMatrix::shear(qreal sh , qreal sv )**

        Shears the coordinate system by **sh** horizontally and **sv** vertically, and returns a reference to the matrix.

        **See also** **setMatrix** ().
        """
        ...

    def translate(self, dx: float, dy: float) -> PySide2.QtGui.QMatrix:
        """
        https://doc.qt.io/qt-5/qmatrix.html#translate

        **QMatrix &QMatrix::translate(qreal dx , qreal dy )**

        Moves the coordinate system **dx** along the x axis and **dy** along the y axis, and returns a reference to the matrix.

        **See also** **setMatrix** ().
        """
        ...
