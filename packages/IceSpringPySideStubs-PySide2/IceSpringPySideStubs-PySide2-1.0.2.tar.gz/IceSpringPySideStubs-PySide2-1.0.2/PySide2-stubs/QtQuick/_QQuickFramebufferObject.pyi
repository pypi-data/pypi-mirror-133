"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtQml
import PySide2.QtQuick

bytes = str


class QQuickFramebufferObject(PySide2.QtQuick.QQuickItem):
    """
    https://doc.qt.io/qt-5/qquickframebufferobject.html

    **Detailed Description**

    On most platforms, the rendering will occur on a **dedicated thread** . For this reason, the QQuickFramebufferObject class enforces a strict separation between the item implementation and the FBO rendering. All item logic, such as properties and UI-related helper functions needed by QML should be located in a QQuickFramebufferObject class subclass. Everything that relates to rendering must be located in the **QQuickFramebufferObject::Renderer**  class.

    **Warning:** This class is only functional when Qt Quick is rendering via OpenGL, either directly or through the **RHI-based rendering path** . It is not compatible with other RHI backends, such as, Vulkan or Metal.

    To avoid race conditions and read/write issues from two threads it is important that the renderer and the item never read or write shared variables. Communication between the item and the renderer should primarily happen via the **QQuickFramebufferObject::Renderer::synchronize** () function. This function will be called on the render thread while the GUI thread is blocked.

    Using queued connections or events for communication between item and renderer is also possible.

    Both the Renderer and the FBO are memory managed internally.

    To render into the FBO, the user should subclass the Renderer class and reimplement its **Renderer::render** () function. The Renderer subclass is returned from **createRenderer** ().

    The size of the FBO will by default adapt to the size of the item. If a fixed size is preferred, set **textureFollowsItemSize**  to `false` and return a texture of your choosing from **QQuickFramebufferObject::Renderer::createFramebufferObject** ().

    Starting Qt 5.4, the QQuickFramebufferObject class is a **texture provider**  and can be used directly in **ShaderEffects**  and other classes that consume texture providers.

    **See also** **Scene Graph - Rendering FBOs**  and **Scene Graph and Rendering** .
    """

    class Renderer(object):
        def __init__(self) -> None:
            ...

        def createFramebufferObject(
            self, size: PySide2.QtCore.QSize
        ) -> PySide2.QtGui.QOpenGLFramebufferObject:
            ...

        def framebufferObject(self) -> PySide2.QtGui.QOpenGLFramebufferObject:
            ...

        def invalidateFramebufferObject(self) -> None:
            ...

        def render(self) -> None:
            ...

        def synchronize(self, arg__1: PySide2.QtQuick.QQuickFramebufferObject) -> None:
            ...

        def update(self) -> None:
            ...

    def __init__(
        self, parent: typing.Optional[PySide2.QtQuick.QQuickItem] = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#QQuickFramebufferObject

        **QQuickFramebufferObject::QQuickFramebufferObject(QQuickItem * parent = nullptr)**

        Constructs a new QQuickFramebufferObject with parent **parent**.
        """
        ...

    def createRenderer(self) -> PySide2.QtQuick.QQuickFramebufferObject.Renderer:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#createRenderer

        **[pure virtual] QQuickFramebufferObject::Renderer *QQuickFramebufferObject::createRenderer() const**

        Reimplement this function to create a renderer used to render into the FBO.

        This function will be called on the rendering thread while the GUI thread is blocked.
        """
        ...

    def geometryChanged(
        self, newGeometry: PySide2.QtCore.QRectF, oldGeometry: PySide2.QtCore.QRectF
    ) -> None:
        ...

    def isTextureProvider(self) -> bool:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#isTextureProvider

        **[override virtual] bool QQuickFramebufferObject::isTextureProvider() const**

        Reimplements: **QQuickItem::isTextureProvider** () const.
        """
        ...

    def mirrorVertically(self) -> bool:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#mirrorVertically-prop

        **mirrorVertically : bool**

        This property controls if the size of the FBO's contents should be mirrored vertically when drawing. This allows easy integration of third-party rendering code that does not follow the standard expectations.

        The default value is `false`.

        This property was introduced in Qt 5.6.

        **Access functions:**

        bool **mirrorVertically** () const
        void **setMirrorVertically** (bool **enable** )

        **Notifier signal:**

        void **mirrorVerticallyChanged** ( **bool** )
        """
        ...

    def releaseResources(self) -> None:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#releaseResources

        **[override virtual] void QQuickFramebufferObject::releaseResources()**

        Reimplements: **QQuickItem::releaseResources** ().
        """
        ...

    def setMirrorVertically(self, enable: bool) -> None:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#mirrorVertically-prop

        **mirrorVertically : bool**

        This property controls if the size of the FBO's contents should be mirrored vertically when drawing. This allows easy integration of third-party rendering code that does not follow the standard expectations.

        The default value is `false`.

        This property was introduced in Qt 5.6.

        **Access functions:**

        bool **mirrorVertically** () const
        void **setMirrorVertically** (bool **enable** )

        **Notifier signal:**

        void **mirrorVerticallyChanged** ( **bool** )
        """
        ...

    def setTextureFollowsItemSize(self, follows: bool) -> None:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#textureFollowsItemSize-prop

        **textureFollowsItemSize : bool**

        This property controls if the size of the FBO's texture should follow the dimensions of the **QQuickFramebufferObject**  item. When this property is false, the FBO will be created once the first time it is displayed. If it is set to true, the FBO will be recreated every time the dimensions of the item change.

        The default value is `true`.

        **Access functions:**

        bool **textureFollowsItemSize** () const
        void **setTextureFollowsItemSize** (bool **follows** )

        **Notifier signal:**

        void **textureFollowsItemSizeChanged** ( **bool** )

        **Member Function Documentation**
        """
        ...

    def textureFollowsItemSize(self) -> bool:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#textureFollowsItemSize-prop

        **textureFollowsItemSize : bool**

        This property controls if the size of the FBO's texture should follow the dimensions of the **QQuickFramebufferObject**  item. When this property is false, the FBO will be created once the first time it is displayed. If it is set to true, the FBO will be recreated every time the dimensions of the item change.

        The default value is `true`.

        **Access functions:**

        bool **textureFollowsItemSize** () const
        void **setTextureFollowsItemSize** (bool **follows** )

        **Notifier signal:**

        void **textureFollowsItemSizeChanged** ( **bool** )

        **Member Function Documentation**
        """
        ...

    def textureProvider(self) -> PySide2.QtQuick.QSGTextureProvider:
        """
        https://doc.qt.io/qt-5/qquickframebufferobject.html#textureProvider

        **[override virtual] QSGTextureProvider *QQuickFramebufferObject::textureProvider() const**

        Reimplements: **QQuickItem::textureProvider** () const.
        """
        ...

    def updatePaintNode(
        self,
        arg__1: PySide2.QtQuick.QSGNode,
        arg__2: PySide2.QtQuick.QQuickItem.UpdatePaintNodeData,
    ) -> PySide2.QtQuick.QSGNode:
        ...

    @property
    def mirrorVerticallyChanged(self) -> PySide2.QtCore.SignalInstance:
        ...

    @property
    def textureFollowsItemSizeChanged(self) -> PySide2.QtCore.SignalInstance:
        ...
