"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptContextInfo(object):
    """
    https://doc.qt.io/qt-5/qscriptcontextinfo.html

    **Detailed Description**

    QScriptContextInfo is typically used for debugging purposes. It can provide
    information about the code being executed, such as the type of the called
    function, and the original source code location of the current statement.

    If the called function is executing Qt Script code, you can obtain the
    script location with the functions **fileName** () and **lineNumber** ().

    You can obtain the starting line number and ending line number of a Qt
    Script function definition with **functionStartLineNumber** () and
    **functionEndLineNumber** (), respectively.

    For Qt Script functions and Qt methods (e.g. slots), you can call
    **functionParameterNames** () to get the names of the formal parameters of
    the function.

    For Qt methods and Qt property accessors, you can obtain the index of the
    underlying **QMetaMethod**  or **QMetaProperty**  by calling
    **functionMetaIndex** ().

    **See also** **QScriptContext**  and **QScriptEngineAgent** .
    """

    ScriptFunction: QScriptContextInfo = ...
    QtFunction: QScriptContextInfo = ...
    QtPropertyFunction: QScriptContextInfo = ...
    NativeFunction: QScriptContextInfo = ...

    class FunctionType(object):
        ScriptFunction: QScriptContextInfo.FunctionType = ...
        QtFunction: QScriptContextInfo.FunctionType = ...
        QtPropertyFunction: QScriptContextInfo.FunctionType = ...
        NativeFunction: QScriptContextInfo.FunctionType = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#QScriptContextInfo

        **QScriptContextInfo::QScriptContextInfo(const QScriptContext * context
        )**

        Constructs a new QScriptContextInfo from the given **context**.

        The relevant information is extracted from the **context** at
        construction time; i.e. if you continue script execution in the
        **context** , the new state of the context will not be reflected in a
        previously created QScriptContextInfo.
        """
        ...

    @typing.overload
    def __init__(self, context: PySide2.QtScript.QScriptContext) -> None:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#QScriptContextInfo-1

        **QScriptContextInfo::QScriptContextInfo(const QScriptContextInfo &
        other )**

        Constructs a new QScriptContextInfo from the **other** info.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtScript.QScriptContextInfo) -> None:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#QScriptContextInfo-2

        **QScriptContextInfo::QScriptContextInfo()**

        Constructs a null QScriptContextInfo.

        **See also** **isNull** ().
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def __lshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def __rshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def columnNumber(self) -> int:
        ...

    def fileName(self) -> str:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#fileName

        **QString QScriptContextInfo::fileName() const**

        Returns the name of the file where the code being executed was defined,
        if available; otherwise returns an empty string.

        For Qt Script code, this function returns the fileName argument that was
        passed to **QScriptEngine::evaluate** ().

        **See also** **lineNumber** () and **functionName** ().
        """
        ...

    def functionEndLineNumber(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#functionEndLineNumber

        **int QScriptContextInfo::functionEndLineNumber() const**

        Returns the line number where the definition of the called function
        ends, or -1 if the line number is not available.

        The ending line number is only available if the **functionType** () is
        **ScriptFunction** .

        **See also** **functionStartLineNumber** ().
        """
        ...

    def functionMetaIndex(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#functionMetaIndex

        **int QScriptContextInfo::functionMetaIndex() const**

        Returns the meta index of the called function, or -1 if the meta index
        is not available.

        The meta index is only available if the **functionType** () is
        **QtFunction**  or **QtPropertyFunction** . For **QtFunction** , the
        meta index can be passed to **QMetaObject::method** () to obtain the
        corresponding method definition; for **QtPropertyFunction** , the meta
        index can be passed to **QMetaObject::property** () to obtain the
        corresponding property definition.

        **See also** **QScriptContext::thisObject** ().
        """
        ...

    def functionName(self) -> str:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#functionName

        **QString QScriptContextInfo::functionName() const**

        Returns the name of the called function, or an empty string if the name
        is not available.

        For script functions of type **QtPropertyFunction** , this function
        always returns the name of the property; you can use
        **QScriptContext::argumentCount** () to differentiate between reads and
        writes.

        **See also** **fileName** () and **functionType** ().
        """
        ...

    def functionParameterNames(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#functionParameterNames

        **QStringList QScriptContextInfo::functionParameterNames() const**

        Returns the names of the formal parameters of the called function, or an
        empty **QStringList**  if the parameter names are not available.

        **See also** **QScriptContext::argument** ().
        """
        ...

    def functionStartLineNumber(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#functionStartLineNumber

        **int QScriptContextInfo::functionStartLineNumber() const**

        Returns the line number where the definition of the called function
        starts, or -1 if the line number is not available.

        The starting line number is only available if the **functionType** () is
        **ScriptFunction** .

        **See also** **functionEndLineNumber** () and **fileName** ().
        """
        ...

    def functionType(self) -> PySide2.QtScript.QScriptContextInfo.FunctionType:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#functionType

        **QScriptContextInfo::FunctionType QScriptContextInfo::functionType()
        const**

        Returns the type of the called function.

        **See also** **functionName** () and **QScriptContext::callee** ().
        """
        ...

    def isNull(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#isNull

        **bool QScriptContextInfo::isNull() const**

        Returns true if this **QScriptContextInfo**  is null, i.e. does not
        contain any information.
        """
        ...

    def lineNumber(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#lineNumber

        **int QScriptContextInfo::lineNumber() const**

        Returns the line number corresponding to the statement being executed,
        or -1 if the line number is not available.

        The line number is only available if Qt Script code is being executed.

        **See also** **columnNumber** () and **fileName** ().
        """
        ...

    def scriptId(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptcontextinfo.html#scriptId

        **qint64 QScriptContextInfo::scriptId() const**

        Returns the ID of the script where the code being executed was defined,
        or -1 if the ID is not available (i.e. a native function is being
        executed).

        **See also** **QScriptEngineAgent::scriptLoad** ().
        """
        ...
