"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptExtensionPlugin(
    PySide2.QtCore.QObject, PySide2.QtScript.QScriptExtensionInterface
):
    """
    https://doc.qt.io/qt-5/qscriptextensionplugin.html

    **Detailed Description**

    QScriptExtensionPlugin is a plugin interface that makes it possible to offer
    extensions that can be loaded dynamically into applications using the
    **QScriptEngine**  class.

    Writing a script extension plugin is achieved by subclassing this base
    class, reimplementing the pure virtual **keys** () and **initialize** ()
    functions, and exporting the class using the **Q_PLUGIN_METADATA** () macro.
    See **How to Create Qt Plugins**  for details.

    **See also** **QScriptEngine::importExtension** () and **Creating Qt Script
    Extensions** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qscriptextensionplugin.html#QScriptExtensionPlugi
        n

        **QScriptExtensionPlugin::QScriptExtensionPlugin(QObject * parent =
        nullptr)**

        Constructs a script extension plugin with the given **parent**.

        Note that this constructor is invoked automatically by the
        **Q_PLUGIN_METADATA** () macro, so there is no need for calling it
        explicitly.
        """
        ...

    def initialize(self, key: str, engine: PySide2.QtScript.QScriptEngine) -> None:
        """
        https://doc.qt.io/qt-5/qscriptextensionplugin.html#initialize

        **[override pure virtual] void QScriptExtensionPlugin::initialize(const
        QString & key , QScriptEngine * engine )**

        Initializes the extension specified by **key** in the given **engine**.
        The key must come from the set of **keys** ().

        **See also** **keys** ().
        """
        ...

    def keys(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qscriptextensionplugin.html#keys

        **[override pure virtual] QStringList QScriptExtensionPlugin::keys()
        const**

        Returns the list of keys this plugin supports.

        These keys are usually the names of the "modules" or "packages" that are
        implemented in the plugin (e.g. `com.mycompany.MyProduct`).

        **See also** **initialize** ().
        """
        ...

    def setupPackage(
        self, key: str, engine: PySide2.QtScript.QScriptEngine
    ) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptextensionplugin.html#setupPackage

        **QScriptValue QScriptExtensionPlugin::setupPackage(const QString & key
        , QScriptEngine * engine ) const**

        This function is provided for convenience when reimplementing
        **initialize** (). It splits the given **key** on `\'.\'` (dot), and
        ensures that there\'s a corresponding path of objects in the environment
        of the given **engine** , creating new objects to complete the path if
        necessary. E.g. if the key is "com.trolltech", after the call to
        setupPackage() the script expression `com.trolltech` will evaluate to an
        object. More specifically, the engine\'s Global Object will have a
        property called "com", which in turn has a property called "trolltech".

        Use this function to avoid global namespace pollution when installing
        your extensions in the engine.

        **See also** **initialize** ().
        """
        ...
