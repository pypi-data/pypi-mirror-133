"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import PySide2
import typing
import PySide2.QtCore

bytes = str


class QLocale(object):
    """
    https://doc.qt.io/qt-5/qlocale.html

    **Detailed Description**

    QLocale is initialized with a language/country pair in its constructor and
    offers number-to-string and string-to-number conversion functions similar to
    those in **QString** .

    Example:

    **QLocale**  egyptian(**QLocale** ::Arabic, **QLocale** ::Egypt);
    **QString**  s1 = egyptian.toString(1.571429E+07, \'e\');
        **QString**  s2
    = egyptian.toString(10);

        double d = egyptian.toDouble(s1);
        int
    i = egyptian.toInt(s2);

    QLocale supports the concept of a default locale, which is determined from
    the system\'s locale settings at application startup. The default locale can
    be changed by calling the static member **setDefault** (). Setting the
    default locale has the following effects:

    * If a QLocale object is constructed with the default constructor, it will
    use the default locale\'s settings.
      * **QString::toInt** (),
    **QString::toDouble** (), etc., interpret the string according to the
    default locale. If this fails, it falls back on the "C" locale.
      *
    **QString::arg** () uses the default locale to format a number when its
    position specifier in the format string contains an \'L\', e.g. "%L1".

    The following example illustrates how to use QLocale directly:

    **QLocale** ::setDefault(**QLocale** (**QLocale** ::Hebrew, **QLocale**
    ::Israel));
        **QLocale**  hebrew; // Constructs a default QLocale
    **QString**  s1 = hebrew.toString(15714.3, \'e\');

        bool ok;
    double d;

        **QLocale** ::setDefault(**QLocale** ::C);
        d =
    **QString** ("1234,56").toDouble(&ok);   // ok == false, d == 0
        d =
    **QString** ("1234.56").toDouble(&ok);   // ok == true,  d == 1234.56
    **QLocale** ::setDefault(**QLocale** ::German);
        d = **QString**
    ("1234,56").toDouble(&ok);   // ok == false, d == 0
        d = **QString**
    ("1234.56").toDouble(&ok);   // ok == true,  d == 1234.56
    **QLocale** ::setDefault(**QLocale** (**QLocale** ::English, **QLocale**
    ::UnitedStates));
        **QString**  str = **QString** ("%1 %L2 %L3")
    .arg(12345).arg(12345).arg(12345, 0, 16);
        // str == "12345 12,345 3039"

    When a language/country pair is specified in the constructor, one of three
    things can happen:

    * If the language/country pair is found in the database, it is used.
      * If
    the language is found but the country is not, or if the country is
    `AnyCountry`, the language is used with the most appropriate available
    country (for example, Germany for German),
      * If neither the language nor
    the country are found, QLocale defaults to the default locale (see
    **setDefault** ()).

    Use **language** () and **country** () to determine the actual language and
    country values used.

    An alternative method for constructing a QLocale object is by specifying the
    locale name.

    **QLocale**  korean("ko");
        **QLocale**  swiss("de_CH");

    This constructor converts the locale name to a language/country pair; it
    does not use the system locale database.

    **Note:** For the current keyboard input locale take a look at
    **QInputMethod::locale** ().

    QLocale\'s data is based on Common Locale Data Repository v37.

    **See also** **QString::arg** (), **QString::toInt** (),
    **QString::toDouble** (), and **QInputMethod::locale** ().
    """

    FloatingPointShortest: QLocale = ...
    AnyCountry: QLocale = ...
    AnyLanguage: QLocale = ...
    AnyScript: QLocale = ...
    CurrencyIsoCode: QLocale = ...
    DataSizeIecFormat: QLocale = ...
    DefaultNumberOptions: QLocale = ...
    LongFormat: QLocale = ...
    MetricSystem: QLocale = ...
    StandardQuotation: QLocale = ...
    Afghanistan: QLocale = ...
    AlternateQuotation: QLocale = ...
    ArabicScript: QLocale = ...
    C: QLocale = ...
    CurrencySymbol: QLocale = ...
    DataSizeBase1000: QLocale = ...
    ImperialSystem: QLocale = ...
    ImperialUSSystem: QLocale = ...
    OmitGroupSeparator: QLocale = ...
    ShortFormat: QLocale = ...
    Abkhazian: QLocale = ...
    Albania: QLocale = ...
    CurrencyDisplayName: QLocale = ...
    CyrillicScript: QLocale = ...
    DataSizeSIQuantifiers: QLocale = ...
    DataSizeTraditionalFormat: QLocale = ...
    ImperialUKSystem: QLocale = ...
    NarrowFormat: QLocale = ...
    RejectGroupSeparator: QLocale = ...
    Afan: QLocale = ...
    Algeria: QLocale = ...
    DataSizeSIFormat: QLocale = ...
    DeseretScript: QLocale = ...
    Oromo: QLocale = ...
    Afar: QLocale = ...
    AmericanSamoa: QLocale = ...
    GurmukhiScript: QLocale = ...
    OmitLeadingZeroInExponent: QLocale = ...
    Afrikaans: QLocale = ...
    Andorra: QLocale = ...
    SimplifiedChineseScript: QLocale = ...
    SimplifiedHanScript: QLocale = ...
    Albanian: QLocale = ...
    Angola: QLocale = ...
    TraditionalChineseScript: QLocale = ...
    TraditionalHanScript: QLocale = ...
    Amharic: QLocale = ...
    Anguilla: QLocale = ...
    LatinScript: QLocale = ...
    Antarctica: QLocale = ...
    Arabic: QLocale = ...
    MongolianScript: QLocale = ...
    RejectLeadingZeroInExponent: QLocale = ...
    AntiguaAndBarbuda: QLocale = ...
    Armenian: QLocale = ...
    TifinaghScript: QLocale = ...
    Argentina: QLocale = ...
    ArmenianScript: QLocale = ...
    Assamese: QLocale = ...
    Armenia: QLocale = ...
    Aymara: QLocale = ...
    BengaliScript: QLocale = ...
    Aruba: QLocale = ...
    Azerbaijani: QLocale = ...
    CherokeeScript: QLocale = ...
    Australia: QLocale = ...
    Bashkir: QLocale = ...
    DevanagariScript: QLocale = ...
    Austria: QLocale = ...
    Basque: QLocale = ...
    EthiopicScript: QLocale = ...
    Azerbaijan: QLocale = ...
    Bengali: QLocale = ...
    GeorgianScript: QLocale = ...
    Bahamas: QLocale = ...
    Bhutani: QLocale = ...
    Dzongkha: QLocale = ...
    GreekScript: QLocale = ...
    IncludeTrailingZeroesAfterDot: QLocale = ...
    Bahrain: QLocale = ...
    Bihari: QLocale = ...
    GujaratiScript: QLocale = ...
    Bangladesh: QLocale = ...
    Bislama: QLocale = ...
    HebrewScript: QLocale = ...
    Barbados: QLocale = ...
    Breton: QLocale = ...
    JapaneseScript: QLocale = ...
    Belarus: QLocale = ...
    Bulgarian: QLocale = ...
    KhmerScript: QLocale = ...
    Belgium: QLocale = ...
    Burmese: QLocale = ...
    KannadaScript: QLocale = ...
    Belarusian: QLocale = ...
    Belize: QLocale = ...
    Byelorussian: QLocale = ...
    KoreanScript: QLocale = ...
    Benin: QLocale = ...
    Cambodian: QLocale = ...
    Khmer: QLocale = ...
    LaoScript: QLocale = ...
    Bermuda: QLocale = ...
    Catalan: QLocale = ...
    MalayalamScript: QLocale = ...
    Bhutan: QLocale = ...
    Chinese: QLocale = ...
    MyanmarScript: QLocale = ...
    Bolivia: QLocale = ...
    Corsican: QLocale = ...
    OriyaScript: QLocale = ...
    BosniaAndHerzegowina: QLocale = ...
    Croatian: QLocale = ...
    TamilScript: QLocale = ...
    Botswana: QLocale = ...
    Czech: QLocale = ...
    TeluguScript: QLocale = ...
    BouvetIsland: QLocale = ...
    Danish: QLocale = ...
    ThaanaScript: QLocale = ...
    Brazil: QLocale = ...
    Dutch: QLocale = ...
    ThaiScript: QLocale = ...
    BritishIndianOceanTerritory: QLocale = ...
    English: QLocale = ...
    TibetanScript: QLocale = ...
    Brunei: QLocale = ...
    Esperanto: QLocale = ...
    RejectTrailingZeroesAfterDot: QLocale = ...
    SinhalaScript: QLocale = ...
    Bulgaria: QLocale = ...
    Estonian: QLocale = ...
    SyriacScript: QLocale = ...
    BurkinaFaso: QLocale = ...
    Faroese: QLocale = ...
    YiScript: QLocale = ...
    Burundi: QLocale = ...
    Fijian: QLocale = ...
    VaiScript: QLocale = ...
    AvestanScript: QLocale = ...
    Cambodia: QLocale = ...
    Finnish: QLocale = ...
    BalineseScript: QLocale = ...
    Cameroon: QLocale = ...
    French: QLocale = ...
    BamumScript: QLocale = ...
    Canada: QLocale = ...
    Frisian: QLocale = ...
    WesternFrisian: QLocale = ...
    BatakScript: QLocale = ...
    CapeVerde: QLocale = ...
    Gaelic: QLocale = ...
    BopomofoScript: QLocale = ...
    CaymanIslands: QLocale = ...
    Galician: QLocale = ...
    BrahmiScript: QLocale = ...
    CentralAfricanRepublic: QLocale = ...
    Georgian: QLocale = ...
    BugineseScript: QLocale = ...
    Chad: QLocale = ...
    German: QLocale = ...
    BuhidScript: QLocale = ...
    Chile: QLocale = ...
    Greek: QLocale = ...
    CanadianAboriginalScript: QLocale = ...
    China: QLocale = ...
    Greenlandic: QLocale = ...
    CarianScript: QLocale = ...
    ChristmasIsland: QLocale = ...
    Guarani: QLocale = ...
    ChakmaScript: QLocale = ...
    CocosIslands: QLocale = ...
    Gujarati: QLocale = ...
    ChamScript: QLocale = ...
    Colombia: QLocale = ...
    Hausa: QLocale = ...
    Comoros: QLocale = ...
    CopticScript: QLocale = ...
    Hebrew: QLocale = ...
    CongoKinshasa: QLocale = ...
    CypriotScript: QLocale = ...
    DemocraticRepublicOfCongo: QLocale = ...
    Hindi: QLocale = ...
    CongoBrazzaville: QLocale = ...
    EgyptianHieroglyphsScript: QLocale = ...
    Hungarian: QLocale = ...
    PeoplesRepublicOfCongo: QLocale = ...
    CookIslands: QLocale = ...
    FraserScript: QLocale = ...
    Icelandic: QLocale = ...
    CostaRica: QLocale = ...
    GlagoliticScript: QLocale = ...
    Indonesian: QLocale = ...
    GothicScript: QLocale = ...
    Interlingua: QLocale = ...
    IvoryCoast: QLocale = ...
    Croatia: QLocale = ...
    HanScript: QLocale = ...
    Interlingue: QLocale = ...
    Cuba: QLocale = ...
    HangulScript: QLocale = ...
    Inuktitut: QLocale = ...
    Cyprus: QLocale = ...
    HanunooScript: QLocale = ...
    Inupiak: QLocale = ...
    CzechRepublic: QLocale = ...
    ImperialAramaicScript: QLocale = ...
    Irish: QLocale = ...
    Denmark: QLocale = ...
    InscriptionalPahlaviScript: QLocale = ...
    Italian: QLocale = ...
    Djibouti: QLocale = ...
    InscriptionalParthianScript: QLocale = ...
    Japanese: QLocale = ...
    Dominica: QLocale = ...
    Javanese: QLocale = ...
    JavaneseScript: QLocale = ...
    DominicanRepublic: QLocale = ...
    KaithiScript: QLocale = ...
    Kannada: QLocale = ...
    EastTimor: QLocale = ...
    Kashmiri: QLocale = ...
    KatakanaScript: QLocale = ...
    Ecuador: QLocale = ...
    KayahLiScript: QLocale = ...
    Kazakh: QLocale = ...
    Egypt: QLocale = ...
    KharoshthiScript: QLocale = ...
    Kinyarwanda: QLocale = ...
    ElSalvador: QLocale = ...
    Kirghiz: QLocale = ...
    LannaScript: QLocale = ...
    EquatorialGuinea: QLocale = ...
    Korean: QLocale = ...
    LepchaScript: QLocale = ...
    Eritrea: QLocale = ...
    Kurdish: QLocale = ...
    LimbuScript: QLocale = ...
    Estonia: QLocale = ...
    Kurundi: QLocale = ...
    LinearBScript: QLocale = ...
    Rundi: QLocale = ...
    Ethiopia: QLocale = ...
    Lao: QLocale = ...
    LycianScript: QLocale = ...
    FalklandIslands: QLocale = ...
    Latin: QLocale = ...
    LydianScript: QLocale = ...
    FaroeIslands: QLocale = ...
    Latvian: QLocale = ...
    MandaeanScript: QLocale = ...
    Fiji: QLocale = ...
    Lingala: QLocale = ...
    MeiteiMayekScript: QLocale = ...
    Finland: QLocale = ...
    Lithuanian: QLocale = ...
    MeroiticScript: QLocale = ...
    France: QLocale = ...
    Macedonian: QLocale = ...
    MeroiticCursiveScript: QLocale = ...
    Guernsey: QLocale = ...
    Malagasy: QLocale = ...
    NkoScript: QLocale = ...
    FrenchGuiana: QLocale = ...
    Malay: QLocale = ...
    NewTaiLueScript: QLocale = ...
    FrenchPolynesia: QLocale = ...
    Malayalam: QLocale = ...
    OghamScript: QLocale = ...
    FrenchSouthernTerritories: QLocale = ...
    Maltese: QLocale = ...
    OlChikiScript: QLocale = ...
    Gabon: QLocale = ...
    Maori: QLocale = ...
    OldItalicScript: QLocale = ...
    Gambia: QLocale = ...
    Marathi: QLocale = ...
    OldPersianScript: QLocale = ...
    Georgia: QLocale = ...
    Marshallese: QLocale = ...
    OldSouthArabianScript: QLocale = ...
    Germany: QLocale = ...
    Mongolian: QLocale = ...
    OrkhonScript: QLocale = ...
    Ghana: QLocale = ...
    NauruLanguage: QLocale = ...
    OsmanyaScript: QLocale = ...
    Gibraltar: QLocale = ...
    Nepali: QLocale = ...
    PhagsPaScript: QLocale = ...
    Greece: QLocale = ...
    Norwegian: QLocale = ...
    NorwegianBokmal: QLocale = ...
    PhoenicianScript: QLocale = ...
    Greenland: QLocale = ...
    Occitan: QLocale = ...
    PollardPhoneticScript: QLocale = ...
    Grenada: QLocale = ...
    Oriya: QLocale = ...
    RejangScript: QLocale = ...
    Guadeloupe: QLocale = ...
    Pashto: QLocale = ...
    RunicScript: QLocale = ...
    Guam: QLocale = ...
    Persian: QLocale = ...
    SamaritanScript: QLocale = ...
    Guatemala: QLocale = ...
    Polish: QLocale = ...
    SaurashtraScript: QLocale = ...
    Guinea: QLocale = ...
    Portuguese: QLocale = ...
    SharadaScript: QLocale = ...
    GuineaBissau: QLocale = ...
    Punjabi: QLocale = ...
    ShavianScript: QLocale = ...
    Guyana: QLocale = ...
    Quechua: QLocale = ...
    SoraSompengScript: QLocale = ...
    CuneiformScript: QLocale = ...
    Haiti: QLocale = ...
    RhaetoRomance: QLocale = ...
    Romansh: QLocale = ...
    HeardAndMcDonaldIslands: QLocale = ...
    Moldavian: QLocale = ...
    Romanian: QLocale = ...
    SundaneseScript: QLocale = ...
    Honduras: QLocale = ...
    Russian: QLocale = ...
    SylotiNagriScript: QLocale = ...
    HongKong: QLocale = ...
    Samoan: QLocale = ...
    TagalogScript: QLocale = ...
    Hungary: QLocale = ...
    Sango: QLocale = ...
    TagbanwaScript: QLocale = ...
    Iceland: QLocale = ...
    Sanskrit: QLocale = ...
    TaiLeScript: QLocale = ...
    India: QLocale = ...
    Serbian: QLocale = ...
    SerboCroatian: QLocale = ...
    TaiVietScript: QLocale = ...
    Indonesia: QLocale = ...
    Ossetic: QLocale = ...
    TakriScript: QLocale = ...
    Iran: QLocale = ...
    SouthernSotho: QLocale = ...
    UgariticScript: QLocale = ...
    BrailleScript: QLocale = ...
    Iraq: QLocale = ...
    Tswana: QLocale = ...
    HiraganaScript: QLocale = ...
    Ireland: QLocale = ...
    Shona: QLocale = ...
    CaucasianAlbanianScript: QLocale = ...
    Israel: QLocale = ...
    Sindhi: QLocale = ...
    BassaVahScript: QLocale = ...
    Italy: QLocale = ...
    Sinhala: QLocale = ...
    DuployanScript: QLocale = ...
    Jamaica: QLocale = ...
    Swati: QLocale = ...
    ElbasanScript: QLocale = ...
    Japan: QLocale = ...
    Slovak: QLocale = ...
    GranthaScript: QLocale = ...
    Jordan: QLocale = ...
    Slovenian: QLocale = ...
    Kazakhstan: QLocale = ...
    PahawhHmongScript: QLocale = ...
    Somali: QLocale = ...
    Kenya: QLocale = ...
    KhojkiScript: QLocale = ...
    Spanish: QLocale = ...
    Kiribati: QLocale = ...
    LinearAScript: QLocale = ...
    Sundanese: QLocale = ...
    DemocraticRepublicOfKorea: QLocale = ...
    MahajaniScript: QLocale = ...
    NorthKorea: QLocale = ...
    Swahili: QLocale = ...
    ManichaeanScript: QLocale = ...
    RepublicOfKorea: QLocale = ...
    SouthKorea: QLocale = ...
    Swedish: QLocale = ...
    Kuwait: QLocale = ...
    MendeKikakuiScript: QLocale = ...
    Sardinian: QLocale = ...
    Kyrgyzstan: QLocale = ...
    ModiScript: QLocale = ...
    Tajik: QLocale = ...
    Laos: QLocale = ...
    MroScript: QLocale = ...
    Tamil: QLocale = ...
    Latvia: QLocale = ...
    OldNorthArabianScript: QLocale = ...
    Tatar: QLocale = ...
    Lebanon: QLocale = ...
    NabataeanScript: QLocale = ...
    Telugu: QLocale = ...
    Lesotho: QLocale = ...
    PalmyreneScript: QLocale = ...
    Thai: QLocale = ...
    Liberia: QLocale = ...
    PauCinHauScript: QLocale = ...
    Tibetan: QLocale = ...
    Libya: QLocale = ...
    OldPermicScript: QLocale = ...
    Tigrinya: QLocale = ...
    Liechtenstein: QLocale = ...
    PsalterPahlaviScript: QLocale = ...
    Tongan: QLocale = ...
    Lithuania: QLocale = ...
    SiddhamScript: QLocale = ...
    Tsonga: QLocale = ...
    KhudawadiScript: QLocale = ...
    Luxembourg: QLocale = ...
    Turkish: QLocale = ...
    Macau: QLocale = ...
    TirhutaScript: QLocale = ...
    Turkmen: QLocale = ...
    Macedonia: QLocale = ...
    Tahitian: QLocale = ...
    VarangKshitiScript: QLocale = ...
    AhomScript: QLocale = ...
    Madagascar: QLocale = ...
    Uighur: QLocale = ...
    Uigur: QLocale = ...
    AnatolianHieroglyphsScript: QLocale = ...
    Malawi: QLocale = ...
    Ukrainian: QLocale = ...
    HatranScript: QLocale = ...
    Malaysia: QLocale = ...
    Urdu: QLocale = ...
    Maldives: QLocale = ...
    MultaniScript: QLocale = ...
    Uzbek: QLocale = ...
    Mali: QLocale = ...
    OldHungarianScript: QLocale = ...
    Vietnamese: QLocale = ...
    Malta: QLocale = ...
    SignWritingScript: QLocale = ...
    Volapuk: QLocale = ...
    AdlamScript: QLocale = ...
    MarshallIslands: QLocale = ...
    Welsh: QLocale = ...
    BhaiksukiScript: QLocale = ...
    Martinique: QLocale = ...
    Wolof: QLocale = ...
    MarchenScript: QLocale = ...
    Mauritania: QLocale = ...
    Xhosa: QLocale = ...
    Mauritius: QLocale = ...
    NewaScript: QLocale = ...
    Yiddish: QLocale = ...
    Mayotte: QLocale = ...
    OsageScript: QLocale = ...
    Yoruba: QLocale = ...
    Mexico: QLocale = ...
    TangutScript: QLocale = ...
    Zhuang: QLocale = ...
    HanWithBopomofoScript: QLocale = ...
    Micronesia: QLocale = ...
    Zulu: QLocale = ...
    JamoScript: QLocale = ...
    LastScript: QLocale = ...
    Moldova: QLocale = ...
    NorwegianNynorsk: QLocale = ...
    Bosnian: QLocale = ...
    Monaco: QLocale = ...
    Divehi: QLocale = ...
    Mongolia: QLocale = ...
    Manx: QLocale = ...
    Montserrat: QLocale = ...
    Cornish: QLocale = ...
    Morocco: QLocale = ...
    Akan: QLocale = ...
    Mozambique: QLocale = ...
    Twi: QLocale = ...
    Konkani: QLocale = ...
    Myanmar: QLocale = ...
    Ga: QLocale = ...
    Namibia: QLocale = ...
    Igbo: QLocale = ...
    NauruCountry: QLocale = ...
    Kamba: QLocale = ...
    Nepal: QLocale = ...
    Netherlands: QLocale = ...
    Syriac: QLocale = ...
    Blin: QLocale = ...
    CuraSao: QLocale = ...
    Geez: QLocale = ...
    NewCaledonia: QLocale = ...
    Koro: QLocale = ...
    NewZealand: QLocale = ...
    Nicaragua: QLocale = ...
    Sidamo: QLocale = ...
    Atsam: QLocale = ...
    Niger: QLocale = ...
    Nigeria: QLocale = ...
    Tigre: QLocale = ...
    Jju: QLocale = ...
    Niue: QLocale = ...
    Friulian: QLocale = ...
    NorfolkIsland: QLocale = ...
    NorthernMarianaIslands: QLocale = ...
    Venda: QLocale = ...
    Ewe: QLocale = ...
    Norway: QLocale = ...
    Oman: QLocale = ...
    Walamo: QLocale = ...
    Hawaiian: QLocale = ...
    Pakistan: QLocale = ...
    Palau: QLocale = ...
    Tyap: QLocale = ...
    Chewa: QLocale = ...
    Nyanja: QLocale = ...
    PalestinianTerritories: QLocale = ...
    Filipino: QLocale = ...
    Panama: QLocale = ...
    Tagalog: QLocale = ...
    PapuaNewGuinea: QLocale = ...
    SwissGerman: QLocale = ...
    Paraguay: QLocale = ...
    SichuanYi: QLocale = ...
    Kpelle: QLocale = ...
    Peru: QLocale = ...
    LowGerman: QLocale = ...
    Philippines: QLocale = ...
    Pitcairn: QLocale = ...
    SouthNdebele: QLocale = ...
    NorthernSotho: QLocale = ...
    Poland: QLocale = ...
    NorthernSami: QLocale = ...
    Portugal: QLocale = ...
    PuertoRico: QLocale = ...
    Taroko: QLocale = ...
    Gusii: QLocale = ...
    Qatar: QLocale = ...
    Reunion: QLocale = ...
    Taita: QLocale = ...
    Fulah: QLocale = ...
    Romania: QLocale = ...
    Kikuyu: QLocale = ...
    Russia: QLocale = ...
    RussianFederation: QLocale = ...
    Rwanda: QLocale = ...
    Samburu: QLocale = ...
    SaintKittsAndNevis: QLocale = ...
    Sena: QLocale = ...
    NorthNdebele: QLocale = ...
    SaintLucia: QLocale = ...
    Rombo: QLocale = ...
    SaintVincentAndTheGrenadines: QLocale = ...
    Samoa: QLocale = ...
    Tachelhit: QLocale = ...
    Kabyle: QLocale = ...
    SanMarino: QLocale = ...
    Nyankole: QLocale = ...
    SaoTomeAndPrincipe: QLocale = ...
    Bena: QLocale = ...
    SaudiArabia: QLocale = ...
    Senegal: QLocale = ...
    Vunjo: QLocale = ...
    Bambara: QLocale = ...
    Seychelles: QLocale = ...
    Embu: QLocale = ...
    SierraLeone: QLocale = ...
    Cherokee: QLocale = ...
    Singapore: QLocale = ...
    Morisyen: QLocale = ...
    Slovakia: QLocale = ...
    Makonde: QLocale = ...
    Slovenia: QLocale = ...
    Langi: QLocale = ...
    SolomonIslands: QLocale = ...
    Ganda: QLocale = ...
    Somalia: QLocale = ...
    Bemba: QLocale = ...
    SouthAfrica: QLocale = ...
    Kabuverdianu: QLocale = ...
    SouthGeorgiaAndTheSouthSandwichIslands: QLocale = ...
    Meru: QLocale = ...
    Spain: QLocale = ...
    Kalenjin: QLocale = ...
    SriLanka: QLocale = ...
    Nama: QLocale = ...
    SaintHelena: QLocale = ...
    Machame: QLocale = ...
    SaintPierreAndMiquelon: QLocale = ...
    Colognian: QLocale = ...
    Sudan: QLocale = ...
    Masai: QLocale = ...
    Suriname: QLocale = ...
    Soga: QLocale = ...
    SvalbardAndJanMayenIslands: QLocale = ...
    Luyia: QLocale = ...
    Swaziland: QLocale = ...
    Asu: QLocale = ...
    Sweden: QLocale = ...
    Switzerland: QLocale = ...
    Teso: QLocale = ...
    Saho: QLocale = ...
    Syria: QLocale = ...
    SyrianArabRepublic: QLocale = ...
    KoyraChiini: QLocale = ...
    Taiwan: QLocale = ...
    Rwa: QLocale = ...
    Tajikistan: QLocale = ...
    Luo: QLocale = ...
    Tanzania: QLocale = ...
    Chiga: QLocale = ...
    Thailand: QLocale = ...
    CentralMoroccoTamazight: QLocale = ...
    Togo: QLocale = ...
    KoyraboroSenni: QLocale = ...
    Tokelau: QLocale = ...
    TokelauCountry: QLocale = ...
    Shambala: QLocale = ...
    Tonga: QLocale = ...
    Bodo: QLocale = ...
    TrinidadAndTobago: QLocale = ...
    Avaric: QLocale = ...
    Tunisia: QLocale = ...
    Chamorro: QLocale = ...
    Turkey: QLocale = ...
    Chechen: QLocale = ...
    Turkmenistan: QLocale = ...
    Church: QLocale = ...
    TurksAndCaicosIslands: QLocale = ...
    Chuvash: QLocale = ...
    Tuvalu: QLocale = ...
    TuvaluCountry: QLocale = ...
    Cree: QLocale = ...
    Uganda: QLocale = ...
    Haitian: QLocale = ...
    Ukraine: QLocale = ...
    Herero: QLocale = ...
    UnitedArabEmirates: QLocale = ...
    HiriMotu: QLocale = ...
    UnitedKingdom: QLocale = ...
    Kanuri: QLocale = ...
    UnitedStates: QLocale = ...
    Komi: QLocale = ...
    UnitedStatesMinorOutlyingIslands: QLocale = ...
    Kongo: QLocale = ...
    Uruguay: QLocale = ...
    Kwanyama: QLocale = ...
    Uzbekistan: QLocale = ...
    Limburgish: QLocale = ...
    Vanuatu: QLocale = ...
    LubaKatanga: QLocale = ...
    VaticanCityState: QLocale = ...
    Luxembourgish: QLocale = ...
    Venezuela: QLocale = ...
    Navaho: QLocale = ...
    Vietnam: QLocale = ...
    BritishVirginIslands: QLocale = ...
    Ndonga: QLocale = ...
    Ojibwa: QLocale = ...
    UnitedStatesVirginIslands: QLocale = ...
    Pali: QLocale = ...
    WallisAndFutunaIslands: QLocale = ...
    Walloon: QLocale = ...
    WesternSahara: QLocale = ...
    Aghem: QLocale = ...
    Yemen: QLocale = ...
    Basaa: QLocale = ...
    CanaryIslands: QLocale = ...
    Zambia: QLocale = ...
    Zarma: QLocale = ...
    Duala: QLocale = ...
    Zimbabwe: QLocale = ...
    ClippertonIsland: QLocale = ...
    JolaFonyi: QLocale = ...
    Ewondo: QLocale = ...
    Montenegro: QLocale = ...
    Bafia: QLocale = ...
    Serbia: QLocale = ...
    MakhuwaMeetto: QLocale = ...
    SaintBarthelemy: QLocale = ...
    Mundang: QLocale = ...
    SaintMartin: QLocale = ...
    Kwasio: QLocale = ...
    LatinAmerica: QLocale = ...
    LatinAmericaAndTheCaribbean: QLocale = ...
    AscensionIsland: QLocale = ...
    Nuer: QLocale = ...
    AlandIslands: QLocale = ...
    Sakha: QLocale = ...
    DiegoGarcia: QLocale = ...
    Sangu: QLocale = ...
    CeutaAndMelilla: QLocale = ...
    CongoSwahili: QLocale = ...
    IsleOfMan: QLocale = ...
    Tasawaq: QLocale = ...
    Jersey: QLocale = ...
    Vai: QLocale = ...
    TristanDaCunha: QLocale = ...
    Walser: QLocale = ...
    SouthSudan: QLocale = ...
    Yangben: QLocale = ...
    Avestan: QLocale = ...
    Bonaire: QLocale = ...
    Asturian: QLocale = ...
    SintMaarten: QLocale = ...
    Kosovo: QLocale = ...
    Ngomba: QLocale = ...
    EuropeanUnion: QLocale = ...
    Kako: QLocale = ...
    Meta: QLocale = ...
    OutlyingOceania: QLocale = ...
    Ngiemboon: QLocale = ...
    World: QLocale = ...
    Aragonese: QLocale = ...
    Europe: QLocale = ...
    LastCountry: QLocale = ...
    Akkadian: QLocale = ...
    AncientEgyptian: QLocale = ...
    AncientGreek: QLocale = ...
    Aramaic: QLocale = ...
    Balinese: QLocale = ...
    Bamun: QLocale = ...
    BatakToba: QLocale = ...
    Buginese: QLocale = ...
    Buhid: QLocale = ...
    Carian: QLocale = ...
    Chakma: QLocale = ...
    ClassicalMandaic: QLocale = ...
    Coptic: QLocale = ...
    Dogri: QLocale = ...
    EasternCham: QLocale = ...
    EasternKayah: QLocale = ...
    Etruscan: QLocale = ...
    Gothic: QLocale = ...
    Hanunoo: QLocale = ...
    Ingush: QLocale = ...
    LargeFloweryMiao: QLocale = ...
    Lepcha: QLocale = ...
    Limbu: QLocale = ...
    Lisu: QLocale = ...
    Lu: QLocale = ...
    Lycian: QLocale = ...
    Lydian: QLocale = ...
    Mandingo: QLocale = ...
    Manipuri: QLocale = ...
    Meroitic: QLocale = ...
    NorthernThai: QLocale = ...
    OldIrish: QLocale = ...
    OldNorse: QLocale = ...
    OldPersian: QLocale = ...
    OldTurkish: QLocale = ...
    Pahlavi: QLocale = ...
    Parthian: QLocale = ...
    Phoenician: QLocale = ...
    PrakritLanguage: QLocale = ...
    Rejang: QLocale = ...
    Sabaean: QLocale = ...
    Samaritan: QLocale = ...
    Santali: QLocale = ...
    Saurashtra: QLocale = ...
    Sora: QLocale = ...
    Sylheti: QLocale = ...
    Tagbanwa: QLocale = ...
    TaiDam: QLocale = ...
    TaiNua: QLocale = ...
    Ugaritic: QLocale = ...
    Akoose: QLocale = ...
    Lakota: QLocale = ...
    StandardMoroccanTamazight: QLocale = ...
    Mapuche: QLocale = ...
    CentralKurdish: QLocale = ...
    LowerSorbian: QLocale = ...
    UpperSorbian: QLocale = ...
    Kenyang: QLocale = ...
    Mohawk: QLocale = ...
    Nko: QLocale = ...
    Prussian: QLocale = ...
    Kiche: QLocale = ...
    SouthernSami: QLocale = ...
    LuleSami: QLocale = ...
    InariSami: QLocale = ...
    SkoltSami: QLocale = ...
    Warlpiri: QLocale = ...
    ManichaeanMiddlePersian: QLocale = ...
    Mende: QLocale = ...
    AncientNorthArabian: QLocale = ...
    LinearA: QLocale = ...
    HmongNjua: QLocale = ...
    Ho: QLocale = ...
    Lezghian: QLocale = ...
    Bassa: QLocale = ...
    Mono: QLocale = ...
    TedimChin: QLocale = ...
    Maithili: QLocale = ...
    Ahom: QLocale = ...
    AmericanSignLanguage: QLocale = ...
    ArdhamagadhiPrakrit: QLocale = ...
    Bhojpuri: QLocale = ...
    HieroglyphicLuwian: QLocale = ...
    LiteraryChinese: QLocale = ...
    Mazanderani: QLocale = ...
    Mru: QLocale = ...
    Newari: QLocale = ...
    NorthernLuri: QLocale = ...
    Palauan: QLocale = ...
    Papiamento: QLocale = ...
    Saraiki: QLocale = ...
    TokelauLanguage: QLocale = ...
    TokPisin: QLocale = ...
    TuvaluLanguage: QLocale = ...
    UncodedLanguages: QLocale = ...
    Cantonese: QLocale = ...
    Osage: QLocale = ...
    Tangut: QLocale = ...
    Ido: QLocale = ...
    Lojban: QLocale = ...
    Sicilian: QLocale = ...
    SouthernKurdish: QLocale = ...
    WesternBalochi: QLocale = ...
    Cebuano: QLocale = ...
    Erzya: QLocale = ...
    Chickasaw: QLocale = ...
    Muscogee: QLocale = ...
    Silesian: QLocale = ...
    LastLanguage: QLocale = ...
    NigerianPidgin: QLocale = ...

    class Country(object):
        AnyCountry: QLocale.Country = ...
        Afghanistan: QLocale.Country = ...
        Albania: QLocale.Country = ...
        Algeria: QLocale.Country = ...
        AmericanSamoa: QLocale.Country = ...
        Andorra: QLocale.Country = ...
        Angola: QLocale.Country = ...
        Anguilla: QLocale.Country = ...
        Antarctica: QLocale.Country = ...
        AntiguaAndBarbuda: QLocale.Country = ...
        Argentina: QLocale.Country = ...
        Armenia: QLocale.Country = ...
        Aruba: QLocale.Country = ...
        Australia: QLocale.Country = ...
        Austria: QLocale.Country = ...
        Azerbaijan: QLocale.Country = ...
        Bahamas: QLocale.Country = ...
        Bahrain: QLocale.Country = ...
        Bangladesh: QLocale.Country = ...
        Barbados: QLocale.Country = ...
        Belarus: QLocale.Country = ...
        Belgium: QLocale.Country = ...
        Belize: QLocale.Country = ...
        Benin: QLocale.Country = ...
        Bermuda: QLocale.Country = ...
        Bhutan: QLocale.Country = ...
        Bolivia: QLocale.Country = ...
        BosniaAndHerzegowina: QLocale.Country = ...
        Botswana: QLocale.Country = ...
        BouvetIsland: QLocale.Country = ...
        Brazil: QLocale.Country = ...
        BritishIndianOceanTerritory: QLocale.Country = ...
        Brunei: QLocale.Country = ...
        Bulgaria: QLocale.Country = ...
        BurkinaFaso: QLocale.Country = ...
        Burundi: QLocale.Country = ...
        Cambodia: QLocale.Country = ...
        Cameroon: QLocale.Country = ...
        Canada: QLocale.Country = ...
        CapeVerde: QLocale.Country = ...
        CaymanIslands: QLocale.Country = ...
        CentralAfricanRepublic: QLocale.Country = ...
        Chad: QLocale.Country = ...
        Chile: QLocale.Country = ...
        China: QLocale.Country = ...
        ChristmasIsland: QLocale.Country = ...
        CocosIslands: QLocale.Country = ...
        Colombia: QLocale.Country = ...
        Comoros: QLocale.Country = ...
        CongoKinshasa: QLocale.Country = ...
        DemocraticRepublicOfCongo: QLocale.Country = ...
        CongoBrazzaville: QLocale.Country = ...
        PeoplesRepublicOfCongo: QLocale.Country = ...
        CookIslands: QLocale.Country = ...
        CostaRica: QLocale.Country = ...
        IvoryCoast: QLocale.Country = ...
        Croatia: QLocale.Country = ...
        Cuba: QLocale.Country = ...
        Cyprus: QLocale.Country = ...
        CzechRepublic: QLocale.Country = ...
        Denmark: QLocale.Country = ...
        Djibouti: QLocale.Country = ...
        Dominica: QLocale.Country = ...
        DominicanRepublic: QLocale.Country = ...
        EastTimor: QLocale.Country = ...
        Ecuador: QLocale.Country = ...
        Egypt: QLocale.Country = ...
        ElSalvador: QLocale.Country = ...
        EquatorialGuinea: QLocale.Country = ...
        Eritrea: QLocale.Country = ...
        Estonia: QLocale.Country = ...
        Ethiopia: QLocale.Country = ...
        FalklandIslands: QLocale.Country = ...
        FaroeIslands: QLocale.Country = ...
        Fiji: QLocale.Country = ...
        Finland: QLocale.Country = ...
        France: QLocale.Country = ...
        Guernsey: QLocale.Country = ...
        FrenchGuiana: QLocale.Country = ...
        FrenchPolynesia: QLocale.Country = ...
        FrenchSouthernTerritories: QLocale.Country = ...
        Gabon: QLocale.Country = ...
        Gambia: QLocale.Country = ...
        Georgia: QLocale.Country = ...
        Germany: QLocale.Country = ...
        Ghana: QLocale.Country = ...
        Gibraltar: QLocale.Country = ...
        Greece: QLocale.Country = ...
        Greenland: QLocale.Country = ...
        Grenada: QLocale.Country = ...
        Guadeloupe: QLocale.Country = ...
        Guam: QLocale.Country = ...
        Guatemala: QLocale.Country = ...
        Guinea: QLocale.Country = ...
        GuineaBissau: QLocale.Country = ...
        Guyana: QLocale.Country = ...
        Haiti: QLocale.Country = ...
        HeardAndMcDonaldIslands: QLocale.Country = ...
        Honduras: QLocale.Country = ...
        HongKong: QLocale.Country = ...
        Hungary: QLocale.Country = ...
        Iceland: QLocale.Country = ...
        India: QLocale.Country = ...
        Indonesia: QLocale.Country = ...
        Iran: QLocale.Country = ...
        Iraq: QLocale.Country = ...
        Ireland: QLocale.Country = ...
        Israel: QLocale.Country = ...
        Italy: QLocale.Country = ...
        Jamaica: QLocale.Country = ...
        Japan: QLocale.Country = ...
        Jordan: QLocale.Country = ...
        Kazakhstan: QLocale.Country = ...
        Kenya: QLocale.Country = ...
        Kiribati: QLocale.Country = ...
        DemocraticRepublicOfKorea: QLocale.Country = ...
        NorthKorea: QLocale.Country = ...
        RepublicOfKorea: QLocale.Country = ...
        SouthKorea: QLocale.Country = ...
        Kuwait: QLocale.Country = ...
        Kyrgyzstan: QLocale.Country = ...
        Laos: QLocale.Country = ...
        Latvia: QLocale.Country = ...
        Lebanon: QLocale.Country = ...
        Lesotho: QLocale.Country = ...
        Liberia: QLocale.Country = ...
        Libya: QLocale.Country = ...
        Liechtenstein: QLocale.Country = ...
        Lithuania: QLocale.Country = ...
        Luxembourg: QLocale.Country = ...
        Macau: QLocale.Country = ...
        Macedonia: QLocale.Country = ...
        Madagascar: QLocale.Country = ...
        Malawi: QLocale.Country = ...
        Malaysia: QLocale.Country = ...
        Maldives: QLocale.Country = ...
        Mali: QLocale.Country = ...
        Malta: QLocale.Country = ...
        MarshallIslands: QLocale.Country = ...
        Martinique: QLocale.Country = ...
        Mauritania: QLocale.Country = ...
        Mauritius: QLocale.Country = ...
        Mayotte: QLocale.Country = ...
        Mexico: QLocale.Country = ...
        Micronesia: QLocale.Country = ...
        Moldova: QLocale.Country = ...
        Monaco: QLocale.Country = ...
        Mongolia: QLocale.Country = ...
        Montserrat: QLocale.Country = ...
        Morocco: QLocale.Country = ...
        Mozambique: QLocale.Country = ...
        Myanmar: QLocale.Country = ...
        Namibia: QLocale.Country = ...
        NauruCountry: QLocale.Country = ...
        Nepal: QLocale.Country = ...
        Netherlands: QLocale.Country = ...
        CuraSao: QLocale.Country = ...
        NewCaledonia: QLocale.Country = ...
        NewZealand: QLocale.Country = ...
        Nicaragua: QLocale.Country = ...
        Niger: QLocale.Country = ...
        Nigeria: QLocale.Country = ...
        Niue: QLocale.Country = ...
        NorfolkIsland: QLocale.Country = ...
        NorthernMarianaIslands: QLocale.Country = ...
        Norway: QLocale.Country = ...
        Oman: QLocale.Country = ...
        Pakistan: QLocale.Country = ...
        Palau: QLocale.Country = ...
        PalestinianTerritories: QLocale.Country = ...
        Panama: QLocale.Country = ...
        PapuaNewGuinea: QLocale.Country = ...
        Paraguay: QLocale.Country = ...
        Peru: QLocale.Country = ...
        Philippines: QLocale.Country = ...
        Pitcairn: QLocale.Country = ...
        Poland: QLocale.Country = ...
        Portugal: QLocale.Country = ...
        PuertoRico: QLocale.Country = ...
        Qatar: QLocale.Country = ...
        Reunion: QLocale.Country = ...
        Romania: QLocale.Country = ...
        Russia: QLocale.Country = ...
        RussianFederation: QLocale.Country = ...
        Rwanda: QLocale.Country = ...
        SaintKittsAndNevis: QLocale.Country = ...
        SaintLucia: QLocale.Country = ...
        SaintVincentAndTheGrenadines: QLocale.Country = ...
        Samoa: QLocale.Country = ...
        SanMarino: QLocale.Country = ...
        SaoTomeAndPrincipe: QLocale.Country = ...
        SaudiArabia: QLocale.Country = ...
        Senegal: QLocale.Country = ...
        Seychelles: QLocale.Country = ...
        SierraLeone: QLocale.Country = ...
        Singapore: QLocale.Country = ...
        Slovakia: QLocale.Country = ...
        Slovenia: QLocale.Country = ...
        SolomonIslands: QLocale.Country = ...
        Somalia: QLocale.Country = ...
        SouthAfrica: QLocale.Country = ...
        SouthGeorgiaAndTheSouthSandwichIslands: QLocale.Country = ...
        Spain: QLocale.Country = ...
        SriLanka: QLocale.Country = ...
        SaintHelena: QLocale.Country = ...
        SaintPierreAndMiquelon: QLocale.Country = ...
        Sudan: QLocale.Country = ...
        Suriname: QLocale.Country = ...
        SvalbardAndJanMayenIslands: QLocale.Country = ...
        Swaziland: QLocale.Country = ...
        Sweden: QLocale.Country = ...
        Switzerland: QLocale.Country = ...
        Syria: QLocale.Country = ...
        SyrianArabRepublic: QLocale.Country = ...
        Taiwan: QLocale.Country = ...
        Tajikistan: QLocale.Country = ...
        Tanzania: QLocale.Country = ...
        Thailand: QLocale.Country = ...
        Togo: QLocale.Country = ...
        Tokelau: QLocale.Country = ...
        TokelauCountry: QLocale.Country = ...
        Tonga: QLocale.Country = ...
        TrinidadAndTobago: QLocale.Country = ...
        Tunisia: QLocale.Country = ...
        Turkey: QLocale.Country = ...
        Turkmenistan: QLocale.Country = ...
        TurksAndCaicosIslands: QLocale.Country = ...
        Tuvalu: QLocale.Country = ...
        TuvaluCountry: QLocale.Country = ...
        Uganda: QLocale.Country = ...
        Ukraine: QLocale.Country = ...
        UnitedArabEmirates: QLocale.Country = ...
        UnitedKingdom: QLocale.Country = ...
        UnitedStates: QLocale.Country = ...
        UnitedStatesMinorOutlyingIslands: QLocale.Country = ...
        Uruguay: QLocale.Country = ...
        Uzbekistan: QLocale.Country = ...
        Vanuatu: QLocale.Country = ...
        VaticanCityState: QLocale.Country = ...
        Venezuela: QLocale.Country = ...
        Vietnam: QLocale.Country = ...
        BritishVirginIslands: QLocale.Country = ...
        UnitedStatesVirginIslands: QLocale.Country = ...
        WallisAndFutunaIslands: QLocale.Country = ...
        WesternSahara: QLocale.Country = ...
        Yemen: QLocale.Country = ...
        CanaryIslands: QLocale.Country = ...
        Zambia: QLocale.Country = ...
        Zimbabwe: QLocale.Country = ...
        ClippertonIsland: QLocale.Country = ...
        Montenegro: QLocale.Country = ...
        Serbia: QLocale.Country = ...
        SaintBarthelemy: QLocale.Country = ...
        SaintMartin: QLocale.Country = ...
        LatinAmerica: QLocale.Country = ...
        LatinAmericaAndTheCaribbean: QLocale.Country = ...
        AscensionIsland: QLocale.Country = ...
        AlandIslands: QLocale.Country = ...
        DiegoGarcia: QLocale.Country = ...
        CeutaAndMelilla: QLocale.Country = ...
        IsleOfMan: QLocale.Country = ...
        Jersey: QLocale.Country = ...
        TristanDaCunha: QLocale.Country = ...
        SouthSudan: QLocale.Country = ...
        Bonaire: QLocale.Country = ...
        SintMaarten: QLocale.Country = ...
        Kosovo: QLocale.Country = ...
        EuropeanUnion: QLocale.Country = ...
        OutlyingOceania: QLocale.Country = ...
        World: QLocale.Country = ...
        Europe: QLocale.Country = ...
        LastCountry: QLocale.Country = ...

    class CurrencySymbolFormat(object):
        CurrencyIsoCode: QLocale.CurrencySymbolFormat = ...
        CurrencySymbol: QLocale.CurrencySymbolFormat = ...
        CurrencyDisplayName: QLocale.CurrencySymbolFormat = ...

    class DataSizeFormat(object):
        DataSizeIecFormat: QLocale.DataSizeFormat = ...
        DataSizeBase1000: QLocale.DataSizeFormat = ...
        DataSizeSIQuantifiers: QLocale.DataSizeFormat = ...
        DataSizeTraditionalFormat: QLocale.DataSizeFormat = ...
        DataSizeSIFormat: QLocale.DataSizeFormat = ...

    class DataSizeFormats(object):
        ...

    class FloatingPointPrecisionOption(object):
        FloatingPointShortest: QLocale.FloatingPointPrecisionOption = ...

    class FormatType(object):
        LongFormat: QLocale.FormatType = ...
        ShortFormat: QLocale.FormatType = ...
        NarrowFormat: QLocale.FormatType = ...

    class Language(object):
        AnyLanguage: QLocale.Language = ...
        C: QLocale.Language = ...
        Abkhazian: QLocale.Language = ...
        Afan: QLocale.Language = ...
        Oromo: QLocale.Language = ...
        Afar: QLocale.Language = ...
        Afrikaans: QLocale.Language = ...
        Albanian: QLocale.Language = ...
        Amharic: QLocale.Language = ...
        Arabic: QLocale.Language = ...
        Armenian: QLocale.Language = ...
        Assamese: QLocale.Language = ...
        Aymara: QLocale.Language = ...
        Azerbaijani: QLocale.Language = ...
        Bashkir: QLocale.Language = ...
        Basque: QLocale.Language = ...
        Bengali: QLocale.Language = ...
        Bhutani: QLocale.Language = ...
        Dzongkha: QLocale.Language = ...
        Bihari: QLocale.Language = ...
        Bislama: QLocale.Language = ...
        Breton: QLocale.Language = ...
        Bulgarian: QLocale.Language = ...
        Burmese: QLocale.Language = ...
        Belarusian: QLocale.Language = ...
        Byelorussian: QLocale.Language = ...
        Cambodian: QLocale.Language = ...
        Khmer: QLocale.Language = ...
        Catalan: QLocale.Language = ...
        Chinese: QLocale.Language = ...
        Corsican: QLocale.Language = ...
        Croatian: QLocale.Language = ...
        Czech: QLocale.Language = ...
        Danish: QLocale.Language = ...
        Dutch: QLocale.Language = ...
        English: QLocale.Language = ...
        Esperanto: QLocale.Language = ...
        Estonian: QLocale.Language = ...
        Faroese: QLocale.Language = ...
        Fijian: QLocale.Language = ...
        Finnish: QLocale.Language = ...
        French: QLocale.Language = ...
        Frisian: QLocale.Language = ...
        WesternFrisian: QLocale.Language = ...
        Gaelic: QLocale.Language = ...
        Galician: QLocale.Language = ...
        Georgian: QLocale.Language = ...
        German: QLocale.Language = ...
        Greek: QLocale.Language = ...
        Greenlandic: QLocale.Language = ...
        Guarani: QLocale.Language = ...
        Gujarati: QLocale.Language = ...
        Hausa: QLocale.Language = ...
        Hebrew: QLocale.Language = ...
        Hindi: QLocale.Language = ...
        Hungarian: QLocale.Language = ...
        Icelandic: QLocale.Language = ...
        Indonesian: QLocale.Language = ...
        Interlingua: QLocale.Language = ...
        Interlingue: QLocale.Language = ...
        Inuktitut: QLocale.Language = ...
        Inupiak: QLocale.Language = ...
        Irish: QLocale.Language = ...
        Italian: QLocale.Language = ...
        Japanese: QLocale.Language = ...
        Javanese: QLocale.Language = ...
        Kannada: QLocale.Language = ...
        Kashmiri: QLocale.Language = ...
        Kazakh: QLocale.Language = ...
        Kinyarwanda: QLocale.Language = ...
        Kirghiz: QLocale.Language = ...
        Korean: QLocale.Language = ...
        Kurdish: QLocale.Language = ...
        Kurundi: QLocale.Language = ...
        Rundi: QLocale.Language = ...
        Lao: QLocale.Language = ...
        Latin: QLocale.Language = ...
        Latvian: QLocale.Language = ...
        Lingala: QLocale.Language = ...
        Lithuanian: QLocale.Language = ...
        Macedonian: QLocale.Language = ...
        Malagasy: QLocale.Language = ...
        Malay: QLocale.Language = ...
        Malayalam: QLocale.Language = ...
        Maltese: QLocale.Language = ...
        Maori: QLocale.Language = ...
        Marathi: QLocale.Language = ...
        Marshallese: QLocale.Language = ...
        Mongolian: QLocale.Language = ...
        NauruLanguage: QLocale.Language = ...
        Nepali: QLocale.Language = ...
        Norwegian: QLocale.Language = ...
        NorwegianBokmal: QLocale.Language = ...
        Occitan: QLocale.Language = ...
        Oriya: QLocale.Language = ...
        Pashto: QLocale.Language = ...
        Persian: QLocale.Language = ...
        Polish: QLocale.Language = ...
        Portuguese: QLocale.Language = ...
        Punjabi: QLocale.Language = ...
        Quechua: QLocale.Language = ...
        RhaetoRomance: QLocale.Language = ...
        Romansh: QLocale.Language = ...
        Moldavian: QLocale.Language = ...
        Romanian: QLocale.Language = ...
        Russian: QLocale.Language = ...
        Samoan: QLocale.Language = ...
        Sango: QLocale.Language = ...
        Sanskrit: QLocale.Language = ...
        Serbian: QLocale.Language = ...
        SerboCroatian: QLocale.Language = ...
        Ossetic: QLocale.Language = ...
        SouthernSotho: QLocale.Language = ...
        Tswana: QLocale.Language = ...
        Shona: QLocale.Language = ...
        Sindhi: QLocale.Language = ...
        Sinhala: QLocale.Language = ...
        Swati: QLocale.Language = ...
        Slovak: QLocale.Language = ...
        Slovenian: QLocale.Language = ...
        Somali: QLocale.Language = ...
        Spanish: QLocale.Language = ...
        Sundanese: QLocale.Language = ...
        Swahili: QLocale.Language = ...
        Swedish: QLocale.Language = ...
        Sardinian: QLocale.Language = ...
        Tajik: QLocale.Language = ...
        Tamil: QLocale.Language = ...
        Tatar: QLocale.Language = ...
        Telugu: QLocale.Language = ...
        Thai: QLocale.Language = ...
        Tibetan: QLocale.Language = ...
        Tigrinya: QLocale.Language = ...
        Tongan: QLocale.Language = ...
        Tsonga: QLocale.Language = ...
        Turkish: QLocale.Language = ...
        Turkmen: QLocale.Language = ...
        Tahitian: QLocale.Language = ...
        Uighur: QLocale.Language = ...
        Uigur: QLocale.Language = ...
        Ukrainian: QLocale.Language = ...
        Urdu: QLocale.Language = ...
        Uzbek: QLocale.Language = ...
        Vietnamese: QLocale.Language = ...
        Volapuk: QLocale.Language = ...
        Welsh: QLocale.Language = ...
        Wolof: QLocale.Language = ...
        Xhosa: QLocale.Language = ...
        Yiddish: QLocale.Language = ...
        Yoruba: QLocale.Language = ...
        Zhuang: QLocale.Language = ...
        Zulu: QLocale.Language = ...
        NorwegianNynorsk: QLocale.Language = ...
        Bosnian: QLocale.Language = ...
        Divehi: QLocale.Language = ...
        Manx: QLocale.Language = ...
        Cornish: QLocale.Language = ...
        Akan: QLocale.Language = ...
        Twi: QLocale.Language = ...
        Konkani: QLocale.Language = ...
        Ga: QLocale.Language = ...
        Igbo: QLocale.Language = ...
        Kamba: QLocale.Language = ...
        Syriac: QLocale.Language = ...
        Blin: QLocale.Language = ...
        Geez: QLocale.Language = ...
        Koro: QLocale.Language = ...
        Sidamo: QLocale.Language = ...
        Atsam: QLocale.Language = ...
        Tigre: QLocale.Language = ...
        Jju: QLocale.Language = ...
        Friulian: QLocale.Language = ...
        Venda: QLocale.Language = ...
        Ewe: QLocale.Language = ...
        Walamo: QLocale.Language = ...
        Hawaiian: QLocale.Language = ...
        Tyap: QLocale.Language = ...
        Chewa: QLocale.Language = ...
        Nyanja: QLocale.Language = ...
        Filipino: QLocale.Language = ...
        Tagalog: QLocale.Language = ...
        SwissGerman: QLocale.Language = ...
        SichuanYi: QLocale.Language = ...
        Kpelle: QLocale.Language = ...
        LowGerman: QLocale.Language = ...
        SouthNdebele: QLocale.Language = ...
        NorthernSotho: QLocale.Language = ...
        NorthernSami: QLocale.Language = ...
        Taroko: QLocale.Language = ...
        Gusii: QLocale.Language = ...
        Taita: QLocale.Language = ...
        Fulah: QLocale.Language = ...
        Kikuyu: QLocale.Language = ...
        Samburu: QLocale.Language = ...
        Sena: QLocale.Language = ...
        NorthNdebele: QLocale.Language = ...
        Rombo: QLocale.Language = ...
        Tachelhit: QLocale.Language = ...
        Kabyle: QLocale.Language = ...
        Nyankole: QLocale.Language = ...
        Bena: QLocale.Language = ...
        Vunjo: QLocale.Language = ...
        Bambara: QLocale.Language = ...
        Embu: QLocale.Language = ...
        Cherokee: QLocale.Language = ...
        Morisyen: QLocale.Language = ...
        Makonde: QLocale.Language = ...
        Langi: QLocale.Language = ...
        Ganda: QLocale.Language = ...
        Bemba: QLocale.Language = ...
        Kabuverdianu: QLocale.Language = ...
        Meru: QLocale.Language = ...
        Kalenjin: QLocale.Language = ...
        Nama: QLocale.Language = ...
        Machame: QLocale.Language = ...
        Colognian: QLocale.Language = ...
        Masai: QLocale.Language = ...
        Soga: QLocale.Language = ...
        Luyia: QLocale.Language = ...
        Asu: QLocale.Language = ...
        Teso: QLocale.Language = ...
        Saho: QLocale.Language = ...
        KoyraChiini: QLocale.Language = ...
        Rwa: QLocale.Language = ...
        Luo: QLocale.Language = ...
        Chiga: QLocale.Language = ...
        CentralMoroccoTamazight: QLocale.Language = ...
        KoyraboroSenni: QLocale.Language = ...
        Shambala: QLocale.Language = ...
        Bodo: QLocale.Language = ...
        Avaric: QLocale.Language = ...
        Chamorro: QLocale.Language = ...
        Chechen: QLocale.Language = ...
        Church: QLocale.Language = ...
        Chuvash: QLocale.Language = ...
        Cree: QLocale.Language = ...
        Haitian: QLocale.Language = ...
        Herero: QLocale.Language = ...
        HiriMotu: QLocale.Language = ...
        Kanuri: QLocale.Language = ...
        Komi: QLocale.Language = ...
        Kongo: QLocale.Language = ...
        Kwanyama: QLocale.Language = ...
        Limburgish: QLocale.Language = ...
        LubaKatanga: QLocale.Language = ...
        Luxembourgish: QLocale.Language = ...
        Navaho: QLocale.Language = ...
        Ndonga: QLocale.Language = ...
        Ojibwa: QLocale.Language = ...
        Pali: QLocale.Language = ...
        Walloon: QLocale.Language = ...
        Aghem: QLocale.Language = ...
        Basaa: QLocale.Language = ...
        Zarma: QLocale.Language = ...
        Duala: QLocale.Language = ...
        JolaFonyi: QLocale.Language = ...
        Ewondo: QLocale.Language = ...
        Bafia: QLocale.Language = ...
        MakhuwaMeetto: QLocale.Language = ...
        Mundang: QLocale.Language = ...
        Kwasio: QLocale.Language = ...
        Nuer: QLocale.Language = ...
        Sakha: QLocale.Language = ...
        Sangu: QLocale.Language = ...
        CongoSwahili: QLocale.Language = ...
        Tasawaq: QLocale.Language = ...
        Vai: QLocale.Language = ...
        Walser: QLocale.Language = ...
        Yangben: QLocale.Language = ...
        Avestan: QLocale.Language = ...
        Asturian: QLocale.Language = ...
        Ngomba: QLocale.Language = ...
        Kako: QLocale.Language = ...
        Meta: QLocale.Language = ...
        Ngiemboon: QLocale.Language = ...
        Aragonese: QLocale.Language = ...
        Akkadian: QLocale.Language = ...
        AncientEgyptian: QLocale.Language = ...
        AncientGreek: QLocale.Language = ...
        Aramaic: QLocale.Language = ...
        Balinese: QLocale.Language = ...
        Bamun: QLocale.Language = ...
        BatakToba: QLocale.Language = ...
        Buginese: QLocale.Language = ...
        Buhid: QLocale.Language = ...
        Carian: QLocale.Language = ...
        Chakma: QLocale.Language = ...
        ClassicalMandaic: QLocale.Language = ...
        Coptic: QLocale.Language = ...
        Dogri: QLocale.Language = ...
        EasternCham: QLocale.Language = ...
        EasternKayah: QLocale.Language = ...
        Etruscan: QLocale.Language = ...
        Gothic: QLocale.Language = ...
        Hanunoo: QLocale.Language = ...
        Ingush: QLocale.Language = ...
        LargeFloweryMiao: QLocale.Language = ...
        Lepcha: QLocale.Language = ...
        Limbu: QLocale.Language = ...
        Lisu: QLocale.Language = ...
        Lu: QLocale.Language = ...
        Lycian: QLocale.Language = ...
        Lydian: QLocale.Language = ...
        Mandingo: QLocale.Language = ...
        Manipuri: QLocale.Language = ...
        Meroitic: QLocale.Language = ...
        NorthernThai: QLocale.Language = ...
        OldIrish: QLocale.Language = ...
        OldNorse: QLocale.Language = ...
        OldPersian: QLocale.Language = ...
        OldTurkish: QLocale.Language = ...
        Pahlavi: QLocale.Language = ...
        Parthian: QLocale.Language = ...
        Phoenician: QLocale.Language = ...
        PrakritLanguage: QLocale.Language = ...
        Rejang: QLocale.Language = ...
        Sabaean: QLocale.Language = ...
        Samaritan: QLocale.Language = ...
        Santali: QLocale.Language = ...
        Saurashtra: QLocale.Language = ...
        Sora: QLocale.Language = ...
        Sylheti: QLocale.Language = ...
        Tagbanwa: QLocale.Language = ...
        TaiDam: QLocale.Language = ...
        TaiNua: QLocale.Language = ...
        Ugaritic: QLocale.Language = ...
        Akoose: QLocale.Language = ...
        Lakota: QLocale.Language = ...
        StandardMoroccanTamazight: QLocale.Language = ...
        Mapuche: QLocale.Language = ...
        CentralKurdish: QLocale.Language = ...
        LowerSorbian: QLocale.Language = ...
        UpperSorbian: QLocale.Language = ...
        Kenyang: QLocale.Language = ...
        Mohawk: QLocale.Language = ...
        Nko: QLocale.Language = ...
        Prussian: QLocale.Language = ...
        Kiche: QLocale.Language = ...
        SouthernSami: QLocale.Language = ...
        LuleSami: QLocale.Language = ...
        InariSami: QLocale.Language = ...
        SkoltSami: QLocale.Language = ...
        Warlpiri: QLocale.Language = ...
        ManichaeanMiddlePersian: QLocale.Language = ...
        Mende: QLocale.Language = ...
        AncientNorthArabian: QLocale.Language = ...
        LinearA: QLocale.Language = ...
        HmongNjua: QLocale.Language = ...
        Ho: QLocale.Language = ...
        Lezghian: QLocale.Language = ...
        Bassa: QLocale.Language = ...
        Mono: QLocale.Language = ...
        TedimChin: QLocale.Language = ...
        Maithili: QLocale.Language = ...
        Ahom: QLocale.Language = ...
        AmericanSignLanguage: QLocale.Language = ...
        ArdhamagadhiPrakrit: QLocale.Language = ...
        Bhojpuri: QLocale.Language = ...
        HieroglyphicLuwian: QLocale.Language = ...
        LiteraryChinese: QLocale.Language = ...
        Mazanderani: QLocale.Language = ...
        Mru: QLocale.Language = ...
        Newari: QLocale.Language = ...
        NorthernLuri: QLocale.Language = ...
        Palauan: QLocale.Language = ...
        Papiamento: QLocale.Language = ...
        Saraiki: QLocale.Language = ...
        TokelauLanguage: QLocale.Language = ...
        TokPisin: QLocale.Language = ...
        TuvaluLanguage: QLocale.Language = ...
        UncodedLanguages: QLocale.Language = ...
        Cantonese: QLocale.Language = ...
        Osage: QLocale.Language = ...
        Tangut: QLocale.Language = ...
        Ido: QLocale.Language = ...
        Lojban: QLocale.Language = ...
        Sicilian: QLocale.Language = ...
        SouthernKurdish: QLocale.Language = ...
        WesternBalochi: QLocale.Language = ...
        Cebuano: QLocale.Language = ...
        Erzya: QLocale.Language = ...
        Chickasaw: QLocale.Language = ...
        Muscogee: QLocale.Language = ...
        Silesian: QLocale.Language = ...
        LastLanguage: QLocale.Language = ...
        NigerianPidgin: QLocale.Language = ...

    class MeasurementSystem(object):
        MetricSystem: QLocale.MeasurementSystem = ...
        ImperialSystem: QLocale.MeasurementSystem = ...
        ImperialUSSystem: QLocale.MeasurementSystem = ...
        ImperialUKSystem: QLocale.MeasurementSystem = ...

    class NumberOption(object):
        DefaultNumberOptions: QLocale.NumberOption = ...
        OmitGroupSeparator: QLocale.NumberOption = ...
        RejectGroupSeparator: QLocale.NumberOption = ...
        OmitLeadingZeroInExponent: QLocale.NumberOption = ...
        RejectLeadingZeroInExponent: QLocale.NumberOption = ...
        IncludeTrailingZeroesAfterDot: QLocale.NumberOption = ...
        RejectTrailingZeroesAfterDot: QLocale.NumberOption = ...

    class NumberOptions(object):
        ...

    class QuotationStyle(object):
        StandardQuotation: QLocale.QuotationStyle = ...
        AlternateQuotation: QLocale.QuotationStyle = ...

    class Script(object):
        AnyScript: QLocale.Script = ...
        ArabicScript: QLocale.Script = ...
        CyrillicScript: QLocale.Script = ...
        DeseretScript: QLocale.Script = ...
        GurmukhiScript: QLocale.Script = ...
        SimplifiedChineseScript: QLocale.Script = ...
        SimplifiedHanScript: QLocale.Script = ...
        TraditionalChineseScript: QLocale.Script = ...
        TraditionalHanScript: QLocale.Script = ...
        LatinScript: QLocale.Script = ...
        MongolianScript: QLocale.Script = ...
        TifinaghScript: QLocale.Script = ...
        ArmenianScript: QLocale.Script = ...
        BengaliScript: QLocale.Script = ...
        CherokeeScript: QLocale.Script = ...
        DevanagariScript: QLocale.Script = ...
        EthiopicScript: QLocale.Script = ...
        GeorgianScript: QLocale.Script = ...
        GreekScript: QLocale.Script = ...
        GujaratiScript: QLocale.Script = ...
        HebrewScript: QLocale.Script = ...
        JapaneseScript: QLocale.Script = ...
        KhmerScript: QLocale.Script = ...
        KannadaScript: QLocale.Script = ...
        KoreanScript: QLocale.Script = ...
        LaoScript: QLocale.Script = ...
        MalayalamScript: QLocale.Script = ...
        MyanmarScript: QLocale.Script = ...
        OriyaScript: QLocale.Script = ...
        TamilScript: QLocale.Script = ...
        TeluguScript: QLocale.Script = ...
        ThaanaScript: QLocale.Script = ...
        ThaiScript: QLocale.Script = ...
        TibetanScript: QLocale.Script = ...
        SinhalaScript: QLocale.Script = ...
        SyriacScript: QLocale.Script = ...
        YiScript: QLocale.Script = ...
        VaiScript: QLocale.Script = ...
        AvestanScript: QLocale.Script = ...
        BalineseScript: QLocale.Script = ...
        BamumScript: QLocale.Script = ...
        BatakScript: QLocale.Script = ...
        BopomofoScript: QLocale.Script = ...
        BrahmiScript: QLocale.Script = ...
        BugineseScript: QLocale.Script = ...
        BuhidScript: QLocale.Script = ...
        CanadianAboriginalScript: QLocale.Script = ...
        CarianScript: QLocale.Script = ...
        ChakmaScript: QLocale.Script = ...
        ChamScript: QLocale.Script = ...
        CopticScript: QLocale.Script = ...
        CypriotScript: QLocale.Script = ...
        EgyptianHieroglyphsScript: QLocale.Script = ...
        FraserScript: QLocale.Script = ...
        GlagoliticScript: QLocale.Script = ...
        GothicScript: QLocale.Script = ...
        HanScript: QLocale.Script = ...
        HangulScript: QLocale.Script = ...
        HanunooScript: QLocale.Script = ...
        ImperialAramaicScript: QLocale.Script = ...
        InscriptionalPahlaviScript: QLocale.Script = ...
        InscriptionalParthianScript: QLocale.Script = ...
        JavaneseScript: QLocale.Script = ...
        KaithiScript: QLocale.Script = ...
        KatakanaScript: QLocale.Script = ...
        KayahLiScript: QLocale.Script = ...
        KharoshthiScript: QLocale.Script = ...
        LannaScript: QLocale.Script = ...
        LepchaScript: QLocale.Script = ...
        LimbuScript: QLocale.Script = ...
        LinearBScript: QLocale.Script = ...
        LycianScript: QLocale.Script = ...
        LydianScript: QLocale.Script = ...
        MandaeanScript: QLocale.Script = ...
        MeiteiMayekScript: QLocale.Script = ...
        MeroiticScript: QLocale.Script = ...
        MeroiticCursiveScript: QLocale.Script = ...
        NkoScript: QLocale.Script = ...
        NewTaiLueScript: QLocale.Script = ...
        OghamScript: QLocale.Script = ...
        OlChikiScript: QLocale.Script = ...
        OldItalicScript: QLocale.Script = ...
        OldPersianScript: QLocale.Script = ...
        OldSouthArabianScript: QLocale.Script = ...
        OrkhonScript: QLocale.Script = ...
        OsmanyaScript: QLocale.Script = ...
        PhagsPaScript: QLocale.Script = ...
        PhoenicianScript: QLocale.Script = ...
        PollardPhoneticScript: QLocale.Script = ...
        RejangScript: QLocale.Script = ...
        RunicScript: QLocale.Script = ...
        SamaritanScript: QLocale.Script = ...
        SaurashtraScript: QLocale.Script = ...
        SharadaScript: QLocale.Script = ...
        ShavianScript: QLocale.Script = ...
        SoraSompengScript: QLocale.Script = ...
        CuneiformScript: QLocale.Script = ...
        SundaneseScript: QLocale.Script = ...
        SylotiNagriScript: QLocale.Script = ...
        TagalogScript: QLocale.Script = ...
        TagbanwaScript: QLocale.Script = ...
        TaiLeScript: QLocale.Script = ...
        TaiVietScript: QLocale.Script = ...
        TakriScript: QLocale.Script = ...
        UgariticScript: QLocale.Script = ...
        BrailleScript: QLocale.Script = ...
        HiraganaScript: QLocale.Script = ...
        CaucasianAlbanianScript: QLocale.Script = ...
        BassaVahScript: QLocale.Script = ...
        DuployanScript: QLocale.Script = ...
        ElbasanScript: QLocale.Script = ...
        GranthaScript: QLocale.Script = ...
        PahawhHmongScript: QLocale.Script = ...
        KhojkiScript: QLocale.Script = ...
        LinearAScript: QLocale.Script = ...
        MahajaniScript: QLocale.Script = ...
        ManichaeanScript: QLocale.Script = ...
        MendeKikakuiScript: QLocale.Script = ...
        ModiScript: QLocale.Script = ...
        MroScript: QLocale.Script = ...
        OldNorthArabianScript: QLocale.Script = ...
        NabataeanScript: QLocale.Script = ...
        PalmyreneScript: QLocale.Script = ...
        PauCinHauScript: QLocale.Script = ...
        OldPermicScript: QLocale.Script = ...
        PsalterPahlaviScript: QLocale.Script = ...
        SiddhamScript: QLocale.Script = ...
        KhudawadiScript: QLocale.Script = ...
        TirhutaScript: QLocale.Script = ...
        VarangKshitiScript: QLocale.Script = ...
        AhomScript: QLocale.Script = ...
        AnatolianHieroglyphsScript: QLocale.Script = ...
        HatranScript: QLocale.Script = ...
        MultaniScript: QLocale.Script = ...
        OldHungarianScript: QLocale.Script = ...
        SignWritingScript: QLocale.Script = ...
        AdlamScript: QLocale.Script = ...
        BhaiksukiScript: QLocale.Script = ...
        MarchenScript: QLocale.Script = ...
        NewaScript: QLocale.Script = ...
        OsageScript: QLocale.Script = ...
        TangutScript: QLocale.Script = ...
        HanWithBopomofoScript: QLocale.Script = ...
        JamoScript: QLocale.Script = ...
        LastScript: QLocale.Script = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#QLocale

        **QLocale::QLocale()**

        Constructs a QLocale object initialized with the default locale. If no
        default locale was set using **setDefault** (), this locale will be the
        same as the one returned by **system** ().

        **See also** **setDefault** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        language: PySide2.QtCore.QLocale.Language,
        country: PySide2.QtCore.QLocale.Country = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#QLocale-1

        **QLocale::QLocale(const QString & name )**

        Constructs a QLocale object with the specified **name** , which has the
        format "language[_script][_country][.codeset][@modifier]" or "C", where:

        * language is a lowercase, two-letter, ISO 639 language code (also some
        three-letter codes),
          * script is a titlecase, four-letter, ISO 15924
        script code,
          * country is an uppercase, two-letter, ISO 3166 country
        code (also "419" as defined by United Nations),
          * and codeset and
        modifier are ignored.

        The separator can be either underscore or a minus sign.

        If the string violates the locale format, or language is not a valid ISO
        639 code, the "C" locale is used instead. If country is not present, or
        is not a valid ISO 3166 code, the most appropriate country is chosen for
        the specified language.

        The language, script and country codes are converted to their respective
        `Language`, `Script` and `Country` enums. After this conversion is
        performed, the constructor behaves exactly like QLocale(Country, Script,
        Language).

        This constructor is much slower than QLocale(Country, Script, Language).

        **See also** **bcp47Name** ().
        """
        ...

    @typing.overload
    def __init__(
        self,
        language: PySide2.QtCore.QLocale.Language,
        script: PySide2.QtCore.QLocale.Script,
        country: PySide2.QtCore.QLocale.Country,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#QLocale-2

        **QLocale::QLocale(QLocale::Language language , QLocale::Country country
        = AnyCountry)**

        Constructs a QLocale object with the specified **language** and
        **country**.

        * If the language/country pair is found in the database, it is used.
          *
        If the language is found but the country is not, or if the country is
        `AnyCountry`, the language is used with the most appropriate available
        country (for example, Germany for German),
          * If neither the language
        nor the country are found, QLocale defaults to the default locale (see
        **setDefault** ()).

        The language and country that are actually used can be queried using
        **language** () and **country** ().

        **See also** **setDefault** (), **language** (), and **country** ().
        """
        ...

    @typing.overload
    def __init__(self, name: str) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#QLocale-3

        **QLocale::QLocale(QLocale::Language language , QLocale::Script script ,
        QLocale::Country country )**

        Constructs a QLocale object with the specified **language** , **script**
        and **country**.

        * If the language/script/country is found in the database, it is used.
        * If both **script** is **AnyScript**  and **country** is **AnyCountry**
        , the language is used with the most appropriate available script and
        country (for example, Germany for German),
          * If either **script** is
        **AnyScript**  or **country** is **AnyCountry** , the language is used
        with the first locale that matches the given **script** and **country**.
        * If neither the language nor the country are found, QLocale defaults to
        the default locale (see **setDefault** ()).

        The language, script and country that are actually used can be queried
        using **language** (), **script** () and **country** ().

        This function was introduced in Qt 4.8.

        **See also** **setDefault** (), **language** (), **script** (), and
        **country** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QLocale) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#QLocale-4

        **QLocale::QLocale(const QLocale & other )**

        Constructs a QLocale object as a copy of **other**.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def amText(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#amText

        **QString QLocale::amText() const**

        Returns the localized name of the "AM" suffix for times specified using
        the conventions of the 12-hour clock.

        This function was introduced in Qt 4.5.

        **See also** **pmText** ().
        """
        ...

    def bcp47Name(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#bcp47Name

        **QString QLocale::bcp47Name() const**

        Returns the dash-separated language, script and country (and possibly
        other BCP47 fields) of this locale as a string.

        Unlike the **uiLanguages** () the returned value of the bcp47Name()
        represents the locale name of the **QLocale**  data but not the language
        the user-interface should be in.

        This function tries to conform the locale name to BCP47.

        This function was introduced in Qt 4.8.

        **See also** **language** (), **country** (), **script** (), and
        **uiLanguages** ().
        """
        ...

    @staticmethod
    def c() -> PySide2.QtCore.QLocale:
        """
        https://doc.qt.io/qt-5/qlocale.html#c

        **[static] QLocale QLocale::c()**

        Returns a **QLocale**  object initialized to the "C" locale.

        This locale is based on en_US but with various quirks of its own, such
        as simplified number formatting and its own date formatting. It
        implements the POSIX standards that describe the behavior of standard
        library functions of the "C" programming language.

        Among other things, this means its collation order is based on the ASCII
        values of letters, so that (for case-sensitive sorting) all upper-case
        letters sort before any lower-case one (rather than each letter\'s upper-
        and lower-case forms sorting adjacent to one another, before the next
        letter\'s two forms).

        **See also** **system** ().
        """
        ...

    def collation(self) -> PySide2.QtCore.QLocale:
        """
        https://doc.qt.io/qt-5/qlocale.html#collation

        **QLocale QLocale::collation() const**

        Returns the locale to use for collation.

        The result is usually this locale; however, the system locale (which is
        commonly the default locale) will return the system collation locale.
        The result is suitable for passing to **QCollator** 's constructor.

        This function was introduced in Qt 5.13.

        **See also** **QCollator** .
        """
        ...

    @staticmethod
    def countriesForLanguage(lang: PySide2.QtCore.QLocale.Language) -> typing.List:
        ...

    def country(self) -> PySide2.QtCore.QLocale.Country:
        """
        https://doc.qt.io/qt-5/qlocale.html#country

        **QLocale::Country QLocale::country() const**

        Returns the country of this locale.

        **See also** **language** (), **script** (), **countryToString** (), and
        **bcp47Name** ().
        """
        ...

    @staticmethod
    def countryToString(country: PySide2.QtCore.QLocale.Country) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#countryToString

        **[static] QString QLocale::countryToString(QLocale::Country country )**

        Returns a **QString**  containing the name of **country**.

        **See also** **languageToString** (), **scriptToString** (), **country**
        (), and **bcp47Name** ().
        """
        ...

    def createSeparatedList(self, strl: typing.Sequence) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#createSeparatedList

        **QString QLocale::createSeparatedList(const QStringList & list )
        const**

        Returns a string that represents a join of a given **list** of strings
        with a separator defined by the locale.

        This function was introduced in Qt 4.8.
        """
        ...

    def currencySymbol(
        self, arg__1: PySide2.QtCore.QLocale.CurrencySymbolFormat = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#currencySymbol

        **QString QLocale::currencySymbol(QLocale::CurrencySymbolFormat format =
        CurrencySymbol) const**

        Returns a currency symbol according to the **format**.

        This function was introduced in Qt 4.8.
        """
        ...

    def dateFormat(self, format: PySide2.QtCore.QLocale.FormatType = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#dateFormat

        **QString QLocale::dateFormat(QLocale::FormatType format = LongFormat)
        const**

        Returns the date format used for the current locale.

        If **format** is **LongFormat** , the format will be elaborate,
        otherwise it will be short. For example, **LongFormat**  for the `en_US`
        locale is `dddd, MMMM d, yyyy`, **ShortFormat**  is `M/d/yy`.

        This function was introduced in Qt 4.1.

        **See also** **QDate::toString** () and **QDate::fromString** ().
        """
        ...

    def dateTimeFormat(self, format: PySide2.QtCore.QLocale.FormatType = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#dateTimeFormat

        **QString QLocale::dateTimeFormat(QLocale::FormatType format =
        LongFormat) const**

        Returns the date time format used for the current locale.

        If **format** is **LongFormat** , the format will be elaborate,
        otherwise it will be short. For example, **LongFormat**  for the `en_US`
        locale is `dddd, MMMM d, yyyy h:mm:ss AP t`, **ShortFormat**  is `M/d/yy
        h:mm AP`.

        This function was introduced in Qt 4.4.

        **See also** **QDateTime::toString** () and **QDateTime::fromString**
        ().
        """
        ...

    def dayName(
        self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#dayName

        **QString QLocale::dayName(int day , QLocale::FormatType type =
        LongFormat) const**

        Returns the localized name of the **day** (where 1 represents Monday, 2
        represents Tuesday and so on), in the format specified by **type**.

        For example, if the locale is `en_US` and **day** is 1, **LongFormat**
        will return `Monday`, **ShortFormat**  `Mon`, and **NarrowFormat**  `M`.

        This function was introduced in Qt 4.2.

        **See also** **monthName** () and **standaloneDayName** ().
        """
        ...

    def decimalPoint(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#decimalPoint

        **QChar QLocale::decimalPoint() const**

        Returns the decimal point character of this locale.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.1.

        **See also** **groupSeparator** () and **toString** ().
        """
        ...

    def exponential(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#exponential

        **QChar QLocale::exponential() const**

        Returns the exponential character of this locale, used to separate
        exponent from mantissa in some floating-point numeric representations.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.1.

        **See also** **toString** (double, char, int).
        """
        ...

    def firstDayOfWeek(self) -> PySide2.QtCore.Qt.DayOfWeek:
        """
        https://doc.qt.io/qt-5/qlocale.html#firstDayOfWeek

        **Qt::DayOfWeek QLocale::firstDayOfWeek() const**

        Returns the first day of the week according to the current locale.

        This function was introduced in Qt 4.8.
        """
        ...

    def formattedDataSize(
        self,
        bytes: int,
        precision: int = ...,
        format: PySide2.QtCore.QLocale.DataSizeFormats = ...,
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#formattedDataSize-1

        **QString QLocale::formattedDataSize(qint64 bytes , int precision = 2,
        QLocale::DataSizeFormats format = DataSizeIecFormat) const**

        Converts a size in bytes to a human-readable localized string,
        comprising a number and a quantified unit. The quantifier is chosen such
        that the number is at least one, and as small as possible. For example
        if **bytes** is 16384, **precision** is 2, and **format** is
        **DataSizeIecFormat**  (the default), this function returns "16.00 KiB";
        for 1330409069609 bytes it returns "1.21 GiB"; and so on. If **format**
        is **DataSizeIecFormat**  or **DataSizeTraditionalFormat** , the given
        number of bytes is divided by a power of 1024, with result less than
        1024; for **DataSizeSIFormat** , it is divided by a power of 1000, with
        result less than 1000. `DataSizeIecFormat` uses the new IEC standard
        quantifiers Ki, Mi and so on, whereas `DataSizeSIFormat` uses the older
        SI quantifiers k, M, etc., and `DataSizeTraditionalFormat` abuses them.

        This function was introduced in Qt 5.10.
        """
        ...

    def groupSeparator(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#groupSeparator

        **QChar QLocale::groupSeparator() const**

        Returns the group separator character of this locale.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.1.

        **See also** **decimalPoint** () and **toString** ().
        """
        ...

    def language(self) -> PySide2.QtCore.QLocale.Language:
        """
        https://doc.qt.io/qt-5/qlocale.html#language

        **QLocale::Language QLocale::language() const**

        Returns the language of this locale.

        **See also** **script** (), **country** (), **languageToString** (), and
        **bcp47Name** ().
        """
        ...

    @staticmethod
    def languageToString(language: PySide2.QtCore.QLocale.Language) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#languageToString

        **[static] QString QLocale::languageToString(QLocale::Language language
        )**

        Returns a **QString**  containing the name of **language**.

        **See also** **countryToString** (), **scriptToString** (), and
        **bcp47Name** ().
        """
        ...

    @staticmethod
    def matchingLocales(
        language: PySide2.QtCore.QLocale.Language,
        script: PySide2.QtCore.QLocale.Script,
        country: PySide2.QtCore.QLocale.Country,
    ) -> typing.List:
        """
        https://doc.qt.io/qt-5/qlocale.html#matchingLocales

        **[static] QList<QLocale> QLocale::matchingLocales(QLocale::Language
        language , QLocale::Script script , QLocale::Country country )**

        Returns a list of valid locale objects that match the given **language**
        , **script** and **country**.

        Getting a list of all locales: **QList** <**QLocale** > allLocales =
        QLocale::matchingLocales(**QLocale::AnyLanguage** ,
        **QLocale::AnyScript** , **QLocale::AnyCountry** );

        Getting a list of locales suitable for Russia: **QList** <**QLocale** >
        locales = QLocale::matchingLocales(**QLocale::AnyLanguage** ,
        **QLocale::AnyScript** , **QLocale::Russia** );

        This function was introduced in Qt 4.8.
        """
        ...

    def measurementSystem(self) -> PySide2.QtCore.QLocale.MeasurementSystem:
        """
        https://doc.qt.io/qt-5/qlocale.html#measurementSystem

        **QLocale::MeasurementSystem QLocale::measurementSystem() const**

        Returns the measurement system for the locale.

        This function was introduced in Qt 4.4.
        """
        ...

    def monthName(
        self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#monthName

        **QString QLocale::monthName(int month , QLocale::FormatType type =
        LongFormat) const**

        Returns the localized name of **month** , in the format specified by
        **type**.

        For example, if the locale is `en_US` and **month** is 1, **LongFormat**
        will return `January`. **ShortFormat**  `Jan`, and **NarrowFormat**
        `J`.

        This function was introduced in Qt 4.2.

        **See also** **dayName** () and **standaloneMonthName** ().
        """
        ...

    def name(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#name

        **QString QLocale::name() const**

        Returns the language and country of this locale as a string of the form
        "language_country", where language is a lowercase, two-letter ISO 639
        language code, and country is an uppercase, two- or three-letter ISO
        3166 country code.

        Note that even if **QLocale**  object was constructed with an explicit
        script, name() will not contain it for compatibility reasons. Use
        **bcp47Name** () instead if you need a full locale name.

        **See also** **QLocale** (), **language** (), **script** (), **country**
        (), and **bcp47Name** ().
        """
        ...

    def nativeCountryName(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#nativeCountryName

        **QString QLocale::nativeCountryName() const**

        Returns a native name of the country for the locale. For example
        "España" for Spanish/Spain locale.

        This function was introduced in Qt 4.8.

        **See also** **nativeLanguageName** () and **countryToString** ().
        """
        ...

    def nativeLanguageName(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#nativeLanguageName

        **QString QLocale::nativeLanguageName() const**

        Returns a native name of the language for the locale. For example
        "Schwiizertüütsch" for Swiss-German locale.

        This function was introduced in Qt 4.8.

        **See also** **nativeCountryName** () and **languageToString** ().
        """
        ...

    def negativeSign(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#negativeSign

        **QChar QLocale::negativeSign() const**

        Returns the negative sign character of this locale.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.1.

        **See also** **positiveSign** () and **toString** ().
        """
        ...

    def numberOptions(self) -> PySide2.QtCore.QLocale.NumberOptions:
        """
        https://doc.qt.io/qt-5/qlocale.html#numberOptions

        **QLocale::NumberOptions QLocale::numberOptions() const**

        Returns the options related to number conversions for this **QLocale**
        instance.

        By default, no options are set for the standard locales, except for the
        "C" locale, which has **OmitGroupSeparator**  set by default.

        This function was introduced in Qt 4.2.

        **See also** **setNumberOptions** (), **toString** (), and
        **groupSeparator** ().
        """
        ...

    def percent(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#percent

        **QChar QLocale::percent() const**

        Returns the percent character of this locale.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.1.

        **See also** **toString** ().
        """
        ...

    def pmText(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#pmText

        **QString QLocale::pmText() const**

        Returns the localized name of the "PM" suffix for times specified using
        the conventions of the 12-hour clock.

        This function was introduced in Qt 4.5.

        **See also** **amText** ().
        """
        ...

    def positiveSign(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#positiveSign

        **QChar QLocale::positiveSign() const**

        Returns the positive sign character of this locale.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.5.

        **See also** **negativeSign** () and **toString** ().
        """
        ...

    @typing.overload
    def quoteString(
        self, str: str, style: PySide2.QtCore.QLocale.QuotationStyle = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#quoteString

        **QString QLocale::quoteString(const QString & str ,
        QLocale::QuotationStyle style = StandardQuotation) const**

        Returns **str** quoted according to the current locale using the given
        quotation **style**.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def quoteString(
        self, str: str, style: PySide2.QtCore.QLocale.QuotationStyle = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#quoteString-1

        **QString QLocale::quoteString(const QStringRef & str ,
        QLocale::QuotationStyle style = StandardQuotation) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    def script(self) -> PySide2.QtCore.QLocale.Script:
        """
        https://doc.qt.io/qt-5/qlocale.html#script

        **QLocale::Script QLocale::script() const**

        Returns the script of this locale.

        This function was introduced in Qt 4.8.

        **See also** **language** (), **country** (), **languageToString** (),
        **scriptToString** (), and **bcp47Name** ().
        """
        ...

    @staticmethod
    def scriptToString(script: PySide2.QtCore.QLocale.Script) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#scriptToString

        **[static] QString QLocale::scriptToString(QLocale::Script script )**

        Returns a **QString**  containing the name of **script**.

        This function was introduced in Qt 4.8.

        **See also** **languageToString** (), **countryToString** (), **script**
        (), and **bcp47Name** ().
        """
        ...

    @staticmethod
    def setDefault(locale: PySide2.QtCore.QLocale) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#setDefault

        **[static] void QLocale::setDefault(const QLocale & locale )**

        Sets the global default locale to **locale**. These values are used when
        a **QLocale**  object is constructed with no arguments. If this function
        is not called, the system's locale is used.

        **Warning:** In a multithreaded application, the default locale should
        be set at application startup, before any non-GUI threads are created.

        **Warning:** This function is not **reentrant** .

        **See also** **system** () and **c** ().
        """
        ...

    def setNumberOptions(self, options: PySide2.QtCore.QLocale.NumberOptions) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#setNumberOptions

        **void QLocale::setNumberOptions(QLocale::NumberOptions options )**

        Sets the **options** related to number conversions for this **QLocale**
        instance.

        This function was introduced in Qt 4.2.

        **See also** **numberOptions** ().
        """
        ...

    def standaloneDayName(
        self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#standaloneDayName

        **QString QLocale::standaloneDayName(int day , QLocale::FormatType type
        = LongFormat) const**

        Returns the localized name of the **day** (where 1 represents Monday, 2
        represents Tuesday and so on) that is used as a standalone text, in the
        format specified by **type**.

        If the locale information does not specify the standalone day name then
        return value is the same as in **dayName** ().

        This function was introduced in Qt 4.5.

        **See also** **dayName** () and **standaloneMonthName** ().
        """
        ...

    def standaloneMonthName(
        self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#standaloneMonthName

        **QString QLocale::standaloneMonthName(int month , QLocale::FormatType
        type = LongFormat) const**

        Returns the localized name of **month** that is used as a standalone
        text, in the format specified by **type**.

        If the locale information doesn't specify the standalone month name then
        return value is the same as in **monthName** ().

        This function was introduced in Qt 4.5.

        **See also** **monthName** () and **standaloneDayName** ().
        """
        ...

    def swap(self, other: PySide2.QtCore.QLocale) -> None:
        """
        https://doc.qt.io/qt-5/qlocale.html#swap

        **void QLocale::swap(QLocale & other )**

        Swaps locale **other** with this locale. This operation is very fast and
        never fails.

        This function was introduced in Qt 5.6.
        """
        ...

    @staticmethod
    def system() -> PySide2.QtCore.QLocale:
        """
        https://doc.qt.io/qt-5/qlocale.html#system

        **[static] QLocale QLocale::system()**

        Returns a **QLocale**  object initialized to the system locale.

        On Windows and Mac, this locale will use the decimal/grouping characters
        and date/time formats specified in the system configuration panel.

        **See also** **c** ().
        """
        ...

    def textDirection(self) -> PySide2.QtCore.Qt.LayoutDirection:
        """
        https://doc.qt.io/qt-5/qlocale.html#textDirection

        **Qt::LayoutDirection QLocale::textDirection() const**

        Returns the text direction of the language.

        This function was introduced in Qt 4.7.
        """
        ...

    def timeFormat(self, format: PySide2.QtCore.QLocale.FormatType = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#timeFormat

        **QString QLocale::timeFormat(QLocale::FormatType format = LongFormat)
        const**

        Returns the time format used for the current locale.

        If **format** is **LongFormat** , the format will be elaborate,
        otherwise it will be short. For example, **LongFormat**  for the `en_US`
        locale is `h:mm:ss AP t`, **ShortFormat**  is `h:mm AP`.

        This function was introduced in Qt 4.1.

        **See also** **QTime::toString** () and **QTime::fromString** ().
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: float, symbol: str, precision: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString

        **QString QLocale::toCurrencyString(qlonglong value , const QString &
        symbol = QString()) const**

        Returns a localized string representation of **value** as a currency. If
        the **symbol** is provided it is used instead of the default currency
        symbol.

        This function was introduced in Qt 4.8.

        **See also** **currencySymbol** ().
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: float, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-1

        **QString QLocale::toCurrencyString(qulonglong value , const QString &
        symbol = QString()) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-2

        **QString QLocale::toCurrencyString(short value , const QString & symbol
        = QString()) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-3

        **QString QLocale::toCurrencyString(ushort value , const QString &
        symbol = QString()) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-4

        **QString QLocale::toCurrencyString(int value , const QString & symbol =
        QString()) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-5

        **QString QLocale::toCurrencyString(uint value , const QString & symbol
        = QString()) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-6

        **QString QLocale::toCurrencyString(double value , const QString &
        symbol = QString()) const**

        This is an overloaded function.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString-7

        **QString QLocale::toCurrencyString(double value , const QString &
        symbol , int precision ) const**

        This function overloads toCurrencyString().

        Returns a localized string representation of **value** as a currency. If
        the **symbol** is provided it is used instead of the default currency
        symbol. If the **precision** is provided it is used to set the precision
        of the currency value.

        This function was introduced in Qt 5.7.

        **See also** **currencySymbol** ().
        """
        ...

    @typing.overload
    def toCurrencyString(self, i: float, symbol: str, precision: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString

        **QString QLocale::toCurrencyString(qlonglong value , const QString &
        symbol = QString()) const**

        Returns a localized string representation of **value** as a currency. If
        the **symbol** is provided it is used instead of the default currency
        symbol.

        This function was introduced in Qt 4.8.

        **See also** **currencySymbol** ().
        """
        ...

    @typing.overload
    def toCurrencyString(self, i: float, symbol: str = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toCurrencyString

        **QString QLocale::toCurrencyString(qlonglong value , const QString &
        symbol = QString()) const**

        Returns a localized string representation of **value** as a currency. If
        the **symbol** is provided it is used instead of the default currency
        symbol.

        This function was introduced in Qt 4.8.

        **See also** **currencySymbol** ().
        """
        ...

    @typing.overload
    def toDate(
        self,
        string: str,
        format: PySide2.QtCore.QLocale.FormatType,
        cal: PySide2.QtCore.QCalendar,
    ) -> PySide2.QtCore.QDate:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDate

        **QDate QLocale::toDate(const QString & string , QLocale::FormatType
        format = LongFormat) const**

        Parses the date string given in **string** and returns the date. The
        format of the date string is chosen according to the **format**
        parameter (see **dateFormat** ()).

        If the date could not be parsed, returns an invalid date.

        This function was introduced in Qt 4.4.

        **See also** **dateFormat** (), **toTime** (), **toDateTime** (), and
        **QDate::fromString** ().
        """
        ...

    @typing.overload
    def toDate(
        self, string: str, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> PySide2.QtCore.QDate:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDate-1

        **QDate QLocale::toDate(const QString & string , const QString & format
        ) const**

        Parses the date string given in **string** and returns the date. See
        **QDate::fromString** () for information on the expressions that can be
        used with this function.

        This function searches month names and the names of the days of the week
        in the current locale.

        If the date could not be parsed, returns an invalid date.

        This function was introduced in Qt 4.4.

        **See also** **dateFormat** (), **toTime** (), **toDateTime** (), and
        **QDate::fromString** ().
        """
        ...

    @typing.overload
    def toDate(self, string: str, format: str) -> PySide2.QtCore.QDate:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDate-2

        **QDate QLocale::toDate(const QString & string , QLocale::FormatType
        format , QCalendar cal ) const**

        This is an overloaded function.

        This function was introduced in Qt 5.14.
        """
        ...

    @typing.overload
    def toDate(
        self, string: str, format: str, cal: PySide2.QtCore.QCalendar
    ) -> PySide2.QtCore.QDate:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDate-3

        **QDate QLocale::toDate(const QString & string , const QString & format
        , QCalendar cal ) const**

        This is an overloaded function.

        This function was introduced in Qt 5.14.
        """
        ...

    @typing.overload
    def toDateTime(
        self,
        string: str,
        format: PySide2.QtCore.QLocale.FormatType,
        cal: PySide2.QtCore.QCalendar,
    ) -> PySide2.QtCore.QDateTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDateTime

        **QDateTime QLocale::toDateTime(const QString & string ,
        QLocale::FormatType format = LongFormat) const**

        Parses the date/time string given in **string** and returns the time.
        The format of the date/time string is chosen according to the **format**
        parameter (see **dateTimeFormat** ()).

        If the string could not be parsed, returns an invalid **QDateTime** .

        This function was introduced in Qt 4.4.

        **See also** **dateTimeFormat** (), **toTime** (), **toDate** (), and
        **QDateTime::fromString** ().
        """
        ...

    @typing.overload
    def toDateTime(
        self, string: str, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> PySide2.QtCore.QDateTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDateTime-1

        **QDateTime QLocale::toDateTime(const QString & string , const QString &
        format ) const**

        Parses the date/time string given in **string** and returns the time.
        See **QDateTime::fromString** () for information on the expressions that
        can be used with this function.

        **Note:** The month and day names used must be given in the user's local
        language.

        If the string could not be parsed, returns an invalid **QDateTime** .

        This function was introduced in Qt 4.4.

        **See also** **dateTimeFormat** (), **toTime** (), **toDate** (), and
        **QDateTime::fromString** ().
        """
        ...

    @typing.overload
    def toDateTime(self, string: str, format: str) -> PySide2.QtCore.QDateTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDateTime-2

        **QDateTime QLocale::toDateTime(const QString & string ,
        QLocale::FormatType format , QCalendar cal ) const**

        This is an overloaded function.

        This function was introduced in Qt 5.14.
        """
        ...

    @typing.overload
    def toDateTime(
        self, string: str, format: str, cal: PySide2.QtCore.QCalendar
    ) -> PySide2.QtCore.QDateTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDateTime-3

        **QDateTime QLocale::toDateTime(const QString & string , const QString &
        format , QCalendar cal ) const**

        This is an overloaded function.

        This function was introduced in Qt 5.14.
        """
        ...

    def toDouble(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toDouble

        **double QLocale::toDouble(const QString & s , bool * ok = nullptr)
        const**

        Returns the double represented by the localized string **s**.

        Returns an infinity if the conversion overflows or 0.0 if the conversion
        fails for any other reason (e.g. underflow).

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function does not fall back to the \'C\' locale if the string cannot
        be interpreted in this locale.

        bool ok;
            double d;

            **QLocale**  c(**QLocale** ::C);
            d =
        c.toDouble("1234.56", &ok);  // ok == true,  d == 1234.56
            d =
        c.toDouble("1,234.56", &ok); // ok == true,  d == 1234.56
            d =
        c.toDouble("1234,56", &ok);  // ok == false, d == 0

            **QLocale**
        german(**QLocale** ::German);
            d = german.toDouble("1234,56", &ok);
        // ok == true,  d == 1234.56
            d = german.toDouble("1.234,56", &ok);
        // ok == true,  d == 1234.56
            d = german.toDouble("1234.56", &ok);
        // ok == false, d == 0

            d = german.toDouble("1.234", &ok);    //
        ok == true,  d == 1234.0

        Notice that the last conversion returns 1234.0, because \'.\' is the
        thousands group separator in the German locale.

        This function ignores leading and trailing whitespace.

        **See also** **toFloat** (), **toInt** (), and **toString** ().
        """
        ...

    def toFloat(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toFloat

        **float QLocale::toFloat(const QString & s , bool * ok = nullptr)
        const**

        Returns the float represented by the localized string **s**.

        Returns an infinity if the conversion overflows or 0.0 if the conversion
        fails for any other reason (e.g. underflow).

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function does not fall back to the 'C' locale if the string cannot
        be interpreted in this locale.

        This function ignores leading and trailing whitespace.

        **See also** **toDouble** (), **toInt** (), and **toString** ().
        """
        ...

    def toInt(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toInt

        **int QLocale::toInt(const QString & s , bool * ok = nullptr) const**

        Returns the int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        **See also** **toUInt** () and **toString** ().
        """
        ...

    @typing.overload
    def toLong(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toLong

        **long QLocale::toLong(const QString & s , bool * ok = nullptr) const**

        Returns the long int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        This function was introduced in Qt 5.13.

        **See also** **toInt** (), **toULong** (), **toDouble** (), and
        **toString** ().
        """
        ...

    @typing.overload
    def toLong(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toLong-1

        **long QLocale::toLong(const QStringRef & s , bool * ok = nullptr)
        const**

        Returns the long int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        This function was introduced in Qt 5.13.

        **See also** **toInt** (), **toULong** (), **toDouble** (), and
        **toString** ().
        """
        ...

    def toLongLong(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toLongLong

        **qlonglong QLocale::toLongLong(const QString & s , bool * ok = nullptr)
        const**

        Returns the long long int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        **See also** **toInt** (), **toULongLong** (), **toDouble** (), and
        **toString** ().
        """
        ...

    def toLower(self, str: str) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toLower

        **QString QLocale::toLower(const QString & str ) const**

        Returns a lowercase copy of **str**.

        If Qt Core is using the ICU libraries, they will be used to perform the
        transformation according to the rules of the current locale. Otherwise
        the conversion may be done in a platform-dependent manner, with
        **QString::toLower** () as a generic fallback.

        This function was introduced in Qt 4.8.

        **See also** **QString::toLower** ().
        """
        ...

    def toShort(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toShort

        **short QLocale::toShort(const QString & s , bool * ok = nullptr)
        const**

        Returns the short int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        **See also** **toUShort** () and **toString** ().
        """
        ...

    @typing.overload
    def toString(
        self,
        date: PySide2.QtCore.QDate,
        format: PySide2.QtCore.QLocale.FormatType,
        cal: PySide2.QtCore.QCalendar,
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString

        **QString QLocale::toString(qlonglong i ) const**

        Returns a localized string representation of **i**.

        **See also** **toLongLong** (), **numberOptions** (), **zeroDigit** (),
        and **positiveSign** ().
        """
        ...

    @typing.overload
    def toString(
        self,
        date: PySide2.QtCore.QDate,
        format: PySide2.QtCore.QLocale.FormatType = ...,
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-1

        **QString QLocale::toString(qulonglong i ) const**

        This is an overloaded function.

        **See also** **toULongLong** (), **numberOptions** (), **zeroDigit** (),
        and **positiveSign** ().
        """
        ...

    @typing.overload
    def toString(self, date: PySide2.QtCore.QDate, formatStr: str) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-2

        **QString QLocale::toString(long i ) const**

        This is an overloaded function.

        **See also** **toLong** ().
        """
        ...

    @typing.overload
    def toString(
        self,
        dateTime: PySide2.QtCore.QDateTime,
        format: PySide2.QtCore.QLocale.FormatType,
        cal: PySide2.QtCore.QCalendar,
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-3

        **QString QLocale::toString(ulong i ) const**

        This is an overloaded function.

        **See also** **toULong** ().
        """
        ...

    @typing.overload
    def toString(
        self,
        dateTime: PySide2.QtCore.QDateTime,
        format: PySide2.QtCore.QLocale.FormatType = ...,
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-4

        **QString QLocale::toString(short i ) const**

        This is an overloaded function.

        **See also** **toShort** ().
        """
        ...

    @typing.overload
    def toString(self, dateTime: PySide2.QtCore.QDateTime, format: str) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-5

        **QString QLocale::toString(ushort i ) const**

        This is an overloaded function.

        **See also** **toUShort** ().
        """
        ...

    @typing.overload
    def toString(self, i: float, f: int = ..., prec: int = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-6

        **QString QLocale::toString(int i ) const**

        This is an overloaded function.

        **See also** **toInt** ().
        """
        ...

    @typing.overload
    def toString(self, i: float, f: int = ..., prec: int = ...) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-7

        **QString QLocale::toString(uint i ) const**

        This is an overloaded function.

        **See also** **toUInt** ().
        """
        ...

    @typing.overload
    def toString(self, i: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-8

        **QString QLocale::toString(double i , char f = 'g', int prec = 6)
        const**

        This is an overloaded function.

        **f** and **prec** have the same meaning as in **QString::number**
        (double, char, int).

        **See also** **toDouble** (), **numberOptions** (), **exponential** (),
        **decimalPoint** (), **zeroDigit** (), **positiveSign** (), and
        **percent** ().
        """
        ...

    @typing.overload
    def toString(self, i: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-9

        **QString QLocale::toString(float i , char f = 'g', int prec = 6)
        const**

        This is an overloaded function.

        **f** and **prec** have the same meaning as in **QString::number**
        (double, char, int).

        **See also** **toDouble** ().
        """
        ...

    @typing.overload
    def toString(self, i: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString-10

        **QString QLocale::toString(const QDate & date , const QString & format
        ) const**

        Returns a localized string representation of the given **date** in the
        specified **format**. If **format** is an empty string, an empty string
        is returned.

        **See also** **QDate::toString** ().
        """
        ...

    @typing.overload
    def toString(self, i: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString

        **QString QLocale::toString(qlonglong i ) const**

        Returns a localized string representation of **i**.

        **See also** **toLongLong** (), **numberOptions** (), **zeroDigit** (),
        and **positiveSign** ().
        """
        ...

    @typing.overload
    def toString(self, i: int) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString

        **QString QLocale::toString(qlonglong i ) const**

        Returns a localized string representation of **i**.

        **See also** **toLongLong** (), **numberOptions** (), **zeroDigit** (),
        and **positiveSign** ().
        """
        ...

    @typing.overload
    def toString(
        self,
        time: PySide2.QtCore.QTime,
        format: PySide2.QtCore.QLocale.FormatType = ...,
    ) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString

        **QString QLocale::toString(qlonglong i ) const**

        Returns a localized string representation of **i**.

        **See also** **toLongLong** (), **numberOptions** (), **zeroDigit** (),
        and **positiveSign** ().
        """
        ...

    @typing.overload
    def toString(self, time: PySide2.QtCore.QTime, formatStr: str) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toString

        **QString QLocale::toString(qlonglong i ) const**

        Returns a localized string representation of **i**.

        **See also** **toLongLong** (), **numberOptions** (), **zeroDigit** (),
        and **positiveSign** ().
        """
        ...

    @typing.overload
    def toTime(
        self,
        string: str,
        format: PySide2.QtCore.QLocale.FormatType,
        cal: PySide2.QtCore.QCalendar,
    ) -> PySide2.QtCore.QTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toTime

        **QTime QLocale::toTime(const QString & string , QLocale::FormatType
        format = LongFormat) const**

        Parses the time string given in **string** and returns the time. The
        format of the time string is chosen according to the **format**
        parameter (see **timeFormat** ()).

        If the time could not be parsed, returns an invalid time.

        This function was introduced in Qt 4.4.

        **See also** **timeFormat** (), **toDate** (), **toDateTime** (), and
        **QTime::fromString** ().
        """
        ...

    @typing.overload
    def toTime(
        self, string: str, format: PySide2.QtCore.QLocale.FormatType = ...
    ) -> PySide2.QtCore.QTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toTime-1

        **QTime QLocale::toTime(const QString & string , const QString & format
        ) const**

        Parses the time string given in **string** and returns the time. See
        **QTime::fromString** () for information on what is a valid format
        string.

        If the time could not be parsed, returns an invalid time.

        This function was introduced in Qt 4.4.

        **See also** **timeFormat** (), **toDate** (), **toDateTime** (), and
        **QTime::fromString** ().
        """
        ...

    @typing.overload
    def toTime(self, string: str, format: str) -> PySide2.QtCore.QTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toTime

        **QTime QLocale::toTime(const QString & string , QLocale::FormatType
        format = LongFormat) const**

        Parses the time string given in **string** and returns the time. The
        format of the time string is chosen according to the **format**
        parameter (see **timeFormat** ()).

        If the time could not be parsed, returns an invalid time.

        This function was introduced in Qt 4.4.

        **See also** **timeFormat** (), **toDate** (), **toDateTime** (), and
        **QTime::fromString** ().
        """
        ...

    @typing.overload
    def toTime(
        self, string: str, format: str, cal: PySide2.QtCore.QCalendar
    ) -> PySide2.QtCore.QTime:
        """
        https://doc.qt.io/qt-5/qlocale.html#toTime

        **QTime QLocale::toTime(const QString & string , QLocale::FormatType
        format = LongFormat) const**

        Parses the time string given in **string** and returns the time. The
        format of the time string is chosen according to the **format**
        parameter (see **timeFormat** ()).

        If the time could not be parsed, returns an invalid time.

        This function was introduced in Qt 4.4.

        **See also** **timeFormat** (), **toDate** (), **toDateTime** (), and
        **QTime::fromString** ().
        """
        ...

    def toUInt(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toUInt

        **uint QLocale::toUInt(const QString & s , bool * ok = nullptr) const**

        Returns the unsigned int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        **See also** **toInt** () and **toString** ().
        """
        ...

    @typing.overload
    def toULong(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toULong

        **ulong QLocale::toULong(const QString & s , bool * ok = nullptr)
        const**

        Returns the unsigned long int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        This function was introduced in Qt 5.13.

        **See also** **toLong** (), **toInt** (), **toDouble** (), and
        **toString** ().
        """
        ...

    @typing.overload
    def toULong(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toULong-1

        **ulong QLocale::toULong(const QStringRef & s , bool * ok = nullptr)
        const**

        Returns the unsigned long int represented by the localized string **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        This function was introduced in Qt 5.13.

        **See also** **toLong** (), **toInt** (), **toDouble** (), and
        **toString** ().
        """
        ...

    def toULongLong(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toULongLong

        **qulonglong QLocale::toULongLong(const QString & s , bool * ok =
        nullptr) const**

        Returns the unsigned long long int represented by the localized string
        **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        **See also** **toLongLong** (), **toInt** (), **toDouble** (), and
        **toString** ().
        """
        ...

    def toUShort(self, s: str) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qlocale.html#toUShort

        **ushort QLocale::toUShort(const QString & s , bool * ok = nullptr)
        const**

        Returns the unsigned short int represented by the localized string
        **s**.

        If the conversion fails the function returns 0.

        If **ok** is not `nullptr`, failure is reported by setting * **ok** to
        `false`, and success by setting * **ok** to `true`.

        This function ignores leading and trailing whitespace.

        **See also** **toShort** () and **toString** ().
        """
        ...

    def toUpper(self, str: str) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#toUpper

        **QString QLocale::toUpper(const QString & str ) const**

        Returns an uppercase copy of **str**.

        If Qt Core is using the ICU libraries, they will be used to perform the
        transformation according to the rules of the current locale. Otherwise
        the conversion may be done in a platform-dependent manner, with
        **QString::toUpper** () as a generic fallback.

        This function was introduced in Qt 4.8.

        **See also** **QString::toUpper** ().
        """
        ...

    def uiLanguages(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qlocale.html#uiLanguages

        **QStringList QLocale::uiLanguages() const**

        Returns an ordered list of locale names for translation purposes in
        preference order (like "en-Latn-US", "en-US", "en").

        The return value represents locale names that the user expects to see
        the UI translation in.

        Most like you do not need to use this function directly, but just pass
        the **QLocale**  object to the **QTranslator::load** () function.

        The first item in the list is the most preferred one.

        This function was introduced in Qt 4.8.

        **See also** **QTranslator**  and **bcp47Name** ().
        """
        ...

    def weekdays(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qlocale.html#weekdays

        **QList<Qt::DayOfWeek> QLocale::weekdays() const**

        Returns a list of days that are considered weekdays according to the
        current locale.

        This function was introduced in Qt 4.8.
        """
        ...

    def zeroDigit(self) -> str:
        """
        https://doc.qt.io/qt-5/qlocale.html#zeroDigit

        **QChar QLocale::zeroDigit() const**

        Returns the zero digit character of this locale.

        **Note:** This function shall change to return a **QString**  instead of
        **QChar**  in Qt6. Callers are encouraged to exploit the **QString**
        (**QChar** ) constructor to convert early in preparation for this.

        This function was introduced in Qt 4.1.

        **See also** **toString** ().
        """
        ...
