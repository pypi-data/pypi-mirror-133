"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtOpenGL

bytes = str


class QGLBuffer(object):
    """
    https://doc.qt.io/qt-5/qglbuffer.html

    **Detailed Description**

    Buffer objects are created in the GL server so that the client application
    can avoid uploading vertices, indices, texture image data, etc every time
    they are needed.

    QGLBuffer objects can be copied around as a reference to the underlying GL
    buffer object:

    **QGLBuffer**  buffer1(**QGLBuffer** ::IndexBuffer);
    buffer1.create();

            **QGLBuffer**  buffer2 = buffer1;

    QGLBuffer performs a shallow copy when objects are copied in this manner,
    but does not implement copy-on-write semantics. The original object will be
    affected whenever the copy is modified.

    **Note:** This class has been deprecated in favor of **QOpenGLBuffer** .
    """

    VertexBuffer: QGLBuffer = ...
    IndexBuffer: QGLBuffer = ...
    ReadOnly: QGLBuffer = ...
    WriteOnly: QGLBuffer = ...
    ReadWrite: QGLBuffer = ...
    StreamDraw: QGLBuffer = ...
    StreamRead: QGLBuffer = ...
    StreamCopy: QGLBuffer = ...
    StaticDraw: QGLBuffer = ...
    StaticRead: QGLBuffer = ...
    StaticCopy: QGLBuffer = ...
    DynamicDraw: QGLBuffer = ...
    DynamicRead: QGLBuffer = ...
    DynamicCopy: QGLBuffer = ...
    PixelPackBuffer: QGLBuffer = ...
    PixelUnpackBuffer: QGLBuffer = ...

    class Access(object):
        ReadOnly: QGLBuffer.Access = ...
        WriteOnly: QGLBuffer.Access = ...
        ReadWrite: QGLBuffer.Access = ...

    class Type(object):
        VertexBuffer: QGLBuffer.Type = ...
        IndexBuffer: QGLBuffer.Type = ...
        PixelPackBuffer: QGLBuffer.Type = ...
        PixelUnpackBuffer: QGLBuffer.Type = ...

    class UsagePattern(object):
        StreamDraw: QGLBuffer.UsagePattern = ...
        StreamRead: QGLBuffer.UsagePattern = ...
        StreamCopy: QGLBuffer.UsagePattern = ...
        StaticDraw: QGLBuffer.UsagePattern = ...
        StaticRead: QGLBuffer.UsagePattern = ...
        StaticCopy: QGLBuffer.UsagePattern = ...
        DynamicDraw: QGLBuffer.UsagePattern = ...
        DynamicRead: QGLBuffer.UsagePattern = ...
        DynamicCopy: QGLBuffer.UsagePattern = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#QGLBuffer

        **QGLBuffer::QGLBuffer()**

        Constructs a new buffer object of type **QGLBuffer::VertexBuffer** .

        Note: this constructor just creates the QGLBuffer instance. The actual
        buffer object in the GL server is not created until **create** () is
        called.

        **See also** **create** ().
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtOpenGL.QGLBuffer) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#QGLBuffer-1

        **QGLBuffer::QGLBuffer(QGLBuffer::Type type )**

        Constructs a new buffer object of **type**.

        Note: this constructor just creates the QGLBuffer instance. The actual
        buffer object in the GL server is not created until **create** () is
        called.

        **See also** **create** ().
        """
        ...

    @typing.overload
    def __init__(self, type: PySide2.QtOpenGL.QGLBuffer.Type) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#QGLBuffer-2

        **QGLBuffer::QGLBuffer(const QGLBuffer & other )**

        Constructs a shallow copy of **other**.

        Note: QGLBuffer does not implement copy-on-write semantics, so **other**
        will be affected whenever the copy is modified.
        """
        ...

    @typing.overload
    def allocate(self, count: int) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#allocate

        **void QGLBuffer::allocate(const void * data , int count )**

        Allocates **count** bytes of space to the buffer, initialized to the
        contents of **data**. Any previous contents will be removed.

        It is assumed that **create** () has been called on this buffer and that
        it has been bound to the current context.

        **See also** **create** (), **read** (), and **write** ().
        """
        ...

    @typing.overload
    def allocate(self, data: int, count: int = ...) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#allocate-1

        **void QGLBuffer::allocate(int count )**

        This is an overloaded function.

        Allocates **count** bytes of space to the buffer. Any previous contents
        will be removed.

        It is assumed that **create** () has been called on this buffer and that
        it has been bound to the current context.

        **See also** **create** () and **write** ().
        """
        ...

    def bind(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#bind

        **bool QGLBuffer::bind()**

        Binds the buffer associated with this object to the current GL context.
        Returns `false` if binding was not possible, usually because **type** ()
        is not supported on this GL implementation.

        The buffer must be bound to the same QGLContext current when **create**
        () was called, or to another QGLContext that is sharing with it.
        Otherwise, false will be returned from this function.

        **See also** **release** () and **create** ().
        """
        ...

    def bufferId(self) -> int:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#bufferId

        **GLuint QGLBuffer::bufferId() const**

        Returns the GL identifier associated with this buffer; zero if the
        buffer has not been created.

        **See also** **isCreated** ().
        """
        ...

    def create(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#create

        **bool QGLBuffer::create()**

        Creates the buffer object in the GL server. Returns `true` if the object
        was created; false otherwise.

        This function must be called with a current QGLContext. The buffer will
        be bound to and can only be used in that context (or any other context
        that is shared with it).

        This function will return false if the GL implementation does not
        support buffers, or there is no current QGLContext.

        **See also** **isCreated** (), **allocate** (), **write** (), and
        **destroy** ().
        """
        ...

    def destroy(self) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#destroy

        **void QGLBuffer::destroy()**

        Destroys this buffer object, including the storage being used in the GL
        server. All references to the buffer will become invalid.
        """
        ...

    def isCreated(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#isCreated

        **bool QGLBuffer::isCreated() const**

        Returns `true` if this buffer has been created; false otherwise.

        **See also** **create** () and **destroy** ().
        """
        ...

    def map(self, access: PySide2.QtOpenGL.QGLBuffer.Access) -> int:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#map

        **void *QGLBuffer::map(QGLBuffer::Access access )**

        Maps the contents of this buffer into the application's memory space and
        returns a pointer to it. Returns null if memory mapping is not possible.
        The **access** parameter indicates the type of access to be performed.

        It is assumed that **create** () has been called on this buffer and that
        it has been bound to the current context.

        This function is only supported under OpenGL/ES if the
        `GL_OES_mapbuffer` extension is present.

        **See also** **unmap** (), **create** (), and **bind** ().
        """
        ...

    def read(self, offset: int, data: int, count: int) -> bool:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#read

        **bool QGLBuffer::read(int offset , void * data , int count )**

        Reads the **count** bytes in this buffer starting at **offset** into
        **data**. Returns `true` on success; false if reading from the buffer is
        not supported. Buffer reading is not supported under OpenGL/ES.

        It is assumed that this buffer has been bound to the current context.

        **See also** **write** () and **bind** ().
        """
        ...

    @typing.overload
    def release(self) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#release

        **void QGLBuffer::release()**

        Releases the buffer associated with this object from the current GL
        context.

        This function must be called with the same QGLContext current as when
        **bind** () was called on the buffer.

        **See also** **bind** ().
        """
        ...

    @typing.overload
    @staticmethod
    def release(type: PySide2.QtOpenGL.QGLBuffer.Type) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#release-1

        **[static] void QGLBuffer::release(QGLBuffer::Type type )**

        Releases the buffer associated with **type** in the current QGLContext.

        This function is a direct call to `glBindBuffer(type, 0)` for use when
        the caller does not know which **QGLBuffer**  has been bound to the
        context but wants to make sure that it is released.

        **QGLBuffer** ::release(**QGLBuffer** ::VertexBuffer);
        """
        ...

    def setUsagePattern(self, value: PySide2.QtOpenGL.QGLBuffer.UsagePattern) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#setUsagePattern

        **void QGLBuffer::setUsagePattern(QGLBuffer::UsagePattern value )**

        Sets the usage pattern for this buffer object to **value**. This
        function must be called before **allocate** () or **write** ().

        **See also** **usagePattern** (), **allocate** (), and **write** ().
        """
        ...

    def size(self) -> int:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#size

        **int QGLBuffer::size() const**

        Returns the size of the data in this buffer, for reading operations.
        Returns -1 if fetching the buffer size is not supported, or the buffer
        has not been created.

        It is assumed that this buffer has been bound to the current context.

        **See also** **isCreated** () and **bind** ().
        """
        ...

    def type(self) -> PySide2.QtOpenGL.QGLBuffer.Type:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#type

        **QGLBuffer::Type QGLBuffer::type() const**

        Returns the type of buffer represented by this object.
        """
        ...

    def unmap(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#unmap

        **bool QGLBuffer::unmap()**

        Unmaps the buffer after it was mapped into the application's memory
        space with a previous call to **map** (). Returns `true` if the unmap
        succeeded; false otherwise.

        It is assumed that this buffer has been bound to the current context,
        and that it was previously mapped with **map** ().

        This function is only supported under OpenGL/ES if the
        `GL_OES_mapbuffer` extension is present.

        **See also** **map** ().
        """
        ...

    def usagePattern(self) -> PySide2.QtOpenGL.QGLBuffer.UsagePattern:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#usagePattern

        **QGLBuffer::UsagePattern QGLBuffer::usagePattern() const**

        Returns the usage pattern for this buffer object. The default value is
        **StaticDraw** .

        **See also** **setUsagePattern** ().
        """
        ...

    def write(self, offset: int, data: int, count: int = ...) -> None:
        """
        https://doc.qt.io/qt-5/qglbuffer.html#write

        **void QGLBuffer::write(int offset , const void * data , int count )**

        Replaces the **count** bytes of this buffer starting at **offset** with
        the contents of **data**. Any other bytes in the buffer will be left
        unmodified.

        It is assumed that **create** () has been called on this buffer and that
        it has been bound to the current context.

        **See also** **create** (), **read** (), and **allocate** ().
        """
        ...
