"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtConcurrent, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtConcurrent

bytes = str


class QFutureQString(object):
    @typing.overload
    def __init__(self) -> None:
        ...

    @typing.overload
    def __init__(self, QFutureQString: PySide2.QtConcurrent.QFutureQString) -> None:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def cancel(self) -> None:
        ...

    def isCanceled(self) -> bool:
        ...

    def isFinished(self) -> bool:
        ...

    def isPaused(self) -> bool:
        ...

    def isResultReadyAt(self, resultIndex: int) -> bool:
        ...

    def isRunning(self) -> bool:
        ...

    def isStarted(self) -> bool:
        ...

    def pause(self) -> None:
        ...

    def progressMaximum(self) -> int:
        ...

    def progressMinimum(self) -> int:
        ...

    def progressText(self) -> str:
        ...

    def progressValue(self) -> int:
        ...

    def result(self) -> str:
        ...

    def resultAt(self, index: int) -> str:
        ...

    def resultCount(self) -> int:
        ...

    def results(self) -> typing.List:
        ...

    def resume(self) -> None:
        ...

    def setPaused(self, paused: bool) -> None:
        ...

    def togglePaused(self) -> None:
        ...

    def waitForFinished(self) -> None:
        ...
