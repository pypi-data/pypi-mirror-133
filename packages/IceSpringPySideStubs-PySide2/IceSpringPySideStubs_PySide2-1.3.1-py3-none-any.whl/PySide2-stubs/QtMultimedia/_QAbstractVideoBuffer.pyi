"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtMultimedia, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QAbstractVideoBuffer(object):
    """
    https://doc.qt.io/qt-5/qabstractvideobuffer.html

    **Detailed Description**

    The **QVideoFrame**  class makes use of a QAbstractVideoBuffer internally to
    reference a buffer of video data. Quite often video data buffers may reside
    in video memory rather than system memory, and this class provides an
    abstraction of the location.

    In addition, creating a subclass of QAbstractVideoBuffer will allow you to
    construct video frames from preallocated or static buffers, in cases where
    the **QVideoFrame**  constructors taking a **QByteArray**  or a **QImage**
    do not suffice. This may be necessary when implementing a new hardware
    accelerated video system, for example.

    The contents of a buffer can be accessed by mapping the buffer to memory
    using the **map** () function, which returns a pointer to memory containing
    the contents of the video buffer. The memory returned by **map** () is
    released by calling the **unmap** () function.

    The **handle** () of a buffer may also be used to manipulate its contents
    using type specific APIs. The type of a buffer's handle is given by the
    **handleType** () function.

    **See also** **QVideoFrame** .
    """

    NoHandle: QAbstractVideoBuffer = ...
    NotMapped: QAbstractVideoBuffer = ...
    GLTextureHandle: QAbstractVideoBuffer = ...
    ReadOnly: QAbstractVideoBuffer = ...
    WriteOnly: QAbstractVideoBuffer = ...
    XvShmImageHandle: QAbstractVideoBuffer = ...
    CoreImageHandle: QAbstractVideoBuffer = ...
    ReadWrite: QAbstractVideoBuffer = ...
    QPixmapHandle: QAbstractVideoBuffer = ...
    EGLImageHandle: QAbstractVideoBuffer = ...
    UserHandle: QAbstractVideoBuffer = ...

    class HandleType(object):
        NoHandle: QAbstractVideoBuffer.HandleType = ...
        GLTextureHandle: QAbstractVideoBuffer.HandleType = ...
        XvShmImageHandle: QAbstractVideoBuffer.HandleType = ...
        CoreImageHandle: QAbstractVideoBuffer.HandleType = ...
        QPixmapHandle: QAbstractVideoBuffer.HandleType = ...
        EGLImageHandle: QAbstractVideoBuffer.HandleType = ...
        UserHandle: QAbstractVideoBuffer.HandleType = ...

    class MapMode(object):
        NotMapped: QAbstractVideoBuffer.MapMode = ...
        ReadOnly: QAbstractVideoBuffer.MapMode = ...
        WriteOnly: QAbstractVideoBuffer.MapMode = ...
        ReadWrite: QAbstractVideoBuffer.MapMode = ...

    def __init__(
        self, type: PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType
    ) -> None:
        """
        https://doc.qt.io/qt-5/qabstractvideobuffer.html#QAbstractVideoBuffer

        **QAbstractVideoBuffer::QAbstractVideoBuffer(QAbstractVideoBuffer::Handl
        eType type )**

        Constructs an abstract video buffer of the given **type**.
        """
        ...

    def handle(self) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qabstractvideobuffer.html#handle

        **[virtual] QVariant QAbstractVideoBuffer::handle() const**

        Returns a type specific handle to the data buffer.

        The type of the handle is given by **handleType** () function.

        **See also** **handleType** ().
        """
        ...

    def handleType(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType:
        """
        https://doc.qt.io/qt-5/qabstractvideobuffer.html#handleType

        **QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType()
        const**

        Returns the type of a video buffer's handle.

        **See also** **handle** ().
        """
        ...

    def mapMode(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.MapMode:
        """
        https://doc.qt.io/qt-5/qabstractvideobuffer.html#mapMode

        **[pure virtual] QAbstractVideoBuffer::MapMode
        QAbstractVideoBuffer::mapMode() const**

        Returns the mode a video buffer is mapped in.

        **See also** **map** ().
        """
        ...

    def release(self) -> None:
        """
        https://doc.qt.io/qt-5/qabstractvideobuffer.html#release

        **[virtual] void QAbstractVideoBuffer::release()**

        Releases the video buffer.

        **QVideoFrame**  calls QAbstractVideoBuffer::release when the buffer is
        not used any more and can be destroyed or returned to the buffer pool.

        The default implementation deletes the buffer instance.
        """
        ...

    def unmap(self) -> None:
        """
        https://doc.qt.io/qt-5/qabstractvideobuffer.html#unmap

        **[pure virtual] void QAbstractVideoBuffer::unmap()**

        Releases the memory mapped by the **map** () function.

        If the **MapMode**  included the `QAbstractVideoBuffer::WriteOnly` flag
        this will write the current content of the mapped memory back to the
        video frame.

        **See also** **map** ().
        """
        ...
