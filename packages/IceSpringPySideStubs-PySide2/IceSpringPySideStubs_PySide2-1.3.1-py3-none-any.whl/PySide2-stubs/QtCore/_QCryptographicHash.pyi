"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtCore, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore

bytes = str


class QCryptographicHash(object):
    """
    https://doc.qt.io/qt-5/qcryptographichash.html

    **Detailed Description**

    QCryptographicHash can be used to generate cryptographic hashes of binary or
    text data.

    Refer to the documentation of the **QCryptographicHash::Algorithm**  enum
    for a list of the supported algorithms.
    """

    Md4: QCryptographicHash = ...
    Md5: QCryptographicHash = ...
    Sha1: QCryptographicHash = ...
    Sha224: QCryptographicHash = ...
    Sha256: QCryptographicHash = ...
    Sha384: QCryptographicHash = ...
    Sha512: QCryptographicHash = ...
    Keccak_224: QCryptographicHash = ...
    Keccak_256: QCryptographicHash = ...
    Keccak_384: QCryptographicHash = ...
    Keccak_512: QCryptographicHash = ...
    RealSha3_224: QCryptographicHash = ...
    Sha3_224: QCryptographicHash = ...
    RealSha3_256: QCryptographicHash = ...
    Sha3_256: QCryptographicHash = ...
    RealSha3_384: QCryptographicHash = ...
    Sha3_384: QCryptographicHash = ...
    RealSha3_512: QCryptographicHash = ...
    Sha3_512: QCryptographicHash = ...

    class Algorithm(object):
        Md4: QCryptographicHash.Algorithm = ...
        Md5: QCryptographicHash.Algorithm = ...
        Sha1: QCryptographicHash.Algorithm = ...
        Sha224: QCryptographicHash.Algorithm = ...
        Sha256: QCryptographicHash.Algorithm = ...
        Sha384: QCryptographicHash.Algorithm = ...
        Sha512: QCryptographicHash.Algorithm = ...
        Keccak_224: QCryptographicHash.Algorithm = ...
        Keccak_256: QCryptographicHash.Algorithm = ...
        Keccak_384: QCryptographicHash.Algorithm = ...
        Keccak_512: QCryptographicHash.Algorithm = ...
        RealSha3_224: QCryptographicHash.Algorithm = ...
        Sha3_224: QCryptographicHash.Algorithm = ...
        RealSha3_256: QCryptographicHash.Algorithm = ...
        Sha3_256: QCryptographicHash.Algorithm = ...
        RealSha3_384: QCryptographicHash.Algorithm = ...
        Sha3_384: QCryptographicHash.Algorithm = ...
        RealSha3_512: QCryptographicHash.Algorithm = ...
        Sha3_512: QCryptographicHash.Algorithm = ...

    def __init__(self, method: PySide2.QtCore.QCryptographicHash.Algorithm) -> None:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#QCryptographicHash

        **QCryptographicHash::QCryptographicHash(QCryptographicHash::Algorithm
        method )**

        Constructs an object that can be used to create a cryptographic hash
        from data using **method**.
        """
        ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray) -> None:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#addData

        **void QCryptographicHash::addData(const char * data , int length )**

        Adds the first **length** chars of **data** to the cryptographic hash.
        """
        ...

    @typing.overload
    def addData(self, data: bytes, length: int) -> None:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#addData-1

        **void QCryptographicHash::addData(const QByteArray & data )**

        This function overloads addData().
        """
        ...

    @typing.overload
    def addData(self, device: PySide2.QtCore.QIODevice) -> bool:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#addData-2

        **bool QCryptographicHash::addData(QIODevice * device )**

        Reads the data from the open **QIODevice**  **device** until it ends and
        hashes it. Returns `true` if reading was successful.

        This function was introduced in Qt 5.0.
        """
        ...

    @staticmethod
    def hash(
        data: PySide2.QtCore.QByteArray,
        method: PySide2.QtCore.QCryptographicHash.Algorithm,
    ) -> PySide2.QtCore.QByteArray:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#hash

        **[static] QByteArray QCryptographicHash::hash(const QByteArray & data ,
        QCryptographicHash::Algorithm method )**

        Returns the hash of **data** using **method**.
        """
        ...

    @staticmethod
    def hashLength(method: PySide2.QtCore.QCryptographicHash.Algorithm) -> int:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#hashLength

        **[static] int
        QCryptographicHash::hashLength(QCryptographicHash::Algorithm method )**

        Returns the size of the output of the selected hash **method** in bytes.

        This function was introduced in Qt 5.12.
        """
        ...

    def reset(self) -> None:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#reset

        **void QCryptographicHash::reset()**

        Resets the object.
        """
        ...

    def result(self) -> PySide2.QtCore.QByteArray:
        """
        https://doc.qt.io/qt-5/qcryptographichash.html#result

        **QByteArray QCryptographicHash::result() const**

        Returns the final hash value.

        **See also** **QByteArray::toHex** ().
        """
        ...
