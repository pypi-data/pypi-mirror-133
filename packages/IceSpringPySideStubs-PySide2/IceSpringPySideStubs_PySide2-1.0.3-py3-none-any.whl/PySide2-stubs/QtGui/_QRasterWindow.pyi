"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QRasterWindow(PySide2.QtGui.QPaintDeviceWindow):
    """
    https://doc.qt.io/qt-5/qrasterwindow.html

    **Detailed Description**

    QRasterWindow is a **QWindow**  with a raster-based, non-OpenGL surface. On top of the functionality offered by **QWindow** , QRasterWindow adds a virtual **paintEvent** () function and the possibility to open a **QPainter**  on itself. The underlying paint engine will be the raster one, meaning that all drawing will happen on the CPU. For performing accelerated, OpenGL-based drawing, use **QOpenGLWindow**  instead.

    Internally the class is thin wrapper for **QWindow**  and **QBackingStore**  and is very similar to the **Raster Window Example**  that uses these classes directly.

    **See also** **QPaintDeviceWindow::paintEvent** () and **QPaintDeviceWindow::update** ().
    """

    def __init__(self, parent: typing.Optional[PySide2.QtGui.QWindow] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qrasterwindow.html#QRasterWindow

        **QRasterWindow::QRasterWindow(QWindow * parent = nullptr)**

        Constructs a new QRasterWindow with **parent**.
        """
        ...

    def metric(self, metric: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int:
        ...

    def redirected(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice:
        ...
