"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning
import PySide2.QtLocation

bytes = str


class QPlaceAttribute(object):
    """
    https://doc.qt.io/qt-5/qplaceattribute.html

    **Detailed Description**

    A QPlaceAttribute instance stores an additional piece of information about a place that is not otherwise exposed through the **QPlace**  class. A QPlaceAttribute encapsulates a localized label which describes the attribute and rich text string representing the attribute's value. Generally, both are intended to be displayed to the end-user as is.

    Some plugins may not support attributes at all, others may only support a certain set, others still may support a dynamically changing set of attributes over time or even allow attributes to be arbitrarily defined by the client application. The attributes could also vary on a place by place basis, for example one place may have opening hours while another does not. Consult the **plugin references**  for details.

    **Attribute Types**

    The QPlaceAttribute class defines some constant strings which characterize standard **attribute types**.

    * **QPlaceAttribute::OpeningHours**
      * **QPlaceAttribute::Payment**
      * **QPlaceAttribute::Provider**

    There is a class of attribute types of the format x_id_<provider> for example x_id_here. This class of attributes is a set of alternative identifiers of the place, from the specified provider's perspective.

    The above types are used to access and modify attributes in **QPlace**  via:

    * **QPlace::extendedAttribute** ()
      * **QPlace::setExtendedAttribute** ()
      * **QPlace::removeExtendedAttribute** ()
      * **QPlace::removeExtendedAttribute** ()

    The **attribute type** is a string type so that providers are able to introduce new attributes as necessary. Custom attribute types should always be prefixed by a qualifier in order to avoid conflicts.

    **User Readable and Non-User Readable Attributes**

    Some attributes may not be intended to be readable by end users, the label field of such attributes are empty to indicate this fact.
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#QPlaceAttribute

        **QPlaceAttribute::QPlaceAttribute()**

        Constructs an attribute.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtLocation.QPlaceAttribute) -> None:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#QPlaceAttribute

        **QPlaceAttribute::QPlaceAttribute()**

        Constructs an attribute.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def isEmpty(self) -> bool:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#isEmpty

        **bool QPlaceAttribute::isEmpty() const**

        Returns a boolean indicating whether the all the fields of the place attribute are empty or not.
        """
        ...

    def label(self) -> str:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#label

        **QString QPlaceAttribute::label() const**

        Returns a localized label describing the attribute.

        **See also** **setLabel** ().
        """
        ...

    def setLabel(self, label: str) -> None:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#setLabel

        **void QPlaceAttribute::setLabel(const QString & label )**

        Sets the **label** of the attribute.

        **See also** **label** ().
        """
        ...

    def setText(self, text: str) -> None:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#setText

        **void QPlaceAttribute::setText(const QString & text )**

        Sets the **text** of the attribute.

        **See also** **text** ().
        """
        ...

    def text(self) -> str:
        """
        https://doc.qt.io/qt-5/qplaceattribute.html#text

        **QString QPlaceAttribute::text() const**

        Returns a piece of rich text representing the attribute value.

        **See also** **setText** ().
        """
        ...
