"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtNetwork
import PySide2.QtQml

bytes = str


class QQmlNetworkAccessManagerFactory(object):
    """
    https://doc.qt.io/qt-5/qqmlnetworkaccessmanagerfactory.html

    **Detailed Description**

    A QML engine uses QNetworkAccessManager for all network access. By implementing a factory, it is possible to provide the QML engine with custom QNetworkAccessManager instances with specialized caching, proxy and cookies support.

    To implement a factory, subclass QQmlNetworkAccessManagerFactory and implement the virtual **create** () method, then assign it to the relevant QML engine using **QQmlEngine::setNetworkAccessManagerFactory** ().

    Note the QML engine may create QNetworkAccessManager instances from multiple threads. Because of this, the implementation of the **create** () method must be **reentrant** . In addition, the developer should be careful if the signals of the object to be returned from **create** () are connected to the slots of an object that may be created in a different thread:

    * The QML engine internally handles all requests, and cleans up any QNetworkReply objects it creates. Receiving the QNetworkAccessManager::finished() signal in another thread may not provide the receiver with a valid reply object if it has already been deleted.
      * Authentication details provided to QNetworkAccessManager::authenticationRequired() must be provided immediately, so this signal cannot be connected as a **Qt::QueuedConnection**  (or as the default **Qt::AutoConnection**  from another thread).

    For more information about signals and threads, see **Threads and QObjects**  and **Signals and Slots Across Threads** .

    **See also** **Network Access Manager Factory Example** .
    """

    def __init__(self) -> None:
        ...

    def create(
        self, parent: PySide2.QtCore.QObject
    ) -> PySide2.QtNetwork.QNetworkAccessManager:
        """
        https://doc.qt.io/qt-5/qqmlnetworkaccessmanagerfactory.html#create

        **[pure virtual] QNetworkAccessManager *QQmlNetworkAccessManagerFactory::create(QObject * parent )**

        Creates and returns a network access manager with the specified **parent**. This method must return a new QNetworkAccessManager instance each time it is called.

        Note: this method may be called by multiple threads, so ensure the implementation of this method is reentrant.
        """
        ...
