"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui

bytes = str


class QRegion(object):
    """
    https://doc.qt.io/qt-5/qregion.html

    **Detailed Description**

    QRegion is used with **QPainter::setClipRegion** () to limit the paint area to what needs to be painted. There is also a **QWidget::repaint** () function that takes a QRegion parameter. QRegion is the best tool for minimizing the amount of screen area to be updated by a repaint.

    This class is not suitable for constructing shapes for rendering, especially as outlines. Use **QPainterPath**  to create paths and shapes for use with **QPainter** .

    QRegion is an **implicitly shared**  class.

    **Creating and Using Regions**

    A region can be created from a rectangle, an ellipse, a polygon or a bitmap. Complex regions may be created by combining simple regions using **united** (), **intersected** (), **subtracted** (), or **xored** () (exclusive or). You can move a region using **translate** ().

    You can test whether a region **isEmpty** () or if it **contains** () a **QPoint**  or **QRect** . The bounding rectangle can be found with **boundingRect** ().

    Iteration over the region (with **begin** (), **end** (), or C++11 ranged-for loops) gives a decomposition of the region into rectangles.

    Example of using complex regions:

    void MyWidget::paintEvent(**QPaintEvent**  *)
        {
            **QRegion**  r1(**QRect** (100, 100, 200, 80),    // r1: elliptic region
                       **QRegion** ::Ellipse);
            **QRegion**  r2(**QRect** (100, 120, 90, 30));    // r2: rectangular region
            **QRegion**  r3 = r1.intersected(r2);        // r3: intersection

            **QPainter**  painter(this);
            painter.setClipRegion(r3);
            ...                                     // paint clipped graphics
        }

    **See also** **QPainter::setClipRegion** (), **QPainter::setClipRect** (), and **QPainterPath** .
    """

    Rectangle: QRegion = ...
    Ellipse: QRegion = ...

    class RegionType(object):
        Rectangle: QRegion.RegionType = ...
        Ellipse: QRegion.RegionType = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#QRegion

        **QRegion::QRegion()**

        Constructs an empty region.

        **See also** **isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, bitmap: PySide2.QtGui.QBitmap) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#QRegion

        **QRegion::QRegion()**

        Constructs an empty region.

        **See also** **isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(
        self, pa: PySide2.QtGui.QPolygon, fillRule: PySide2.QtCore.Qt.FillRule = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#QRegion

        **QRegion::QRegion()**

        Constructs an empty region.

        **See also** **isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(
        self, r: PySide2.QtCore.QRect, t: PySide2.QtGui.QRegion.RegionType = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#QRegion

        **QRegion::QRegion()**

        Constructs an empty region.

        **See also** **isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(self, region: PySide2.QtGui.QRegion) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#QRegion

        **QRegion::QRegion()**

        Constructs an empty region.

        **See also** **isEmpty** ().
        """
        ...

    @typing.overload
    def __init__(
        self, x: int, y: int, w: int, h: int, t: PySide2.QtGui.QRegion.RegionType = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#QRegion

        **QRegion::QRegion()**

        Constructs an empty region.

        **See also** **isEmpty** ().
        """
        ...

    @typing.overload
    def __add__(self, r: PySide2.QtCore.QRect) -> PySide2.QtGui.QRegion:
        ...

    @typing.overload
    def __add__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    @typing.overload
    def __and__(self, r: PySide2.QtCore.QRect) -> PySide2.QtGui.QRegion:
        ...

    @typing.overload
    def __and__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    @typing.overload
    def __iadd__(self, r: PySide2.QtCore.QRect) -> PySide2.QtGui.QRegion:
        ...

    @typing.overload
    def __iadd__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def __ior__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def __isub__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def __ixor__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def __lshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    @typing.overload
    def __mul__(self, m: PySide2.QtGui.QMatrix) -> PySide2.QtGui.QRegion:
        ...

    @typing.overload
    def __mul__(self, m: PySide2.QtGui.QTransform) -> PySide2.QtGui.QRegion:
        ...

    def __or__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def __rshift__(
        self, arg__1: PySide2.QtCore.QDataStream
    ) -> PySide2.QtCore.QDataStream:
        ...

    def __sub__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def __xor__(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        ...

    def begin(self) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qregion.html#begin

        **QRegion::const_iterator QRegion::begin() const**

        Returns a **const_iterator**  pointing to the beginning of the range of non-overlapping rectangles that make up the region.

        The union of all the rectangles is equal to the original region.

        This function was introduced in Qt 5.8.

        **See also** **rbegin** (), **cbegin** (), and **end** ().
        """
        ...

    def boundingRect(self) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qregion.html#boundingRect

        **QRect QRegion::boundingRect() const**

        Returns the bounding rectangle of this region. An empty region gives a rectangle that is **QRect::isNull** ().
        """
        ...

    def cbegin(self) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qregion.html#cbegin

        **QRegion::const_iterator QRegion::cbegin() const**

        Same as **begin** ().

        This function was introduced in Qt 5.8.
        """
        ...

    def cend(self) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qregion.html#cend

        **QRegion::const_iterator QRegion::cend() const**

        Same as **end** ().

        This function was introduced in Qt 5.8.
        """
        ...

    @typing.overload
    def contains(self, p: PySide2.QtCore.QPoint) -> bool:
        """
        https://doc.qt.io/qt-5/qregion.html#contains

        **bool QRegion::contains(const QPoint & p ) const**

        Returns `true` if the region contains the point **p** ; otherwise returns `false`.
        """
        ...

    @typing.overload
    def contains(self, r: PySide2.QtCore.QRect) -> bool:
        """
        https://doc.qt.io/qt-5/qregion.html#contains

        **bool QRegion::contains(const QPoint & p ) const**

        Returns `true` if the region contains the point **p** ; otherwise returns `false`.
        """
        ...

    def end(self) -> PySide2.QtCore.QRect:
        """
        https://doc.qt.io/qt-5/qregion.html#end

        **QRegion::const_iterator QRegion::end() const**

        Returns a **const_iterator**  pointing to one past the end of non-overlapping rectangles that make up the region.

        The union of all the rectangles is equal to the original region.

        This function was introduced in Qt 5.8.

        **See also** **rend** (), **cend** (), and **begin** ().
        """
        ...

    @typing.overload
    def intersected(self, r: PySide2.QtCore.QRect) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#intersected

        **QRegion QRegion::intersected(const QRegion & r ) const**

        Returns a region which is the intersection of this region and **r**.

        ![Region Intersection](images/rintersect.png)

        The figure shows the intersection of two elliptical regions.

        This function was introduced in Qt 4.2.

        **See also** **subtracted** (), **united** (), and **xored** ().
        """
        ...

    @typing.overload
    def intersected(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#intersected

        **QRegion QRegion::intersected(const QRegion & r ) const**

        Returns a region which is the intersection of this region and **r**.

        ![Region Intersection](images/rintersect.png)

        The figure shows the intersection of two elliptical regions.

        This function was introduced in Qt 4.2.

        **See also** **subtracted** (), **united** (), and **xored** ().
        """
        ...

    @typing.overload
    def intersects(self, r: PySide2.QtCore.QRect) -> bool:
        """
        https://doc.qt.io/qt-5/qregion.html#intersects

        **bool QRegion::intersects(const QRegion & region ) const**

        Returns `true` if this region intersects with **region** , otherwise returns `false`.

        This function was introduced in Qt 4.2.
        """
        ...

    @typing.overload
    def intersects(self, r: PySide2.QtGui.QRegion) -> bool:
        """
        https://doc.qt.io/qt-5/qregion.html#intersects

        **bool QRegion::intersects(const QRegion & region ) const**

        Returns `true` if this region intersects with **region** , otherwise returns `false`.

        This function was introduced in Qt 4.2.
        """
        ...

    def isEmpty(self) -> bool:
        """
        https://doc.qt.io/qt-5/qregion.html#isEmpty

        **bool QRegion::isEmpty() const**

        Returns `true` if the region is empty; otherwise returns `false`. An empty region is a region that contains no points.

        Example:

        **QRegion**  r1(10, 10, 20, 20);
            r1.isEmpty();               // false

            **QRegion**  r3;
            r3.isEmpty();               // true

            **QRegion**  r2(40, 40, 20, 20);
            r3 = r1.intersected(r2);    // r3: intersection of r1 and r2
            r3.isEmpty();               // true

            r3 = r1.united(r2);         // r3: union of r1 and r2
            r3.isEmpty();               // false
        """
        ...

    def isNull(self) -> bool:
        """
        https://doc.qt.io/qt-5/qregion.html#isNull

        **bool QRegion::isNull() const**

        Returns `true` if the region is empty; otherwise returns `false`. An empty region is a region that contains no points. This function is the same as **isEmpty**

        This function was introduced in Qt 5.0.

        **See also** **isEmpty** ().
        """
        ...

    def rectCount(self) -> int:
        """
        https://doc.qt.io/qt-5/qregion.html#rectCount

        **int QRegion::rectCount() const**

        Returns the number of rectangles that this region is composed of. Same as `end() - begin()`.

        This function was introduced in Qt 4.6.
        """
        ...

    def rects(self) -> typing.List:
        ...

    def setRects(self, rect: PySide2.QtCore.QRect, num: int) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#setRects

        **void QRegion::setRects(const QRect * rects , int number )**

        Sets the region using the array of rectangles specified by **rects** and **number**. The rectangles **must** be optimally Y-X sorted and follow these restrictions:

        * The rectangles must not intersect.
          * All rectangles with a given top coordinate must have the same height.
          * No two rectangles may abut horizontally (they should be combined into a single wider rectangle in that case).
          * The rectangles must be sorted in ascending order, with Y as the major sort key and X as the minor sort key.

        **See also** **rects** ().
        """
        ...

    def subtracted(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#subtracted

        **QRegion QRegion::subtracted(const QRegion & r ) const**

        Returns a region which is **r** subtracted from this region.

        ![Region Subtraction](images/rsubtract.png)

        The figure shows the result when the ellipse on the right is subtracted from the ellipse on the left (`left - right`).

        This function was introduced in Qt 4.2.

        **See also** **intersected** (), **united** (), and **xored** ().
        """
        ...

    def swap(self, other: PySide2.QtGui.QRegion) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#swap

        **void QRegion::swap(QRegion & other )**

        Swaps region **other** with this region. This operation is very fast and never fails.

        This function was introduced in Qt 4.8.
        """
        ...

    @typing.overload
    def translate(self, dx: int, dy: int) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#translate

        **void QRegion::translate(int dx , int dy )**

        Translates (moves) the region **dx** along the X axis and **dy** along the Y axis.
        """
        ...

    @typing.overload
    def translate(self, p: PySide2.QtCore.QPoint) -> None:
        """
        https://doc.qt.io/qt-5/qregion.html#translate

        **void QRegion::translate(int dx , int dy )**

        Translates (moves) the region **dx** along the X axis and **dy** along the Y axis.
        """
        ...

    @typing.overload
    def translated(self, dx: int, dy: int) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#translated

        **QRegion QRegion::translated(int dx , int dy ) const**

        Returns a copy of the region that is translated **dx** along the x axis and **dy** along the y axis, relative to the current position. Positive values move the region to the right and down.

        This function was introduced in Qt 4.1.

        **See also** **translate** ().
        """
        ...

    @typing.overload
    def translated(self, p: PySide2.QtCore.QPoint) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#translated

        **QRegion QRegion::translated(int dx , int dy ) const**

        Returns a copy of the region that is translated **dx** along the x axis and **dy** along the y axis, relative to the current position. Positive values move the region to the right and down.

        This function was introduced in Qt 4.1.

        **See also** **translate** ().
        """
        ...

    @typing.overload
    def united(self, r: PySide2.QtCore.QRect) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#united

        **QRegion QRegion::united(const QRegion & r ) const**

        Returns a region which is the union of this region and **r**.

        ![Region Union](images/runion.png)

        The figure shows the union of two elliptical regions.

        This function was introduced in Qt 4.2.

        **See also** **intersected** (), **subtracted** (), and **xored** ().
        """
        ...

    @typing.overload
    def united(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#united

        **QRegion QRegion::united(const QRegion & r ) const**

        Returns a region which is the union of this region and **r**.

        ![Region Union](images/runion.png)

        The figure shows the union of two elliptical regions.

        This function was introduced in Qt 4.2.

        **See also** **intersected** (), **subtracted** (), and **xored** ().
        """
        ...

    def xored(self, r: PySide2.QtGui.QRegion) -> PySide2.QtGui.QRegion:
        """
        https://doc.qt.io/qt-5/qregion.html#xored

        **QRegion QRegion::xored(const QRegion & r ) const**

        Returns a region which is the exclusive or (XOR) of this region and **r**.

        ![Region XORed](images/rxor.png)

        The figure shows the exclusive or of two elliptical regions.

        This function was introduced in Qt 4.2.

        **See also** **intersected** (), **united** (), and **subtracted** ().
        """
        ...
