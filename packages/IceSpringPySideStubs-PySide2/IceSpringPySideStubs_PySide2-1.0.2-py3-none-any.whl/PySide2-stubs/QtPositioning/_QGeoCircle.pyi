"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com

Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtPositioning

bytes = str


class QGeoCircle(PySide2.QtPositioning.QGeoShape):
    """
    https://doc.qt.io/qt-5/qgeocircle.html

    **Detailed Description**

    The circle is defined in terms of a **QGeoCoordinate**  which specifies the center of the circle and a qreal which specifies the radius of the circle in meters.

    The circle is considered invalid if the center coordinate is invalid or if the radius is less than zero.

    This class is a **Q_GADGET**  since Qt 5.5. It can be **directly used from C++ and QML** .
    """

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#QGeoCircle

        **QGeoCircle::QGeoCircle()**

        Constructs a new, invalid geo circle.
        """
        ...

    @typing.overload
    def __init__(
        self, center: PySide2.QtPositioning.QGeoCoordinate, radius: float = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#QGeoCircle

        **QGeoCircle::QGeoCircle()**

        Constructs a new, invalid geo circle.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoCircle) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#QGeoCircle

        **QGeoCircle::QGeoCircle()**

        Constructs a new, invalid geo circle.
        """
        ...

    @typing.overload
    def __init__(self, other: PySide2.QtPositioning.QGeoShape) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#QGeoCircle

        **QGeoCircle::QGeoCircle()**

        Constructs a new, invalid geo circle.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def center(self) -> PySide2.QtPositioning.QGeoCoordinate:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#center

        **QGeoCoordinate QGeoCircle::center() const**

        Returns the center coordinate of this geo circle. Equivalent to **QGeoShape::center** ().

        **Note:** Getter function for property **center** .

        **See also** **setCenter** ().
        """
        ...

    def extendCircle(self, coordinate: PySide2.QtPositioning.QGeoCoordinate) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#extendCircle

        **void QGeoCircle::extendCircle(const QGeoCoordinate & coordinate )**

        Extends the geo circle to also cover the coordinate **coordinate**

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        This function was introduced in Qt 5.9.
        """
        ...

    def radius(self) -> float:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#radius

        **qreal QGeoCircle::radius() const**

        Returns the radius in meters of this geo circle.

        **Note:** Getter function for property **radius** .

        **See also** **setRadius** ().
        """
        ...

    def setCenter(self, center: PySide2.QtPositioning.QGeoCoordinate) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#setCenter

        **void QGeoCircle::setCenter(const QGeoCoordinate & center )**

        Sets the center coordinate of this geo circle to **center**.

        **Note:** Setter function for property **center** .

        **See also** **center** ().
        """
        ...

    def setRadius(self, radius: float) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#setRadius

        **void QGeoCircle::setRadius(qreal radius )**

        Sets the radius in meters of this geo circle to **radius**.

        **Note:** Setter function for property **radius** .

        **See also** **radius** ().
        """
        ...

    def toString(self) -> str:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#toString

        **QString QGeoCircle::toString() const**

        Returns the geo circle properties as a string.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        This function was introduced in Qt 5.5.
        """
        ...

    def translate(self, degreesLatitude: float, degreesLongitude: float) -> None:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#translate

        **void QGeoCircle::translate(double degreesLatitude , double degreesLongitude )**

        Translates this geo circle by **degreesLatitude** northwards and **degreesLongitude** eastwards.

        Negative values of **degreesLatitude** and **degreesLongitude** correspond to southward and westward translation respectively.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .
        """
        ...

    def translated(
        self, degreesLatitude: float, degreesLongitude: float
    ) -> PySide2.QtPositioning.QGeoCircle:
        """
        https://doc.qt.io/qt-5/qgeocircle.html#translated

        **QGeoCircle QGeoCircle::translated(double degreesLatitude , double degreesLongitude ) const**

        Returns a copy of this geo circle translated by **degreesLatitude** northwards and **degreesLongitude** eastwards.

        Negative values of **degreesLatitude** and **degreesLongitude** correspond to southward and westward translation respectively.

        **Note:** This function can be invoked via the meta-object system and from QML. See **Q_INVOKABLE** .

        **See also** **translate** ().
        """
        ...
