"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtNetwork
import PySide2.QtQml

bytes = str


class QQmlFileSelector(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qqmlfileselector.html

    **Detailed Description**

    QQmlFileSelector will automatically apply a **QFileSelector**  to qml file
    and asset paths.

    It is used as follows:

    **QQmlEngine**  engine;
        **QQmlFileSelector** * selector = new
    **QQmlFileSelector** (&engine);

    Then you can swap out files like so:

    main.qml
        Component.qml
        asset.png
        +unix/Component.qml
    +mac/asset.png

    In this example, main.qml will normally use Component.qml for the Component
    type. However on a unix platform, the unix selector will be present and the
    +unix/Component.qml version will be used instead. Note that this acts like
    swapping out Component.qml with +unix/Component.qml, so when using
    Component.qml you should not need to alter any paths based on which version
    was selected.

    For example, to pass the "asset.png" file path around you would refer to it
    just as "asset.png" in all of main.qml, Component.qml, and
    +linux/Component.qml. It will be replaced with +mac/asset.png on Mac
    platforms in all cases.

    For a list of available selectors, see `QFileSelector`.

    Your platform may also provide additional selectors for you to use. As
    specified by **QFileSelector** , directories used for selection must start
    with a \'+\' character, so you will not accidentally trigger this feature
    unless you have directories with such names inside your project.

    If a new QQmlFileSelector is set on the engine, the old one will be
    replaced. Use **QQmlFileSelector::get** () to query or use the existing
    instance.
    """

    def __init__(
        self,
        engine: PySide2.QtQml.QQmlEngine,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qqmlfileselector.html#QQmlFileSelector

        **QQmlFileSelector::QQmlFileSelector(QQmlEngine * engine , QObject *
        parent = nullptr)**

        Creates a new QQmlFileSelector with parent object **parent** , which
        includes its own **QFileSelector** . **engine** is the **QQmlEngine**
        you wish to apply file selectors to. It will also take ownership of the
        QQmlFileSelector.
        """
        ...

    @staticmethod
    def get(arg__1: PySide2.QtQml.QQmlEngine) -> PySide2.QtQml.QQmlFileSelector:
        """
        https://doc.qt.io/qt-5/qqmlfileselector.html#get

        **[static] QQmlFileSelector *QQmlFileSelector::get(QQmlEngine * engine
        )**

        Gets the **QQmlFileSelector**  currently active on the target
        **engine**.
        """
        ...

    def selector(self) -> PySide2.QtCore.QFileSelector:
        """
        https://doc.qt.io/qt-5/qqmlfileselector.html#selector

        **QFileSelector *QQmlFileSelector::selector() const**

        Returns the **QFileSelector**  instance used by the **QQmlFileSelector**
        .

        This function was introduced in Qt 5.7.

        **See also** **setSelector** ().
        """
        ...

    def setExtraSelectors(self, strings: typing.Sequence) -> None:
        """
        https://doc.qt.io/qt-5/qqmlfileselector.html#setExtraSelectors

        **void QQmlFileSelector::setExtraSelectors(QStringList & strings )**

        Adds extra selectors contained in **strings** to the current
        **QFileSelector**  being used. Use this when extra selectors are all you
        need to avoid having to create your own **QFileSelector**  instance.
        """
        ...

    def setSelector(self, selector: PySide2.QtCore.QFileSelector) -> None:
        """
        https://doc.qt.io/qt-5/qqmlfileselector.html#setSelector

        **void QQmlFileSelector::setSelector(QFileSelector * selector )**

        Sets the **QFileSelector**  instance for use by the **QQmlFileSelector**
        to **selector**. **QQmlFileSelector**  does not take ownership of the
        new **QFileSelector** . To reset **QQmlFileSelector**  to use its
        internal **QFileSelector**  instance, call setSelector(0).

        **See also** **selector** ().
        """
        ...
