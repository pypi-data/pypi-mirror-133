"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScxml

bytes = str


class QScxmlEcmaScriptDataModel(PySide2.QtScxml.QScxmlDataModel):
    """
    https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html

    **Detailed Description**

    This class implements the ECMAScript data model as described in **SCXML
    Specification - B.2 The ECMAScript Data Model** . It can be subclassed to
    perform custom initialization.

    **See also** **QScxmlStateMachine**  and **QScxmlDataModel** .
    """

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#QScxmlEcmaScriptDa
        taModel

        **QScxmlEcmaScriptDataModel::QScxmlEcmaScriptDataModel(QObject * parent
        = nullptr)**

        Creates a new ECMAScript data model, with the parent object **parent**.
        """
        ...

    def evaluateAssignment(self, id: int) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateAssignment

        **[override virtual] void QScxmlEcmaScriptDataModel::evaluateAssignment(
        QScxmlExecutableContent::EvaluatorId id , bool * ok )**

        Reimplements: **QScxmlDataModel::evaluateAssignment**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok).
        """
        ...

    def evaluateForeach(
        self, id: int, body: PySide2.QtScxml.QScxmlDataModel.ForeachLoopBody
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateForeach

        **[override virtual] void QScxmlEcmaScriptDataModel::evaluateForeach(QSc
        xmlExecutableContent::EvaluatorId id , bool * ok ,
        QScxmlDataModel::ForeachLoopBody * body )**

        Reimplements: **QScxmlDataModel::evaluateForeach**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok,
        QScxmlDataModel::ForeachLoopBody *body).
        """
        ...

    def evaluateInitialization(self, id: int) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateInitializa
        tion

        **[override virtual] void QScxmlEcmaScriptDataModel::evaluateInitializat
        ion(QScxmlExecutableContent::EvaluatorId id , bool * ok )**

        Reimplements: **QScxmlDataModel::evaluateInitialization**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok).
        """
        ...

    def evaluateToBool(self, id: int) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateToBool

        **[override virtual] bool QScxmlEcmaScriptDataModel::evaluateToBool(QScx
        mlExecutableContent::EvaluatorId id , bool * ok )**

        Reimplements: **QScxmlDataModel::evaluateToBool**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok).
        """
        ...

    def evaluateToString(self, id: int) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateToString

        **[override virtual] QString QScxmlEcmaScriptDataModel::evaluateToString
        (QScxmlExecutableContent::EvaluatorId id , bool * ok )**

        Reimplements: **QScxmlDataModel::evaluateToString**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok).
        """
        ...

    def evaluateToVariant(self, id: int) -> typing.Tuple:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateToVariant

        **[override virtual] QVariant QScxmlEcmaScriptDataModel::evaluateToVaria
        nt(QScxmlExecutableContent::EvaluatorId id , bool * ok )**

        Reimplements: **QScxmlDataModel::evaluateToVariant**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok).
        """
        ...

    def evaluateToVoid(self, id: int) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#evaluateToVoid

        **[override virtual] void QScxmlEcmaScriptDataModel::evaluateToVoid(QScx
        mlExecutableContent::EvaluatorId id , bool * ok )**

        Reimplements: **QScxmlDataModel::evaluateToVoid**
        (QScxmlExecutableContent::EvaluatorId id, bool *ok).
        """
        ...

    def hasScxmlProperty(self, name: str) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#hasScxmlProperty

        **[override virtual] bool
        QScxmlEcmaScriptDataModel::hasScxmlProperty(const QString & name )
        const**

        Reimplements: **QScxmlDataModel::hasScxmlProperty** (const QString
        &name) const.
        """
        ...

    def scxmlProperty(self, name: str) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#scxmlProperty

        **[override virtual] QVariant
        QScxmlEcmaScriptDataModel::scxmlProperty(const QString & name ) const**

        Reimplements: **QScxmlDataModel::scxmlProperty** (const QString &name)
        const.

        **See also** **setScxmlProperty** ().
        """
        ...

    def setScxmlEvent(self, event: PySide2.QtScxml.QScxmlEvent) -> None:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#setScxmlEvent

        **[override virtual] void QScxmlEcmaScriptDataModel::setScxmlEvent(const
        QScxmlEvent & event )**

        Reimplements: **QScxmlDataModel::setScxmlEvent** (const QScxmlEvent
        &event).
        """
        ...

    def setScxmlProperty(self, name: str, value: typing.Any, context: str) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#setScxmlProperty

        **[override virtual] bool
        QScxmlEcmaScriptDataModel::setScxmlProperty(const QString & name , const
        QVariant & value , const QString & context )**

        Reimplements: **QScxmlDataModel::setScxmlProperty** (const QString
        &name, const QVariant &value, const QString &context).

        **See also** **scxmlProperty** ().
        """
        ...

    def setup(self, initialDataValues: typing.Dict) -> bool:
        """
        https://doc.qt.io/qt-5/qscxmlecmascriptdatamodel.html#setup

        **[override virtual] bool QScxmlEcmaScriptDataModel::setup(const
        QVariantMap & initialDataValues )**

        Reimplements: **QScxmlDataModel::setup** (const QVariantMap
        &initialDataValues).
        """
        ...
