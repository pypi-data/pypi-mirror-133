"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtWinExtras

bytes = str


class QWinJumpListCategory(object):
    """
    https://doc.qt.io/qt-5/qwinjumplistcategory.html

    **Detailed Description**
    """

    Custom: QWinJumpListCategory = ...
    Recent: QWinJumpListCategory = ...
    Frequent: QWinJumpListCategory = ...
    Tasks: QWinJumpListCategory = ...

    class Type(object):
        Custom: QWinJumpListCategory.Type = ...
        Recent: QWinJumpListCategory.Type = ...
        Frequent: QWinJumpListCategory.Type = ...
        Tasks: QWinJumpListCategory.Type = ...

    def __init__(self, title: str = ...) -> None:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#QWinJumpListCategory

        **QWinJumpListCategory::QWinJumpListCategory(const QString & title =
        QString())**

        Constructs a custom QWinJumpListCategory with the specified **title**.
        """
        ...

    def addDestination(self, filePath: str) -> PySide2.QtWinExtras.QWinJumpListItem:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#addDestination

        **QWinJumpListItem *QWinJumpListCategory::addDestination(const QString &
        filePath )**

        Adds a destination to the category pointing to **filePath**.
        """
        ...

    def addItem(self, item: PySide2.QtWinExtras.QWinJumpListItem) -> None:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#addItem

        **void QWinJumpListCategory::addItem(QWinJumpListItem * item )**

        Adds an **item** to the category.
        """
        ...

    @typing.overload
    def addLink(
        self,
        icon: PySide2.QtGui.QIcon,
        title: str,
        executablePath: str,
        arguments: typing.Sequence = ...,
    ) -> PySide2.QtWinExtras.QWinJumpListItem:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#addLink

        **QWinJumpListItem *QWinJumpListCategory::addLink(const QString & title
        , const QString & executablePath , const QStringList & arguments =
        QStringList())**

        Adds a link to the category using **title** , **executablePath** , and
        optionally **arguments**.
        """
        ...

    @typing.overload
    def addLink(
        self, title: str, executablePath: str, arguments: typing.Sequence = ...
    ) -> PySide2.QtWinExtras.QWinJumpListItem:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#addLink

        **QWinJumpListItem *QWinJumpListCategory::addLink(const QString & title
        , const QString & executablePath , const QStringList & arguments =
        QStringList())**

        Adds a link to the category using **title** , **executablePath** , and
        optionally **arguments**.
        """
        ...

    def addSeparator(self) -> PySide2.QtWinExtras.QWinJumpListItem:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#addSeparator

        **QWinJumpListItem *QWinJumpListCategory::addSeparator()**

        Adds a separator to the category.

        **Note:** Only tasks category supports separators.
        """
        ...

    def clear(self) -> None:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#clear

        **void QWinJumpListCategory::clear()**

        Clears the category.
        """
        ...

    def count(self) -> int:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#count

        **int QWinJumpListCategory::count() const**

        Returns the amount of items in the category.
        """
        ...

    def isEmpty(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#isEmpty

        **bool QWinJumpListCategory::isEmpty() const**

        Returns whether the category is empty.
        """
        ...

    def isVisible(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#isVisible

        **bool QWinJumpListCategory::isVisible() const**

        Returns whether the category is visible.
        """
        ...

    def items(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#items

        **QList<QWinJumpListItem *> QWinJumpListCategory::items() const**

        Returns the list of items in the category.
        """
        ...

    def setTitle(self, title: str) -> None:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#setTitle

        **void QWinJumpListCategory::setTitle(const QString & title )**

        Sets the category **title**.

        **See also** **title** ().
        """
        ...

    def setVisible(self, visible: bool) -> None:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#setVisible

        **void QWinJumpListCategory::setVisible(bool visible )**

        Sets the category **visible**.

        **See also** **isVisible** ().
        """
        ...

    def title(self) -> str:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#title

        **QString QWinJumpListCategory::title() const**

        Returns the category title.

        **See also** **setTitle** ().
        """
        ...

    def type(self) -> PySide2.QtWinExtras.QWinJumpListCategory.Type:
        """
        https://doc.qt.io/qt-5/qwinjumplistcategory.html#type

        **QWinJumpListCategory::Type QWinJumpListCategory::type() const**

        Returns the category type.
        """
        ...
