"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtQml
import PySide2.QtQuick

bytes = str


class QSGEngine(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qsgengine.html

    **Detailed Description**

    A QSGEngine can be used to render a tree of **QSGNode**  directly on a
    **QWindow**  or **QOpenGLFramebufferObject**  without any integration with
    QML, **QQuickWindow**  or **QQuickItem**  and the convenience that they
    provide.

    This means that you must handle event propagation, animation timing, and
    node lifetime yourself.

    **Note:** This class is for very low level access to an independent scene
    graph. Most of the time you will instead want to subclass **QQuickItem**
    and insert your **QSGNode**  in a normal **QtQuick**  scene by overriding
    **QQuickItem::updatePaintNode** ().

    **Warning:** This class is only suitable when working directly with OpenGL.
    It is not compatible with the **RHI-based rendering path** .

    **See also** **QSGAbstractRenderer** .
    """

    TextureHasAlphaChannel: QSGEngine = ...
    TextureOwnsGLTexture: QSGEngine = ...
    TextureCanUseAtlas: QSGEngine = ...
    TextureIsOpaque: QSGEngine = ...

    class CreateTextureOption(object):
        TextureHasAlphaChannel: QSGEngine.CreateTextureOption = ...
        TextureOwnsGLTexture: QSGEngine.CreateTextureOption = ...
        TextureCanUseAtlas: QSGEngine.CreateTextureOption = ...
        TextureIsOpaque: QSGEngine.CreateTextureOption = ...

    class CreateTextureOptions(object):
        ...

    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qsgengine.html#QSGEngine

        **QSGEngine::QSGEngine(QObject * parent = nullptr)**

        Constructs a new QSGEngine with its **parent**
        """
        ...

    def createRenderer(self) -> PySide2.QtQuick.QSGAbstractRenderer:
        """
        https://doc.qt.io/qt-5/qsgengine.html#createRenderer

        **QSGAbstractRenderer *QSGEngine::createRenderer() const**

        Returns a renderer that can be used to render a **QSGNode**  tree

        You call **initialize** () first with the **QOpenGLContext**  that you
        want to use with this renderer. This will return a null renderer
        otherwise.
        """
        ...

    def createTextureFromId(
        self,
        id: int,
        size: PySide2.QtCore.QSize,
        options: PySide2.QtQuick.QSGEngine.CreateTextureOptions = ...,
    ) -> PySide2.QtQuick.QSGTexture:
        """
        https://doc.qt.io/qt-5/qsgengine.html#createTextureFromId

        **QSGTexture *QSGEngine::createTextureFromId(uint id , const QSize &
        size , QSGEngine::CreateTextureOptions options = CreateTextureOption())
        const**

        Creates a texture object that wraps the GL texture **id** uploaded with
        **size**

        Valid **options** are **TextureHasAlphaChannel**  and
        **TextureOwnsGLTexture**

        The caller takes ownership of the texture object and the texture should
        only be used with this engine.

        **See also** **createTextureFromImage** (),
        **QSGSimpleTextureNode::setOwnsTexture** (), and
        **QQuickWindow::createTextureFromId** ().
        """
        ...

    def createTextureFromImage(
        self,
        image: PySide2.QtGui.QImage,
        options: PySide2.QtQuick.QSGEngine.CreateTextureOptions = ...,
    ) -> PySide2.QtQuick.QSGTexture:
        """
        https://doc.qt.io/qt-5/qsgengine.html#createTextureFromImage

        **QSGTexture *QSGEngine::createTextureFromImage(const QImage & image ,
        QSGEngine::CreateTextureOptions options = CreateTextureOption()) const**

        Creates a texture using the data of **image**

        Valid **options** are **TextureCanUseAtlas**  and **TextureIsOpaque** .

        The caller takes ownership of the texture and the texture should only be
        used with this engine.

        **See also** **createTextureFromId** (),
        **QSGSimpleTextureNode::setOwnsTexture** (), and
        **QQuickWindow::createTextureFromImage** ().
        """
        ...

    def initialize(self, context: PySide2.QtGui.QOpenGLContext) -> None:
        """
        https://doc.qt.io/qt-5/qsgengine.html#initialize

        **void QSGEngine::initialize(QOpenGLContext * context )**

        Initialize the engine with **context**.

        **Warning:** You have to make sure that you call
        **QOpenGLContext::makeCurrent** () on **context** before calling this.
        """
        ...

    def invalidate(self) -> None:
        """
        https://doc.qt.io/qt-5/qsgengine.html#invalidate

        **void QSGEngine::invalidate()**

        Invalidate the engine releasing its resources

        You will have to call **initialize** () and **createRenderer** () if you
        want to use it again.
        """
        ...
