"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide2.QtWebEngineWidgets, except for defaults which are replaced by "...".
"""
import PySide2
import typing
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtPrintSupport
import PySide2.QtWebChannel
import PySide2.QtWebEngineCore
import PySide2.QtWebEngineWidgets

bytes = str


class QWebEngineContextMenuData(object):
    """
    https://doc.qt.io/qt-5/qwebenginecontextmenudata.html

    **Detailed Description**

    QWebEngineContextMenuData is returned by **QWebEnginePage::contextMenuData**
    () after a context menu event, and contains information about where the
    context menu event took place. This is also in the context in which any
    context specific **QWebEnginePage::WebAction**  will be performed.
    """

    MediaTypeNone: QWebEngineContextMenuData = ...
    CanUndo: QWebEngineContextMenuData = ...
    MediaInError: QWebEngineContextMenuData = ...
    MediaTypeImage: QWebEngineContextMenuData = ...
    CanRedo: QWebEngineContextMenuData = ...
    MediaPaused: QWebEngineContextMenuData = ...
    MediaTypeVideo: QWebEngineContextMenuData = ...
    MediaTypeAudio: QWebEngineContextMenuData = ...
    CanCut: QWebEngineContextMenuData = ...
    MediaMuted: QWebEngineContextMenuData = ...
    MediaTypeCanvas: QWebEngineContextMenuData = ...
    MediaTypeFile: QWebEngineContextMenuData = ...
    MediaTypePlugin: QWebEngineContextMenuData = ...
    CanCopy: QWebEngineContextMenuData = ...
    MediaLoop: QWebEngineContextMenuData = ...
    CanPaste: QWebEngineContextMenuData = ...
    MediaCanSave: QWebEngineContextMenuData = ...
    CanDelete: QWebEngineContextMenuData = ...
    MediaHasAudio: QWebEngineContextMenuData = ...
    CanSelectAll: QWebEngineContextMenuData = ...
    MediaCanToggleControls: QWebEngineContextMenuData = ...
    CanTranslate: QWebEngineContextMenuData = ...
    MediaControls: QWebEngineContextMenuData = ...
    CanEditRichly: QWebEngineContextMenuData = ...
    MediaCanPrint: QWebEngineContextMenuData = ...
    MediaCanRotate: QWebEngineContextMenuData = ...

    class EditFlag(object):
        CanUndo: QWebEngineContextMenuData.EditFlag = ...
        CanRedo: QWebEngineContextMenuData.EditFlag = ...
        CanCut: QWebEngineContextMenuData.EditFlag = ...
        CanCopy: QWebEngineContextMenuData.EditFlag = ...
        CanPaste: QWebEngineContextMenuData.EditFlag = ...
        CanDelete: QWebEngineContextMenuData.EditFlag = ...
        CanSelectAll: QWebEngineContextMenuData.EditFlag = ...
        CanTranslate: QWebEngineContextMenuData.EditFlag = ...
        CanEditRichly: QWebEngineContextMenuData.EditFlag = ...

    class EditFlags(object):
        ...

    class MediaFlag(object):
        MediaInError: QWebEngineContextMenuData.MediaFlag = ...
        MediaPaused: QWebEngineContextMenuData.MediaFlag = ...
        MediaMuted: QWebEngineContextMenuData.MediaFlag = ...
        MediaLoop: QWebEngineContextMenuData.MediaFlag = ...
        MediaCanSave: QWebEngineContextMenuData.MediaFlag = ...
        MediaHasAudio: QWebEngineContextMenuData.MediaFlag = ...
        MediaCanToggleControls: QWebEngineContextMenuData.MediaFlag = ...
        MediaControls: QWebEngineContextMenuData.MediaFlag = ...
        MediaCanPrint: QWebEngineContextMenuData.MediaFlag = ...
        MediaCanRotate: QWebEngineContextMenuData.MediaFlag = ...

    class MediaFlags(object):
        ...

    class MediaType(object):
        MediaTypeNone: QWebEngineContextMenuData.MediaType = ...
        MediaTypeImage: QWebEngineContextMenuData.MediaType = ...
        MediaTypeVideo: QWebEngineContextMenuData.MediaType = ...
        MediaTypeAudio: QWebEngineContextMenuData.MediaType = ...
        MediaTypeCanvas: QWebEngineContextMenuData.MediaType = ...
        MediaTypeFile: QWebEngineContextMenuData.MediaType = ...
        MediaTypePlugin: QWebEngineContextMenuData.MediaType = ...

    @typing.overload
    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#QWebEngineContextM
        enuData

        **QWebEngineContextMenuData::QWebEngineContextMenuData()**

        Constructs null context menu data.
        """
        ...

    @typing.overload
    def __init__(
        self, other: PySide2.QtWebEngineWidgets.QWebEngineContextMenuData
    ) -> None:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#QWebEngineContextM
        enuData-1

        **QWebEngineContextMenuData::QWebEngineContextMenuData(const
        QWebEngineContextMenuData & other )**

        Constructs context menu data from **other**.
        """
        ...

    @staticmethod
    def __copy__() -> None:
        ...

    def editFlags(
        self,
    ) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData.EditFlags:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#editFlags

        **QWebEngineContextMenuData::EditFlags
        QWebEngineContextMenuData::editFlags() const**

        Returns the available edit operations in the current context or
        `CanDoNone` if no actions are available.
        """
        ...

    def isContentEditable(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#isContentEditable

        **bool QWebEngineContextMenuData::isContentEditable() const**

        Returns `true` if the content is editable by the user; otherwise returns
        `false`.
        """
        ...

    def isValid(self) -> bool:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#isValid

        **bool QWebEngineContextMenuData::isValid() const**

        Returns `true` if the context data is valid; otherwise returns `false`.
        """
        ...

    def linkText(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#linkText

        **QString QWebEngineContextMenuData::linkText() const**

        Returns the text of a link if the context is a link.
        """
        ...

    def linkUrl(self) -> PySide2.QtCore.QUrl:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#linkUrl

        **QUrl QWebEngineContextMenuData::linkUrl() const**

        Returns the URL of a link if the context is a link. It is not guaranteed
        to be a valid URL.
        """
        ...

    def mediaFlags(
        self,
    ) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData.MediaFlags:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#mediaFlags

        **QWebEngineContextMenuData::MediaFlags
        QWebEngineContextMenuData::mediaFlags() const**

        Returns the current media element's status and its available operations.
        `MediaNone` if the selected web page content is not a media element.
        """
        ...

    def mediaType(
        self,
    ) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData.MediaType:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#mediaType

        **QWebEngineContextMenuData::MediaType
        QWebEngineContextMenuData::mediaType() const**

        Returns the type of the media element or `MediaTypeNone` if the context
        is not a media element.
        """
        ...

    def mediaUrl(self) -> PySide2.QtCore.QUrl:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#mediaUrl

        **QUrl QWebEngineContextMenuData::mediaUrl() const**

        If the context is a media element, returns the URL of that media.
        """
        ...

    def misspelledWord(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#misspelledWord

        **QString QWebEngineContextMenuData::misspelledWord() const**

        If the context is a word considered misspelled by the spell-checker,
        returns the misspelled word.

        For possible replacements of the word, see **spellCheckerSuggestions**
        ().

        This function was introduced in Qt 5.8.
        """
        ...

    def position(self) -> PySide2.QtCore.QPoint:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#position

        **QPoint QWebEngineContextMenuData::position() const**

        Returns the position of the context, usually the mouse position where
        the context menu event was triggered.
        """
        ...

    def selectedText(self) -> str:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#selectedText

        **QString QWebEngineContextMenuData::selectedText() const**

        Returns the selected text of the context.
        """
        ...

    def spellCheckerSuggestions(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qwebenginecontextmenudata.html#spellCheckerSugges
        tions

        **QStringList QWebEngineContextMenuData::spellCheckerSuggestions()
        const**

        If the context is a word considered misspelled by the spell-checker,
        returns a list of suggested replacements for **misspelledWord** ().

        This function was introduced in Qt 5.8.
        """
        ...
