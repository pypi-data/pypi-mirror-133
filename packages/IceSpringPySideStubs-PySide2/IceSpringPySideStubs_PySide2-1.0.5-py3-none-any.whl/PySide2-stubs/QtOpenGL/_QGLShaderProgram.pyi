"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtOpenGL

bytes = str


class QGLShaderProgram(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qglshaderprogram.html

    **Detailed Description**

    **Introduction**

    This class supports shader programs written in the OpenGL Shading Language
    (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).

    **QGLShader**  and QGLShaderProgram shelter the programmer from the details
    of compiling and linking vertex and fragment shaders.

    The following example creates a vertex shader program using the supplied
    source `code`. Once compiled and linked, the shader program is activated in
    the current **QGLContext**  by calling **QGLShaderProgram::bind** ():

    **QGLShader**  shader(**QGLShader** ::Vertex);
    shader.compileSourceCode(code);

        **QGLShaderProgram**
    program(context);
        program.addShader(shader);
        program.link();
    program.bind();

    **Writing Portable Shaders**

    Shader programs can be difficult to reuse across OpenGL implementations
    because of varying levels of support for standard vertex attributes and
    uniform variables. In particular, GLSL/ES lacks all of the standard
    variables that are present on desktop OpenGL systems: `gl_Vertex`,
    `gl_Normal`, `gl_Color`, and so on. Desktop OpenGL lacks the variable
    qualifiers `highp`, `mediump`, and `lowp`.

    The QGLShaderProgram class makes the process of writing portable shaders
    easier by prefixing all shader programs with the following lines on desktop
    OpenGL:

    #define highp
        #define mediump
        #define lowp

    This makes it possible to run most GLSL/ES shader programs on desktop
    systems. The programmer should restrict themselves to just features that are
    present in GLSL/ES, and avoid standard variable names that only work on the
    desktop.

    **Simple Shader Example**

    program.addShaderFromSourceCode(**QGLShader** ::Vertex,
            "attribute
    highp vec4 vertex;\\n"
            "uniform highp mat4 matrix;\\n"
            "void
    main(void)\\n"
            "{\\n"
            "   gl_Position = matrix * vertex;\\n"
    "}");
        program.addShaderFromSourceCode(**QGLShader** ::Fragment,
    "uniform mediump vec4 color;\\n"
            "void main(void)\\n"
            "{\\n"
    "   gl_FragColor = color;\\n"
            "}");
        program.link();
    program.bind();

        int vertexLocation =
    program.attributeLocation("vertex");
        int matrixLocation =
    program.uniformLocation("matrix");
        int colorLocation =
    program.uniformLocation("color");

    With the above shader program active, we can draw a green triangle as
    follows:

    static GLfloat const triangleVertices[] = {
            60.0f,  10.0f,  0.0f,
    110.0f, 110.0f, 0.0f,
            10.0f,  110.0f, 0.0f
        };
    **QColor**  color(0, 255, 0, 255);

        QMatrix4x4 pmvMatrix;
    pmvMatrix.ortho(rect());
    program.enableAttributeArray(vertexLocation);
    program.setAttributeArray(vertexLocation, triangleVertices, 3);
    program.setUniformValue(matrixLocation, pmvMatrix);
    program.setUniformValue(colorLocation, color);
    glDrawArrays(GL_TRIANGLES, 0, 3);
    program.disableAttributeArray(vertexLocation);

    **Binary Shaders and Programs**

    Binary shaders may be specified using `glShaderBinary()` on the return value
    from **QGLShader::shaderId** (). The **QGLShader**  instance containing the
    binary can then be added to the shader program with **addShader** () and
    linked in the usual fashion with **link** ().

    Binary programs may be specified using `glProgramBinaryOES()` on the return
    value from **programId** (). Then the application should call **link** (),
    which will notice that the program has already been specified and linked,
    allowing other operations to be performed on the shader program.

    **Note:** This class has been deprecated in favor of
    **QOpenGLShaderProgram** .

    **See also** **QGLShader** .
    """

    @typing.overload
    def __init__(
        self,
        context: PySide2.QtOpenGL.QGLContext,
        parent: typing.Optional[PySide2.QtCore.QObject] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#QGLShaderProgram

        **QGLShaderProgram::QGLShaderProgram(QObject * parent = nullptr)**

        Constructs a new shader program and attaches it to **parent**. The
        program will be invalid until **addShader** () is called.

        The shader program will be associated with the current QGLContext.

        **See also** **addShader** ().
        """
        ...

    @typing.overload
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#QGLShaderProgram

        **QGLShaderProgram::QGLShaderProgram(QObject * parent = nullptr)**

        Constructs a new shader program and attaches it to **parent**. The
        program will be invalid until **addShader** () is called.

        The shader program will be associated with the current QGLContext.

        **See also** **addShader** ().
        """
        ...

    def addShader(self, shader: PySide2.QtOpenGL.QGLShader) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#addShader

        **bool QGLShaderProgram::addShader(QGLShader * shader )**

        Adds a compiled **shader** to this shader program. Returns `true` if the
        shader could be added, or false otherwise.

        Ownership of the **shader** object remains with the caller. It will not
        be deleted when this **QGLShaderProgram**  instance is deleted. This
        allows the caller to add the same shader to multiple shader programs.

        **See also** **addShaderFromSourceCode** (), **addShaderFromSourceFile**
        (), **removeShader** (), **link** (), and **removeAllShaders** ().
        """
        ...

    @typing.overload
    def addShaderFromSourceCode(
        self,
        type: PySide2.QtOpenGL.QGLShader.ShaderType,
        source: PySide2.QtCore.QByteArray,
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#addShaderFromSourceCode

        **bool QGLShaderProgram::addShaderFromSourceCode(QGLShader::ShaderType
        type , const char * source )**

        Compiles **source** as a shader of the specified **type** and adds it to
        this shader program. Returns `true` if compilation was successful, false
        otherwise. The compilation errors and warnings will be made available
        via **log** ().

        This function is intended to be a short-cut for quickly adding vertex
        and fragment shaders to a shader program without creating an instance of
        QGLShader first.

        **See also** **addShader** (), **addShaderFromSourceFile** (),
        **removeShader** (), **link** (), **log** (), and **removeAllShaders**
        ().
        """
        ...

    @typing.overload
    def addShaderFromSourceCode(
        self, type: PySide2.QtOpenGL.QGLShader.ShaderType, source: str
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#addShaderFromSourceCode

        **bool QGLShaderProgram::addShaderFromSourceCode(QGLShader::ShaderType
        type , const char * source )**

        Compiles **source** as a shader of the specified **type** and adds it to
        this shader program. Returns `true` if compilation was successful, false
        otherwise. The compilation errors and warnings will be made available
        via **log** ().

        This function is intended to be a short-cut for quickly adding vertex
        and fragment shaders to a shader program without creating an instance of
        QGLShader first.

        **See also** **addShader** (), **addShaderFromSourceFile** (),
        **removeShader** (), **link** (), **log** (), and **removeAllShaders**
        ().
        """
        ...

    @typing.overload
    def addShaderFromSourceCode(
        self, type: PySide2.QtOpenGL.QGLShader.ShaderType, source: bytes
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#addShaderFromSourceCode

        **bool QGLShaderProgram::addShaderFromSourceCode(QGLShader::ShaderType
        type , const char * source )**

        Compiles **source** as a shader of the specified **type** and adds it to
        this shader program. Returns `true` if compilation was successful, false
        otherwise. The compilation errors and warnings will be made available
        via **log** ().

        This function is intended to be a short-cut for quickly adding vertex
        and fragment shaders to a shader program without creating an instance of
        QGLShader first.

        **See also** **addShader** (), **addShaderFromSourceFile** (),
        **removeShader** (), **link** (), **log** (), and **removeAllShaders**
        ().
        """
        ...

    def addShaderFromSourceFile(
        self, type: PySide2.QtOpenGL.QGLShader.ShaderType, fileName: str
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#addShaderFromSourceFile

        **bool QGLShaderProgram::addShaderFromSourceFile(QGLShader::ShaderType
        type , const QString & fileName )**

        Compiles the contents of **fileName** as a shader of the specified
        **type** and adds it to this shader program. Returns `true` if
        compilation was successful, false otherwise. The compilation errors and
        warnings will be made available via **log** ().

        This function is intended to be a short-cut for quickly adding vertex
        and fragment shaders to a shader program without creating an instance of
        QGLShader first.

        **See also** **addShader** () and **addShaderFromSourceCode** ().
        """
        ...

    @typing.overload
    def attributeLocation(self, name: PySide2.QtCore.QByteArray) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#attributeLocation

        **int QGLShaderProgram::attributeLocation(const char * name ) const**

        Returns the location of the attribute **name** within this shader
        program's parameter list. Returns -1 if **name** is not a valid
        attribute for this shader program.

        **See also** **uniformLocation** () and **bindAttributeLocation** ().
        """
        ...

    @typing.overload
    def attributeLocation(self, name: str) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#attributeLocation

        **int QGLShaderProgram::attributeLocation(const char * name ) const**

        Returns the location of the attribute **name** within this shader
        program's parameter list. Returns -1 if **name** is not a valid
        attribute for this shader program.

        **See also** **uniformLocation** () and **bindAttributeLocation** ().
        """
        ...

    @typing.overload
    def attributeLocation(self, name: bytes) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#attributeLocation

        **int QGLShaderProgram::attributeLocation(const char * name ) const**

        Returns the location of the attribute **name** within this shader
        program's parameter list. Returns -1 if **name** is not a valid
        attribute for this shader program.

        **See also** **uniformLocation** () and **bindAttributeLocation** ().
        """
        ...

    def bind(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#bind

        **bool QGLShaderProgram::bind()**

        Binds this shader program to the active QGLContext and makes it the
        current shader program. Any previously bound shader program is released.
        This is equivalent to calling `glUseProgram()` on **programId** ().
        Returns `true` if the program was successfully bound; false otherwise.
        If the shader program has not yet been linked, or it needs to be re-
        linked, this function will call **link** ().

        **See also** **link** () and **release** ().
        """
        ...

    @typing.overload
    def bindAttributeLocation(
        self, name: PySide2.QtCore.QByteArray, location: int
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#bindAttributeLocation

        **void QGLShaderProgram::bindAttributeLocation(const char * name , int
        location )**

        Binds the attribute **name** to the specified **location**. This
        function can be called before or after the program has been linked. Any
        attributes that have not been explicitly bound when the program is
        linked will be assigned locations automatically.

        When this function is called after the program has been linked, the
        program will need to be relinked for the change to take effect.

        **See also** **attributeLocation** ().
        """
        ...

    @typing.overload
    def bindAttributeLocation(self, name: str, location: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#bindAttributeLocation

        **void QGLShaderProgram::bindAttributeLocation(const char * name , int
        location )**

        Binds the attribute **name** to the specified **location**. This
        function can be called before or after the program has been linked. Any
        attributes that have not been explicitly bound when the program is
        linked will be assigned locations automatically.

        When this function is called after the program has been linked, the
        program will need to be relinked for the change to take effect.

        **See also** **attributeLocation** ().
        """
        ...

    @typing.overload
    def bindAttributeLocation(self, name: bytes, location: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#bindAttributeLocation

        **void QGLShaderProgram::bindAttributeLocation(const char * name , int
        location )**

        Binds the attribute **name** to the specified **location**. This
        function can be called before or after the program has been linked. Any
        attributes that have not been explicitly bound when the program is
        linked will be assigned locations automatically.

        When this function is called after the program has been linked, the
        program will need to be relinked for the change to take effect.

        **See also** **attributeLocation** ().
        """
        ...

    @typing.overload
    def disableAttributeArray(self, location: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#disableAttributeArray

        **void QGLShaderProgram::disableAttributeArray(int location )**

        Disables the vertex array at **location** in this shader program that
        was enabled by a previous call to **enableAttributeArray** ().

        **See also** **enableAttributeArray** (), **setAttributeArray** (),
        **setAttributeValue** (), and **setUniformValue** ().
        """
        ...

    @typing.overload
    def disableAttributeArray(self, name: bytes) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#disableAttributeArray

        **void QGLShaderProgram::disableAttributeArray(int location )**

        Disables the vertex array at **location** in this shader program that
        was enabled by a previous call to **enableAttributeArray** ().

        **See also** **enableAttributeArray** (), **setAttributeArray** (),
        **setAttributeValue** (), and **setUniformValue** ().
        """
        ...

    @typing.overload
    def enableAttributeArray(self, location: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#enableAttributeArray

        **void QGLShaderProgram::enableAttributeArray(int location )**

        Enables the vertex array at **location** in this shader program so that
        the value set by **setAttributeArray** () on **location** will be used
        by the shader program.

        **See also** **disableAttributeArray** (), **setAttributeArray** (),
        **setAttributeValue** (), and **setUniformValue** ().
        """
        ...

    @typing.overload
    def enableAttributeArray(self, name: bytes) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#enableAttributeArray

        **void QGLShaderProgram::enableAttributeArray(int location )**

        Enables the vertex array at **location** in this shader program so that
        the value set by **setAttributeArray** () on **location** will be used
        by the shader program.

        **See also** **disableAttributeArray** (), **setAttributeArray** (),
        **setAttributeValue** (), and **setUniformValue** ().
        """
        ...

    def geometryInputType(self) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#geometryInputType

        **GLenum QGLShaderProgram::geometryInputType() const**

        Returns the geometry shader input type, if active.

        This parameter takes effect the next time the program is linked.

        This function was introduced in Qt 4.7.

        **See also** **setGeometryInputType** ().
        """
        ...

    def geometryOutputType(self) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#geometryOutputType

        **GLenum QGLShaderProgram::geometryOutputType() const**

        Returns the geometry shader output type, if active.

        This parameter takes effect the next time the program is linked.

        This function was introduced in Qt 4.7.

        **See also** **setGeometryOutputType** ().
        """
        ...

    def geometryOutputVertexCount(self) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#geometryOutputVertexCount

        **int QGLShaderProgram::geometryOutputVertexCount() const**

        Returns the maximum number of vertices the current geometry shader
        program will produce, if active.

        This parameter takes effect the ntext time the program is linked.

        This function was introduced in Qt 4.7.

        **See also** **setGeometryOutputVertexCount** ().
        """
        ...

    @staticmethod
    def hasOpenGLShaderPrograms(
        context: typing.Optional[PySide2.QtOpenGL.QGLContext] = ...,
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#hasOpenGLShaderPrograms

        **[static] bool QGLShaderProgram::hasOpenGLShaderPrograms(const
        QGLContext * context = nullptr)**

        Returns `true` if shader programs written in the OpenGL Shading Language
        (GLSL) are supported on this system; false otherwise.

        The **context** is used to resolve the GLSL extensions. If **context**
        is `nullptr`, then **QGLContext::currentContext** () is used.
        """
        ...

    def isLinked(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#isLinked

        **bool QGLShaderProgram::isLinked() const**

        Returns `true` if this shader program has been linked; false otherwise.

        **See also** **link** ().
        """
        ...

    def link(self) -> bool:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#link

        **[virtual] bool QGLShaderProgram::link()**

        Links together the shaders that were added to this program with
        **addShader** (). Returns `true` if the link was successful or false
        otherwise. If the link failed, the error messages can be retrieved with
        **log** ().

        Subclasses can override this function to initialize attributes and
        uniform variables for use in specific shader programs.

        If the shader program was already linked, calling this function again
        will force it to be re-linked.

        **See also** **addShader** () and **log** ().
        """
        ...

    def log(self) -> str:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#log

        **QString QGLShaderProgram::log() const**

        Returns the errors and warnings that occurred during the last **link**
        () or **addShader** () with explicitly specified source code.

        **See also** **link** ().
        """
        ...

    def maxGeometryOutputVertices(self) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#maxGeometryOutputVertices

        **int QGLShaderProgram::maxGeometryOutputVertices() const**

        Returns the hardware limit for how many vertices a geometry shader can
        output.

        This function was introduced in Qt 4.7.

        **See also** **setGeometryOutputVertexCount** ().
        """
        ...

    def programId(self) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#programId

        **GLuint QGLShaderProgram::programId() const**

        Returns the OpenGL identifier associated with this shader program.

        **See also** **QGLShader::shaderId** ().
        """
        ...

    def release(self) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#release

        **void QGLShaderProgram::release()**

        Releases the active shader program from the current QGLContext. This is
        equivalent to calling `glUseProgram(0)`.

        **See also** **bind** ().
        """
        ...

    def removeAllShaders(self) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#removeAllShaders

        **void QGLShaderProgram::removeAllShaders()**

        Removes all of the shaders that were added to this program previously.
        The QGLShader objects for the shaders will not be deleted if they were
        constructed externally. QGLShader objects that are constructed
        internally by **QGLShaderProgram**  will be deleted.

        **See also** **addShader** () and **removeShader** ().
        """
        ...

    def removeShader(self, shader: PySide2.QtOpenGL.QGLShader) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#removeShader

        **void QGLShaderProgram::removeShader(QGLShader * shader )**

        Removes **shader** from this shader program. The object is not deleted.

        The shader program must be valid in the current QGLContext.

        **See also** **addShader** (), **link** (), and **removeAllShaders** ().
        """
        ...

    @typing.overload
    def setAttributeArray2D(
        self, location: int, values: PySide2.QtGui.QVector2D, stride: int = ...
    ) -> None:
        ...

    @typing.overload
    def setAttributeArray2D(
        self, name: bytes, values: PySide2.QtGui.QVector2D, stride: int = ...
    ) -> None:
        ...

    @typing.overload
    def setAttributeArray3D(
        self, location: int, values: PySide2.QtGui.QVector3D, stride: int = ...
    ) -> None:
        ...

    @typing.overload
    def setAttributeArray3D(
        self, name: bytes, values: PySide2.QtGui.QVector3D, stride: int = ...
    ) -> None:
        ...

    @typing.overload
    def setAttributeArray4D(
        self, location: int, values: PySide2.QtGui.QVector4D, stride: int = ...
    ) -> None:
        ...

    @typing.overload
    def setAttributeArray4D(
        self, name: bytes, values: PySide2.QtGui.QVector4D, stride: int = ...
    ) -> None:
        ...

    @typing.overload
    def setAttributeBuffer(
        self, location: int, type: int, offset: int, tupleSize: int, stride: int = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeBuffer

        **void QGLShaderProgram::setAttributeBuffer(int location , GLenum type ,
        int offset , int tupleSize , int stride = 0)**

        Sets an array of vertex values on the attribute at **location** in this
        shader program, starting at a specific **offset** in the currently bound
        vertex buffer. The **stride** indicates the number of bytes between
        vertices. A default **stride** value of zero indicates that the vertices
        are densely packed in the value array.

        The **type** indicates the type of elements in the vertex value array,
        usually `GL_FLOAT`, `GL_UNSIGNED_BYTE`, etc. The **tupleSize** indicates
        the number of components per vertex: 1, 2, 3, or 4.

        The array will become active when **enableAttributeArray** () is called
        on the **location**. Otherwise the value specified with
        **setAttributeValue** () for **location** will be used.

        **Note:** Normalization will be enabled. If this is not desired, call
        glVertexAttribPointer directly though QGLFunctions.

        This function was introduced in Qt 4.7.

        **See also** **setAttributeArray** ().
        """
        ...

    @typing.overload
    def setAttributeBuffer(
        self, name: bytes, type: int, offset: int, tupleSize: int, stride: int = ...
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeBuffer

        **void QGLShaderProgram::setAttributeBuffer(int location , GLenum type ,
        int offset , int tupleSize , int stride = 0)**

        Sets an array of vertex values on the attribute at **location** in this
        shader program, starting at a specific **offset** in the currently bound
        vertex buffer. The **stride** indicates the number of bytes between
        vertices. A default **stride** value of zero indicates that the vertices
        are densely packed in the value array.

        The **type** indicates the type of elements in the vertex value array,
        usually `GL_FLOAT`, `GL_UNSIGNED_BYTE`, etc. The **tupleSize** indicates
        the number of components per vertex: 1, 2, 3, or 4.

        The array will become active when **enableAttributeArray** () is called
        on the **location**. Otherwise the value specified with
        **setAttributeValue** () for **location** will be used.

        **Note:** Normalization will be enabled. If this is not desired, call
        glVertexAttribPointer directly though QGLFunctions.

        This function was introduced in Qt 4.7.

        **See also** **setAttributeArray** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, value: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, value: PySide2.QtGui.QColor) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, value: PySide2.QtGui.QVector2D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, value: PySide2.QtGui.QVector3D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, value: PySide2.QtGui.QVector4D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, x: float, y: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, location: int, x: float, y: float, z: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(
        self, location: int, x: float, y: float, z: float, w: float
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, value: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, value: PySide2.QtGui.QColor) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, value: PySide2.QtGui.QVector2D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, value: PySide2.QtGui.QVector3D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, value: PySide2.QtGui.QVector4D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, x: float, y: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(self, name: bytes, x: float, y: float, z: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    @typing.overload
    def setAttributeValue(
        self, name: bytes, x: float, y: float, z: float, w: float
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setAttributeValue

        **void QGLShaderProgram::setAttributeValue(int location , GLfloat value
        )**

        Sets the attribute at **location** in the current context to **value**.

        **See also** **setUniformValue** ().
        """
        ...

    def setGeometryInputType(self, inputType: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setGeometryInputType

        **void QGLShaderProgram::setGeometryInputType(GLenum inputType )**

        Sets the input type from **inputType**.

        This parameter takes effect the next time the program is linked.

        **See also** **geometryInputType** ().
        """
        ...

    def setGeometryOutputType(self, outputType: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setGeometryOutputType

        **void QGLShaderProgram::setGeometryOutputType(GLenum outputType )**

        Sets the output type from the geometry shader, if active, to
        **outputType**.

        This parameter takes effect the next time the program is linked.

        This function was introduced in Qt 4.7.

        **See also** **geometryOutputType** ().
        """
        ...

    def setGeometryOutputVertexCount(self, count: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setGeometryOutputVertexCoun
        t

        **void QGLShaderProgram::setGeometryOutputVertexCount(int count )**

        Sets the maximum number of vertices the current geometry shader program
        will produce, if active, to **count**.

        This parameter takes effect the next time the program is linked.

        This function was introduced in Qt 4.7.

        **See also** **geometryOutputVertexCount** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, color: PySide2.QtGui.QColor) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, point: PySide2.QtCore.QPoint) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, point: PySide2.QtCore.QPointF) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, size: PySide2.QtCore.QSize) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, size: PySide2.QtCore.QSizeF) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix2x2) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix2x3) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix2x4) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix3x2) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix3x3) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix3x4) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix4x2) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix4x3) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QMatrix4x4) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QTransform) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QVector2D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QVector3D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, value: PySide2.QtGui.QVector4D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, x: float, y: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, location: int, x: float, y: float, z: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(
        self, location: int, x: float, y: float, z: float, w: float
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, color: PySide2.QtGui.QColor) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, point: PySide2.QtCore.QPoint) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, point: PySide2.QtCore.QPointF) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, size: PySide2.QtCore.QSize) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, size: PySide2.QtCore.QSizeF) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: int) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix2x2) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix2x3) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix2x4) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix3x2) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix3x3) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix3x4) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix4x2) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix4x3) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QMatrix4x4) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QTransform) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QVector2D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QVector3D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, value: PySide2.QtGui.QVector4D) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, x: float, y: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(self, name: bytes, x: float, y: float, z: float) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValue(
        self, name: bytes, x: float, y: float, z: float, w: float
    ) -> None:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#setUniformValue

        **void QGLShaderProgram::setUniformValue(int location , GLfloat value
        )**

        Sets the uniform variable at **location** in the current context to
        **value**.

        **See also** **setAttributeValue** ().
        """
        ...

    @typing.overload
    def setUniformValueArray2D(
        self, location: int, values: PySide2.QtGui.QVector2D, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2D(
        self, name: bytes, values: PySide2.QtGui.QVector2D, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2x2(
        self, location: int, values: PySide2.QtGui.QMatrix2x2, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2x2(
        self, name: bytes, values: PySide2.QtGui.QMatrix2x2, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2x3(
        self, location: int, values: PySide2.QtGui.QMatrix2x3, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2x3(
        self, name: bytes, values: PySide2.QtGui.QMatrix2x3, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2x4(
        self, location: int, values: PySide2.QtGui.QMatrix2x4, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray2x4(
        self, name: bytes, values: PySide2.QtGui.QMatrix2x4, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3D(
        self, location: int, values: PySide2.QtGui.QVector3D, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3D(
        self, name: bytes, values: PySide2.QtGui.QVector3D, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3x2(
        self, location: int, values: PySide2.QtGui.QMatrix3x2, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3x2(
        self, name: bytes, values: PySide2.QtGui.QMatrix3x2, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3x3(
        self, location: int, values: PySide2.QtGui.QMatrix3x3, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3x3(
        self, name: bytes, values: PySide2.QtGui.QMatrix3x3, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3x4(
        self, location: int, values: PySide2.QtGui.QMatrix3x4, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray3x4(
        self, name: bytes, values: PySide2.QtGui.QMatrix3x4, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4D(
        self, location: int, values: PySide2.QtGui.QVector4D, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4D(
        self, name: bytes, values: PySide2.QtGui.QVector4D, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4x2(
        self, location: int, values: PySide2.QtGui.QMatrix4x2, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4x2(
        self, name: bytes, values: PySide2.QtGui.QMatrix4x2, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4x3(
        self, location: int, values: PySide2.QtGui.QMatrix4x3, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4x3(
        self, name: bytes, values: PySide2.QtGui.QMatrix4x3, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4x4(
        self, location: int, values: PySide2.QtGui.QMatrix4x4, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArray4x4(
        self, name: bytes, values: PySide2.QtGui.QMatrix4x4, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArrayInt(
        self, location: int, values: typing.Sequence, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArrayInt(
        self, name: bytes, values: typing.Sequence, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArrayUint(
        self, location: int, values: typing.Sequence, count: int
    ) -> None:
        ...

    @typing.overload
    def setUniformValueArrayUint(
        self, name: bytes, values: typing.Sequence, count: int
    ) -> None:
        ...

    def shaders(self) -> typing.List:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#shaders

        **QList<QGLShader *> QGLShaderProgram::shaders() const**

        Returns a list of all shaders that have been added to this shader
        program using **addShader** ().

        **See also** **addShader** () and **removeShader** ().
        """
        ...

    @typing.overload
    def uniformLocation(self, name: PySide2.QtCore.QByteArray) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#uniformLocation

        **int QGLShaderProgram::uniformLocation(const char * name ) const**

        Returns the location of the uniform variable **name** within this shader
        program's parameter list. Returns -1 if **name** is not a valid uniform
        variable for this shader program.

        **See also** **attributeLocation** ().
        """
        ...

    @typing.overload
    def uniformLocation(self, name: str) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#uniformLocation

        **int QGLShaderProgram::uniformLocation(const char * name ) const**

        Returns the location of the uniform variable **name** within this shader
        program's parameter list. Returns -1 if **name** is not a valid uniform
        variable for this shader program.

        **See also** **attributeLocation** ().
        """
        ...

    @typing.overload
    def uniformLocation(self, name: bytes) -> int:
        """
        https://doc.qt.io/qt-5/qglshaderprogram.html#uniformLocation

        **int QGLShaderProgram::uniformLocation(const char * name ) const**

        Returns the location of the uniform variable **name** within this shader
        program's parameter list. Returns -1 if **name** is not a valid uniform
        variable for this shader program.

        **See also** **attributeLocation** ().
        """
        ...
