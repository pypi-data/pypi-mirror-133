"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptValueIterator(object):
    """
    https://doc.qt.io/qt-5/qscriptvalueiterator.html

    **Detailed Description**

    The QScriptValueIterator constructor takes a **QScriptValue**  as argument.
    After construction, the iterator is located at the very beginning of the
    sequence of properties. Here\'s how to iterate over all the properties of a
    **QScriptValue** :

    **QScriptValue**  object;
        ...
        **QScriptValueIterator**  it(object);
    while (it.hasNext()) {
            it.next();
            **qDebug** () << it.name()
    << ": " << it.value().toString();
        }

    The **next** () advances the iterator. The **name** (), **value** () and
    **flags** () functions return the name, value and flags of the last item
    that was jumped over.

    If you want to remove properties as you iterate over the **QScriptValue** ,
    use **remove** (). If you want to modify the value of a property, use
    **setValue** ().

    Note that QScriptValueIterator only iterates over the **QScriptValue** \'s
    own properties; i.e. it does not follow the prototype chain. You can use a
    loop like this to follow the prototype chain:

    **QScriptValue**  obj = ...; // the object to iterate over
        while
    (obj.isObject()) {
            **QScriptValueIterator**  it(obj);
            while
    (it.hasNext()) {
                it.next();
                **qDebug** () <<
    it.name();
            }
            obj = obj.prototype();
        }

    Note that QScriptValueIterator will not automatically skip over properties
    that have the **QScriptValue::SkipInEnumeration**  flag set; that flag only
    affects iteration in script code. If you want, you can skip over such
    properties with code like the following:

    while (it.hasNext()) {
            it.next();
            if (it.flags() &
    **QScriptValue** ::SkipInEnumeration)
                continue;
    **qDebug** () << "found enumerated property:" << it.name();
        }

    **See also** **QScriptValue::property** ().
    """

    def __init__(self, value: PySide2.QtScript.QScriptValue) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#QScriptValueIterator

        **QScriptValueIterator::QScriptValueIterator(const QScriptValue & object
        )**

        Constructs an iterator for traversing **object**. The iterator is set to
        be at the front of the sequence of properties (before the first
        property).
        """
        ...

    def __iter__(self) -> object:
        ...

    def __next__(self) -> object:
        ...

    def flags(self) -> PySide2.QtScript.QScriptValue.PropertyFlags:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#flags

        **QScriptValue::PropertyFlags QScriptValueIterator::flags() const**

        Returns the flags of the last property that was jumped over using
        **next** () or **previous** ().

        **See also** **value** ().
        """
        ...

    def hasNext(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#hasNext

        **bool QScriptValueIterator::hasNext() const**

        Returns true if there is at least one item ahead of the iterator (i.e.
        the iterator is **not** at the back of the property sequence); otherwise
        returns false.

        **See also** **next** () and **hasPrevious** ().
        """
        ...

    def hasPrevious(self) -> bool:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#hasPrevious

        **bool QScriptValueIterator::hasPrevious() const**

        Returns true if there is at least one item behind the iterator (i.e. the
        iterator is **not** at the front of the property sequence); otherwise
        returns false.

        **See also** **previous** () and **hasNext** ().
        """
        ...

    def name(self) -> str:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#name

        **QString QScriptValueIterator::name() const**

        Returns the name of the last property that was jumped over using
        **next** () or **previous** ().

        **See also** **value** () and **flags** ().
        """
        ...

    def next(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#next

        **void QScriptValueIterator::next()**

        Advances the iterator by one position.

        Calling this function on an iterator located at the back of the
        container leads to undefined results.

        **See also** **hasNext** (), **previous** (), and **name** ().
        """
        ...

    def previous(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#previous

        **void QScriptValueIterator::previous()**

        Moves the iterator back by one position.

        Calling this function on an iterator located at the front of the
        container leads to undefined results.

        **See also** **hasPrevious** (), **next** (), and **name** ().
        """
        ...

    def remove(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#remove

        **void QScriptValueIterator::remove()**

        Removes the last property that was jumped over using **next** () or
        **previous** ().

        **See also** **setValue** ().
        """
        ...

    def scriptName(self) -> PySide2.QtScript.QScriptString:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#scriptName

        **QScriptString QScriptValueIterator::scriptName() const**

        Returns the name of the last property that was jumped over using
        **next** () or **previous** ().

        This function was introduced in Qt 4.4.
        """
        ...

    def setValue(self, value: PySide2.QtScript.QScriptValue) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#setValue

        **void QScriptValueIterator::setValue(const QScriptValue & value )**

        Sets the **value** of the last property that was jumped over using
        **next** () or **previous** ().

        **See also** **value** () and **name** ().
        """
        ...

    def toBack(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#toBack

        **void QScriptValueIterator::toBack()**

        Moves the iterator to the back of the **QScriptValue**  (after the last
        property).

        **See also** **toFront** () and **previous** ().
        """
        ...

    def toFront(self) -> None:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#toFront

        **void QScriptValueIterator::toFront()**

        Moves the iterator to the front of the **QScriptValue**  (before the
        first property).

        **See also** **toBack** () and **next** ().
        """
        ...

    def value(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptvalueiterator.html#value

        **QScriptValue QScriptValueIterator::value() const**

        Returns the value of the last property that was jumped over using
        **next** () or **previous** ().

        **See also** **setValue** () and **name** ().
        """
        ...
