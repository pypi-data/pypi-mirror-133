"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtScript

bytes = str


class QScriptable(object):
    """
    https://doc.qt.io/qt-5/qscriptable.html

    **Detailed Description**

    With **QScriptEngine::newQObject** (), you can expose the signals and slots
    and properties of any **QObject**  (or subclass) to script code. QScriptable
    augments this functionality by giving your C++ members access to the Qt
    Script environment they are invoked in; conceptually, it is similar to
    **QObject::sender** ().

    By subclassing QScriptable, you get the following functions in your class:
    **thisObject** (), **argumentCount** (), **argument** (), **context** () and
    **engine** (). With these functions, you have full access to the Qt Script
    environment from the slots and property access functions of your class, when
    they are invoked from script code.

    For example, you can throw a Qt Script exception from a slot; manipulate the
    `this\' object associated with the function call; inspect the arguments
    stored in the **QScriptContext**  to know the "real" arguments passed to the
    function from script code; and call script functions from your slot.

    A typical use case of QScriptable is to implement prototype objects for
    custom C++ types. You define the scriptable interface of your custom type in
    a QScriptable subclass using properties and slots; then you wrap an instance
    of your class using **QScriptEngine::newQObject** (), and finally pass the
    result to **QScriptEngine::setDefaultPrototype** (). See the **Default
    Prototypes Example**  to see how this can be done.

    The following is what subclassing QScriptable typically looks like:

    class MyScriptableObject: public **QObject** ,
              protected
    QScriptable
        {
            Q_OBJECT
        ...

        public slots:
    void doSomething();
            double doSomethingElse();
        }

    The only difference from regular **QObject**  subclassing is that you also
    inherit from QScriptable.

    In the implementation of your slots, you can then use the functions
    inherited from QScriptable:

    void MyScriptableObject::doSomething()
        {
    context()->throwError("Threw an error from a slot");
        }

        double
    MyScriptableObject::doSomethingElse()
        {
          return
    qscriptvalue_cast<double>(thisObject());
        }

    **See also** **Default Prototypes Example**  and
    **QScriptEngine::newFunction** ().
    """

    def __init__(self) -> None:
        ...

    def argument(self, index: int) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptable.html#argument

        **QScriptValue QScriptable::argument(int index ) const**

        Returns the function argument at the given **index** , or an invalid
        **QScriptValue**  if the Qt function was not invoked from script code.

        **See also** **argumentCount** ().
        """
        ...

    def argumentCount(self) -> int:
        """
        https://doc.qt.io/qt-5/qscriptable.html#argumentCount

        **int QScriptable::argumentCount() const**

        Returns the number of arguments passed to the function in this
        invocation, or -1 if the Qt function was not invoked from script code.

        **See also** **argument** ().
        """
        ...

    def context(self) -> PySide2.QtScript.QScriptContext:
        """
        https://doc.qt.io/qt-5/qscriptable.html#context

        **QScriptContext *QScriptable::context() const**

        Returns a pointer to the **QScriptContext**  associated with the current
        Qt function call, or 0 if the Qt function was not invoked from script
        code.
        """
        ...

    def engine(self) -> PySide2.QtScript.QScriptEngine:
        """
        https://doc.qt.io/qt-5/qscriptable.html#engine

        **QScriptEngine *QScriptable::engine() const**

        Returns a pointer to the **QScriptEngine**  associated with the current
        Qt function call, or 0 if the Qt function was not invoked from script
        code.
        """
        ...

    def thisObject(self) -> PySide2.QtScript.QScriptValue:
        """
        https://doc.qt.io/qt-5/qscriptable.html#thisObject

        **QScriptValue QScriptable::thisObject() const**

        Returns the `this' object associated with the current Qt function call,
        or an invalid **QScriptValue**  if the Qt function was not invoked from
        script code.
        """
        ...
