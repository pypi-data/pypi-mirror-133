"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia

bytes = str


class QCameraExposure(PySide2.QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qcameraexposure.html

    **Detailed Description**
    """

    ExposureAuto: QCameraExposure = ...
    ExposureManual: QCameraExposure = ...
    FlashAuto: QCameraExposure = ...
    MeteringMatrix: QCameraExposure = ...
    ExposurePortrait: QCameraExposure = ...
    FlashOff: QCameraExposure = ...
    MeteringAverage: QCameraExposure = ...
    ExposureNight: QCameraExposure = ...
    MeteringSpot: QCameraExposure = ...
    ExposureBacklight: QCameraExposure = ...
    FlashOn: QCameraExposure = ...
    ExposureSpotlight: QCameraExposure = ...
    ExposureSports: QCameraExposure = ...
    ExposureSnow: QCameraExposure = ...
    ExposureBeach: QCameraExposure = ...
    FlashRedEyeReduction: QCameraExposure = ...
    ExposureLargeAperture: QCameraExposure = ...
    ExposureSmallAperture: QCameraExposure = ...
    ExposureAction: QCameraExposure = ...
    ExposureLandscape: QCameraExposure = ...
    ExposureNightPortrait: QCameraExposure = ...
    ExposureTheatre: QCameraExposure = ...
    ExposureSunset: QCameraExposure = ...
    ExposureSteadyPhoto: QCameraExposure = ...
    FlashFill: QCameraExposure = ...
    ExposureFireworks: QCameraExposure = ...
    ExposureParty: QCameraExposure = ...
    ExposureCandlelight: QCameraExposure = ...
    ExposureBarcode: QCameraExposure = ...
    FlashTorch: QCameraExposure = ...
    FlashVideoLight: QCameraExposure = ...
    FlashSlowSyncFrontCurtain: QCameraExposure = ...
    FlashSlowSyncRearCurtain: QCameraExposure = ...
    FlashManual: QCameraExposure = ...
    ExposureModeVendor: QCameraExposure = ...

    class ExposureMode(object):
        ExposureAuto: QCameraExposure.ExposureMode = ...
        ExposureManual: QCameraExposure.ExposureMode = ...
        ExposurePortrait: QCameraExposure.ExposureMode = ...
        ExposureNight: QCameraExposure.ExposureMode = ...
        ExposureBacklight: QCameraExposure.ExposureMode = ...
        ExposureSpotlight: QCameraExposure.ExposureMode = ...
        ExposureSports: QCameraExposure.ExposureMode = ...
        ExposureSnow: QCameraExposure.ExposureMode = ...
        ExposureBeach: QCameraExposure.ExposureMode = ...
        ExposureLargeAperture: QCameraExposure.ExposureMode = ...
        ExposureSmallAperture: QCameraExposure.ExposureMode = ...
        ExposureAction: QCameraExposure.ExposureMode = ...
        ExposureLandscape: QCameraExposure.ExposureMode = ...
        ExposureNightPortrait: QCameraExposure.ExposureMode = ...
        ExposureTheatre: QCameraExposure.ExposureMode = ...
        ExposureSunset: QCameraExposure.ExposureMode = ...
        ExposureSteadyPhoto: QCameraExposure.ExposureMode = ...
        ExposureFireworks: QCameraExposure.ExposureMode = ...
        ExposureParty: QCameraExposure.ExposureMode = ...
        ExposureCandlelight: QCameraExposure.ExposureMode = ...
        ExposureBarcode: QCameraExposure.ExposureMode = ...
        ExposureModeVendor: QCameraExposure.ExposureMode = ...

    class FlashMode(object):
        FlashAuto: QCameraExposure.FlashMode = ...
        FlashOff: QCameraExposure.FlashMode = ...
        FlashOn: QCameraExposure.FlashMode = ...
        FlashRedEyeReduction: QCameraExposure.FlashMode = ...
        FlashFill: QCameraExposure.FlashMode = ...
        FlashTorch: QCameraExposure.FlashMode = ...
        FlashVideoLight: QCameraExposure.FlashMode = ...
        FlashSlowSyncFrontCurtain: QCameraExposure.FlashMode = ...
        FlashSlowSyncRearCurtain: QCameraExposure.FlashMode = ...
        FlashManual: QCameraExposure.FlashMode = ...

    class FlashModes(object):
        ...

    class MeteringMode(object):
        MeteringMatrix: QCameraExposure.MeteringMode = ...
        MeteringAverage: QCameraExposure.MeteringMode = ...
        MeteringSpot: QCameraExposure.MeteringMode = ...

    def aperture(self) -> float:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#aperture-prop

        **aperture : const qreal**

        Lens aperture is specified as an F number, the ratio of the focal length
        to effective aperture diameter.

        **Access functions:**

        qreal **aperture** () const

        **Notifier signal:**

        void ****apertureChanged** ** (qreal **value** )

        **See also** **supportedApertures** (), **setAutoAperture** (),
        **setManualAperture** (), and **requestedAperture** ().
        """
        ...

    def exposureCompensation(self) -> float:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#exposureCompensation-prop

        **exposureCompensation : qreal**

        Exposure compensation in EV units.

        Exposure compensation property allows to adjust the automatically
        calculated exposure.

        **Access functions:**

        qreal **exposureCompensation** () const
        void
        **setExposureCompensation** (qreal **ev** )

        **Notifier signal:**

        void ****exposureCompensationChanged** ** (qreal **value** )
        """
        ...

    def exposureMode(self) -> PySide2.QtMultimedia.QCameraExposure.ExposureMode:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#exposureMode-prop

        **exposureMode : QCameraExposure::ExposureMode**

        This property holds the exposure mode being used.

        **Access functions:**

        QCameraExposure::ExposureMode **exposureMode** () const
        void
        **setExposureMode** (QCameraExposure::ExposureMode **mode** )

        **See also** **QCameraExposure::isExposureModeSupported** ().
        """
        ...

    def flashMode(self) -> PySide2.QtMultimedia.QCameraExposure.FlashModes:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#flashMode-prop

        **flashMode : QCameraExposure::FlashModes**

        This property holds the flash mode being used.

        Usually the single **QCameraExposure::FlashMode**  flag is used, but
        some non conflicting flags combination are also allowed, like
        **QCameraExposure::FlashManual**  |
        **QCameraExposure::FlashSlowSyncRearCurtain** .

        **Access functions:**

        QCameraExposure::FlashModes **flashMode** () const
        void
        **setFlashMode** (QCameraExposure::FlashModes **mode** )

        **See also** **QCameraExposure::isFlashModeSupported** () and
        **QCameraExposure::isFlashReady** ().
        """
        ...

    def isAvailable(self) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isAvailable

        **bool QCameraExposure::isAvailable() const**

        Returns true if exposure settings are supported by this camera.
        """
        ...

    def isExposureModeSupported(
        self, mode: PySide2.QtMultimedia.QCameraExposure.ExposureMode
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isExposureModeSupported

        **bool
        QCameraExposure::isExposureModeSupported(QCameraExposure::ExposureMode
        mode ) const**

        Returns true if the exposure **mode** is supported.
        """
        ...

    def isFlashModeSupported(
        self, mode: PySide2.QtMultimedia.QCameraExposure.FlashModes
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isFlashModeSupported

        **bool QCameraExposure::isFlashModeSupported(QCameraExposure::FlashModes
        mode ) const**

        Returns true if the flash **mode** is supported.
        """
        ...

    def isFlashReady(self) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isFlashReady

        **bool QCameraExposure::isFlashReady() const**

        Returns true if flash is charged.

        **Note:** Getter function for property **flashReady** .
        """
        ...

    def isMeteringModeSupported(
        self, mode: PySide2.QtMultimedia.QCameraExposure.MeteringMode
    ) -> bool:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isMeteringModeSupported

        **bool
        QCameraExposure::isMeteringModeSupported(QCameraExposure::MeteringMode
        mode ) const**

        Returns true if the metering **mode** is supported.
        """
        ...

    def isoSensitivity(self) -> int:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isoSensitivity-prop

        **isoSensitivity : const int**

        This property holds the sensor ISO sensitivity.

        **Access functions:**

        int **isoSensitivity** () const

        **Notifier signal:**

        void ****isoSensitivityChanged** ** (int **value** )

        **See also** **supportedIsoSensitivities** (), **setAutoIsoSensitivity**
        (), and **setManualIsoSensitivity** ().
        """
        ...

    def meteringMode(self) -> PySide2.QtMultimedia.QCameraExposure.MeteringMode:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#meteringMode-prop

        **meteringMode : QCameraExposure::MeteringMode**

        This property holds the metering mode being used.

        **Access functions:**

        QCameraExposure::MeteringMode **meteringMode** () const
        void
        **setMeteringMode** (QCameraExposure::MeteringMode **mode** )

        **See also** **QCameraExposure::isMeteringModeSupported** ().
        """
        ...

    def requestedAperture(self) -> float:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#requestedAperture

        **qreal QCameraExposure::requestedAperture() const**

        Returns the requested manual aperture or -1.0 if automatic aperture is
        turned on.
        """
        ...

    def requestedIsoSensitivity(self) -> int:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#requestedIsoSensitivity

        **int QCameraExposure::requestedIsoSensitivity() const**

        Returns the requested ISO sensitivity or -1 if automatic ISO is turned
        on.
        """
        ...

    def requestedShutterSpeed(self) -> float:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#requestedShutterSpeed

        **qreal QCameraExposure::requestedShutterSpeed() const**

        Returns the requested manual shutter speed in seconds or -1.0 if
        automatic shutter speed is turned on.
        """
        ...

    def setAutoAperture(self) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setAutoAperture

        **[slot] void QCameraExposure::setAutoAperture()**

        Turn on auto aperture
        """
        ...

    def setAutoIsoSensitivity(self) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setAutoIsoSensitivity

        **[slot] void QCameraExposure::setAutoIsoSensitivity()**

        Turn on auto sensitivity
        """
        ...

    def setAutoShutterSpeed(self) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setAutoShutterSpeed

        **[slot] void QCameraExposure::setAutoShutterSpeed()**

        Turn on auto shutter speed
        """
        ...

    def setExposureCompensation(self, ev: float) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#exposureCompensation-prop

        **exposureCompensation : qreal**

        Exposure compensation in EV units.

        Exposure compensation property allows to adjust the automatically
        calculated exposure.

        **Access functions:**

        qreal **exposureCompensation** () const
        void
        **setExposureCompensation** (qreal **ev** )

        **Notifier signal:**

        void ****exposureCompensationChanged** ** (qreal **value** )
        """
        ...

    def setExposureMode(
        self, mode: PySide2.QtMultimedia.QCameraExposure.ExposureMode
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#exposureMode-prop

        **exposureMode : QCameraExposure::ExposureMode**

        This property holds the exposure mode being used.

        **Access functions:**

        QCameraExposure::ExposureMode **exposureMode** () const
        void
        **setExposureMode** (QCameraExposure::ExposureMode **mode** )

        **See also** **QCameraExposure::isExposureModeSupported** ().
        """
        ...

    def setFlashMode(
        self, mode: PySide2.QtMultimedia.QCameraExposure.FlashModes
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#flashMode-prop

        **flashMode : QCameraExposure::FlashModes**

        This property holds the flash mode being used.

        Usually the single **QCameraExposure::FlashMode**  flag is used, but
        some non conflicting flags combination are also allowed, like
        **QCameraExposure::FlashManual**  |
        **QCameraExposure::FlashSlowSyncRearCurtain** .

        **Access functions:**

        QCameraExposure::FlashModes **flashMode** () const
        void
        **setFlashMode** (QCameraExposure::FlashModes **mode** )

        **See also** **QCameraExposure::isFlashModeSupported** () and
        **QCameraExposure::isFlashReady** ().
        """
        ...

    def setManualAperture(self, aperture: float) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setManualAperture

        **[slot] void QCameraExposure::setManualAperture(qreal aperture )**

        Sets the manual camera **aperture** value.
        """
        ...

    def setManualIsoSensitivity(self, iso: int) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setManualIsoSensitivity

        **[slot] void QCameraExposure::setManualIsoSensitivity(int iso )**

        Sets the manual sensitivity to **iso**
        """
        ...

    def setManualShutterSpeed(self, seconds: float) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setManualShutterSpeed

        **[slot] void QCameraExposure::setManualShutterSpeed(qreal seconds )**

        Set the manual shutter speed to **seconds**
        """
        ...

    def setMeteringMode(
        self, mode: PySide2.QtMultimedia.QCameraExposure.MeteringMode
    ) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#meteringMode-prop

        **meteringMode : QCameraExposure::MeteringMode**

        This property holds the metering mode being used.

        **Access functions:**

        QCameraExposure::MeteringMode **meteringMode** () const
        void
        **setMeteringMode** (QCameraExposure::MeteringMode **mode** )

        **See also** **QCameraExposure::isMeteringModeSupported** ().
        """
        ...

    def setSpotMeteringPoint(self, point: PySide2.QtCore.QPointF) -> None:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#setSpotMeteringPoint

        **void QCameraExposure::setSpotMeteringPoint(const QPointF & point )**

        Allows setting the spot metering point to **point**.

        **See also** **spotMeteringPoint** ().
        """
        ...

    def shutterSpeed(self) -> float:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#shutterSpeed

        **qreal QCameraExposure::shutterSpeed() const**

        Returns the current shutter speed in seconds.

        **Note:** Getter function for property shutterSpeed.
        """
        ...

    def spotMeteringPoint(self) -> PySide2.QtCore.QPointF:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#spotMeteringPoint

        **QPointF QCameraExposure::spotMeteringPoint() const**

        When supported, the spot metering point is the (normalized) position of
        the point of the image where exposure metering will be performed. This
        is typically used to indicate an "interesting" area of the image that
        should be exposed properly.

        The coordinates are relative frame coordinates: **QPointF** (0,0) points
        to the left top frame point, **QPointF** (0.5,0.5) points to the frame
        center, which is typically the default spot metering point.

        The spot metering point is only used with spot metering mode.

        **See also** **setSpotMeteringPoint** ().
        """
        ...

    @property
    def apertureChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#apertureChanged

        **[signal] void QCameraExposure::apertureChanged(qreal value )**

        Signal emitted when aperature changes to **value**.

        **Note:** Notifier signal for property **aperture** .
        """
        ...

    @property
    def apertureRangeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#apertureRangeChanged

        **[signal] void QCameraExposure::apertureRangeChanged()**

        Signal emitted when aperature range has changed.
        """
        ...

    @property
    def exposureCompensationChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#exposureCompensationChanged

        **[signal] void QCameraExposure::exposureCompensationChanged(qreal value
        )**

        Signal emitted when the exposure compensation changes to **value**.

        **Note:** Notifier signal for property **exposureCompensation** .
        """
        ...

    @property
    def flashReady(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#flashReady

        **[signal] void QCameraExposure::flashReady(bool ready )**

        Signal the flash **ready** status has changed.

        **Note:** Notifier signal for property flashReady.
        """
        ...

    @property
    def isoSensitivityChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#isoSensitivityChanged

        **[signal] void QCameraExposure::isoSensitivityChanged(int value )**

        Signal emitted when sensitivity changes to **value**.

        **Note:** Notifier signal for property **isoSensitivity** .
        """
        ...

    @property
    def shutterSpeedChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#shutterSpeedChanged

        **[signal] void QCameraExposure::shutterSpeedChanged(qreal speed )**

        Signals that a camera's shutter **speed** has changed.

        **Note:** Notifier signal for property **shutterSpeed** .
        """
        ...

    @property
    def shutterSpeedRangeChanged(self) -> PySide2.QtCore.SignalInstance:
        """
        https://doc.qt.io/qt-5/qcameraexposure.html#shutterSpeedRangeChanged

        **[signal] void QCameraExposure::shutterSpeedRangeChanged()**

        Signal emitted when the shutter speed range has changed.
        """
        ...
