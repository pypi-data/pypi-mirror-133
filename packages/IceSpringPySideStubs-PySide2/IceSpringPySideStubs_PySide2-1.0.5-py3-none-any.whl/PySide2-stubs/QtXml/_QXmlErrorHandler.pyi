"""
PySide2 stub files generated by **IceSpringPySideStubs**

Home page: https://github.com/baijifeilong/IceSpringPySideStubs

Generated by BaiJiFeiLong@gmail.com'Licence: GPL-3
"""
import typing
import PySide2
import PySide2.QtCore
import PySide2.QtXml

bytes = str


class QXmlErrorHandler(object):
    """
    https://doc.qt.io/qt-5/qxmlerrorhandler.html

    **Detailed Description**

    If you want your application to report errors to the user or to perform
    customized error handling, you should subclass this class.

    You can set the error handler with **QXmlReader::setErrorHandler** ().

    Errors can be reported using **warning** (), **error** () and **fatalError**
    (), with the error text being reported with **errorString** ().

    **See also** **QXmlDTDHandler** , **QXmlDeclHandler** ,
    **QXmlContentHandler** , **QXmlEntityResolver** , **QXmlLexicalHandler** ,
    and Introduction to SAX2.
    """

    def __init__(self) -> None:
        ...

    def error(self, exception: PySide2.QtXml.QXmlParseException) -> bool:
        """
        https://doc.qt.io/qt-5/qxmlerrorhandler.html#error

        **[pure virtual] bool QXmlErrorHandler::error(const QXmlParseException &
        exception )**

        A reader might use this function to report a recoverable error. A
        recoverable error corresponds to the definiton of "error" in section 1.2
        of the XML 1.0 specification. Details of the error are stored in
        **exception**.

        The reader must continue to provide normal parsing events after invoking
        this function.

        If this function returns `false` the reader stops parsing and reports an
        error. The reader uses the function **errorString** () to get the error
        message.
        """
        ...

    def errorString(self) -> str:
        """
        https://doc.qt.io/qt-5/qxmlerrorhandler.html#errorString

        **[pure virtual] QString QXmlErrorHandler::errorString() const**

        The reader calls this function to get an error string if any of the
        handler functions returns `false`.
        """
        ...

    def fatalError(self, exception: PySide2.QtXml.QXmlParseException) -> bool:
        """
        https://doc.qt.io/qt-5/qxmlerrorhandler.html#fatalError

        **[pure virtual] bool QXmlErrorHandler::fatalError(const
        QXmlParseException & exception )**

        A reader must use this function to report a non-recoverable error.
        Details of the error are stored in **exception**.

        If this function returns `true` the reader might try to go on parsing
        and reporting further errors, but no regular parsing events are
        reported.
        """
        ...

    def warning(self, exception: PySide2.QtXml.QXmlParseException) -> bool:
        """
        https://doc.qt.io/qt-5/qxmlerrorhandler.html#warning

        **[pure virtual] bool QXmlErrorHandler::warning(const QXmlParseException
        & exception )**

        A reader might use this function to report a warning. Warnings are
        conditions that are not errors or fatal errors as defined by the XML 1.0
        specification. Details of the warning are stored in **exception**.

        If this function returns `false` the reader stops parsing and reports an
        error. The reader uses the function **errorString** () to get the error
        message.
        """
        ...
