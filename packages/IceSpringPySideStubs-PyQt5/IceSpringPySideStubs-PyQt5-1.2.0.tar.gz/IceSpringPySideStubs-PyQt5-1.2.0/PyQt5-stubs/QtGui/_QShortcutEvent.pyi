"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
from PyQt5 import QtCore
from PyQt5.QtGui import *


class QShortcutEvent(QtCore.QEvent):
    """
    https://doc.qt.io/qt-5/qshortcutevent.html

    **Detailed Description**

    Normally you do not need to use this class directly; **QShortcut**  provides
    a higher-level interface to handle shortcut keys.

    **See also** **QShortcut** .
    """

    @typing.overload
    def __init__(
        self,
        key: typing.Union["QKeySequence", "QKeySequence.StandardKey", str, int],
        id: int,
        ambiguous: bool = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-5/qshortcutevent.html#QShortcutEvent

        **QShortcutEvent::QShortcutEvent(const QKeySequence & key , int id ,
        bool ambiguous = false)**

        Constructs a shortcut event for the given **key** press, associated with
        the **QShortcut**  ID **id**.

        **ambiguous** specifies whether there is more than one **QShortcut**
        for the same key sequence.
        """
        ...

    @typing.overload
    def __init__(self, a0: "QShortcutEvent") -> None:
        """
        https://doc.qt.io/qt-5/qshortcutevent.html#QShortcutEvent

        **QShortcutEvent::QShortcutEvent(const QKeySequence & key , int id ,
        bool ambiguous = false)**

        Constructs a shortcut event for the given **key** press, associated with
        the **QShortcut**  ID **id**.

        **ambiguous** specifies whether there is more than one **QShortcut**
        for the same key sequence.
        """
        ...

    def shortcutId(self) -> int:
        """
        https://doc.qt.io/qt-5/qshortcutevent.html#shortcutId

        **int QShortcutEvent::shortcutId() const**

        Returns the ID of the **QShortcut**  object for which this event was
        generated.

        **See also** **QShortcut::id** ().
        """
        ...

    def key(self) -> "QKeySequence":
        """
        https://doc.qt.io/qt-5/qshortcutevent.html#key

        **const QKeySequence &QShortcutEvent::key() const**

        Returns the key sequence that triggered the event.
        """
        ...

    def isAmbiguous(self) -> bool:
        """
        https://doc.qt.io/qt-5/qshortcutevent.html#isAmbiguous

        **bool QShortcutEvent::isAmbiguous() const**

        Returns `true` if the key sequence that triggered the event is
        ambiguous.

        **See also** **QShortcut::activatedAmbiguously** ().
        """
        ...
