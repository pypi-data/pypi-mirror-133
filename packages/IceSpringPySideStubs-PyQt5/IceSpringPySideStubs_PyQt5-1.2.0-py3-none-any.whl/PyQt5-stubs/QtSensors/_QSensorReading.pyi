"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

Generated by BaiJiFeiLong@gmail.com

Licence: GPLv3
"""
import typing
from PyQt5 import QtCore


class QSensorReading(QtCore.QObject):
    """
    https://doc.qt.io/qt-5/qsensorreading.html

    **Detailed Description**

    Note that QSensorReading is not particularly useful by itself. The
    interesting data for each sensor is defined in a sub-class of
    QSensorReading.
    """

    def value(self, index: int) -> typing.Any:
        """
        https://doc.qt.io/qt-5/qsensorreading.html#value

        **QVariant QSensorReading::value(int index ) const**

        Returns the value of the property at **index**.

        Note that this function is slower than calling the data function
        directly.

        Here is an example of getting a property via the different mechanisms
        available.

        Accessing directly provides the best performance but requires compile-
        time knowledge of the data you are accessing.

        **QAccelerometerReading**  *reading = ...;
             **qreal**  x =
        reading->x();

        You can also access a property by name. To do this you must call
        **QObject::property** ().

        **qreal**  x = reading->property("x").value<**qreal** >();

        Finally, you can access values via numeric index.

        **qreal**  x = reading->value(0).value<**qreal** >();

        Note that value() can only access properties declared with
        **Q_PROPERTY** () in sub-classes of **QSensorReading** .

        **See also** **valueCount** () and **QObject::property** ().
        """
        ...

    def valueCount(self) -> int:
        """
        https://doc.qt.io/qt-5/qsensorreading.html#valueCount

        **int QSensorReading::valueCount() const**

        Returns the number of extra properties that the reading has.

        Note that this does not count properties declared in **QSensorReading**
        .

        As an example, this returns 3 for **QAccelerometerReading**  because
        there are 3 properties defined in that class.
        """
        ...

    def setTimestamp(self, timestamp: int) -> None:
        """
        https://doc.qt.io/qt-5/qsensorreading.html#setTimestamp

        **void QSensorReading::setTimestamp(quint64 timestamp )**

        Sets the **timestamp** of the reading.

        **See also** **timestamp** ().
        """
        ...

    def timestamp(self) -> int:
        """
        https://doc.qt.io/qt-5/qsensorreading.html#timestamp

        **quint64 QSensorReading::timestamp() const**

        Returns the timestamp of the reading.

        **Note:** Getter function for property timestamp.

        **See also** **setTimestamp** ().
        """
        ...
