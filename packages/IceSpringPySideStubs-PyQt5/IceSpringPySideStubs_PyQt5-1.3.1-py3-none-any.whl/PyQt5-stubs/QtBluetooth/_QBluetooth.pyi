"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
import typing
import PyQt5.sip
from PyQt5.QtBluetooth import *


class QBluetooth(PyQt5.sip.simplewrapper):
    """
    https://doc.qt.io/qt-5/qbluetooth.html

    **Detailed Description**
    """

    class AttAccessConstraint(int):
        AttAuthorizationRequired: QBluetooth = ...
        AttAuthenticationRequired: QBluetooth = ...
        AttEncryptionRequired: QBluetooth = ...

    class Security(int):
        NoSecurity: QBluetooth = ...
        Authorization: QBluetooth = ...
        Authentication: QBluetooth = ...
        Encryption: QBluetooth = ...
        Secure: QBluetooth = ...

    class SecurityFlags(PyQt5.sip.wrapper):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self, f: typing.Union["QBluetooth.SecurityFlags", "QBluetooth.Security"]
        ) -> None:
            ...

        @typing.overload
        def __init__(self, a0: "QBluetooth.SecurityFlags") -> None:
            ...

        def __hash__(self) -> int:
            ...

        def __bool__(self) -> int:
            ...

        def __invert__(self) -> "QBluetooth.SecurityFlags":
            ...

        def __index__(self) -> int:
            ...

        def __int__(self) -> int:
            ...

    class AttAccessConstraints(PyQt5.sip.wrapper):
        @typing.overload
        def __init__(self) -> None:
            ...

        @typing.overload
        def __init__(
            self,
            f: typing.Union[
                "QBluetooth.AttAccessConstraints", "QBluetooth.AttAccessConstraint"
            ],
        ) -> None:
            ...

        @typing.overload
        def __init__(self, a0: "QBluetooth.AttAccessConstraints") -> None:
            ...

        def __hash__(self) -> int:
            ...

        def __bool__(self) -> int:
            ...

        def __invert__(self) -> "QBluetooth.AttAccessConstraints":
            ...

        def __index__(self) -> int:
            ...

        def __int__(self) -> int:
            ...
