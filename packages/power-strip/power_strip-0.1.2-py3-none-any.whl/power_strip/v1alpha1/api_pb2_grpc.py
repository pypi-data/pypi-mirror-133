# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import power_strip.v1alpha1.api_pb2 as api__pb2


class StripServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/v1alpha1.StripService/Status',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.StatusResponse.FromString,
                )
        self.WatchStatus = channel.unary_stream(
                '/v1alpha1.StripService/WatchStatus',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.StatusResponse.FromString,
                )
        self.Toggle = channel.unary_unary(
                '/v1alpha1.StripService/Toggle',
                request_serializer=api__pb2.IndexedRequest.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )
        self.TurnOn = channel.unary_unary(
                '/v1alpha1.StripService/TurnOn',
                request_serializer=api__pb2.IndexedRequest.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )
        self.TurnOff = channel.unary_unary(
                '/v1alpha1.StripService/TurnOff',
                request_serializer=api__pb2.IndexedRequest.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )


class StripServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Toggle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnOn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnOff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StripServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.StatusResponse.SerializeToString,
            ),
            'WatchStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchStatus,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.StatusResponse.SerializeToString,
            ),
            'Toggle': grpc.unary_unary_rpc_method_handler(
                    servicer.Toggle,
                    request_deserializer=api__pb2.IndexedRequest.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'TurnOn': grpc.unary_unary_rpc_method_handler(
                    servicer.TurnOn,
                    request_deserializer=api__pb2.IndexedRequest.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'TurnOff': grpc.unary_unary_rpc_method_handler(
                    servicer.TurnOff,
                    request_deserializer=api__pb2.IndexedRequest.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1alpha1.StripService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StripService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1alpha1.StripService/Status',
            api__pb2.Empty.SerializeToString,
            api__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/v1alpha1.StripService/WatchStatus',
            api__pb2.Empty.SerializeToString,
            api__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Toggle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1alpha1.StripService/Toggle',
            api__pb2.IndexedRequest.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnOn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1alpha1.StripService/TurnOn',
            api__pb2.IndexedRequest.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnOff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1alpha1.StripService/TurnOff',
            api__pb2.IndexedRequest.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
