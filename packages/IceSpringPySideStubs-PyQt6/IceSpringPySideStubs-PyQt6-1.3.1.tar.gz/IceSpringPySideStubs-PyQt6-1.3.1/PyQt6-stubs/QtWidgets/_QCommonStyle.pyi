"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
import typing
from PyQt6 import QtGui
from PyQt6 import QtCore
from PyQt6.QtWidgets import *


class QCommonStyle(QStyle):
    """
    https://doc.qt.io/qt-6/qcommonstyle.html

    **Detailed Description**

    This abstract class implements some of the widget's look and feel that is
    common to all GUI styles provided and shipped as part of Qt.

    Since QCommonStyle inherits **QStyle** , all of its functions are fully
    documented in the **QStyle**  documentation.

    **See also** **QStyle**  and **QProxyStyle** .
    """

    def __init__(self) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#QCommonStyle

        **QCommonStyle::QCommonStyle()**

        Constructs a QCommonStyle.
        """
        ...

    def layoutSpacing(
        self,
        control1: "QSizePolicy.ControlType",
        control2: "QSizePolicy.ControlType",
        orientation: QtCore.Qt.Orientation,
        option: typing.Optional["QStyleOption"] = ...,
        widget: typing.Optional[QWidget] = ...,
    ) -> int:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#layoutSpacing

        **[override virtual] int
        QCommonStyle::layoutSpacing(QSizePolicy::ControlType control1 ,
        QSizePolicy::ControlType control2 , Qt::Orientation orientation , const
        QStyleOption * option = nullptr, const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::layoutSpacing(QSizePolicy::ControlType control1,
        QSizePolicy::ControlType control2, Qt::Orientation orientation, const
        QStyleOption *option, const QWidget *widget) const** .
        """
        ...

    def standardIcon(
        self,
        standardIcon: QStyle.StandardPixmap,
        option: typing.Optional["QStyleOption"] = ...,
        widget: typing.Optional[QWidget] = ...,
    ) -> QtGui.QIcon:
        ...

    def generatedIconPixmap(
        self, iconMode: QtGui.QIcon.Mode, pixmap: QtGui.QPixmap, opt: "QStyleOption"
    ) -> QtGui.QPixmap:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#generatedIconPixmap

        **[override virtual] QPixmap
        QCommonStyle::generatedIconPixmap(QIcon::Mode iconMode , const QPixmap &
        pixmap , const QStyleOption * opt ) const**

        Reimplements: **QStyle::generatedIconPixmap(QIcon::Mode iconMode, const
        QPixmap &pixmap, const QStyleOption *option) const** .
        """
        ...

    def standardPixmap(
        self,
        sp: QStyle.StandardPixmap,
        option: typing.Optional["QStyleOption"] = ...,
        widget: typing.Optional[QWidget] = ...,
    ) -> QtGui.QPixmap:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#standardPixmap

        **[override virtual] QPixmap
        QCommonStyle::standardPixmap(QStyle::StandardPixmap sp , const
        QStyleOption * option = nullptr, const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::standardPixmap(QStyle::StandardPixmap
        standardPixmap, const QStyleOption *option, const QWidget *widget)
        const** .
        """
        ...

    def styleHint(
        self,
        sh: QStyle.StyleHint,
        option: typing.Optional["QStyleOption"] = ...,
        widget: typing.Optional[QWidget] = ...,
        returnData: typing.Optional["QStyleHintReturn"] = ...,
    ) -> int:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#styleHint

        **[override virtual] int QCommonStyle::styleHint(QStyle::StyleHint sh ,
        const QStyleOption * opt = nullptr, const QWidget * widget = nullptr,
        QStyleHintReturn * hret = nullptr) const**

        Reimplements: **QStyle::styleHint(QStyle::StyleHint hint, const
        QStyleOption *option, const QWidget *widget, QStyleHintReturn
        *returnData) const** .
        """
        ...

    def pixelMetric(
        self,
        m: QStyle.PixelMetric,
        option: typing.Optional["QStyleOption"] = ...,
        widget: typing.Optional[QWidget] = ...,
    ) -> int:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#pixelMetric

        **[override virtual] int QCommonStyle::pixelMetric(QStyle::PixelMetric m
        , const QStyleOption * opt = nullptr, const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::pixelMetric(QStyle::PixelMetric metric, const
        QStyleOption *option, const QWidget *widget) const** .
        """
        ...

    def sizeFromContents(
        self,
        ct: QStyle.ContentsType,
        opt: "QStyleOption",
        contentsSize: QtCore.QSize,
        widget: typing.Optional[QWidget] = ...,
    ) -> QtCore.QSize:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#sizeFromContents

        **[override virtual] QSize
        QCommonStyle::sizeFromContents(QStyle::ContentsType ct , const
        QStyleOption * opt , const QSize & csz , const QWidget * widget =
        nullptr) const**

        Reimplements: **QStyle::sizeFromContents(QStyle::ContentsType type,
        const QStyleOption *option, const QSize &contentsSize, const QWidget
        *widget) const** .
        """
        ...

    def subControlRect(
        self,
        cc: QStyle.ComplexControl,
        opt: "QStyleOptionComplex",
        sc: QStyle.SubControl,
        widget: typing.Optional[QWidget] = ...,
    ) -> QtCore.QRect:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#subControlRect

        **[override virtual] QRect
        QCommonStyle::subControlRect(QStyle::ComplexControl cc , const
        QStyleOptionComplex * opt , QStyle::SubControl sc , const QWidget *
        widget = nullptr) const**

        Reimplements: **QStyle::subControlRect(QStyle::ComplexControl control,
        const QStyleOptionComplex *option, QStyle::SubControl subControl, const
        QWidget *widget) const** .
        """
        ...

    def hitTestComplexControl(
        self,
        cc: QStyle.ComplexControl,
        opt: "QStyleOptionComplex",
        pt: QtCore.QPoint,
        widget: typing.Optional[QWidget] = ...,
    ) -> QStyle.SubControl:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#hitTestComplexControl

        **[override virtual] QStyle::SubControl
        QCommonStyle::hitTestComplexControl(QStyle::ComplexControl cc , const
        QStyleOptionComplex * opt , const QPoint & pt , const QWidget * widget =
        nullptr) const**

        Reimplements: **QStyle::hitTestComplexControl(QStyle::ComplexControl
        control, const QStyleOptionComplex *option, const QPoint &position,
        const QWidget *widget) const** .
        """
        ...

    def drawComplexControl(
        self,
        cc: QStyle.ComplexControl,
        opt: "QStyleOptionComplex",
        p: QtGui.QPainter,
        widget: typing.Optional[QWidget] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#drawComplexControl

        **[override virtual] void
        QCommonStyle::drawComplexControl(QStyle::ComplexControl cc , const
        QStyleOptionComplex * opt , QPainter * p , const QWidget * widget =
        nullptr) const**

        Reimplements: **QStyle::drawComplexControl(QStyle::ComplexControl
        control, const QStyleOptionComplex *option, QPainter *painter, const
        QWidget *widget) const** .
        """
        ...

    def subElementRect(
        self,
        r: QStyle.SubElement,
        opt: "QStyleOption",
        widget: typing.Optional[QWidget] = ...,
    ) -> QtCore.QRect:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#subElementRect

        **[override virtual] QRect
        QCommonStyle::subElementRect(QStyle::SubElement sr , const QStyleOption
        * opt , const QWidget * widget = nullptr) const**

        Reimplements: **QStyle::subElementRect(QStyle::SubElement element, const
        QStyleOption *option, const QWidget *widget) const** .
        """
        ...

    def drawControl(
        self,
        element: QStyle.ControlElement,
        opt: "QStyleOption",
        p: QtGui.QPainter,
        widget: typing.Optional[QWidget] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#drawControl

        **[override virtual] void
        QCommonStyle::drawControl(QStyle::ControlElement element , const
        QStyleOption * opt , QPainter * p , const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::drawControl(QStyle::ControlElement element,
        const QStyleOption *option, QPainter *painter, const QWidget *widget)
        const** .
        """
        ...

    def drawPrimitive(
        self,
        pe: QStyle.PrimitiveElement,
        opt: "QStyleOption",
        p: QtGui.QPainter,
        widget: typing.Optional[QWidget] = ...,
    ) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#drawPrimitive

        **[override virtual] void
        QCommonStyle::drawPrimitive(QStyle::PrimitiveElement pe , const
        QStyleOption * opt , QPainter * p , const QWidget * widget = nullptr)
        const**

        Reimplements: **QStyle::drawPrimitive(QStyle::PrimitiveElement element,
        const QStyleOption *option, QPainter *painter, const QWidget *widget)
        const** .
        """
        ...

    @typing.overload
    def unpolish(self, widget: QWidget) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#unpolish

        **[override virtual] void QCommonStyle::unpolish(QWidget * widget )**

        Reimplements: **QStyle::unpolish** (QWidget *widget).
        """
        ...

    @typing.overload
    def unpolish(self, application: QApplication) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#unpolish-1

        **[override virtual] void QCommonStyle::unpolish(QApplication *
        application )**

        Reimplements: **QStyle::unpolish** (QApplication *application).
        """
        ...

    @typing.overload
    def polish(self, widget: QWidget) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#polish

        **[override virtual] void QCommonStyle::polish(QPalette & pal )**

        Reimplements: **QStyle::polish** (QPalette &palette).
        """
        ...

    @typing.overload
    def polish(self, app: QApplication) -> None:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#polish-1

        **[override virtual] void QCommonStyle::polish(QApplication * app )**

        Reimplements: **QStyle::polish** (QApplication *application).
        """
        ...

    @typing.overload
    def polish(self, a0: QtGui.QPalette) -> QtGui.QPalette:
        """
        https://doc.qt.io/qt-6/qcommonstyle.html#polish-2

        **[override virtual] void QCommonStyle::polish(QWidget * widget )**

        Reimplements: **QStyle::polish** (QWidget *widget).
        """
        ...
