"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
import typing
from PyQt6 import QtGui
from PyQt6 import QtCore

PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]
QWIDGETSIZE_MAX: int = ...


def qDrawBorderPixmap(
    painter: QtGui.QPainter,
    target: QtCore.QRect,
    margins: QtCore.QMargins,
    pixmap: QtGui.QPixmap,
) -> None:
    ...


@typing.overload
def qDrawPlainRect(
    p: QtGui.QPainter,
    x: int,
    y: int,
    w: int,
    h: int,
    a5: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient],
    lineWidth: int = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawPlainRect(
    p: QtGui.QPainter,
    r: QtCore.QRect,
    a2: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient],
    lineWidth: int = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawWinPanel(
    p: QtGui.QPainter,
    x: int,
    y: int,
    w: int,
    h: int,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawWinPanel(
    p: QtGui.QPainter,
    r: QtCore.QRect,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawWinButton(
    p: QtGui.QPainter,
    x: int,
    y: int,
    w: int,
    h: int,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawWinButton(
    p: QtGui.QPainter,
    r: QtCore.QRect,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawShadePanel(
    p: QtGui.QPainter,
    x: int,
    y: int,
    w: int,
    h: int,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    lineWidth: int = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawShadePanel(
    p: QtGui.QPainter,
    r: QtCore.QRect,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    lineWidth: int = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawShadeRect(
    p: QtGui.QPainter,
    x: int,
    y: int,
    w: int,
    h: int,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    lineWidth: int = ...,
    midLineWidth: int = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawShadeRect(
    p: QtGui.QPainter,
    r: QtCore.QRect,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    lineWidth: int = ...,
    midLineWidth: int = ...,
    fill: typing.Optional[
        typing.Union[
            QtGui.QBrush, QtGui.QColor, QtCore.Qt.GlobalColor, int, QtGui.QGradient
        ]
    ] = ...,
) -> None:
    ...


@typing.overload
def qDrawShadeLine(
    p: QtGui.QPainter,
    x1: int,
    y1: int,
    x2: int,
    y2: int,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    lineWidth: int = ...,
    midLineWidth: int = ...,
) -> None:
    ...


@typing.overload
def qDrawShadeLine(
    p: QtGui.QPainter,
    p1: QtCore.QPoint,
    p2: QtCore.QPoint,
    pal: QtGui.QPalette,
    sunken: bool = ...,
    lineWidth: int = ...,
    midLineWidth: int = ...,
) -> None:
    ...
