"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
import enum
import typing
from PyQt6.QtCore import *
import enum

PYQT_SIGNAL = typing.Union[pyqtSignal, pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], pyqtBoundSignal]
PYQT_VERSION: int = ...
PYQT_VERSION_STR: str = ...
QT_VERSION: int = ...
QT_VERSION_STR: str = ...


def qSetRealNumberPrecision(precision: int) -> QTextStreamManipulator:
    ...


def qSetPadChar(ch: str) -> QTextStreamManipulator:
    ...


def qSetFieldWidth(width: int) -> QTextStreamManipulator:
    ...


def Q_RETURN_ARG(type: typing.Any) -> QGenericReturnArgument:
    ...


def Q_ARG(type: typing.Any, data: typing.Any) -> QGenericArgument:
    ...


def QT_TRANSLATE_NOOP(a0: str, a1: str) -> str:
    ...


def QT_TR_NOOP(a0: str) -> str:
    ...


def pyqtSlot(
    *types, name: typing.Optional[str] = ..., result: typing.Optional[str] = ...
) -> typing.Any:
    ...


def pyqtEnum(a0: enum.Enum = ...) -> None:
    ...


def pyqtClassInfo(a0: str, a1: str) -> None:
    ...


def qFloatDistance(a: float, b: float) -> int:
    ...


def qQNaN() -> float:
    ...


def qSNaN() -> float:
    ...


def qInf() -> float:
    ...


def qIsNaN(d: float) -> bool:
    ...


def qIsFinite(d: float) -> bool:
    ...


def qIsInf(d: float) -> bool:
    ...


def qFormatLogMessage(type: QtMsgType, context: QMessageLogContext, buf: str) -> str:
    ...


def qSetMessagePattern(messagePattern: str) -> None:
    ...


def qInstallMessageHandler(
    a0: typing.Optional[typing.Callable[[QtMsgType, QMessageLogContext, str], None]]
) -> typing.Optional[typing.Callable[[QtMsgType, QMessageLogContext, str], None]]:
    ...


def qWarning(msg: str) -> None:
    ...


def qInfo(msg: str) -> None:
    ...


def qFatal(msg: str) -> None:
    ...


def qDebug(msg: str) -> None:
    ...


def qCritical(msg: str) -> None:
    ...


def pyqtRestoreInputHook() -> None:
    ...


def pyqtRemoveInputHook() -> None:
    ...


def qAddPreRoutine(routine: typing.Callable[[], None]) -> None:
    ...


def qRemovePostRoutine(a0: typing.Callable[..., None]) -> None:
    ...


def qAddPostRoutine(a0: typing.Callable[..., None]) -> None:
    ...


def qChecksum(
    data: typing.Union[QByteArray, bytes, bytearray, memoryview],
    standard: Qt.ChecksumType = ...,
) -> int:
    ...


@typing.overload
def qUncompress(data: bytes) -> QByteArray:
    ...


@typing.overload
def qUncompress(data: QByteArray) -> QByteArray:
    ...


@typing.overload
def qCompress(data: bytes, compressionLevel: int = ...) -> QByteArray:
    ...


@typing.overload
def qCompress(data: QByteArray, compressionLevel: int = ...) -> QByteArray:
    ...


def qEnvironmentVariableIntValue(varName: str) -> typing.Tuple[int, bool]:
    ...


@typing.overload
def qEnvironmentVariable(varName: str) -> str:
    ...


@typing.overload
def qEnvironmentVariable(varName: str, defaultValue: str) -> str:
    ...


def qEnvironmentVariableIsSet(varName: str) -> bool:
    ...


def qEnvironmentVariableIsEmpty(varName: str) -> bool:
    ...


def pyqtPickleProtocol() -> typing.Optional[int]:
    ...


def pyqtSetPickleProtocol(a0: typing.Optional[int]) -> None:
    ...


def qFuzzyCompare(p1: float, p2: float) -> bool:
    ...


def qVersion() -> str:
    ...


def qRound64(d: float) -> int:
    ...


def qRound(d: float) -> int:
    ...


def qAbs(t: float) -> float:
    ...
