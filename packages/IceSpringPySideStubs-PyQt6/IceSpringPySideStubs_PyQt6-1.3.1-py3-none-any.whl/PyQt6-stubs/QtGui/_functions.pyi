"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
import typing
from PyQt6 import QtCore
from PyQt6.QtGui import *

PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]


@typing.overload
def qGray(r: int, g: int, b: int) -> int:
    ...


@typing.overload
def qGray(rgb: int) -> int:
    ...


def qRgba(r: int, g: int, b: int, a: int) -> int:
    ...


def qRgb(r: int, g: int, b: int) -> int:
    ...


@typing.overload
def qAlpha(rgb: QRgba64) -> int:
    ...


@typing.overload
def qAlpha(rgb: int) -> int:
    ...


@typing.overload
def qBlue(rgb: QRgba64) -> int:
    ...


@typing.overload
def qBlue(rgb: int) -> int:
    ...


@typing.overload
def qGreen(rgb: QRgba64) -> int:
    ...


@typing.overload
def qGreen(rgb: int) -> int:
    ...


@typing.overload
def qRed(rgb: QRgba64) -> int:
    ...


@typing.overload
def qRed(rgb: int) -> int:
    ...


@typing.overload
def qUnpremultiply(c: QRgba64) -> QRgba64:
    ...


@typing.overload
def qUnpremultiply(p: int) -> int:
    ...


@typing.overload
def qPremultiply(c: QRgba64) -> QRgba64:
    ...


@typing.overload
def qPremultiply(x: int) -> int:
    ...


@typing.overload
def qRgba64(r: int, g: int, b: int, a: int) -> QRgba64:
    ...


@typing.overload
def qRgba64(c: int) -> QRgba64:
    ...


def qPixelFormatAlpha(
    channelSize: int, typeInterpretation: QPixelFormat.TypeInterpretation = ...
) -> QPixelFormat:
    ...


def qPixelFormatYuv(
    layout: QPixelFormat.YUVLayout,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    premultiplied: QPixelFormat.AlphaPremultiplied = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
    byteOrder: QPixelFormat.ByteOrder = ...,
) -> QPixelFormat:
    ...


def qPixelFormatHsv(
    channelSize: int,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat:
    ...


def qPixelFormatHsl(
    channelSize: int,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat:
    ...


def qPixelFormatCmyk(
    channelSize: int,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat:
    ...


def qPixelFormatGrayscale(
    channelSize: int, typeInterpretation: QPixelFormat.TypeInterpretation = ...
) -> QPixelFormat:
    ...


def qPixelFormatRgba(
    red: int,
    green: int,
    blue: int,
    alfa: int,
    usage: QPixelFormat.AlphaUsage,
    position: QPixelFormat.AlphaPosition,
    premultiplied: QPixelFormat.AlphaPremultiplied = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat:
    ...


@typing.overload
def qFuzzyCompare(m1: QMatrix4x4, m2: QMatrix4x4) -> bool:
    ...


@typing.overload
def qFuzzyCompare(q1: QQuaternion, q2: QQuaternion) -> bool:
    ...


@typing.overload
def qFuzzyCompare(t1: QTransform, t2: QTransform) -> bool:
    ...


@typing.overload
def qFuzzyCompare(v1: QVector4D, v2: QVector4D) -> bool:
    ...


@typing.overload
def qFuzzyCompare(v1: QVector3D, v2: QVector3D) -> bool:
    ...


@typing.overload
def qFuzzyCompare(v1: QVector2D, v2: QVector2D) -> bool:
    ...


def qt_set_sequence_auto_mnemonic(b: bool) -> None:
    ...
