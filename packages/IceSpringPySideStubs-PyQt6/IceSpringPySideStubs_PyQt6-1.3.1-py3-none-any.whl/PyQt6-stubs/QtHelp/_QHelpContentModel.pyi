"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
import typing
import PyQt6.sip
from PyQt6 import QtCore
from PyQt6.QtHelp import *


class QHelpContentModel(QtCore.QAbstractItemModel):
    """
    https://doc.qt.io/qt-6/qhelpcontentmodel.html

    **Detailed Description**
    """

    def isCreatingContents(self) -> bool:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#isCreatingContents

        **bool QHelpContentModel::isCreatingContents() const**

        Returns true if the contents are currently rebuilt, otherwise false.
        """
        ...

    def columnCount(self, parent: QtCore.QModelIndex = ...) -> int:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#columnCount

        **[override virtual] int QHelpContentModel::columnCount(const
        QModelIndex & parent = QModelIndex()) const**

        Reimplements: **QAbstractItemModel::columnCount(const QModelIndex
        &parent) const** .

        Returns the number of columns under the given **parent**. Currently
        returns always 1.
        """
        ...

    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#rowCount

        **[override virtual] int QHelpContentModel::rowCount(const QModelIndex &
        parent = QModelIndex()) const**

        Reimplements: **QAbstractItemModel::rowCount(const QModelIndex &parent)
        const** .

        Returns the number of rows under the given **parent**.
        """
        ...

    def parent(self, index: QtCore.QModelIndex) -> QtCore.QModelIndex:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#parent

        **[override virtual] QModelIndex QHelpContentModel::parent(const
        QModelIndex & index ) const**

        Reimplements: **QAbstractItemModel::parent(const QModelIndex &index)
        const** .

        Returns the parent of the model item with the given **index** , or
        QModelIndex() if it has no parent.
        """
        ...

    def index(
        self, row: int, column: int, parent: QtCore.QModelIndex = ...
    ) -> QtCore.QModelIndex:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#index

        **[override virtual] QModelIndex QHelpContentModel::index(int row , int
        column , const QModelIndex & parent = QModelIndex()) const**

        Reimplements: **QAbstractItemModel::index(int row, int column, const
        QModelIndex &parent) const** .

        Returns the index of the item in the model specified by the given
        **row** , **column** and **parent** index.
        """
        ...

    def data(self, index: QtCore.QModelIndex, role: int) -> typing.Any:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#data

        **[override virtual] QVariant QHelpContentModel::data(const QModelIndex
        & index , int role ) const**

        Reimplements: **QAbstractItemModel::data(const QModelIndex &index, int
        role) const** .

        Returns the data stored under the given **role** for the item referred
        to by the **index**.
        """
        ...

    def contentItemAt(self, index: QtCore.QModelIndex) -> QHelpContentItem:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#contentItemAt

        **QHelpContentItem *QHelpContentModel::contentItemAt(const QModelIndex &
        index ) const**

        Returns the help content item at the model index position **index**.
        """
        ...

    def createContents(self, customFilterName: str) -> None:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#createContents

        **void QHelpContentModel::createContents(const QString &
        customFilterName )**

        Creates new contents by querying the help system for contents specified
        for the **customFilterName**.
        """
        ...

    @property
    def contentsCreated(self) -> PyQt6.QtCore.pyqtBoundSignal:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#contentsCreated

        **[signal] void QHelpContentModel::contentsCreated()**

        This signal is emitted when the contents have been created.
        """
        ...

    @property
    def contentsCreationStarted(self) -> PyQt6.QtCore.pyqtBoundSignal:
        """
        https://doc.qt.io/qt-6/qhelpcontentmodel.html#contentsCreationStarted

        **[signal] void QHelpContentModel::contentsCreationStarted()**

        This signal is emitted when the creation of the contents has started.
        The current contents are invalid from this point on until the signal
        **contentsCreated** () is emitted.

        **See also** **isCreatingContents** ().
        """
        ...
