{
    "address": "0x15cC2C5279D85FEBA048C19c55AC2F136Fd85a02",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "clearingHouse",
            "type": "address"
          }
        ],
        "name": "ClearingHouseChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "int256",
            "name": "amount",
            "type": "int256"
          }
        ],
        "name": "PnlRealized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "vault",
            "type": "address"
          }
        ],
        "name": "VaultChanged",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "candidate",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "deregisterBaseToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getAccountInfo",
        "outputs": [
          {
            "components": [
              {
                "internalType": "int256",
                "name": "takerPositionSize",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "takerOpenNotional",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumGrowthGlobalX96",
                "type": "int256"
              }
            ],
            "internalType": "struct AccountMarket.Info",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getBase",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "getBaseTokens",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getClearingHouse",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getClearingHouseConfig",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "getMarginRequirementForLiquidation",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getOrderBook",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "getPnlAndPendingFee",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getQuote",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getTakerOpenNotional",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getTakerPositionSize",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "getTotalAbsPositionValue",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "getTotalDebtValue",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getTotalOpenNotional",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getTotalPositionSize",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getTotalPositionValue",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getVault",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "hasOrder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "clearingHouseConfigArg",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "orderBookArg",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "amount",
            "type": "int256"
          }
        ],
        "name": "modifyOwedRealizedPnl",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "base",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "quote",
            "type": "int256"
          }
        ],
        "name": "modifyTakerBalance",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "registerBaseToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "clearingHouseArg",
            "type": "address"
          }
        ],
        "name": "setClearingHouse",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "setOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "vaultArg",
            "type": "address"
          }
        ],
        "name": "setVault",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "maker",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "takerBase",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "takerQuote",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "realizedPnl",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "fee",
            "type": "int256"
          }
        ],
        "name": "settleBalanceAndDeregister",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          }
        ],
        "name": "settleOwedRealizedPnl",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "amount",
            "type": "int256"
          }
        ],
        "name": "settleQuoteToOwedRealizedPnl",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "updateOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "int256",
            "name": "lastTwPremiumGrowthGlobalX96",
            "type": "int256"
          }
        ],
        "name": "updateTwPremiumGrowthGlobal",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0x23ba77b3aea559d29f1c510d67bee2aecc74d1964be7d22d3505ddc9ce2512cc",
    "receipt": {
      "to": null,
      "from": "0x849a19c0746fB0d335E02deC0d0B3E057e585176",
      "contractAddress": "0x15cC2C5279D85FEBA048C19c55AC2F136Fd85a02",
      "transactionIndex": 0,
      "gasUsed": "2378850",
      "logsBloom": "0x
      "blockHash": "0xe1b9e98a1fdd72e525ec57b144778438812955064568d0966175a97de515cf75",
      "transactionHash": "0x23ba77b3aea559d29f1c510d67bee2aecc74d1964be7d22d3505ddc9ce2512cc",
      "logs": [],
      "blockNumber": 513568,
      "cumulativeGasUsed": "2378850",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "solcInputHash": "79338060ebab6992079a592a0a5c7fd6",
    "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clearingHouse\",\"type\":\"address\"}],\"name\":\"ClearingHouseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"PnlRealized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"deregisterBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"takerPositionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"takerOpenNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthGlobalX96\",\"type\":\"int256\"}],\"internalType\":\"struct AccountMarket.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getBase\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBaseTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouseConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getMarginRequirementForLiquidation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getPnlAndPendingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTakerOpenNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTakerPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAbsPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalDebtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTotalOpenNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTotalPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTotalPositionValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseConfigArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderBookArg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"modifyOwedRealizedPnl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"name\":\"modifyTakerBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"registerBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseArg\",\"type\":\"address\"}],\"name\":\"setClearingHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultArg\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"takerBase\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"takerQuote\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"name\":\"settleBalanceAndDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"settleOwedRealizedPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"settleQuoteToOwedRealizedPnl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthGlobalX96\",\"type\":\"int256\"}],\"name\":\"updateTwPremiumGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"candidate()\":{\"details\":\"Returns the candidate that can become the owner.\"},\"deregisterBaseToken(address,address)\":{\"details\":\"this function is expensive\",\"params\":{\"baseToken\":\"The address of the trader's base token\",\"trader\":\"The address of the trader\"}},\"getMarginRequirementForLiquidation(address)\":{\"details\":\"this is different from Vault._getTotalMarginRequirement(), which is for freeCollateral calculation\",\"returns\":{\"_0\":\"int instead of uint, as it is compared with ClearingHouse.getAccountValue(), which is also an int\"}},\"getPnlAndPendingFee(address)\":{\"returns\":{\"_0\":\"the pnl realized already but stored temporarily in AccountBalance\",\"_1\":\"the pnl not yet realized\",\"_2\":\"the pending fee of maker earned\"}},\"getTotalAbsPositionValue(address)\":{\"returns\":{\"_0\":\"sum up positions value of every market, it calls `getTotalPositionValue` internally\"}},\"getTotalOpenNotional(address,address)\":{\"returns\":{\"_0\":\"totalOpenNotional the amount of quote token paid for a position when opening\"}},\"getTotalPositionValue(address,address)\":{\"details\":\"a negative returned value is only be used when calculating pnlwe use 15 mins twap to calc position value\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerBaseToken(address,address)\":{\"details\":\"every time a trader's position value is checked, the base token list of this trader will be traversed;      thus, this list should be kept as short as possible\",\"params\":{\"baseToken\":\"The address of the trader's base token\",\"trader\":\"The address of the trader\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"settleBalanceAndDeregister(address,address,int256,int256,int256,int256)\":{\"details\":\"Settle account balance and deregister base token\",\"params\":{\"baseToken\":\"The address of the market's base token\",\"fee\":\"Amount of fee collected from pool\",\"maker\":\"The address of the maker\",\"realizedPnl\":\"Amount of pnl realized\"}},\"settleOwedRealizedPnl(address)\":{\"details\":\"this function is now only called by Vault.withdraw()\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccountBalance.sol\":\"AccountBalance\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"contracts/AccountBalance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\nimport { ClearingHouseCallee } from \\\"./base/ClearingHouseCallee.sol\\\";\\nimport { PerpSafeCast } from \\\"./lib/PerpSafeCast.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { IExchange } from \\\"./interface/IExchange.sol\\\";\\nimport { IIndexPrice } from \\\"./interface/IIndexPrice.sol\\\";\\nimport { IOrderBook } from \\\"./interface/IOrderBook.sol\\\";\\nimport { IClearingHouseConfig } from \\\"./interface/IClearingHouseConfig.sol\\\";\\nimport { AccountBalanceStorageV1, AccountMarket } from \\\"./storage/AccountBalanceStorage.sol\\\";\\nimport { BlockContext } from \\\"./base/BlockContext.sol\\\";\\nimport { IAccountBalance } from \\\"./interface/IAccountBalance.sol\\\";\\n\\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\\ncontract AccountBalance is IAccountBalance, BlockContext, ClearingHouseCallee, AccountBalanceStorageV1 {\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for int256;\\n    using PerpMath for uint256;\\n    using PerpMath for int256;\\n    using PerpMath for uint160;\\n    using AccountMarket for AccountMarket.Info;\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    uint256 internal constant _DUST = 10 wei;\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    function initialize(address clearingHouseConfigArg, address orderBookArg) external initializer {\\n        // IClearingHouseConfig address is not contract\\n        require(clearingHouseConfigArg.isContract(), \\\"AB_CHCNC\\\");\\n\\n        // IOrderBook is not contract\\n        require(orderBookArg.isContract(), \\\"AB_OBNC\\\");\\n\\n        __ClearingHouseCallee_init();\\n\\n        _clearingHouseConfig = clearingHouseConfigArg;\\n        _orderBook = orderBookArg;\\n    }\\n\\n    function setVault(address vaultArg) external onlyOwner {\\n        // vault address is not contract\\n        require(vaultArg.isContract(), \\\"AB_VNC\\\");\\n        _vault = vaultArg;\\n        emit VaultChanged(vaultArg);\\n    }\\n\\n    function modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) external override returns (int256, int256) {\\n        _requireOnlyClearingHouse();\\n        return _modifyTakerBalance(trader, baseToken, base, quote);\\n    }\\n\\n    function modifyOwedRealizedPnl(address trader, int256 amount) external override {\\n        _requireOnlyClearingHouse();\\n        _modifyOwedRealizedPnl(trader, amount);\\n    }\\n\\n    function settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        _settleQuoteToOwedRealizedPnl(trader, baseToken, amount);\\n    }\\n\\n    function settleOwedRealizedPnl(address trader) external override returns (int256) {\\n        // only vault\\n        require(_msgSender() == _vault, \\\"AB_OV\\\");\\n        int256 owedRealizedPnl = _owedRealizedPnlMap[trader];\\n        _owedRealizedPnlMap[trader] = 0;\\n\\n        return owedRealizedPnl;\\n    }\\n\\n    function settleBalanceAndDeregister(\\n        address maker,\\n        address baseToken,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        int256 fee\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        _modifyTakerBalance(maker, baseToken, takerBase, takerQuote);\\n        _modifyOwedRealizedPnl(maker, fee);\\n\\n        // to avoid dust, let realizedPnl = getQuote() when there's no order\\n        if (\\n            getTakerPositionSize(maker, baseToken) == 0 &&\\n            IOrderBook(_orderBook).getOpenOrderIds(maker, baseToken).length == 0\\n        ) {\\n            // only need to take care of taker's accounting when there's no order\\n            int256 takerOpenNotional = _accountMarketMap[maker][baseToken].takerOpenNotional;\\n            // AB_IQBAR: inconsistent quote balance and realizedPnl\\n            require(realizedPnl.abs() <= takerOpenNotional.abs(), \\\"AB_IQBAR\\\");\\n            realizedPnl = takerOpenNotional;\\n        }\\n\\n        // @audit should merge _addOwedRealizedPnl and settleQuoteToOwedRealizedPnl in some way.\\n        // PnlRealized will be emitted three times when removing trader's liquidity\\n        _settleQuoteToOwedRealizedPnl(maker, baseToken, realizedPnl);\\n        _deregisterBaseToken(maker, baseToken);\\n    }\\n\\n    function registerBaseToken(address trader, address baseToken) external override {\\n        _requireOnlyClearingHouse();\\n        address[] storage tokensStorage = _baseTokensMap[trader];\\n        if (_hasBaseToken(tokensStorage, baseToken)) {\\n            return;\\n        }\\n\\n        tokensStorage.push(baseToken);\\n        // AB_MNE: markets number exceeds\\n        require(tokensStorage.length <= IClearingHouseConfig(_clearingHouseConfig).getMaxMarketsPerAccount(), \\\"AB_MNE\\\");\\n    }\\n\\n    function deregisterBaseToken(address trader, address baseToken) external override {\\n        _requireOnlyClearingHouse();\\n        _deregisterBaseToken(trader, baseToken);\\n    }\\n\\n    function updateTwPremiumGrowthGlobal(\\n        address trader,\\n        address baseToken,\\n        int256 lastTwPremiumGrowthGlobalX96\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        _accountMarketMap[trader][baseToken].lastTwPremiumGrowthGlobalX96 = lastTwPremiumGrowthGlobalX96;\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    /// @inheritdoc IAccountBalance\\n    function getClearingHouseConfig() external view override returns (address) {\\n        return _clearingHouseConfig;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getOrderBook() external view override returns (address) {\\n        return _orderBook;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getVault() external view override returns (address) {\\n        return _vault;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getBaseTokens(address trader) external view override returns (address[] memory) {\\n        return _baseTokensMap[trader];\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getAccountInfo(address trader, address baseToken)\\n        external\\n        view\\n        override\\n        returns (AccountMarket.Info memory)\\n    {\\n        return _accountMarketMap[trader][baseToken];\\n    }\\n\\n    // @inheritdoc IAccountBalance\\n    function getTakerOpenNotional(address trader, address baseToken) external view override returns (int256) {\\n        return _accountMarketMap[trader][baseToken].takerOpenNotional;\\n    }\\n\\n    // @inheritdoc IAccountBalance\\n    function getTotalOpenNotional(address trader, address baseToken) external view override returns (int256) {\\n        // quote.pool[baseToken] + quoteBalance[baseToken]\\n        (uint256 quoteInPool, ) =\\n            IOrderBook(_orderBook).getTotalTokenAmountInPoolAndPendingFee(trader, baseToken, false);\\n        int256 quoteBalance = getQuote(trader, baseToken);\\n        return quoteInPool.toInt256().add(quoteBalance);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalDebtValue(address trader) external view override returns (uint256) {\\n        int256 totalQuoteBalance;\\n        int256 totalBaseDebtValue;\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            int256 baseBalance = getBase(trader, baseToken);\\n            int256 baseDebtValue;\\n            // baseDebt = baseBalance when it's negative\\n            if (baseBalance < 0) {\\n                // baseDebtValue = baseDebt * indexPrice\\n                baseDebtValue = baseBalance.mulDiv(_getIndexPrice(baseToken).toInt256(), 1e18);\\n            }\\n            totalBaseDebtValue = totalBaseDebtValue.add(baseDebtValue);\\n\\n            // we can't calculate totalQuoteDebtValue until we have totalQuoteBalance\\n            totalQuoteBalance = totalQuoteBalance.add(getQuote(trader, baseToken));\\n        }\\n        int256 totalQuoteDebtValue = totalQuoteBalance >= 0 ? 0 : totalQuoteBalance;\\n\\n        // both values are negative due to the above condition checks\\n        return totalQuoteDebtValue.add(totalBaseDebtValue).abs();\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getMarginRequirementForLiquidation(address trader) external view override returns (int256) {\\n        return\\n            getTotalAbsPositionValue(trader)\\n                .mulRatio(IClearingHouseConfig(_clearingHouseConfig).getMmRatio())\\n                .toInt256();\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getPnlAndPendingFee(address trader)\\n        external\\n        view\\n        override\\n        returns (\\n            int256,\\n            int256,\\n            uint256\\n        )\\n    {\\n        int256 totalPositionValue;\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            totalPositionValue = totalPositionValue.add(getTotalPositionValue(trader, baseToken));\\n        }\\n        (int256 netQuoteBalance, uint256 pendingFee) = _getNetQuoteBalanceAndPendingFee(trader);\\n        int256 unrealizedPnl = totalPositionValue.add(netQuoteBalance);\\n\\n        return (_owedRealizedPnlMap[trader], unrealizedPnl, pendingFee);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function hasOrder(address trader) external view override returns (bool) {\\n        return IOrderBook(_orderBook).hasOrder(trader, _baseTokensMap[trader]);\\n    }\\n\\n    //\\n    // PUBLIC VIEW\\n    //\\n\\n    /// @inheritdoc IAccountBalance\\n    function getBase(address trader, address baseToken) public view override returns (int256) {\\n        uint256 orderDebt = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, true);\\n        // base = takerPositionSize - orderBaseDebt\\n        return _accountMarketMap[trader][baseToken].takerPositionSize.sub(orderDebt.toInt256());\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getQuote(address trader, address baseToken) public view override returns (int256) {\\n        uint256 orderDebt = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, false);\\n        // quote = takerOpenNotional - orderQuoteDebt\\n        return _accountMarketMap[trader][baseToken].takerOpenNotional.sub(orderDebt.toInt256());\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTakerPositionSize(address trader, address baseToken) public view override returns (int256) {\\n        int256 positionSize = _accountMarketMap[trader][baseToken].takerPositionSize;\\n        return positionSize.abs() < _DUST ? 0 : positionSize;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalPositionSize(address trader, address baseToken) public view override returns (int256) {\\n        // NOTE: when a token goes into UniswapV3 pool (addLiquidity or swap), there would be 1 wei rounding error\\n        // for instance, maker adds liquidity with 2 base (2000000000000000000),\\n        // the actual base amount in pool would be 1999999999999999999\\n\\n        // makerBalance = totalTokenAmountInPool - totalOrderDebt\\n        (uint256 totalBaseBalanceFromOrders, ) =\\n            IOrderBook(_orderBook).getTotalTokenAmountInPoolAndPendingFee(trader, baseToken, true);\\n        uint256 totalBaseDebtFromOrder = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, true);\\n        int256 makerBaseBalance = totalBaseBalanceFromOrders.toInt256().sub(totalBaseDebtFromOrder.toInt256());\\n\\n        int256 takerPositionSize = _accountMarketMap[trader][baseToken].takerPositionSize;\\n        int256 totalPositionSize = makerBaseBalance.add(takerPositionSize);\\n        return totalPositionSize.abs() < _DUST ? 0 : totalPositionSize;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalPositionValue(address trader, address baseToken) public view override returns (int256) {\\n        int256 positionSize = getTotalPositionSize(trader, baseToken);\\n        if (positionSize == 0) return 0;\\n\\n        uint256 indexTwap = _getIndexPrice(baseToken);\\n        // both positionSize & indexTwap are in 10^18 already\\n        // overflow inspection:\\n        // only overflow when position value in USD(18 decimals) > 2^255 / 10^18\\n        return positionSize.mulDiv(indexTwap.toInt256(), 1e18);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalAbsPositionValue(address trader) public view override returns (uint256) {\\n        address[] memory tokens = _baseTokensMap[trader];\\n        uint256 totalPositionValue;\\n        uint256 tokenLen = tokens.length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = tokens[i];\\n            // will not use negative value in this case\\n            uint256 positionValue = getTotalPositionValue(trader, baseToken).abs();\\n            totalPositionValue = totalPositionValue.add(positionValue);\\n        }\\n        return totalPositionValue;\\n    }\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    function _modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) internal returns (int256, int256) {\\n        AccountMarket.Info storage accountInfo = _accountMarketMap[trader][baseToken];\\n        accountInfo.takerPositionSize = accountInfo.takerPositionSize.add(base);\\n        accountInfo.takerOpenNotional = accountInfo.takerOpenNotional.add(quote);\\n        return (accountInfo.takerPositionSize, accountInfo.takerOpenNotional);\\n    }\\n\\n    function _modifyOwedRealizedPnl(address trader, int256 amount) internal {\\n        if (amount != 0) {\\n            _owedRealizedPnlMap[trader] = _owedRealizedPnlMap[trader].add(amount);\\n            emit PnlRealized(trader, amount);\\n        }\\n    }\\n\\n    function _settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) internal {\\n        AccountMarket.Info storage accountInfo = _accountMarketMap[trader][baseToken];\\n        accountInfo.takerOpenNotional = accountInfo.takerOpenNotional.sub(amount);\\n        _modifyOwedRealizedPnl(trader, amount);\\n    }\\n\\n    /// @dev this function is expensive\\n    function _deregisterBaseToken(address trader, address baseToken) internal {\\n        AccountMarket.Info memory info = _accountMarketMap[trader][baseToken];\\n        if (info.takerPositionSize.abs() >= _DUST || info.takerOpenNotional.abs() >= _DUST) {\\n            return;\\n        }\\n\\n        if (IOrderBook(_orderBook).getOpenOrderIds(trader, baseToken).length > 0) {\\n            return;\\n        }\\n\\n        delete _accountMarketMap[trader][baseToken];\\n\\n        address[] storage tokensStorage = _baseTokensMap[trader];\\n        uint256 tokenLen = tokensStorage.length;\\n        for (uint256 i; i < tokenLen; i++) {\\n            if (tokensStorage[i] == baseToken) {\\n                // if the target to be removed is the last one, pop it directly;\\n                // else, replace it with the last one and pop the last one instead\\n                if (i != tokenLen - 1) {\\n                    tokensStorage[i] = tokensStorage[tokenLen - 1];\\n                }\\n                tokensStorage.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    function _getIndexPrice(address baseToken) internal view returns (uint256) {\\n        return IIndexPrice(baseToken).getIndexPrice(IClearingHouseConfig(_clearingHouseConfig).getTwapInterval());\\n    }\\n\\n    /// @return netQuoteBalance = quote.balance + totalQuoteInPools\\n    function _getNetQuoteBalanceAndPendingFee(address trader)\\n        internal\\n        view\\n        returns (int256 netQuoteBalance, uint256 pendingFee)\\n    {\\n        int256 totalTakerQuoteBalance;\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            totalTakerQuoteBalance = totalTakerQuoteBalance.add(_accountMarketMap[trader][baseToken].takerOpenNotional);\\n        }\\n\\n        // pendingFee is included\\n        int256 totalMakerQuoteBalance;\\n        (totalMakerQuoteBalance, pendingFee) = IOrderBook(_orderBook).getTotalQuoteBalanceAndPendingFee(\\n            trader,\\n            _baseTokensMap[trader]\\n        );\\n        netQuoteBalance = totalTakerQuoteBalance.add(totalMakerQuoteBalance);\\n\\n        return (netQuoteBalance, pendingFee);\\n    }\\n\\n    function _hasBaseToken(address[] memory baseTokens, address baseToken) internal pure returns (bool) {\\n        for (uint256 i = 0; i < baseTokens.length; i++) {\\n            if (baseTokens[i] == baseToken) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xa3567d89d4ce2424432567b377f9f6f7700aad57296fc7daadfc7fa61635a36e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nabstract contract BlockContext {\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        // Reply from Arbitrum\\n        // block.timestamp returns timestamp at the time at which the sequencer receives the tx.\\n        // It may not actually correspond to a particular L1 block\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xc8eae1c287db4646f804457ce1df92cc06386efc79e55e891fd7ddf160a0fe02\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/ClearingHouseCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeOwnable } from \\\"./SafeOwnable.sol\\\";\\n\\nabstract contract ClearingHouseCallee is SafeOwnable {\\n    //\\n    // STATE\\n    //\\n    address internal _clearingHouse;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    //\\n    // EVENT\\n    //\\n    event ClearingHouseChanged(address indexed clearingHouse);\\n\\n    //\\n    // CONSTRUCTOR\\n    //\\n\\n    // solhint-disable-next-line func-order\\n    function __ClearingHouseCallee_init() internal initializer {\\n        __SafeOwnable_init();\\n    }\\n\\n    function setClearingHouse(address clearingHouseArg) external onlyOwner {\\n        _clearingHouse = clearingHouseArg;\\n        emit ClearingHouseChanged(clearingHouseArg);\\n    }\\n\\n    function getClearingHouse() external view returns (address) {\\n        return _clearingHouse;\\n    }\\n\\n    function _requireOnlyClearingHouse() internal view {\\n        // only ClearingHouse\\n        require(_msgSender() == _clearingHouse, \\\"CHD_OCH\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9ec86e2f9d203e4fbe89382ff189167086ede1eed345533f2c254d61dc065e49\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract SafeOwnable is ContextUpgradeable {\\n    address private _owner;\\n    address private _candidate;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // caller not owner\\n        require(owner() == _msgSender(), \\\"SO_CNO\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __SafeOwnable_init() internal initializer {\\n        __Context_init();\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) external onlyOwner {\\n        // newOwner is 0\\n        require(newOwner != address(0), \\\"SO_NW0\\\");\\n        // same as original\\n        require(newOwner != _owner, \\\"SO_SAO\\\");\\n        // same as candidate\\n        require(newOwner != _candidate, \\\"SO_SAC\\\");\\n\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() external {\\n        // candidate is zero\\n        require(_candidate != address(0), \\\"SO_C0\\\");\\n        // caller is not candidate\\n        require(_candidate == _msgSender(), \\\"SO_CNC\\\");\\n\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the candidate that can become the owner.\\n     */\\n    function candidate() external view returns (address) {\\n        return _candidate;\\n    }\\n}\\n\",\"keccak256\":\"0x23f33d992a804f208ff9f956eb7c5962630bd6b5b4d032a9bc6978f00851aae7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IAccountBalance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AccountMarket } from \\\"../lib/AccountMarket.sol\\\";\\n\\ninterface IAccountBalance {\\n    /// @param vault The address of the vault contract\\n    event VaultChanged(address indexed vault);\\n\\n    /// @dev Emit whenever a trader's `owedRealizedPnl` is updated\\n    /// @param trader The address of the trader\\n    /// @param amount The amount changed\\n    event PnlRealized(address indexed trader, int256 amount);\\n\\n    function modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) external returns (int256, int256);\\n\\n    function modifyOwedRealizedPnl(address trader, int256 amount) external;\\n\\n    /// @dev this function is now only called by Vault.withdraw()\\n    function settleOwedRealizedPnl(address trader) external returns (int256 pnl);\\n\\n    function settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) external;\\n\\n    /// @dev Settle account balance and deregister base token\\n    /// @param maker The address of the maker\\n    /// @param baseToken The address of the market's base token\\n    /// @param realizedPnl Amount of pnl realized\\n    /// @param fee Amount of fee collected from pool\\n    function settleBalanceAndDeregister(\\n        address maker,\\n        address baseToken,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        int256 fee\\n    ) external;\\n\\n    /// @dev every time a trader's position value is checked, the base token list of this trader will be traversed;\\n    ///      thus, this list should be kept as short as possible\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    function registerBaseToken(address trader, address baseToken) external;\\n\\n    /// @dev this function is expensive\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    function deregisterBaseToken(address trader, address baseToken) external;\\n\\n    function updateTwPremiumGrowthGlobal(\\n        address trader,\\n        address baseToken,\\n        int256 lastTwPremiumGrowthGlobalX96\\n    ) external;\\n\\n    function getClearingHouseConfig() external view returns (address);\\n\\n    function getOrderBook() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getBaseTokens(address trader) external view returns (address[] memory);\\n\\n    function getAccountInfo(address trader, address baseToken) external view returns (AccountMarket.Info memory);\\n\\n    function getTakerOpenNotional(address trader, address baseToken) external view returns (int256);\\n\\n    /// @return totalOpenNotional the amount of quote token paid for a position when opening\\n    function getTotalOpenNotional(address trader, address baseToken) external view returns (int256);\\n\\n    function getTotalDebtValue(address trader) external view returns (uint256);\\n\\n    /// @dev this is different from Vault._getTotalMarginRequirement(), which is for freeCollateral calculation\\n    /// @return int instead of uint, as it is compared with ClearingHouse.getAccountValue(), which is also an int\\n    function getMarginRequirementForLiquidation(address trader) external view returns (int256);\\n\\n    /// @return owedRealizedPnl the pnl realized already but stored temporarily in AccountBalance\\n    /// @return unrealizedPnl the pnl not yet realized\\n    /// @return pendingFee the pending fee of maker earned\\n    function getPnlAndPendingFee(address trader)\\n        external\\n        view\\n        returns (\\n            int256 owedRealizedPnl,\\n            int256 unrealizedPnl,\\n            uint256 pendingFee\\n        );\\n\\n    function hasOrder(address trader) external view returns (bool);\\n\\n    function getBase(address trader, address baseToken) external view returns (int256);\\n\\n    function getQuote(address trader, address baseToken) external view returns (int256);\\n\\n    function getTakerPositionSize(address trader, address baseToken) external view returns (int256);\\n\\n    function getTotalPositionSize(address trader, address baseToken) external view returns (int256);\\n\\n    /// @dev a negative returned value is only be used when calculating pnl\\n    /// @dev we use 15 mins twap to calc position value\\n    function getTotalPositionValue(address trader, address baseToken) external view returns (int256);\\n\\n    /// @return sum up positions value of every market, it calls `getTotalPositionValue` internally\\n    function getTotalAbsPositionValue(address trader) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2a4516b343ab19fc5df4ba3b805738f2e456487ef6399fac5998a6e0be38c8e0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IClearingHouseConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IClearingHouseConfig {\\n    function getMaxMarketsPerAccount() external view returns (uint8);\\n\\n    function getImRatio() external view returns (uint24);\\n\\n    function getMmRatio() external view returns (uint24);\\n\\n    function getLiquidationPenaltyRatio() external view returns (uint24);\\n\\n    function getPartialCloseRatio() external view returns (uint24);\\n\\n    /// @return twapInterval for funding and prices (mark & index) calculations\\n    function getTwapInterval() external view returns (uint32);\\n\\n    function getSettlementTokenBalanceCap() external view returns (uint256);\\n\\n    function getMaxFundingRate() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0xbcb53e2dba0fb52823a00be6a92947eb60e1d7604ab6fab29284b90b0266f46e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\n\\ninterface IExchange {\\n    /// @param amount when closing position, amount(uint256) == takerPositionSize(int256),\\n    ///        as amount is assigned as takerPositionSize in ClearingHouse.closePosition()\\n    struct SwapParams {\\n        address trader;\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        bool isClose;\\n        uint256 amount;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct SwapResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 exchangedPositionSize;\\n        int256 exchangedPositionNotional;\\n        uint256 fee;\\n        uint256 insuranceFundFee;\\n        int256 pnlToBeRealized;\\n        uint256 sqrtPriceAfterX96;\\n        int24 tick;\\n        bool isPartialClose;\\n    }\\n\\n    struct SwapCallbackData {\\n        address trader;\\n        address baseToken;\\n        address pool;\\n        uint24 uniswapFeeRatio;\\n        uint256 fee;\\n    }\\n\\n    struct RealizePnlParams {\\n        address trader;\\n        address baseToken;\\n        int256 base;\\n        int256 quote;\\n    }\\n\\n    event FundingUpdated(address indexed baseToken, uint256 markTwap, uint256 indexTwap);\\n\\n    event MaxTickCrossedWithinBlockChanged(address indexed baseToken, uint24 maxTickCrossedWithinBlock);\\n\\n    /// @param accountBalance The address of accountBalance contract\\n    event AccountBalanceChanged(address accountBalance);\\n\\n    function swap(SwapParams memory params) external returns (SwapResponse memory);\\n\\n    /// @dev this function should be called at the beginning of every high-level function, such as openPosition()\\n    ///      while it doesn't matter who calls this function\\n    ///      this function 1. settles personal funding payment 2. updates global funding growth\\n    ///      personal funding payment is settled whenever there is pending funding payment\\n    ///      the global funding growth update only happens once per unique timestamp (not blockNumber, due to Arbitrum)\\n    /// @return fundingPayment the funding payment of a trader in one market should be settled into owned realized Pnl\\n    /// @return fundingGrowthGlobal the up-to-date globalFundingGrowth, usually used for later calculations\\n    function settleFunding(address trader, address baseToken)\\n        external\\n        returns (int256 fundingPayment, Funding.Growth memory fundingGrowthGlobal);\\n\\n    function getMaxTickCrossedWithinBlock(address baseToken) external view returns (uint24);\\n\\n    function getAllPendingFundingPayment(address trader) external view returns (int256);\\n\\n    /// @dev this is the view version of _updateFundingGrowth()\\n    /// @return the pending funding payment of a trader in one market, including liquidity & balance coefficients\\n    function getPendingFundingPayment(address trader, address baseToken) external view returns (int256);\\n\\n    function getSqrtMarkTwapX96(address baseToken, uint32 twapInterval) external view returns (uint160);\\n\\n    function getPnlToBeRealized(RealizePnlParams memory params) external view returns (int256);\\n\\n    function getOrderBook() external view returns (address);\\n\\n    function getAccountBalance() external view returns (address);\\n\\n    function getClearingHouseConfig() external view returns (address);\\n}\\n\",\"keccak256\":\"0xae85a18693a2044231078b8251d79d747ecf1f5aab924852f1363e45eb860ed0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IIndexPrice.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IIndexPrice {\\n    /// @dev Returns the index price of the token.\\n    /// @param interval The interval represents twap interval.\\n    function getIndexPrice(uint256 interval) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c5bbeedebd5e677d7fa6ac766fb34bbceba2033688bde7c9e8c2d3000b04953\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\nimport { OpenOrder } from \\\"../lib/OpenOrder.sol\\\";\\n\\ninterface IOrderBook {\\n    struct AddLiquidityParams {\\n        address trader;\\n        address baseToken;\\n        uint256 base;\\n        uint256 quote;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        Funding.Growth fundingGrowthGlobal;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address maker;\\n        address baseToken;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 liquidity;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        uint128 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        int256 takerBase;\\n        int256 takerQuote;\\n    }\\n\\n    struct ReplaySwapParams {\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool shouldUpdateState;\\n        int256 amount;\\n        uint160 sqrtPriceLimitX96;\\n        uint24 exchangeFeeRatio;\\n        uint24 uniswapFeeRatio;\\n        Funding.Growth globalFundingGrowth;\\n    }\\n\\n    /// @param insuranceFundFee = fee * insuranceFundFeeRatio\\n    struct ReplaySwapResponse {\\n        int24 tick;\\n        uint256 fee;\\n        uint256 insuranceFundFee;\\n    }\\n\\n    struct MintCallbackData {\\n        address trader;\\n        address pool;\\n    }\\n\\n    /// @param exchange the address of exchange contract\\n    event ExchangeChanged(address indexed exchange);\\n\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory);\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params) external returns (RemoveLiquidityResponse memory);\\n\\n    /// @dev this is the non-view version of getLiquidityCoefficientInFundingPayment()\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\\n    function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external returns (int256 liquidityCoefficientInFundingPayment);\\n\\n    function replaySwap(ReplaySwapParams memory params) external returns (ReplaySwapResponse memory);\\n\\n    function updateOrderDebt(\\n        bytes32 orderId,\\n        int256 base,\\n        int256 quote\\n    ) external;\\n\\n    function getOpenOrderIds(address trader, address baseToken) external view returns (bytes32[] memory);\\n\\n    function getOpenOrderById(bytes32 orderId) external view returns (OpenOrder.Info memory);\\n\\n    function getOpenOrder(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view returns (OpenOrder.Info memory);\\n\\n    function hasOrder(address trader, address[] calldata tokens) external view returns (bool);\\n\\n    function getTotalQuoteBalanceAndPendingFee(address trader, address[] calldata baseTokens)\\n        external\\n        view\\n        returns (int256 totalQuoteAmountInPools, uint256 totalPendingFee);\\n\\n    /// @dev the returned quote amount does not include funding payment because\\n    ///      the latter is counted directly toward realizedPnl.\\n    ///      the return value includes maker fee.\\n    ///      please refer to _getTotalTokenAmountInPool() docstring for specs\\n    function getTotalTokenAmountInPoolAndPendingFee(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) external view returns (uint256 tokenAmount, uint256 totalPendingFee);\\n\\n    function getTotalOrderDebt(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) external view returns (uint256);\\n\\n    /// @dev this is the view version of updateFundingGrowthAndLiquidityCoefficientInFundingPayment()\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\\n    function getLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external view returns (int256 liquidityCoefficientInFundingPayment);\\n\\n    function getPendingFee(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view returns (uint256);\\n\\n    function getExchange() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe70c6f0afaf44a32c6f823090342c95515334c3113f772a8ec40ddc31092e3b0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/AccountMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary AccountMarket {\\n    /// @param lastTwPremiumGrowthGlobalX96 the last time weighted premiumGrowthGlobalX96\\n    struct Info {\\n        int256 takerPositionSize;\\n        int256 takerOpenNotional;\\n        int256 lastTwPremiumGrowthGlobalX96;\\n    }\\n}\\n\",\"keccak256\":\"0x5eff189780f6ae8be15f8c770b2a14a80d54ec024522778a48c6966c7c04b108\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Tick } from \\\"./Tick.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { OpenOrder } from \\\"./OpenOrder.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { PerpFixedPoint96 } from \\\"./PerpFixedPoint96.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { LiquidityAmounts } from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary Funding {\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for uint128;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    /// @dev tw: time-weighted\\n    /// @param twPremiumX96 overflow inspection (as twPremiumX96 > twPremiumDivBySqrtPriceX96):\\n    //         max = 2 ^ (255 - 96) = 2 ^ 159 = 7.307508187E47\\n    //         assume premium = 10000, time = 10 year = 60 * 60 * 24 * 365 * 10 -> twPremium = 3.1536E12\\n    struct Growth {\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    /// @dev block-based funding is calculated as: premium * timeFraction / 1 day, for 1 day as the default period\\n    int256 internal constant _DEFAULT_FUNDING_PERIOD = 1 days;\\n\\n    //\\n    // INTERNAL PURE\\n    //\\n\\n    function calcPendingFundingPaymentWithLiquidityCoefficient(\\n        int256 baseBalance,\\n        int256 twPremiumGrowthGlobalX96,\\n        Growth memory fundingGrowthGlobal,\\n        int256 liquidityCoefficientInFundingPayment\\n    ) internal pure returns (int256) {\\n        int256 balanceCoefficientInFundingPayment =\\n            PerpMath.mulDiv(\\n                baseBalance,\\n                fundingGrowthGlobal.twPremiumX96.sub(twPremiumGrowthGlobalX96),\\n                uint256(PerpFixedPoint96._IQ96)\\n            );\\n\\n        return\\n            liquidityCoefficientInFundingPayment.add(balanceCoefficientInFundingPayment).div(_DEFAULT_FUNDING_PERIOD);\\n    }\\n\\n    /// @dev the funding payment of an order/liquidity is composed of\\n    ///      1. funding accrued inside the range 2. funding accrued below the range\\n    ///      there is no funding when the price goes above the range, as liquidity is all swapped into quoteToken\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of an order/liquidity\\n    function calcLiquidityCoefficientInFundingPaymentByOrder(\\n        OpenOrder.Info memory order,\\n        Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo\\n    ) internal pure returns (int256) {\\n        uint160 sqrtPriceX96AtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\\n\\n        // base amount below the range\\n        uint256 baseAmountBelow =\\n            LiquidityAmounts.getAmount0ForLiquidity(\\n                TickMath.getSqrtRatioAtTick(order.lowerTick),\\n                sqrtPriceX96AtUpperTick,\\n                order.liquidity\\n            );\\n        // funding below the range\\n        int256 fundingBelowX96 =\\n            baseAmountBelow.toInt256().mul(\\n                fundingGrowthRangeInfo.twPremiumGrowthBelowX96.sub(order.lastTwPremiumGrowthBelowX96)\\n            );\\n\\n        // funding inside the range =\\n        // liquidity * (\\u0394twPremiumDivBySqrtPriceGrowthInsideX96 - \\u0394twPremiumGrowthInsideX96 / sqrtPriceAtUpperTick)\\n        int256 fundingInsideX96 =\\n            order.liquidity.toInt256().mul(\\n                // \\u0394twPremiumDivBySqrtPriceGrowthInsideX96\\n                fundingGrowthRangeInfo\\n                    .twPremiumDivBySqrtPriceGrowthInsideX96\\n                    .sub(order.lastTwPremiumDivBySqrtPriceGrowthInsideX96)\\n                    .sub(\\n                    // \\u0394twPremiumGrowthInsideX96\\n                    PerpMath.mulDiv(\\n                        fundingGrowthRangeInfo.twPremiumGrowthInsideX96.sub(order.lastTwPremiumGrowthInsideX96),\\n                        PerpFixedPoint96._IQ96,\\n                        sqrtPriceX96AtUpperTick\\n                    )\\n                )\\n            );\\n\\n        return fundingBelowX96.add(fundingInsideX96).div(PerpFixedPoint96._IQ96);\\n    }\\n}\\n\",\"keccak256\":\"0xb2a8216a5f124fdf438109a5c668361d59d93e9c106067d52d10b917680b0949\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/OpenOrder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary OpenOrder {\\n    /// @param lastFeeGrowthInsideX128 fees in quote token recorded in Exchange\\n    ///        because of block-based funding, quote-only and customized fee, all fees are in quote token\\n    struct Info {\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 lastFeeGrowthInsideX128;\\n        int256 lastTwPremiumGrowthInsideX96;\\n        int256 lastTwPremiumGrowthBelowX96;\\n        int256 lastTwPremiumDivBySqrtPriceGrowthInsideX96;\\n        uint256 baseDebt;\\n        uint256 quoteDebt;\\n    }\\n\\n    function calcOrderKey(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(trader, baseToken, lowerTick, upperTick));\\n    }\\n}\\n\",\"keccak256\":\"0x322232d5d5cf358688eb0ece835a0e24a250211e37cdd2a2243792967604df0c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PerpFixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpFixedPoint96 {\\n    int256 internal constant _IQ96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x735971443673efb48c7da16a72016c53e03d087e60038325342e53a7634554f2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8bf80b34dcf03fb29e7edc88ddf451586285089ffd206156e962288ce457ee13\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6aba2cd6fe208ea413e3e087540ab092c2f3e9455e317de485bd82a81769e381\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary Tick {\\n    struct GrowthInfo {\\n        uint256 feeX128;\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    struct FundingGrowthRangeInfo {\\n        int256 twPremiumGrowthInsideX96;\\n        int256 twPremiumGrowthBelowX96;\\n        int256 twPremiumDivBySqrtPriceGrowthInsideX96;\\n    }\\n\\n    /// @dev call this function only if (liquidityGrossBefore == 0 && liquidityDelta != 0)\\n    /// @dev per Uniswap: we assume that all growths before a tick is initialized happen \\\"below\\\" the tick\\n    function initialize(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        int24 currentTick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        if (tick <= currentTick) {\\n            GrowthInfo storage growthInfo = self[tick];\\n            growthInfo.feeX128 = globalGrowthInfo.feeX128;\\n            growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96;\\n            growthInfo.twPremiumDivBySqrtPriceX96 = globalGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        }\\n    }\\n\\n    function cross(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        GrowthInfo storage growthInfo = self[tick];\\n        growthInfo.feeX128 = globalGrowthInfo.feeX128 - growthInfo.feeX128;\\n        growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96 - growthInfo.twPremiumX96;\\n        growthInfo.twPremiumDivBySqrtPriceX96 =\\n            globalGrowthInfo.twPremiumDivBySqrtPriceX96 -\\n            growthInfo.twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    function clear(mapping(int24 => GrowthInfo) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @dev all values in this function are scaled by 2^128 (X128), thus adding the suffix to external params\\n    /// @return feeGrowthInsideX128 this value can underflow per Tick.feeGrowthOutside specs\\n    function getFeeGrowthInsideX128(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        uint256 feeGrowthGlobalX128\\n    ) internal view returns (uint256 feeGrowthInsideX128) {\\n        uint256 lowerFeeGrowthOutside = self[lowerTick].feeX128;\\n        uint256 upperFeeGrowthOutside = self[upperTick].feeX128;\\n\\n        uint256 feeGrowthBelow =\\n            currentTick >= lowerTick ? lowerFeeGrowthOutside : feeGrowthGlobalX128 - lowerFeeGrowthOutside;\\n        uint256 feeGrowthAbove =\\n            currentTick < upperTick ? upperFeeGrowthOutside : feeGrowthGlobalX128 - upperFeeGrowthOutside;\\n\\n        return feeGrowthGlobalX128 - feeGrowthBelow - feeGrowthAbove;\\n    }\\n\\n    /// @return all values returned can underflow per feeGrowthOutside specs;\\n    ///         see https://www.notion.so/32990980ba8b43859f6d2541722a739b\\n    function getAllFundingGrowth(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        int256 twPremiumGrowthGlobalX96,\\n        int256 twPremiumDivBySqrtPriceGrowthGlobalX96\\n    ) internal view returns (FundingGrowthRangeInfo memory) {\\n        GrowthInfo storage lowerTickGrowthInfo = self[lowerTick];\\n        GrowthInfo storage upperTickGrowthInfo = self[upperTick];\\n\\n        int256 lowerTwPremiumGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumX96;\\n        int256 upperTwPremiumGrowthOutsideX96 = upperTickGrowthInfo.twPremiumX96;\\n\\n        FundingGrowthRangeInfo memory fundingGrowthRangeInfo;\\n        fundingGrowthRangeInfo.twPremiumGrowthBelowX96 = currentTick >= lowerTick\\n            ? lowerTwPremiumGrowthOutsideX96\\n            : twPremiumGrowthGlobalX96 - lowerTwPremiumGrowthOutsideX96;\\n        int256 twPremiumGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumGrowthOutsideX96\\n                : twPremiumGrowthGlobalX96 - upperTwPremiumGrowthOutsideX96;\\n\\n        int256 lowerTwPremiumDivBySqrtPriceGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        int256 upperTwPremiumDivBySqrtPriceGrowthOutsideX96 = upperTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n\\n        int256 twPremiumDivBySqrtPriceGrowthBelowX96 =\\n            currentTick >= lowerTick\\n                ? lowerTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - lowerTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n        int256 twPremiumDivBySqrtPriceGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - upperTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n\\n        fundingGrowthRangeInfo.twPremiumGrowthInsideX96 =\\n            twPremiumGrowthGlobalX96 -\\n            fundingGrowthRangeInfo.twPremiumGrowthBelowX96 -\\n            twPremiumGrowthAboveX96;\\n        fundingGrowthRangeInfo.twPremiumDivBySqrtPriceGrowthInsideX96 =\\n            twPremiumDivBySqrtPriceGrowthGlobalX96 -\\n            twPremiumDivBySqrtPriceGrowthBelowX96 -\\n            twPremiumDivBySqrtPriceGrowthAboveX96;\\n\\n        return fundingGrowthRangeInfo;\\n    }\\n}\\n\",\"keccak256\":\"0xa369e2419b380038f5a3aa6179e10d7ca2465907dcda33f6ca6f97b18d129f98\",\"license\":\"GPL-2.0-or-later\"},\"contracts/storage/AccountBalanceStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { AccountMarket } from \\\"../lib/AccountMarket.sol\\\";\\n\\n/// @notice For future upgrades, do not change AccountBalanceStorageV1. Create a new\\n/// contract which implements AccountBalanceStorageV1 and following the naming convention\\n/// AccountBalanceStorageVX.\\nabstract contract AccountBalanceStorageV1 {\\n    address internal _clearingHouseConfig;\\n    address internal _orderBook;\\n    address internal _vault;\\n\\n    // trader => owedRealizedPnl\\n    mapping(address => int256) internal _owedRealizedPnlMap;\\n\\n    // trader => baseTokens\\n    // base token registry of each trader\\n    mapping(address => address[]) internal _baseTokensMap;\\n\\n    // first key: trader, second key: baseToken\\n    mapping(address => mapping(address => AccountMarket.Info)) internal _accountMarketMap;\\n}\\n\",\"keccak256\":\"0x89aaaa19ca70305ceab9a70cb7aec6be70535c6134ef4c15aa8a538a9ae615d0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "candidate()": {
          "details": "Returns the candidate that can become the owner."
        },
        "deregisterBaseToken(address,address)": {
          "details": "this function is expensive",
          "params": {
            "baseToken": "The address of the trader's base token",
            "trader": "The address of the trader"
          }
        },
        "getMarginRequirementForLiquidation(address)": {
          "details": "this is different from Vault._getTotalMarginRequirement(), which is for freeCollateral calculation",
          "returns": {
            "_0": "int instead of uint, as it is compared with ClearingHouse.getAccountValue(), which is also an int"
          }
        },
        "getPnlAndPendingFee(address)": {
          "returns": {
            "_0": "the pnl realized already but stored temporarily in AccountBalance",
            "_1": "the pnl not yet realized",
            "_2": "the pending fee of maker earned"
          }
        },
        "getTotalAbsPositionValue(address)": {
          "returns": {
            "_0": "sum up positions value of every market, it calls `getTotalPositionValue` internally"
          }
        },
        "getTotalOpenNotional(address,address)": {
          "returns": {
            "_0": "totalOpenNotional the amount of quote token paid for a position when opening"
          }
        },
        "getTotalPositionValue(address,address)": {
          "details": "a negative returned value is only be used when calculating pnlwe use 15 mins twap to calc position value"
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "registerBaseToken(address,address)": {
          "details": "every time a trader's position value is checked, the base token list of this trader will be traversed;      thus, this list should be kept as short as possible",
          "params": {
            "baseToken": "The address of the trader's base token",
            "trader": "The address of the trader"
          }
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setOwner(address)": {
          "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)": {
          "details": "Settle account balance and deregister base token",
          "params": {
            "baseToken": "The address of the market's base token",
            "fee": "Amount of fee collected from pool",
            "maker": "The address of the maker",
            "realizedPnl": "Amount of pnl realized"
          }
        },
        "settleOwedRealizedPnl(address)": {
          "details": "this function is now only called by Vault.withdraw()"
        },
        "updateOwner()": {
          "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 1039,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_initialized",
          "offset": 0,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 1042,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_initializing",
          "offset": 1,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 2356,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "__gap",
          "offset": 0,
          "slot": "1",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 20487,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_owner",
          "offset": 0,
          "slot": "51",
          "type": "t_address"
        },
        {
          "astId": 20489,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_candidate",
          "offset": 0,
          "slot": "52",
          "type": "t_address"
        },
        {
          "astId": 20493,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "__gap",
          "offset": 0,
          "slot": "53",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 20358,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_clearingHouse",
          "offset": 0,
          "slot": "103",
          "type": "t_address"
        },
        {
          "astId": 20362,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "__gap",
          "offset": 0,
          "slot": "104",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 24612,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_clearingHouseConfig",
          "offset": 0,
          "slot": "154",
          "type": "t_address"
        },
        {
          "astId": 24614,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_orderBook",
          "offset": 0,
          "slot": "155",
          "type": "t_address"
        },
        {
          "astId": 24616,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_vault",
          "offset": 0,
          "slot": "156",
          "type": "t_address"
        },
        {
          "astId": 24620,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_owedRealizedPnlMap",
          "offset": 0,
          "slot": "157",
          "type": "t_mapping(t_address,t_int256)"
        },
        {
          "astId": 24625,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_baseTokensMap",
          "offset": 0,
          "slot": "158",
          "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
        },
        {
          "astId": 24631,
          "contract": "contracts/AccountBalance.sol:AccountBalance",
          "label": "_accountMarketMap",
          "offset": 0,
          "slot": "159",
          "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Info)22138_storage))"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_array(t_uint256)50_storage": {
          "base": "t_uint256",
          "encoding": "inplace",
          "label": "uint256[50]",
          "numberOfBytes": "1600"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_int256": {
          "encoding": "inplace",
          "label": "int256",
          "numberOfBytes": "32"
        },
        "t_mapping(t_address,t_array(t_address)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => address[])",
          "numberOfBytes": "32",
          "value": "t_array(t_address)dyn_storage"
        },
        "t_mapping(t_address,t_int256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => int256)",
          "numberOfBytes": "32",
          "value": "t_int256"
        },
        "t_mapping(t_address,t_mapping(t_address,t_struct(Info)22138_storage))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => struct AccountMarket.Info))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_struct(Info)22138_storage)"
        },
        "t_mapping(t_address,t_struct(Info)22138_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => struct AccountMarket.Info)",
          "numberOfBytes": "32",
          "value": "t_struct(Info)22138_storage"
        },
        "t_struct(Info)22138_storage": {
          "encoding": "inplace",
          "label": "struct AccountMarket.Info",
          "members": [
            {
              "astId": 22133,
              "contract": "contracts/AccountBalance.sol:AccountBalance",
              "label": "takerPositionSize",
              "offset": 0,
              "slot": "0",
              "type": "t_int256"
            },
            {
              "astId": 22135,
              "contract": "contracts/AccountBalance.sol:AccountBalance",
              "label": "takerOpenNotional",
              "offset": 0,
              "slot": "1",
              "type": "t_int256"
            },
            {
              "astId": 22137,
              "contract": "contracts/AccountBalance.sol:AccountBalance",
              "label": "lastTwPremiumGrowthGlobalX96",
              "offset": 0,
              "slot": "2",
              "type": "t_int256"
            }
          ],
          "numberOfBytes": "96"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }