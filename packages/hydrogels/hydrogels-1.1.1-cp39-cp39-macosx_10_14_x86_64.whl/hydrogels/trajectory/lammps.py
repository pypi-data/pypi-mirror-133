#!/usr/bin/env python
"""lammps.py - auto-generated by softnanotools"""
from pathlib import Path
from typing import Iterable, Union, List
import pandas as pd
import time

from softnanotools.logger import Logger

logger = Logger(__name__)

def write_LAMMPS_dump(
    data: pd.DataFrame,
    fname: Union[str, Path],
    timestep: int,
    box: Iterable[float],
    types: list = None,
):
    data = data.copy()
    if not types:
        types = list(set(data['type']))
    data['type'] = data['type'].apply(lambda x: types.index(x) + 1)
    data['id'] = data['id'] + 1
    data = data[['id', 'type', 'x', 'y', 'z']]
    with open(fname, 'w') as f:
        f.write(f'ITEM: TIMESTEP\n{timestep}\n')
        f.write(f'ITEM: NUMBER OF ATOMS\n{len(data)}\n')
        f.write(
            f'ITEM: BOX BOUNDS pp pp pp\n'
            f'{-box[0]/2} {box[0]/2}\n'
            f'{-box[1]/2} {box[1]/2}\n'
            f'{-box[2]/2} {box[2]/2}\n'
        )
        f.write(f'ITEM: ATOMS {" ".join(data.columns)}\n')
        data.to_csv(
            f,
            sep=' ',
            header=None,
            index=None
        )

    return

def write_LAMMPS_configuration(
    particles: pd.DataFrame,
    topology: pd.DataFrame,
    fname: Union[str, Path],
    box: Iterable[float],
    masses: Iterable[float] = None,
    comment: str = None,
    types: list = None,
):
    # manage comment
    if not comment:
        comment = (
            f"Hydrogels generated LAMMPS configuration - Generated on "
            f"{pd.Timestamp(time.time()).ctime()}"
        )

    # make copies
    particles = particles.copy()
    topology = topology.copy()

    # format particles
    if not types:
        types = list(set(particles['type']))
    particles['type'] = particles['type'].apply(lambda x: types.index(x) + 1)
    particles['id'] = particles['id'] + 1

    # format topology
    topology['atom_1'] = topology['atom_1'] + 1
    topology['atom_2'] = topology['atom_2'] + 1

    # get atom_types and bond_types
    atom_types = len(types)
    bond_types = len(list(set(topology['type'])))

    # if masses aren't specified, assume 1
    if not masses:
        masses = {i+1: 1.0 for i, _ in enumerate(types)}

    if not isinstance(masses, Iterable):
        masses = {i+1: masses for i, _ in enumerate(types)}

    with open(fname, 'w') as f:
        # comment
        f.write(f'# {comment}\n\n')

        # numbers
        f.write(f'{len(particles)} atoms\n')
        f.write(f'{len(topology)} bonds\n\n')
        f.write(f'{atom_types} atom types\n')
        f.write(f'{bond_types} bond types\n\n')

        # box
        f.write(f'-{box[0]/2} {box[0]/2} xlo xhi\n')
        f.write(f'-{box[1]/2} {box[1]/2} ylo yhi\n')
        f.write(f'-{box[2]/2} {box[2]/2} zlo zhi\n\n')

        # masses
        f.write('Masses\n\n')
        for i, mass in masses.items():
            f.write(f'{i} {mass}\n')
        f.write('\n')

        # atoms
        f.write('Atoms\n\n')
        particles[['id', 'mol', 'type', 'x', 'y', 'z']].to_csv(
            f,
            sep=' ',
            header=False,
            index=False
        )
        f.write('\n')

        # bonds
        f.write('Bonds\n\n')
        topology[['id', 'type', 'atom_1', 'atom_2']].to_csv(
            f,
            sep=' ',
            header=False,
            index=False
        )
        f.write('\n')

    return

if __name__ == '__main__':
    import doctest
    doctest.testmod()
