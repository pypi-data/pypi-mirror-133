{"version":3,"sources":["../../core/src/app/FallthroughRoot.tsx","../../core/src/ui/NonIdealState.tsx"],"names":["InstanceRedirect","location","useLocation","path","pathname","search","to","FallthroughRoot","FinalRedirectOrLoadingRoot","workspaceContext","React","WorkspaceContext","allRepos","loading","locationEntries","flex","direction","justifyContent","style","paddingTop","alignItems","gap","purpose","color","ColorsWIP","Gray600","length","firstRepo","repository","pipelines","first","workspacePipelinePath","repoName","name","repoLocation","repositoryLocation","pipelineName","isJob","padding","vertical","icon","title","description","action","href","NonIdealState","singleContentElement","filter","Boolean","background","Gray50","margin","borderRadius","width","maxWidth","size","Gray400","Gray900","Gray500"],"mappings":"kHAAA,yIAWMA,EAAmB,WACvB,IAAMC,EAAWC,cACXC,EAAI,UAAMF,EAASG,UAAf,OAA0BH,EAASI,QAC7C,OAAO,cAAC,IAAD,CAAUC,GAAE,mBAAcH,MAGtBI,EAAkB,WAC7B,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOJ,KAAM,CAAC,cAAe,gBAAiB,cAA9C,SACE,cAACH,EAAD,MAEF,cAAC,IAAD,CAAOG,KAAK,IAAZ,SACE,cAACK,EAAD,UAMFA,EAA6B,WACjC,IAAMC,EAAmBC,aAAiBC,KACnCC,EAAsCH,EAAtCG,SAAUC,EAA4BJ,EAA5BI,QAASC,EAAmBL,EAAnBK,gBAE1B,GAAID,EACF,OACE,cAAC,IAAD,CAAKE,KAAM,CAACC,UAAW,MAAOC,eAAgB,UAAWC,MAAO,CAACC,WAAY,SAA7E,SACE,eAAC,IAAD,CAAKJ,KAAM,CAACC,UAAW,MAAOI,WAAY,SAAUC,IAAK,IAAzD,UACE,cAAC,IAAD,CAASC,QAAQ,YACjB,qBAAKJ,MAAO,CAACK,MAAOC,IAAUC,SAA9B,0CAQR,IAAKb,EAASc,QAAUZ,EAAgBY,OACtC,OAAO,cAAC,IAAD,CAAUpB,GAAG,eAKtB,IAAMqB,EAAYf,EAAS,IAAM,KACjC,UAAIe,QAAJ,IAAIA,OAAJ,EAAIA,EAAWC,WAAWC,UAAUH,OAAQ,CAC1C,IAAMI,EAAQH,EAAUC,WAAWC,UAAU,GAC7C,OACE,cAAC,IAAD,CACEvB,GAAIyB,YAAsB,CACxBC,SAAUL,EAAUC,WAAWK,KAC/BC,aAAcP,EAAUQ,mBAAmBF,KAC3CG,aAAcN,EAAMG,KACpBI,MAAOP,EAAMO,UAMrB,OACE,cAAC,IAAD,CAAKC,QAAS,CAACC,SAAU,IAAzB,SACE,cAAC,IAAD,CACEC,KAAK,aACLC,MAAOd,EAAY,uBAAyB,kBAC5Ce,YACEf,EACI,iEACA,mCAENgB,OACE,cAAC,IAAD,CAAsBC,KAAK,0CAA3B,qCAWKrC,a,iCC1Ff,0FAkBasC,EAA8C,SAAC,GAAwC,IAAvCJ,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YAAaF,EAAkB,EAAlBA,KAAMG,EAAY,EAAZA,OAC/EG,EAA+E,IAAxD,CAACL,EAAOC,EAAaC,GAAQI,OAAOC,SAAStB,OAE1E,OACE,eAAC,IAAD,CACEX,KAAM,CAACM,IAAK,GAAID,WAAY0B,EAAuB,SAAW,cAC9DG,WAAYzB,IAAU0B,OACtBZ,QAAS,GACTpB,MAAO,CACLiC,OAAQ,OACRC,aAAc,EACdC,MAAO,cACPC,SAAU,KARd,UAWY,YAATd,EACC,cAAC,IAAD,CAASlB,QAAQ,YACN,eAATkB,EACF,cAAC,IAAD,CAASP,KAAK,SAASsB,KAAM,GAAIhC,MAAOC,IAAUgC,UAElD,cAAC,IAAD,CAASvB,KAAMO,EAAMe,KAAM,GAAIhC,MAAOC,IAAUgC,UAElD,eAAC,IAAD,CACEzC,KAAM,CACJM,IAAK,EACLL,UAAW,SACXI,WAAY,cAJhB,UAOGqB,GAAS,cAAC,IAAD,CAAYvB,MAAO,CAACK,MAAOC,IAAUiC,SAArC,SAAgDhB,IACzDC,GAAe,qBAAKxB,MAAO,CAACK,MAAOC,IAAUkC,SAA9B,SAAyChB,IACxDC","file":"static/js/10.7d4f2dff.chunk.js","sourcesContent":["import * as React from 'react';\nimport {Redirect, Route, Switch, useLocation} from 'react-router-dom';\n\nimport {Box} from '../ui/Box';\nimport {ExternalAnchorButton} from '../ui/Button';\nimport {ColorsWIP} from '../ui/Colors';\nimport {NonIdealState} from '../ui/NonIdealState';\nimport {Spinner} from '../ui/Spinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nconst InstanceRedirect = () => {\n  const location = useLocation();\n  const path = `${location.pathname}${location.search}`;\n  return <Redirect to={`/instance${path}`} />;\n};\n\nexport const FallthroughRoot = () => {\n  return (\n    <Switch>\n      <Route path={['/runs/(.*)?', '/assets/(.*)?', '/scheduler']}>\n        <InstanceRedirect />\n      </Route>\n      <Route path=\"*\">\n        <FinalRedirectOrLoadingRoot />\n      </Route>\n    </Switch>\n  );\n};\n\nconst FinalRedirectOrLoadingRoot = () => {\n  const workspaceContext = React.useContext(WorkspaceContext);\n  const {allRepos, loading, locationEntries} = workspaceContext;\n\n  if (loading) {\n    return (\n      <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n          <Spinner purpose=\"section\" />\n          <div style={{color: ColorsWIP.Gray600}}>Loading workspaceâ€¦</div>\n        </Box>\n      </Box>\n    );\n  }\n\n  // If we have location entries but no repos, we have no useful objects to show.\n  // Redirect to Workspace overview to surface relevant errors to the user.\n  if (!allRepos.length && locationEntries.length) {\n    return <Redirect to=\"/workspace\" />;\n  }\n\n  // Default to the first job available in the first repo. This is kind of a legacy\n  // approach, and might be worth rethinking.\n  const firstRepo = allRepos[0] || null;\n  if (firstRepo?.repository.pipelines.length) {\n    const first = firstRepo.repository.pipelines[0];\n    return (\n      <Redirect\n        to={workspacePipelinePath({\n          repoName: firstRepo.repository.name,\n          repoLocation: firstRepo.repositoryLocation.name,\n          pipelineName: first.name,\n          isJob: first.isJob,\n        })}\n      />\n    );\n  }\n\n  return (\n    <Box padding={{vertical: 64}}>\n      <NonIdealState\n        icon=\"no-results\"\n        title={firstRepo ? 'No pipelines or jobs' : 'No repositories'}\n        description={\n          firstRepo\n            ? 'Your repository is loaded but no pipelines or jobs were found.'\n            : 'Add a repository to get started.'\n        }\n        action={\n          <ExternalAnchorButton href=\"https://docs.dagster.io/getting-started\">\n            View documentation\n          </ExternalAnchorButton>\n        }\n      />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default FallthroughRoot;\n","import * as React from 'react';\n\nimport {Box} from './Box';\nimport {ColorsWIP} from './Colors';\nimport {IconName, IconWIP} from './Icon';\nimport {Spinner} from './Spinner';\nimport {Subheading} from './Text';\n\nexport type NonIdealStateProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n> & {\n  icon: 'error' | 'no-results' | 'spinner' | IconName;\n  title: string;\n  description?: React.ReactNode;\n  action?: React.ReactNode;\n};\n\nexport const NonIdealState: React.FC<NonIdealStateProps> = ({title, description, icon, action}) => {\n  const singleContentElement = [title, description, action].filter(Boolean).length === 1;\n\n  return (\n    <Box\n      flex={{gap: 20, alignItems: singleContentElement ? 'center' : 'flex-start'}}\n      background={ColorsWIP.Gray50}\n      padding={24}\n      style={{\n        margin: 'auto',\n        borderRadius: 8,\n        width: 'max-content',\n        maxWidth: 500,\n      }}\n    >\n      {icon === 'spinner' ? (\n        <Spinner purpose=\"section\" />\n      ) : icon === 'no-results' ? (\n        <IconWIP name=\"search\" size={48} color={ColorsWIP.Gray400} />\n      ) : (\n        <IconWIP name={icon} size={48} color={ColorsWIP.Gray400} />\n      )}\n      <Box\n        flex={{\n          gap: 8,\n          direction: 'column',\n          alignItems: 'flex-start',\n        }}\n      >\n        {title && <Subheading style={{color: ColorsWIP.Gray900}}>{title}</Subheading>}\n        {description && <div style={{color: ColorsWIP.Gray500}}>{description}</div>}\n        {action}\n      </Box>\n    </Box>\n  );\n};\n"],"sourceRoot":""}