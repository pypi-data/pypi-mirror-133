# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Nsound
else:
    import _Nsound

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _Nsound.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _Nsound.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _Nsound.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _Nsound.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _Nsound.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _Nsound.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _Nsound.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Nsound:
_Nsound.SwigPyIterator_swigregister(SwigPyIterator)

PACKAGE_NAME = _Nsound.PACKAGE_NAME

NSOUND_AUTHORS = _Nsound.NSOUND_AUTHORS

NSOUND_COPYRIGHT = _Nsound.NSOUND_COPYRIGHT

NSOUND_VERSION_A = _Nsound.NSOUND_VERSION_A

NSOUND_VERSION_B = _Nsound.NSOUND_VERSION_B

NSOUND_VERSION_C = _Nsound.NSOUND_VERSION_C

PACKAGE_VERSION = _Nsound.PACKAGE_VERSION

PACKAGE_RELEASE = _Nsound.PACKAGE_RELEASE

NSOUND_IN_PYTHON_MODULE = _Nsound.NSOUND_IN_PYTHON_MODULE

NSOUND_64_BIT = _Nsound.NSOUND_64_BIT

M_PI = _Nsound.M_PI

NSOUND_LIBPORTAUDIO = _Nsound.NSOUND_LIBPORTAUDIO

NSOUND_C_PYLAB = _Nsound.NSOUND_C_PYLAB

NSOUND_CPP11 = _Nsound.NSOUND_CPP11

class Exception(object):
    r"""Proxy of C++ Nsound::Exception class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(Exception self, std::string const & message) -> Exception"""
        _Nsound.Exception_swiginit(self, _Nsound.new_Exception(message))
    __swig_destroy__ = _Nsound.delete_Exception

    def what(self):
        r"""what(Exception self) -> char const *"""
        return _Nsound.Exception_what(self)

# Register Exception in _Nsound:
_Nsound.Exception_swigregister(Exception)

LINE_PREFIX = _Nsound.LINE_PREFIX

ERROR_HEADER = _Nsound.ERROR_HEADER

WARNING_HEADER = _Nsound.WARNING_HEADER

class FloatVector(object):
    r"""Proxy of C++ std::vector< Nsound::float64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatVector self) -> SwigPyIterator"""
        return _Nsound.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatVector self) -> bool"""
        return _Nsound.FloatVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatVector self) -> bool"""
        return _Nsound.FloatVector___bool__(self)

    def __len__(self):
        r"""__len__(FloatVector self) -> std::vector< double >::size_type"""
        return _Nsound.FloatVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> FloatVector"""
        return _Nsound.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, FloatVector v)
        """
        return _Nsound.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _Nsound.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatVector self, std::vector< double >::difference_type i)
        __delitem__(FloatVector self, PySliceObject * slice)
        """
        return _Nsound.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector
        __getitem__(FloatVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _Nsound.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)
        __setitem__(FloatVector self, PySliceObject * slice)
        __setitem__(FloatVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _Nsound.FloatVector___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatVector self) -> std::vector< double >::value_type"""
        return _Nsound.FloatVector_pop(self)

    def append(self, x):
        r"""append(FloatVector self, std::vector< double >::value_type const & x)"""
        return _Nsound.FloatVector_append(self, x)

    def empty(self):
        r"""empty(FloatVector self) -> bool"""
        return _Nsound.FloatVector_empty(self)

    def size(self):
        r"""size(FloatVector self) -> std::vector< double >::size_type"""
        return _Nsound.FloatVector_size(self)

    def swap(self, v):
        r"""swap(FloatVector self, FloatVector v)"""
        return _Nsound.FloatVector_swap(self, v)

    def begin(self):
        r"""begin(FloatVector self) -> std::vector< double >::iterator"""
        return _Nsound.FloatVector_begin(self)

    def end(self):
        r"""end(FloatVector self) -> std::vector< double >::iterator"""
        return _Nsound.FloatVector_end(self)

    def rbegin(self):
        r"""rbegin(FloatVector self) -> std::vector< double >::reverse_iterator"""
        return _Nsound.FloatVector_rbegin(self)

    def rend(self):
        r"""rend(FloatVector self) -> std::vector< double >::reverse_iterator"""
        return _Nsound.FloatVector_rend(self)

    def clear(self):
        r"""clear(FloatVector self)"""
        return _Nsound.FloatVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatVector self) -> std::vector< double >::allocator_type"""
        return _Nsound.FloatVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatVector self)"""
        return _Nsound.FloatVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(FloatVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _Nsound.FloatVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector self) -> FloatVector
        __init__(FloatVector self, FloatVector other) -> FloatVector
        __init__(FloatVector self, std::vector< double >::size_type size) -> FloatVector
        __init__(FloatVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> FloatVector
        """
        _Nsound.FloatVector_swiginit(self, _Nsound.new_FloatVector(*args))

    def push_back(self, x):
        r"""push_back(FloatVector self, std::vector< double >::value_type const & x)"""
        return _Nsound.FloatVector_push_back(self, x)

    def front(self):
        r"""front(FloatVector self) -> std::vector< double >::value_type const &"""
        return _Nsound.FloatVector_front(self)

    def back(self):
        r"""back(FloatVector self) -> std::vector< double >::value_type const &"""
        return _Nsound.FloatVector_back(self)

    def assign(self, n, x):
        r"""assign(FloatVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _Nsound.FloatVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatVector self, std::vector< double >::size_type new_size)
        resize(FloatVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _Nsound.FloatVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(FloatVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _Nsound.FloatVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatVector self, std::vector< double >::size_type n)"""
        return _Nsound.FloatVector_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatVector self) -> std::vector< double >::size_type"""
        return _Nsound.FloatVector_capacity(self)
    __swig_destroy__ = _Nsound.delete_FloatVector

# Register FloatVector in _Nsound:
_Nsound.FloatVector_swigregister(FloatVector)

class BooleanVector(object):
    r"""Proxy of C++ std::vector< Nsound::boolean > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(BooleanVector self) -> SwigPyIterator"""
        return _Nsound.BooleanVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(BooleanVector self) -> bool"""
        return _Nsound.BooleanVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BooleanVector self) -> bool"""
        return _Nsound.BooleanVector___bool__(self)

    def __len__(self):
        r"""__len__(BooleanVector self) -> std::vector< bool >::size_type"""
        return _Nsound.BooleanVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> BooleanVector"""
        return _Nsound.BooleanVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        __setslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, BooleanVector v)
        """
        return _Nsound.BooleanVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _Nsound.BooleanVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(BooleanVector self, std::vector< bool >::difference_type i)
        __delitem__(BooleanVector self, PySliceObject * slice)
        """
        return _Nsound.BooleanVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(BooleanVector self, PySliceObject * slice) -> BooleanVector
        __getitem__(BooleanVector self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _Nsound.BooleanVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(BooleanVector self, PySliceObject * slice, BooleanVector v)
        __setitem__(BooleanVector self, PySliceObject * slice)
        __setitem__(BooleanVector self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _Nsound.BooleanVector___setitem__(self, *args)

    def pop(self):
        r"""pop(BooleanVector self) -> std::vector< bool >::value_type"""
        return _Nsound.BooleanVector_pop(self)

    def append(self, x):
        r"""append(BooleanVector self, std::vector< bool >::value_type x)"""
        return _Nsound.BooleanVector_append(self, x)

    def empty(self):
        r"""empty(BooleanVector self) -> bool"""
        return _Nsound.BooleanVector_empty(self)

    def size(self):
        r"""size(BooleanVector self) -> std::vector< bool >::size_type"""
        return _Nsound.BooleanVector_size(self)

    def swap(self, v):
        r"""swap(BooleanVector self, BooleanVector v)"""
        return _Nsound.BooleanVector_swap(self, v)

    def begin(self):
        r"""begin(BooleanVector self) -> std::vector< bool >::iterator"""
        return _Nsound.BooleanVector_begin(self)

    def end(self):
        r"""end(BooleanVector self) -> std::vector< bool >::iterator"""
        return _Nsound.BooleanVector_end(self)

    def rbegin(self):
        r"""rbegin(BooleanVector self) -> std::vector< bool >::reverse_iterator"""
        return _Nsound.BooleanVector_rbegin(self)

    def rend(self):
        r"""rend(BooleanVector self) -> std::vector< bool >::reverse_iterator"""
        return _Nsound.BooleanVector_rend(self)

    def clear(self):
        r"""clear(BooleanVector self)"""
        return _Nsound.BooleanVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(BooleanVector self) -> std::vector< bool >::allocator_type"""
        return _Nsound.BooleanVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(BooleanVector self)"""
        return _Nsound.BooleanVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(BooleanVector self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(BooleanVector self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _Nsound.BooleanVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BooleanVector self) -> BooleanVector
        __init__(BooleanVector self, BooleanVector other) -> BooleanVector
        __init__(BooleanVector self, std::vector< bool >::size_type size) -> BooleanVector
        __init__(BooleanVector self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> BooleanVector
        """
        _Nsound.BooleanVector_swiginit(self, _Nsound.new_BooleanVector(*args))

    def push_back(self, x):
        r"""push_back(BooleanVector self, std::vector< bool >::value_type x)"""
        return _Nsound.BooleanVector_push_back(self, x)

    def front(self):
        r"""front(BooleanVector self) -> std::vector< bool >::value_type"""
        return _Nsound.BooleanVector_front(self)

    def back(self):
        r"""back(BooleanVector self) -> std::vector< bool >::value_type"""
        return _Nsound.BooleanVector_back(self)

    def assign(self, n, x):
        r"""assign(BooleanVector self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _Nsound.BooleanVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(BooleanVector self, std::vector< bool >::size_type new_size)
        resize(BooleanVector self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _Nsound.BooleanVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(BooleanVector self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(BooleanVector self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _Nsound.BooleanVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(BooleanVector self, std::vector< bool >::size_type n)"""
        return _Nsound.BooleanVector_reserve(self, n)

    def capacity(self):
        r"""capacity(BooleanVector self) -> std::vector< bool >::size_type"""
        return _Nsound.BooleanVector_capacity(self)
    __swig_destroy__ = _Nsound.delete_BooleanVector

# Register BooleanVector in _Nsound:
_Nsound.BooleanVector_swigregister(BooleanVector)

class Uint32Vector(object):
    r"""Proxy of C++ std::vector< Nsound::uint32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Uint32Vector self) -> SwigPyIterator"""
        return _Nsound.Uint32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Uint32Vector self) -> bool"""
        return _Nsound.Uint32Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Uint32Vector self) -> bool"""
        return _Nsound.Uint32Vector___bool__(self)

    def __len__(self):
        r"""__len__(Uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _Nsound.Uint32Vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> Uint32Vector"""
        return _Nsound.Uint32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, Uint32Vector v)
        """
        return _Nsound.Uint32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _Nsound.Uint32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Uint32Vector self, std::vector< unsigned int >::difference_type i)
        __delitem__(Uint32Vector self, PySliceObject * slice)
        """
        return _Nsound.Uint32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Uint32Vector self, PySliceObject * slice) -> Uint32Vector
        __getitem__(Uint32Vector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _Nsound.Uint32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Uint32Vector self, PySliceObject * slice, Uint32Vector v)
        __setitem__(Uint32Vector self, PySliceObject * slice)
        __setitem__(Uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _Nsound.Uint32Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Uint32Vector self) -> std::vector< unsigned int >::value_type"""
        return _Nsound.Uint32Vector_pop(self)

    def append(self, x):
        r"""append(Uint32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _Nsound.Uint32Vector_append(self, x)

    def empty(self):
        r"""empty(Uint32Vector self) -> bool"""
        return _Nsound.Uint32Vector_empty(self)

    def size(self):
        r"""size(Uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _Nsound.Uint32Vector_size(self)

    def swap(self, v):
        r"""swap(Uint32Vector self, Uint32Vector v)"""
        return _Nsound.Uint32Vector_swap(self, v)

    def begin(self):
        r"""begin(Uint32Vector self) -> std::vector< unsigned int >::iterator"""
        return _Nsound.Uint32Vector_begin(self)

    def end(self):
        r"""end(Uint32Vector self) -> std::vector< unsigned int >::iterator"""
        return _Nsound.Uint32Vector_end(self)

    def rbegin(self):
        r"""rbegin(Uint32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _Nsound.Uint32Vector_rbegin(self)

    def rend(self):
        r"""rend(Uint32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _Nsound.Uint32Vector_rend(self)

    def clear(self):
        r"""clear(Uint32Vector self)"""
        return _Nsound.Uint32Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Uint32Vector self) -> std::vector< unsigned int >::allocator_type"""
        return _Nsound.Uint32Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Uint32Vector self)"""
        return _Nsound.Uint32Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Uint32Vector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(Uint32Vector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _Nsound.Uint32Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Uint32Vector self) -> Uint32Vector
        __init__(Uint32Vector self, Uint32Vector other) -> Uint32Vector
        __init__(Uint32Vector self, std::vector< unsigned int >::size_type size) -> Uint32Vector
        __init__(Uint32Vector self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> Uint32Vector
        """
        _Nsound.Uint32Vector_swiginit(self, _Nsound.new_Uint32Vector(*args))

    def push_back(self, x):
        r"""push_back(Uint32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _Nsound.Uint32Vector_push_back(self, x)

    def front(self):
        r"""front(Uint32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _Nsound.Uint32Vector_front(self)

    def back(self):
        r"""back(Uint32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _Nsound.Uint32Vector_back(self)

    def assign(self, n, x):
        r"""assign(Uint32Vector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _Nsound.Uint32Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Uint32Vector self, std::vector< unsigned int >::size_type new_size)
        resize(Uint32Vector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _Nsound.Uint32Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Uint32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(Uint32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _Nsound.Uint32Vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Uint32Vector self, std::vector< unsigned int >::size_type n)"""
        return _Nsound.Uint32Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _Nsound.Uint32Vector_capacity(self)
    __swig_destroy__ = _Nsound.delete_Uint32Vector

# Register Uint32Vector in _Nsound:
_Nsound.Uint32Vector_swigregister(Uint32Vector)

class BooleanVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< Nsound::boolean > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(BooleanVectorVector self) -> SwigPyIterator"""
        return _Nsound.BooleanVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(BooleanVectorVector self) -> bool"""
        return _Nsound.BooleanVectorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BooleanVectorVector self) -> bool"""
        return _Nsound.BooleanVectorVector___bool__(self)

    def __len__(self):
        r"""__len__(BooleanVectorVector self) -> std::vector< std::vector< bool > >::size_type"""
        return _Nsound.BooleanVectorVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j) -> BooleanVectorVector"""
        return _Nsound.BooleanVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j)
        __setslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j, BooleanVectorVector v)
        """
        return _Nsound.BooleanVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j)"""
        return _Nsound.BooleanVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i)
        __delitem__(BooleanVectorVector self, PySliceObject * slice)
        """
        return _Nsound.BooleanVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(BooleanVectorVector self, PySliceObject * slice) -> BooleanVectorVector
        __getitem__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i) -> BooleanVector
        """
        return _Nsound.BooleanVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(BooleanVectorVector self, PySliceObject * slice, BooleanVectorVector v)
        __setitem__(BooleanVectorVector self, PySliceObject * slice)
        __setitem__(BooleanVectorVector self, std::vector< std::vector< bool > >::difference_type i, BooleanVector x)
        """
        return _Nsound.BooleanVectorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(BooleanVectorVector self) -> BooleanVector"""
        return _Nsound.BooleanVectorVector_pop(self)

    def append(self, x):
        r"""append(BooleanVectorVector self, BooleanVector x)"""
        return _Nsound.BooleanVectorVector_append(self, x)

    def empty(self):
        r"""empty(BooleanVectorVector self) -> bool"""
        return _Nsound.BooleanVectorVector_empty(self)

    def size(self):
        r"""size(BooleanVectorVector self) -> std::vector< std::vector< bool > >::size_type"""
        return _Nsound.BooleanVectorVector_size(self)

    def swap(self, v):
        r"""swap(BooleanVectorVector self, BooleanVectorVector v)"""
        return _Nsound.BooleanVectorVector_swap(self, v)

    def begin(self):
        r"""begin(BooleanVectorVector self) -> std::vector< std::vector< bool > >::iterator"""
        return _Nsound.BooleanVectorVector_begin(self)

    def end(self):
        r"""end(BooleanVectorVector self) -> std::vector< std::vector< bool > >::iterator"""
        return _Nsound.BooleanVectorVector_end(self)

    def rbegin(self):
        r"""rbegin(BooleanVectorVector self) -> std::vector< std::vector< bool > >::reverse_iterator"""
        return _Nsound.BooleanVectorVector_rbegin(self)

    def rend(self):
        r"""rend(BooleanVectorVector self) -> std::vector< std::vector< bool > >::reverse_iterator"""
        return _Nsound.BooleanVectorVector_rend(self)

    def clear(self):
        r"""clear(BooleanVectorVector self)"""
        return _Nsound.BooleanVectorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(BooleanVectorVector self) -> std::vector< std::vector< bool > >::allocator_type"""
        return _Nsound.BooleanVectorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(BooleanVectorVector self)"""
        return _Nsound.BooleanVectorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator pos) -> std::vector< std::vector< bool > >::iterator
        erase(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator first, std::vector< std::vector< bool > >::iterator last) -> std::vector< std::vector< bool > >::iterator
        """
        return _Nsound.BooleanVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BooleanVectorVector self) -> BooleanVectorVector
        __init__(BooleanVectorVector self, BooleanVectorVector other) -> BooleanVectorVector
        __init__(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type size) -> BooleanVectorVector
        __init__(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type size, BooleanVector value) -> BooleanVectorVector
        """
        _Nsound.BooleanVectorVector_swiginit(self, _Nsound.new_BooleanVectorVector(*args))

    def push_back(self, x):
        r"""push_back(BooleanVectorVector self, BooleanVector x)"""
        return _Nsound.BooleanVectorVector_push_back(self, x)

    def front(self):
        r"""front(BooleanVectorVector self) -> BooleanVector"""
        return _Nsound.BooleanVectorVector_front(self)

    def back(self):
        r"""back(BooleanVectorVector self) -> BooleanVector"""
        return _Nsound.BooleanVectorVector_back(self)

    def assign(self, n, x):
        r"""assign(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type n, BooleanVector x)"""
        return _Nsound.BooleanVectorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type new_size)
        resize(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type new_size, BooleanVector x)
        """
        return _Nsound.BooleanVectorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator pos, BooleanVector x) -> std::vector< std::vector< bool > >::iterator
        insert(BooleanVectorVector self, std::vector< std::vector< bool > >::iterator pos, std::vector< std::vector< bool > >::size_type n, BooleanVector x)
        """
        return _Nsound.BooleanVectorVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(BooleanVectorVector self, std::vector< std::vector< bool > >::size_type n)"""
        return _Nsound.BooleanVectorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(BooleanVectorVector self) -> std::vector< std::vector< bool > >::size_type"""
        return _Nsound.BooleanVectorVector_capacity(self)
    __swig_destroy__ = _Nsound.delete_BooleanVectorVector

# Register BooleanVectorVector in _Nsound:
_Nsound.BooleanVectorVector_swigregister(BooleanVectorVector)

class FFTChunkVectorT(object):
    r"""Proxy of C++ std::vector< Nsound::FFTChunk > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FFTChunkVectorT self) -> SwigPyIterator"""
        return _Nsound.FFTChunkVectorT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FFTChunkVectorT self) -> bool"""
        return _Nsound.FFTChunkVectorT___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FFTChunkVectorT self) -> bool"""
        return _Nsound.FFTChunkVectorT___bool__(self)

    def __len__(self):
        r"""__len__(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::size_type"""
        return _Nsound.FFTChunkVectorT___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j) -> FFTChunkVectorT"""
        return _Nsound.FFTChunkVectorT___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j)
        __setslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j, FFTChunkVectorT v)
        """
        return _Nsound.FFTChunkVectorT___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, std::vector< Nsound::FFTChunk >::difference_type j)"""
        return _Nsound.FFTChunkVectorT___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i)
        __delitem__(FFTChunkVectorT self, PySliceObject * slice)
        """
        return _Nsound.FFTChunkVectorT___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FFTChunkVectorT self, PySliceObject * slice) -> FFTChunkVectorT
        __getitem__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i) -> FFTChunk
        """
        return _Nsound.FFTChunkVectorT___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FFTChunkVectorT self, PySliceObject * slice, FFTChunkVectorT v)
        __setitem__(FFTChunkVectorT self, PySliceObject * slice)
        __setitem__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::difference_type i, FFTChunk x)
        """
        return _Nsound.FFTChunkVectorT___setitem__(self, *args)

    def pop(self):
        r"""pop(FFTChunkVectorT self) -> FFTChunk"""
        return _Nsound.FFTChunkVectorT_pop(self)

    def append(self, x):
        r"""append(FFTChunkVectorT self, FFTChunk x)"""
        return _Nsound.FFTChunkVectorT_append(self, x)

    def empty(self):
        r"""empty(FFTChunkVectorT self) -> bool"""
        return _Nsound.FFTChunkVectorT_empty(self)

    def size(self):
        r"""size(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::size_type"""
        return _Nsound.FFTChunkVectorT_size(self)

    def swap(self, v):
        r"""swap(FFTChunkVectorT self, FFTChunkVectorT v)"""
        return _Nsound.FFTChunkVectorT_swap(self, v)

    def begin(self):
        r"""begin(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::iterator"""
        return _Nsound.FFTChunkVectorT_begin(self)

    def end(self):
        r"""end(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::iterator"""
        return _Nsound.FFTChunkVectorT_end(self)

    def rbegin(self):
        r"""rbegin(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::reverse_iterator"""
        return _Nsound.FFTChunkVectorT_rbegin(self)

    def rend(self):
        r"""rend(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::reverse_iterator"""
        return _Nsound.FFTChunkVectorT_rend(self)

    def clear(self):
        r"""clear(FFTChunkVectorT self)"""
        return _Nsound.FFTChunkVectorT_clear(self)

    def get_allocator(self):
        r"""get_allocator(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::allocator_type"""
        return _Nsound.FFTChunkVectorT_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FFTChunkVectorT self)"""
        return _Nsound.FFTChunkVectorT_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator pos) -> std::vector< Nsound::FFTChunk >::iterator
        erase(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator first, std::vector< Nsound::FFTChunk >::iterator last) -> std::vector< Nsound::FFTChunk >::iterator
        """
        return _Nsound.FFTChunkVectorT_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FFTChunkVectorT self) -> FFTChunkVectorT
        __init__(FFTChunkVectorT self, FFTChunkVectorT other) -> FFTChunkVectorT
        __init__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type size) -> FFTChunkVectorT
        __init__(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type size, FFTChunk value) -> FFTChunkVectorT
        """
        _Nsound.FFTChunkVectorT_swiginit(self, _Nsound.new_FFTChunkVectorT(*args))

    def push_back(self, x):
        r"""push_back(FFTChunkVectorT self, FFTChunk x)"""
        return _Nsound.FFTChunkVectorT_push_back(self, x)

    def front(self):
        r"""front(FFTChunkVectorT self) -> FFTChunk"""
        return _Nsound.FFTChunkVectorT_front(self)

    def back(self):
        r"""back(FFTChunkVectorT self) -> FFTChunk"""
        return _Nsound.FFTChunkVectorT_back(self)

    def assign(self, n, x):
        r"""assign(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type n, FFTChunk x)"""
        return _Nsound.FFTChunkVectorT_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type new_size)
        resize(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type new_size, FFTChunk x)
        """
        return _Nsound.FFTChunkVectorT_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator pos, FFTChunk x) -> std::vector< Nsound::FFTChunk >::iterator
        insert(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::iterator pos, std::vector< Nsound::FFTChunk >::size_type n, FFTChunk x)
        """
        return _Nsound.FFTChunkVectorT_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FFTChunkVectorT self, std::vector< Nsound::FFTChunk >::size_type n)"""
        return _Nsound.FFTChunkVectorT_reserve(self, n)

    def capacity(self):
        r"""capacity(FFTChunkVectorT self) -> std::vector< Nsound::FFTChunk >::size_type"""
        return _Nsound.FFTChunkVectorT_capacity(self)
    __swig_destroy__ = _Nsound.delete_FFTChunkVectorT

# Register FFTChunkVectorT in _Nsound:
_Nsound.FFTChunkVectorT_swigregister(FFTChunkVectorT)

class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _Nsound.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringVector self) -> bool"""
        return _Nsound.StringVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringVector self) -> bool"""
        return _Nsound.StringVector___bool__(self)

    def __len__(self):
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _Nsound.StringVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector"""
        return _Nsound.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)
        """
        return _Nsound.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _Nsound.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringVector self, PySliceObject * slice)
        """
        return _Nsound.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector
        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _Nsound.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)
        __setitem__(StringVector self, PySliceObject * slice)
        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _Nsound.StringVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _Nsound.StringVector_pop(self)

    def append(self, x):
        r"""append(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _Nsound.StringVector_append(self, x)

    def empty(self):
        r"""empty(StringVector self) -> bool"""
        return _Nsound.StringVector_empty(self)

    def size(self):
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _Nsound.StringVector_size(self)

    def swap(self, v):
        r"""swap(StringVector self, StringVector v)"""
        return _Nsound.StringVector_swap(self, v)

    def begin(self):
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _Nsound.StringVector_begin(self)

    def end(self):
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _Nsound.StringVector_end(self)

    def rbegin(self):
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _Nsound.StringVector_rbegin(self)

    def rend(self):
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _Nsound.StringVector_rend(self)

    def clear(self):
        r"""clear(StringVector self)"""
        return _Nsound.StringVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _Nsound.StringVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringVector self)"""
        return _Nsound.StringVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _Nsound.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector
        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector
        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector
        """
        _Nsound.StringVector_swiginit(self, _Nsound.new_StringVector(*args))

    def push_back(self, x):
        r"""push_back(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _Nsound.StringVector_push_back(self, x)

    def front(self):
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _Nsound.StringVector_front(self)

    def back(self):
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _Nsound.StringVector_back(self)

    def assign(self, n, x):
        r"""assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _Nsound.StringVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)
        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _Nsound.StringVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _Nsound.StringVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringVector self, std::vector< std::string >::size_type n)"""
        return _Nsound.StringVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _Nsound.StringVector_capacity(self)
    __swig_destroy__ = _Nsound.delete_StringVector

# Register StringVector in _Nsound:
_Nsound.StringVector_swigregister(StringVector)

class circular_iterator(object):
    r"""Proxy of C++ Nsound::circular_iterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(circular_iterator self, FloatVector v) -> circular_iterator
        __init__(circular_iterator self, circular_iterator copy) -> circular_iterator
        """
        _Nsound.circular_iterator_swiginit(self, _Nsound.new_circular_iterator(*args))

    def reset(self):
        r"""reset(circular_iterator self)"""
        return _Nsound.circular_iterator_reset(self)

    def __eq__(self, rhs):
        r"""__eq__(circular_iterator self, circular_iterator rhs) -> bool"""
        return _Nsound.circular_iterator___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""__ne__(circular_iterator self, circular_iterator rhs) -> bool"""
        return _Nsound.circular_iterator___ne__(self, rhs)

    def __iadd__(self, i):
        r"""__iadd__(circular_iterator self, Nsound::int32 i) -> circular_iterator"""
        return _Nsound.circular_iterator___iadd__(self, i)

    def __isub__(self, i):
        r"""__isub__(circular_iterator self, Nsound::int32 i) -> circular_iterator"""
        return _Nsound.circular_iterator___isub__(self, i)

    def __ref__(self):
        r"""__ref__(circular_iterator self) -> Nsound::FloatVector::value_type &"""
        return _Nsound.circular_iterator___ref__(self)

    def __float__(self):
        r"""__float__(circular_iterator self) -> Nsound::float64"""
        return _Nsound.circular_iterator___float__(self)

    def __str__(self):
        r"""__str__(circular_iterator self) -> std::string"""
        return _Nsound.circular_iterator___str__(self)
    __swig_destroy__ = _Nsound.delete_circular_iterator

# Register circular_iterator in _Nsound:
_Nsound.circular_iterator_swigregister(circular_iterator)

class const_circular_iterator(object):
    r"""Proxy of C++ Nsound::const_circular_iterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(const_circular_iterator self, FloatVector v) -> const_circular_iterator
        __init__(const_circular_iterator self, const_circular_iterator copy) -> const_circular_iterator
        """
        _Nsound.const_circular_iterator_swiginit(self, _Nsound.new_const_circular_iterator(*args))

    def reset(self):
        r"""reset(const_circular_iterator self)"""
        return _Nsound.const_circular_iterator_reset(self)

    def __eq__(self, rhs):
        r"""__eq__(const_circular_iterator self, const_circular_iterator rhs) -> bool"""
        return _Nsound.const_circular_iterator___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""__ne__(const_circular_iterator self, const_circular_iterator rhs) -> bool"""
        return _Nsound.const_circular_iterator___ne__(self, rhs)

    def __iadd__(self, i):
        r"""__iadd__(const_circular_iterator self, Nsound::int32 i) -> const_circular_iterator"""
        return _Nsound.const_circular_iterator___iadd__(self, i)

    def __isub__(self, i):
        r"""__isub__(const_circular_iterator self, Nsound::int32 i) -> const_circular_iterator"""
        return _Nsound.const_circular_iterator___isub__(self, i)

    def __ref__(self):
        r"""__ref__(const_circular_iterator self) -> Nsound::FloatVector::value_type const &"""
        return _Nsound.const_circular_iterator___ref__(self)

    def __float__(self):
        r"""__float__(const_circular_iterator self) -> Nsound::float64"""
        return _Nsound.const_circular_iterator___float__(self)
    __swig_destroy__ = _Nsound.delete_const_circular_iterator

# Register const_circular_iterator in _Nsound:
_Nsound.const_circular_iterator_swigregister(const_circular_iterator)

class Instrument(object):
    r"""Proxy of C++ Nsound::Instrument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_Instrument

    def play(self, *args):
        r"""
        play(Instrument self) -> AudioStream
        play(Instrument self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        """
        return _Nsound.Instrument_play(self, *args)

    def getInfo(self):
        r"""getInfo(Instrument self) -> std::string"""
        return _Nsound.Instrument_getInfo(self)

# Register Instrument in _Nsound:
_Nsound.Instrument_swigregister(Instrument)

class BufferSelection(object):
    r"""Proxy of C++ Nsound::BufferSelection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BufferSelection self, Buffer buffer, BooleanVector bv) -> BufferSelection
        __init__(BufferSelection self, BufferSelection copy) -> BufferSelection
        """
        _Nsound.BufferSelection_swiginit(self, _Nsound.new_BufferSelection(*args))
    __swig_destroy__ = _Nsound.delete_BufferSelection

    def __iadd__(self, rhs):
        r"""__iadd__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___iadd__(self, rhs)

    def __isub__(self, rhs):
        r"""__isub__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___isub__(self, rhs)

    def __imul__(self, rhs):
        r"""__imul__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _Nsound.BufferSelection___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ixor__(self, rhs):
        r"""__ixor__(BufferSelection self, Nsound::float64 const & rhs) -> BufferSelection"""
        return _Nsound.BufferSelection___ixor__(self, rhs)

    def set(self, rhs):
        r"""set(BufferSelection self, Nsound::float64 const & rhs)"""
        return _Nsound.BufferSelection_set(self, rhs)

# Register BufferSelection in _Nsound:
_Nsound.BufferSelection_swigregister(BufferSelection)

class Buffer(object):
    r"""Proxy of C++ Nsound::Buffer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_Buffer

    def __init__(self, *args):
        r"""
        __init__(Buffer self) -> Buffer
        __init__(Buffer self, Nsound::uint32 chunk_size) -> Buffer
        __init__(Buffer self, FloatVector list) -> Buffer
        __init__(Buffer self, std::string const & filename, Nsound::uint32 chunk_size=4096) -> Buffer
        __init__(Buffer self, Buffer rhs) -> Buffer
        """
        _Nsound.Buffer_swiginit(self, _Nsound.new_Buffer(*args))

    def abs(self):
        r"""abs(Buffer self)"""
        return _Nsound.Buffer_abs(self)

    def getAbs(self):
        r"""getAbs(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getAbs(self)

    def add(self, buffer, offset=0, n_samples=0):
        r"""add(Buffer self, Buffer buffer, Nsound::uint32 offset=0, Nsound::uint32 n_samples=0)"""
        return _Nsound.Buffer_add(self, buffer, offset, n_samples)

    def argmax(self):
        r"""argmax(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_argmax(self)

    def argmin(self):
        r"""argmin(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_argmin(self)

    def cbegin(self, *args):
        r"""
        cbegin(Buffer self) -> circular_iterator
        cbegin(Buffer self) -> const_circular_iterator
        """
        return _Nsound.Buffer_cbegin(self, *args)

    def getNBytes(self):
        r"""getNBytes(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_getNBytes(self)

    def exp(self):
        r"""exp(Buffer self)"""
        return _Nsound.Buffer_exp(self)

    def getExp(self):
        r"""getExp(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getExp(self)

    def convolve(self, H):
        r"""convolve(Buffer self, Buffer H)"""
        return _Nsound.Buffer_convolve(self, H)

    def getConvolve(self, H):
        r"""getConvolve(Buffer self, Buffer H) -> Buffer"""
        return _Nsound.Buffer_getConvolve(self, H)

    def dB(self):
        r"""dB(Buffer self)"""
        return _Nsound.Buffer_dB(self)

    def getdB(self):
        r"""getdB(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getdB(self)

    def derivative(self, n):
        r"""derivative(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_derivative(self, n)

    def getDerivative(self, n):
        r"""getDerivative(Buffer self, Nsound::uint32 n) -> Buffer"""
        return _Nsound.Buffer_getDerivative(self, n)

    def downSample(self, n):
        r"""downSample(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_downSample(self, n)

    def getDownSample(self, n):
        r"""getDownSample(Buffer self, Nsound::uint32 n) -> Buffer"""
        return _Nsound.Buffer_getDownSample(self, n)

    def findPeaks(self, window_size=0, min_height=0.0):
        r"""findPeaks(Buffer self, Nsound::uint32 window_size=0, Nsound::float64 min_height=0.0) -> Uint32Vector"""
        return _Nsound.Buffer_findPeaks(self, window_size, min_height)

    def getLength(self):
        r"""getLength(Buffer self) -> Nsound::uint32"""
        return _Nsound.Buffer_getLength(self)

    def limit(self, *args):
        r"""
        limit(Buffer self, Nsound::float64 min, Nsound::float64 max)
        limit(Buffer self, Buffer min, Buffer max)
        """
        return _Nsound.Buffer_limit(self, *args)

    def getLimit(self, *args):
        r"""
        getLimit(Buffer self, Nsound::float64 min, Nsound::float64 max) -> Buffer
        getLimit(Buffer self, Buffer min, Buffer max) -> Buffer
        """
        return _Nsound.Buffer_getLimit(self, *args)

    def log(self):
        r"""log(Buffer self)"""
        return _Nsound.Buffer_log(self)

    def getLog(self):
        r"""getLog(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getLog(self)

    def log10(self):
        r"""log10(Buffer self)"""
        return _Nsound.Buffer_log10(self)

    def getLog10(self):
        r"""getLog10(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getLog10(self)

    def getMax(self):
        r"""getMax(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMax(self)

    def getMaxMagnitude(self):
        r"""getMaxMagnitude(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMaxMagnitude(self)

    def getMean(self):
        r"""getMean(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMean(self)

    def getMin(self):
        r"""getMin(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getMin(self)

    def mul(self, buffer, offset=0, n_samples=0):
        r"""mul(Buffer self, Buffer buffer, Nsound::uint32 offset=0, Nsound::uint32 n_samples=0)"""
        return _Nsound.Buffer_mul(self, buffer, offset, n_samples)

    def normalize(self):
        r"""normalize(Buffer self)"""
        return _Nsound.Buffer_normalize(self)

    def getNormalize(self):
        r"""getNormalize(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getNormalize(self)

    def getSignalEnergy(self, window_size):
        r"""getSignalEnergy(Buffer self, Nsound::uint32 window_size) -> Buffer"""
        return _Nsound.Buffer_getSignalEnergy(self, window_size)

    def getStd(self):
        r"""getStd(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getStd(self)

    def getSum(self):
        r"""getSum(Buffer self) -> Nsound::float64"""
        return _Nsound.Buffer_getSum(self)

    def zNorm(self):
        r"""zNorm(Buffer self)"""
        return _Nsound.Buffer_zNorm(self)

    def getZNorm(self):
        r"""getZNorm(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getZNorm(self)

    def __call__(self, bv):
        r"""__call__(Buffer self, BooleanVector bv) -> BufferSelection"""
        return _Nsound.Buffer___call__(self, bv)

    def _get_at_index(self, *args):
        r"""
        _get_at_index(Buffer self, Nsound::uint32 index) -> Nsound::float64
        _get_at_index(Buffer self, Nsound::uint32 index) -> Nsound::float64 const &
        """
        return _Nsound.Buffer__get_at_index(self, *args)

    def __lshift__(self, *args):
        r"""
        __lshift__(Buffer self, AudioStream rhs) -> Buffer
        __lshift__(Buffer self, Buffer rhs) -> Buffer
        __lshift__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___lshift__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(Buffer self, Buffer rhs) -> Buffer
        __iadd__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(Buffer self, Buffer rhs) -> Buffer
        __isub__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___isub__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(Buffer self, Buffer rhs) -> Buffer
        __imul__(Buffer self, Nsound::float64 d) -> Buffer
        """
        return _Nsound.Buffer___imul__(self, *args)

    def __itruediv__(self, *args):
        return _Nsound.Buffer___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ixor__(self, *args):
        r"""
        __ixor__(Buffer self, Buffer powers) -> Buffer
        __ixor__(Buffer self, Nsound::float64 power) -> Buffer
        """
        return _Nsound.Buffer___ixor__(self, *args)

    def __gt__(self, rhs):
        r"""__gt__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___gt__(self, rhs)

    def __ge__(self, rhs):
        r"""__ge__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___ge__(self, rhs)

    def __lt__(self, rhs):
        r"""__lt__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___lt__(self, rhs)

    def __le__(self, rhs):
        r"""__le__(Buffer self, Nsound::float64 rhs) -> BooleanVector"""
        return _Nsound.Buffer___le__(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(Buffer self, Buffer rhs) -> Nsound::boolean
        __eq__(Buffer self, Nsound::float64 rhs) -> BooleanVector
        """
        return _Nsound.Buffer___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(Buffer self, Buffer rhs) -> Nsound::boolean
        __ne__(Buffer self, Nsound::float64 rhs) -> BooleanVector
        """
        return _Nsound.Buffer___ne__(self, *args)

    def plot(self, *args):
        r"""plot(Buffer self, std::string const & title="Buffer")"""
        return _Nsound.Buffer_plot(self, *args)

    def getPointer(self, *args):
        r"""
        getPointer(Buffer self) -> Nsound::float64 const
        getPointer(Buffer self) -> Nsound::float64 *
        """
        return _Nsound.Buffer_getPointer(self, *args)

    def preallocate(self, n):
        r"""preallocate(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_preallocate(self, n)

    def readWavefile(self, filename):
        r"""readWavefile(Buffer self, char const * filename)"""
        return _Nsound.Buffer_readWavefile(self, filename)

    def resample(self, *args):
        r"""
        resample(Buffer self, Nsound::float64 factor)
        resample(Buffer self, Buffer factor)
        """
        return _Nsound.Buffer_resample(self, *args)

    def getResample(self, *args):
        r"""
        getResample(Buffer self, Nsound::float64 factor, Nsound::uint32 const N=10, Nsound::float64 beta=5.0) -> Buffer
        getResample(Buffer self, Buffer factor, Nsound::uint32 const N=10, Nsound::float64 beta=5.0) -> Buffer
        getResample(Buffer self, Nsound::uint32 const L, Nsound::uint32 const M, Nsound::uint32 const N=10, Nsound::float64 beta=5.0) -> Buffer
        """
        return _Nsound.Buffer_getResample(self, *args)

    def reverse(self):
        r"""reverse(Buffer self)"""
        return _Nsound.Buffer_reverse(self)

    def getReverse(self):
        r"""getReverse(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getReverse(self)

    def round(self):
        r"""round(Buffer self)"""
        return _Nsound.Buffer_round(self)

    def getRound(self):
        r"""getRound(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getRound(self)

    def select(self, start_index, stop_index):
        r"""select(Buffer self, Nsound::uint32 const start_index, Nsound::uint32 const stop_index) -> BufferSelection"""
        return _Nsound.Buffer_select(self, start_index, stop_index)

    def write(self, *args):
        r"""
        write(Buffer self, std::ostream & out) -> std::ostream
        write(Buffer self) -> Nsound::bytearray
        """
        return _Nsound.Buffer_write(self, *args)

    def read(self, data):
        r"""read(Buffer self, void const * data)"""
        return _Nsound.Buffer_read(self, data)

    def smooth(self, n_passes, n_samples_per_average):
        r"""smooth(Buffer self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average)"""
        return _Nsound.Buffer_smooth(self, n_passes, n_samples_per_average)

    def getSmooth(self, n_passes, n_samples_per_average):
        r"""getSmooth(Buffer self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average) -> Buffer"""
        return _Nsound.Buffer_getSmooth(self, n_passes, n_samples_per_average)

    def speedUp(self, *args):
        r"""
        speedUp(Buffer self, Nsound::float64 step_size)
        speedUp(Buffer self, Buffer step_size)
        """
        return _Nsound.Buffer_speedUp(self, *args)

    def getSpeedUp(self, *args):
        r"""
        getSpeedUp(Buffer self, Nsound::float64 step_size) -> Buffer
        getSpeedUp(Buffer self, Buffer step_size) -> Buffer
        """
        return _Nsound.Buffer_getSpeedUp(self, *args)

    def sqrt(self):
        r"""sqrt(Buffer self)"""
        return _Nsound.Buffer_sqrt(self)

    def getSqrt(self):
        r"""getSqrt(Buffer self) -> Buffer"""
        return _Nsound.Buffer_getSqrt(self)

    def subbuffer(self, start_index, n_samples=0):
        r"""subbuffer(Buffer self, Nsound::uint32 start_index, Nsound::uint32 n_samples=0) -> Buffer"""
        return _Nsound.Buffer_subbuffer(self, start_index, n_samples)

    def upSample(self, n):
        r"""upSample(Buffer self, Nsound::uint32 n)"""
        return _Nsound.Buffer_upSample(self, n)

    def getUpSample(self, n):
        r"""getUpSample(Buffer self, Nsound::uint32 n) -> Buffer"""
        return _Nsound.Buffer_getUpSample(self, n)

    def writeWavefile(self, filename):
        r"""writeWavefile(Buffer self, char const * filename)"""
        return _Nsound.Buffer_writeWavefile(self, filename)

    def _set_at_index(self, index, x):
        r"""_set_at_index(Buffer self, Nsound::int32 index, Nsound::float64 x)"""
        return _Nsound.Buffer__set_at_index(self, index, x)


    #------------------------------------------------------------------------------
    # from swig/Buffer.i
    #

    def __add__(self, rhs):
        temp = Buffer(self)
        temp += rhs
        return temp

    def __radd__(self, lhs):
        temp = Buffer(self)
        temp += lhs
        return temp


    def __sub__(self, rhs):
        temp = Buffer(self)
        temp -= rhs
        return temp

    def __rsub__(self, lhs):
        temp = Buffer(self) * -1.0
        temp += lhs
        return temp


    def __truediv__(self, rhs):
        return _Nsound.__truediv__(self, rhs)

    def __rtruediv__(self, lhs):
        return _Nsound.__truediv__(lhs, self)


    def __mul__(self, rhs):
        temp = Buffer(self)
        temp *= rhs
        return temp

    def __rmul__(self, lhs):
        temp = Buffer(self)
        temp *= lhs
        return temp


    def __pow__(self, power):
        return _Nsound.__xor__(self, power)

    def __ipow__(self, power):
        self = _Nsound.__xor__(self, power)
        return self


    def __ilshift__(self, rhs):
        raise Exception("Operator not supported")


    def __irshift__(self, rhs):
        raise Exception("Operator not supported")


    def __lshift__(self, rhs):

    # Read wavefile
        if (
                isinstance(rhs, str) or
                isinstance(rhs, Buffer)
        ):
            return _Nsound.Buffer___lshift__(self, rhs)

        else:

    # try to convert to a float
            try:
                return _Nsound.Buffer___lshift__(self, float(rhs))

            except TypeError:
                pass

    # try to convert to Buffer

            try:
                return _Nsound.Buffer___lshift__(self, Buffer(rhs))

            except TypeError:
                pass

    # assume the object is iteratble
            try:
               for x in rhs:
                   self = _Nsound.Buffer___lshift__(self, float(x))
            except TypeError:
               raise TypeError(str(type(rhs)) + ' is not iterable')

        return self


    def __rshift__(self, rhs):

        if isinstance(rhs, list):
            for s in self:
                rhs.append(s)

        elif isinstance(rhs, AudioPlayback) or isinstance(rhs, AudioPlaybackRt):
            rhs.play(self)
            return

        elif not isinstance(rhs, str):
            raise TypeError("right hand side argument must be of type str or list")

        self.writeWavefile(rhs)


    def __getitem__(self,i):

        if isinstance(i, int):

            if i >= self.getLength():
                raise StopIteration

            if i < 0:
                i += self.getLength()

            return _Nsound.Buffer__get_at_index(self, i)

        elif isinstance(i, slice):

            b = Buffer()

            for index in range(*i.indices(_Nsound.Buffer_getLength(self))):
                b << _Nsound.Buffer__get_at_index(self, index)

            return b

        else:
            raise StopIteration


    def __setitem__(self,i, d):

        if isinstance(i, int):

            if i >= self.getLength():
                raise IndexError("Error: Index out of bounds, %d >= %d" %(
                    i, self.getLength()))

            elif i < -self.getLength():
                raise IndexError("Error: Index out of bounds, %d < -%d" %(
                    i, self.getLength()))

            if type(d) != types.IntType and type(d) != types.FloatType:
                raise TypeError("Error: Argument must be numeric")

            _Nsound.Buffer__set_at_index(self, i, d)

        else:
            raise TypeError("Expecting index type int, but got %s" %(type(i)))

    def __repr__(self):
        return "Nsound.Buffer holding %d samples" % self.getLength()


    def toList(self):
        return [x for x in self]


    # Pickle interface

    def __getstate__(self):
        '''
        Returns a binary string
        '''
        return _Nsound.Buffer_write(self)


    def __setstate__(self, s):
        '''
        Reads the binary string and returns a Buffer.
        '''
        self.__init__()
        _Nsound.Buffer_read(self, s)

    #
    #------------------------------------------------------------------------------




    @staticmethod
    def ones(n_samples):
        r"""ones(Nsound::uint32 const n_samples) -> Buffer"""
        return _Nsound.Buffer_ones(n_samples)

    @staticmethod
    def rand(n_samples):
        r"""rand(Nsound::uint32 const n_samples) -> Buffer"""
        return _Nsound.Buffer_rand(n_samples)

    @staticmethod
    def zeros(n_samples):
        r"""zeros(Nsound::uint32 const n_samples) -> Buffer"""
        return _Nsound.Buffer_zeros(n_samples)

    def __len__(self):
        r"""__len__(Buffer self) -> std::size_t"""
        return _Nsound.Buffer___len__(self)

    def __str__(self):
        r"""__str__(Buffer self) -> std::string"""
        return _Nsound.Buffer___str__(self)

# Register Buffer in _Nsound:
_Nsound.Buffer_swigregister(Buffer)

def Buffer_ones(n_samples):
    r"""Buffer_ones(Nsound::uint32 const n_samples) -> Buffer"""
    return _Nsound.Buffer_ones(n_samples)

def Buffer_rand(n_samples):
    r"""Buffer_rand(Nsound::uint32 const n_samples) -> Buffer"""
    return _Nsound.Buffer_rand(n_samples)

def Buffer_zeros(n_samples):
    r"""Buffer_zeros(Nsound::uint32 const n_samples) -> Buffer"""
    return _Nsound.Buffer_zeros(n_samples)

class AudioStreamSelection(object):
    r"""Proxy of C++ Nsound::AudioStreamSelection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AudioStreamSelection self, AudioStream _as, BooleanVectorVector bv) -> AudioStreamSelection
        __init__(AudioStreamSelection self, AudioStreamSelection copy) -> AudioStreamSelection
        """
        _Nsound.AudioStreamSelection_swiginit(self, _Nsound.new_AudioStreamSelection(*args))
    __swig_destroy__ = _Nsound.delete_AudioStreamSelection

    def __iadd__(self, rhs):
        r"""__iadd__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___iadd__(self, rhs)

    def __isub__(self, rhs):
        r"""__isub__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___isub__(self, rhs)

    def __imul__(self, rhs):
        r"""__imul__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _Nsound.AudioStreamSelection___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ixor__(self, rhs):
        r"""__ixor__(AudioStreamSelection self, Nsound::float64 const & rhs) -> AudioStreamSelection"""
        return _Nsound.AudioStreamSelection___ixor__(self, rhs)

    def set(self, rhs):
        r"""set(AudioStreamSelection self, Nsound::float64 const & rhs)"""
        return _Nsound.AudioStreamSelection_set(self, rhs)

# Register AudioStreamSelection in _Nsound:
_Nsound.AudioStreamSelection_swigregister(AudioStreamSelection)

class AudioStream(object):
    r"""Proxy of C++ Nsound::AudioStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_AudioStream

    def __init__(self, *args):
        r"""
        __init__(AudioStream self) -> AudioStream
        __init__(AudioStream self, Nsound::float64 sample_rate, Nsound::uint32 n_channels=1, Nsound::uint32 n_samples_pre_allocate=4096) -> AudioStream
        __init__(AudioStream self, std::string const & filename) -> AudioStream
        __init__(AudioStream self, AudioStream rhs) -> AudioStream
        """
        _Nsound.AudioStream_swiginit(self, _Nsound.new_AudioStream(*args))

    def abs(self):
        r"""abs(AudioStream self)"""
        return _Nsound.AudioStream_abs(self)

    def getAbs(self):
        r"""getAbs(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getAbs(self)

    def add(self, *args):
        r"""
        add(AudioStream self, AudioStream _as, Nsound::uint32 offset, Nsound::uint32 n_samples=0)
        add(AudioStream self, AudioStream _as, Nsound::float64 offset_seconds, Nsound::float64 duration_seconds=0.0)
        """
        return _Nsound.AudioStream_add(self, *args)

    def begin(self, *args):
        r"""
        begin(AudioStream self) -> std::vector< Nsound::Buffer *,std::allocator< Nsound::Buffer * > >::iterator
        begin(AudioStream self) -> std::vector< Nsound::Buffer *,std::allocator< Nsound::Buffer * > >::const_iterator
        """
        return _Nsound.AudioStream_begin(self, *args)

    def end(self, *args):
        r"""
        end(AudioStream self) -> std::vector< Nsound::Buffer *,std::allocator< Nsound::Buffer * > >::iterator
        end(AudioStream self) -> std::vector< Nsound::Buffer *,std::allocator< Nsound::Buffer * > >::const_iterator
        """
        return _Nsound.AudioStream_end(self, *args)

    def convolve(self, b):
        r"""convolve(AudioStream self, Buffer b)"""
        return _Nsound.AudioStream_convolve(self, b)

    def getConvolve(self, b):
        r"""getConvolve(AudioStream self, Buffer b) -> AudioStream"""
        return _Nsound.AudioStream_getConvolve(self, b)

    def dB(self):
        r"""dB(AudioStream self)"""
        return _Nsound.AudioStream_dB(self)

    def getdB(self):
        r"""getdB(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getdB(self)

    def derivative(self, n):
        r"""derivative(AudioStream self, Nsound::uint32 n)"""
        return _Nsound.AudioStream_derivative(self, n)

    def getDerivative(self, n):
        r"""getDerivative(AudioStream self, Nsound::uint32 n) -> AudioStream"""
        return _Nsound.AudioStream_getDerivative(self, n)

    def downSample(self, n):
        r"""downSample(AudioStream self, Nsound::uint32 n)"""
        return _Nsound.AudioStream_downSample(self, n)

    def getDownSample(self, n):
        r"""getDownSample(AudioStream self, Nsound::uint32 n) -> AudioStream"""
        return _Nsound.AudioStream_getDownSample(self, n)

    def getDuration(self):
        r"""getDuration(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getDuration(self)

    def getLength(self):
        r"""getLength(AudioStream self) -> Nsound::uint32"""
        return _Nsound.AudioStream_getLength(self)

    def limit(self, *args):
        r"""
        limit(AudioStream self, Nsound::float64 min, Nsound::float64 max)
        limit(AudioStream self, Buffer min, Buffer max)
        """
        return _Nsound.AudioStream_limit(self, *args)

    def getLimit(self, *args):
        r"""
        getLimit(AudioStream self, Nsound::float64 min, Nsound::float64 max) -> AudioStream
        getLimit(AudioStream self, Buffer min, Buffer max) -> AudioStream
        """
        return _Nsound.AudioStream_getLimit(self, *args)

    def getMax(self):
        r"""getMax(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getMax(self)

    def getMaxMagnitude(self):
        r"""getMaxMagnitude(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getMaxMagnitude(self)

    def getMin(self):
        r"""getMin(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getMin(self)

    def mono(self):
        r"""mono(AudioStream self)"""
        return _Nsound.AudioStream_mono(self)

    def getMono(self):
        r"""getMono(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getMono(self)

    def getNChannels(self):
        r"""getNChannels(AudioStream self) -> Nsound::uint32"""
        return _Nsound.AudioStream_getNChannels(self)

    def getSampleRate(self):
        r"""getSampleRate(AudioStream self) -> Nsound::float64"""
        return _Nsound.AudioStream_getSampleRate(self)

    def normalize(self):
        r"""normalize(AudioStream self)"""
        return _Nsound.AudioStream_normalize(self)

    def getNormalize(self):
        r"""getNormalize(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getNormalize(self)

    def _get_at_index(self, *args):
        r"""
        _get_at_index(AudioStream self, Nsound::uint32 index) -> Buffer
        _get_at_index(AudioStream self, Nsound::uint32 index) -> Buffer
        """
        return _Nsound.AudioStream__get_at_index(self, *args)

    def __call__(self, *args):
        r"""
        __call__(AudioStream self, BooleanVectorVector bv) -> AudioStreamSelection
        __call__(AudioStream self, Nsound::uint32 channel, Nsound::uint32 index) -> Nsound::float64
        """
        return _Nsound.AudioStream___call__(self, *args)

    def __lshift__(self, *args):
        r"""
        __lshift__(AudioStream self, AudioStream rhs) -> AudioStream
        __lshift__(AudioStream self, Buffer rhs) -> AudioStream
        __lshift__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___lshift__(self, *args)

    def __gt__(self, rhs):
        r"""__gt__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___gt__(self, rhs)

    def __ge__(self, rhs):
        r"""__ge__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___ge__(self, rhs)

    def __lt__(self, rhs):
        r"""__lt__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___lt__(self, rhs)

    def __le__(self, rhs):
        r"""__le__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector"""
        return _Nsound.AudioStream___le__(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(AudioStream self, AudioStream rhs) -> Nsound::boolean
        __eq__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector
        """
        return _Nsound.AudioStream___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(AudioStream self, AudioStream rhs) -> Nsound::boolean
        __ne__(AudioStream self, Nsound::float64 rhs) -> BooleanVectorVector
        """
        return _Nsound.AudioStream___ne__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(AudioStream self, AudioStream rhs) -> AudioStream
        __iadd__(AudioStream self, Buffer rhs) -> AudioStream
        __iadd__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(AudioStream self, AudioStream rhs) -> AudioStream
        __isub__(AudioStream self, Buffer rhs) -> AudioStream
        __isub__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___isub__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(AudioStream self, AudioStream rhs) -> AudioStream
        __imul__(AudioStream self, Buffer rhs) -> AudioStream
        __imul__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___imul__(self, *args)

    def __itruediv__(self, *args):
        return _Nsound.AudioStream___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ixor__(self, *args):
        r"""
        __ixor__(AudioStream self, AudioStream rhs) -> AudioStream
        __ixor__(AudioStream self, Buffer rhs) -> AudioStream
        __ixor__(AudioStream self, Nsound::float64 d) -> AudioStream
        """
        return _Nsound.AudioStream___ixor__(self, *args)

    def pad(self, fill=0.0):
        r"""pad(AudioStream self, Nsound::float64 fill=0.0)"""
        return _Nsound.AudioStream_pad(self, fill)

    def getPad(self, fill=0.0):
        r"""getPad(AudioStream self, Nsound::float64 fill=0.0) -> AudioStream"""
        return _Nsound.AudioStream_getPad(self, fill)

    def pan(self, *args):
        r"""
        pan(AudioStream self, Nsound::float64 pan)
        pan(AudioStream self, Buffer pan)
        """
        return _Nsound.AudioStream_pan(self, *args)

    def getPan(self, *args):
        r"""
        getPan(AudioStream self, Nsound::float64 pan) -> AudioStream
        getPan(AudioStream self, Buffer pan) -> AudioStream
        """
        return _Nsound.AudioStream_getPan(self, *args)

    def plot(self, *args):
        r"""plot(AudioStream self, std::string const & title="AudioStream")"""
        return _Nsound.AudioStream_plot(self, *args)

    def readWavefile(self, filename):
        r"""readWavefile(AudioStream self, char const * filename)"""
        return _Nsound.AudioStream_readWavefile(self, filename)

    def resample(self, *args):
        r"""
        resample(AudioStream self, Nsound::float64 factor)
        resample(AudioStream self, Buffer factor)
        """
        return _Nsound.AudioStream_resample(self, *args)

    def getResample(self, *args):
        r"""
        getResample(AudioStream self, Nsound::float64 factor) -> AudioStream
        getResample(AudioStream self, Buffer factor) -> AudioStream
        """
        return _Nsound.AudioStream_getResample(self, *args)

    def resample2(self, new_sample_rate):
        r"""resample2(AudioStream self, Nsound::float64 new_sample_rate)"""
        return _Nsound.AudioStream_resample2(self, new_sample_rate)

    def getResample2(self, new_sample_rate):
        r"""getResample2(AudioStream self, Nsound::float64 new_sample_rate) -> AudioStream"""
        return _Nsound.AudioStream_getResample2(self, new_sample_rate)

    def reverse(self):
        r"""reverse(AudioStream self)"""
        return _Nsound.AudioStream_reverse(self)

    def getReverse(self):
        r"""getReverse(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getReverse(self)

    def select(self, start_index, stop_index):
        r"""select(AudioStream self, Nsound::uint32 const start_index, Nsound::uint32 const stop_index) -> AudioStreamSelection"""
        return _Nsound.AudioStream_select(self, start_index, stop_index)

    def write(self, *args):
        r"""
        write(AudioStream self, std::ostream & out) -> std::ostream
        write(AudioStream self) -> Nsound::bytearray
        """
        return _Nsound.AudioStream_write(self, *args)

    def read(self, data):
        r"""read(AudioStream self, void const * data)"""
        return _Nsound.AudioStream_read(self, data)

    def setNChannels(self, channels):
        r"""setNChannels(AudioStream self, Nsound::uint32 channels)"""
        return _Nsound.AudioStream_setNChannels(self, channels)

    def setSampleRate(self, sample_rate):
        r"""setSampleRate(AudioStream self, Nsound::uint32 sample_rate)"""
        return _Nsound.AudioStream_setSampleRate(self, sample_rate)

    def smooth(self, n_passes, n_samples_per_average):
        r"""smooth(AudioStream self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average)"""
        return _Nsound.AudioStream_smooth(self, n_passes, n_samples_per_average)

    def getSmooth(self, n_passes, n_samples_per_average):
        r"""getSmooth(AudioStream self, Nsound::uint32 n_passes, Nsound::uint32 n_samples_per_average) -> AudioStream"""
        return _Nsound.AudioStream_getSmooth(self, n_passes, n_samples_per_average)

    def speedUp(self, *args):
        r"""
        speedUp(AudioStream self, Nsound::float32 step_size)
        speedUp(AudioStream self, Buffer step_size)
        """
        return _Nsound.AudioStream_speedUp(self, *args)

    def getSpeedUp(self, *args):
        r"""
        getSpeedUp(AudioStream self, Nsound::float32 step_size) -> AudioStream
        getSpeedUp(AudioStream self, Buffer step_size) -> AudioStream
        """
        return _Nsound.AudioStream_getSpeedUp(self, *args)

    def sqrt(self):
        r"""sqrt(AudioStream self)"""
        return _Nsound.AudioStream_sqrt(self)

    def getSqrt(self):
        r"""getSqrt(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getSqrt(self)

    def substream(self, *args):
        r"""
        substream(AudioStream self, Nsound::uint32 start_index, Nsound::uint32 n_samples=0) -> AudioStream
        substream(AudioStream self, Nsound::int32 start_index, Nsound::int32 n_samples=0) -> AudioStream
        substream(AudioStream self, Nsound::float64 start_time, Nsound::float64 duration=0) -> AudioStream
        """
        return _Nsound.AudioStream_substream(self, *args)

    def transpose(self):
        r"""transpose(AudioStream self)"""
        return _Nsound.AudioStream_transpose(self)

    def getTranspose(self):
        r"""getTranspose(AudioStream self) -> AudioStream"""
        return _Nsound.AudioStream_getTranspose(self)

    def upSample(self, n):
        r"""upSample(AudioStream self, Nsound::uint32 n)"""
        return _Nsound.AudioStream_upSample(self, n)

    def getUpSample(self, n):
        r"""getUpSample(AudioStream self, Nsound::uint32 n) -> AudioStream"""
        return _Nsound.AudioStream_getUpSample(self, n)

    def writeWavefile(self, filename):
        r"""writeWavefile(AudioStream self, char const * filename)"""
        return _Nsound.AudioStream_writeWavefile(self, filename)

    def _set_at_index(self, i, arg3):
        r"""_set_at_index(AudioStream self, Nsound::int32 i, Buffer arg3)"""
        return _Nsound.AudioStream__set_at_index(self, i, arg3)


    #------------------------------------------------------------------------------
    # from swig/AudioStream.i
    #

    def __add__(self, other):
        temp = AudioStream(self)
        temp += other
        return temp

    def __radd__(self, other):
        temp = AudioStream(self)
        temp += other
        return temp


    def __sub__(self, other):
        temp = AudioStream(self)
        temp -= other
        return temp

    def __rsub__(self, other):
        temp = AudioStream(self) * -1.0
        temp += other
        return temp


    def __truediv__(self, other):
        return _Nsound.__truediv__(self, other)

    def __rtruediv__(self, other):
        return _Nsound.__truediv__(other, self)


    def __mul__(self, other):
        temp = AudioStream(self)
        temp *= other
        return temp

    def __rmul__(self, other):
        temp = AudioStream(self)
        temp *= other
        return temp


    def __len__(self):
        return self.getLength()


    def __ilshift__(self, rhs):
        raise Exception("Operator not supported")


    def __irshift__(self, rhs):
        raise Exception("Operator not supported")


    def __lshift__(self, rhs):

    # Read wavefile
        if (
                isinstance(rhs, str) or
                isinstance(rhs, AudioStream) or
                isinstance(rhs, Buffer)
        ):
            return _Nsound.AudioStream___lshift__(self, rhs)

        else:

    # try to convert to a float
            try:
                return _Nsound.AudioStream___lshift__(self, float(rhs))

            except TypeError:
                pass

    # assume the object is iteratble
            try:
               for x in rhs:
                   self = _Nsound.AudioStream___lshift__(self, float(x))
            except TypeError:
               raise TypeError(str(type(rhs)) + ' is not iterable')

        return self


    def __rshift__(self, rhs):

        if isinstance(rhs, list):
            temp = self.getMono()
            for s in temp:
                rhs.append(s)

        elif isinstance(rhs, AudioPlayback) or isinstance(rhs, AudioPlaybackRt):
            rhs.play(self)
            return

        elif not isinstance(rhs, str):
            raise TypeError("Error: right hand side argument must be of type str")

        self.writeWavefile(rhs)


    def __getitem__(self,i):

        if isinstance(i, int):
            if abs(i) >= self.getNChannels():
                raise StopIteration

            if i < 0:
                i += self.getNChannels()

            return _Nsound.AudioStream__get_at_index(self, i)

        elif isinstance(i, slice):

            indices = range(*i.indices())

            n_channels = len(indices)

            a = AudioStream(self.getSampleRate(), n_channels)

            k = 0
            for index in indices:
                a[k] = Buffer(_Nsound.AudioStream__get_at_index(self, index))
                k += 1

            return a

        else:
            raise StopIteration


    def __setitem__(self, i, buf):

        if isinstance(i, int):
            if i >= self.getNChannels():
                raise IndexError("Error: Index out of bounds, %d >= %d" %(
                    i, self.getNChannels()))

            if not isinstance(buf, Buffer):
                raise TypeError(
                    "Error: Input argument must be of class Buffer, not %s" %(
                        type(buf)))

            self._set_at_index(i, buf)

        else:
            raise TypeError("Expecting index type int, but got %s" %(type(i)))


    def __pow__(self, power):
        return _Nsound.__xor__(self, power)


    def __ipow__(self, power):
        self = _Nsound.__xor__(self, power)
        return self


    def __str__(self):

        s = "Nsound.AudioStream(\n"

        for b in self:
            s += "    %s,\n" % b

        s += ")"

        return s


    def __repr__(self):
        return "Nsound.AudioStream(%.1f, %d) holding %.3f seconds (%d samples)" % (
            self.getSampleRate(),
            self.getNChannels(),
            self.getDuration(),
            self.getLength()
        )


    # Pickle interface

    def __getstate__(self):
        '''
        Returns a binary string
        '''
        return _Nsound.AudioStream_write(self)


    def __setstate__(self, s):
        '''
        Reads the binary string.
        '''

        self.__init__()
        _Nsound.AudioStream_read(self, s)

    #
    #------------------------------------------------------------------------------




    @staticmethod
    def ones(sample_rate, n_channels, duration):
        r"""ones(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
        return _Nsound.AudioStream_ones(sample_rate, n_channels, duration)

    @staticmethod
    def rand(sample_rate, n_channels, duration):
        r"""rand(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
        return _Nsound.AudioStream_rand(sample_rate, n_channels, duration)

    @staticmethod
    def zeros(sample_rate, n_channels, duration):
        r"""zeros(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
        return _Nsound.AudioStream_zeros(sample_rate, n_channels, duration)

    def __len__(self):
        r"""__len__(AudioStream self) -> std::size_t"""
        return _Nsound.AudioStream___len__(self)

# Register AudioStream in _Nsound:
_Nsound.AudioStream_swigregister(AudioStream)

def AudioStream_ones(sample_rate, n_channels, duration):
    r"""AudioStream_ones(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
    return _Nsound.AudioStream_ones(sample_rate, n_channels, duration)

def AudioStream_rand(sample_rate, n_channels, duration):
    r"""AudioStream_rand(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
    return _Nsound.AudioStream_rand(sample_rate, n_channels, duration)

def AudioStream_zeros(sample_rate, n_channels, duration):
    r"""AudioStream_zeros(Nsound::float64 sample_rate, Nsound::uint32 const n_channels, Nsound::float64 duration) -> AudioStream"""
    return _Nsound.AudioStream_zeros(sample_rate, n_channels, duration)


def __xor__(*args):
    r"""
    __xor__(Buffer lhs, Buffer rhs) -> Buffer
    __xor__(Buffer lhs, Nsound::float64 d) -> Buffer
    __xor__(Nsound::float64 d, Buffer rhs) -> Buffer
    __xor__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __xor__(AudioStream lhs, Buffer rhs) -> AudioStream
    __xor__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    """
    return _Nsound.__xor__(*args)

def __add__(*args):
    r"""
    __add__(circular_iterator lhs, Nsound::int32 rhs) -> circular_iterator
    __add__(const_circular_iterator lhs, Nsound::int32 rhs) -> const_circular_iterator
    __add__(Buffer lhs, Buffer rhs) -> Buffer
    __add__(Buffer lhs, Nsound::float64 d) -> Buffer
    __add__(Nsound::float64 d, Buffer rhs) -> Buffer
    __add__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __add__(AudioStream lhs, Buffer rhs) -> AudioStream
    __add__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __add__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
    return _Nsound.__add__(*args)

def __sub__(*args):
    r"""
    __sub__(circular_iterator lhs, Nsound::int32 rhs) -> circular_iterator
    __sub__(const_circular_iterator lhs, Nsound::int32 rhs) -> const_circular_iterator
    __sub__(Buffer lhs, Buffer rhs) -> Buffer
    __sub__(Buffer lhs, Nsound::float64 d) -> Buffer
    __sub__(Nsound::float64 d, Buffer rhs) -> Buffer
    __sub__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __sub__(AudioStream lhs, Buffer rhs) -> AudioStream
    __sub__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __sub__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
    return _Nsound.__sub__(*args)

def __mul__(*args):
    r"""
    __mul__(Buffer lhs, Buffer rhs) -> Buffer
    __mul__(Buffer lhs, Nsound::float64 d) -> Buffer
    __mul__(Nsound::float64 d, Buffer rhs) -> Buffer
    __mul__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __mul__(AudioStream lhs, Buffer rhs) -> AudioStream
    __mul__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __mul__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
    return _Nsound.__mul__(*args)

def __truediv__(*args):
    r"""
    __truediv__(Buffer lhs, Buffer rhs) -> Buffer
    __truediv__(Buffer lhs, Nsound::float64 d) -> Buffer
    __truediv__(Nsound::float64 d, Buffer rhs) -> Buffer
    __truediv__(AudioStream lhs, AudioStream rhs) -> AudioStream
    __truediv__(AudioStream lhs, Buffer rhs) -> AudioStream
    __truediv__(AudioStream lhs, Nsound::float64 d) -> AudioStream
    __truediv__(Nsound::float64 d, AudioStream rhs) -> AudioStream
    """
    return _Nsound.__truediv__(*args)
class FFTChunk(object):
    r"""Proxy of C++ Nsound::FFTChunk class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FFTChunk self, Nsound::uint32 size=32, Nsound::uint32 sample_rate=44100, Nsound::uint32 original_size=0) -> FFTChunk
        __init__(FFTChunk self, FFTChunk copy) -> FFTChunk
        """
        _Nsound.FFTChunk_swiginit(self, _Nsound.new_FFTChunk(*args))
    __swig_destroy__ = _Nsound.delete_FFTChunk

    def getFrequencyAxis(self):
        r"""getFrequencyAxis(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getFrequencyAxis(self)

    def getReal(self):
        r"""getReal(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getReal(self)

    def getImaginary(self):
        r"""getImaginary(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getImaginary(self)

    def getMagnitude(self):
        r"""getMagnitude(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getMagnitude(self)

    def getOriginalSize(self):
        r"""getOriginalSize(FFTChunk self) -> Nsound::uint32"""
        return _Nsound.FFTChunk_getOriginalSize(self)

    def getPhase(self):
        r"""getPhase(FFTChunk self) -> Buffer"""
        return _Nsound.FFTChunk_getPhase(self)

    def isPolar(self):
        r"""isPolar(FFTChunk self) -> Nsound::boolean"""
        return _Nsound.FFTChunk_isPolar(self)

    def plot(self, *args):
        r"""plot(FFTChunk self, std::string const & title="", Nsound::boolean dB=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FFTChunk_plot(self, *args)

    def setCartesian(self, real, imaginary):
        r"""setCartesian(FFTChunk self, Buffer real, Buffer imaginary)"""
        return _Nsound.FFTChunk_setCartesian(self, real, imaginary)

    def setPolar(self, magnitude, phase):
        r"""setPolar(FFTChunk self, Buffer magnitude, Buffer phase)"""
        return _Nsound.FFTChunk_setPolar(self, magnitude, phase)

    def toPolar(self):
        r"""toPolar(FFTChunk self)"""
        return _Nsound.FFTChunk_toPolar(self)

    def toCartesian(self):
        r"""toCartesian(FFTChunk self)"""
        return _Nsound.FFTChunk_toCartesian(self)
    real_ = property(_Nsound.FFTChunk_real__get, _Nsound.FFTChunk_real__set, doc=r"""real_ : p.Nsound::Buffer""")
    imag_ = property(_Nsound.FFTChunk_imag__get, _Nsound.FFTChunk_imag__set, doc=r"""imag_ : p.Nsound::Buffer""")

    def getSampleRate(self):
        r"""getSampleRate(FFTChunk self) -> Nsound::uint32"""
        return _Nsound.FFTChunk_getSampleRate(self)

# Register FFTChunk in _Nsound:
_Nsound.FFTChunk_swigregister(FFTChunk)

BARTLETT = _Nsound.BARTLETT

BLACKMAN = _Nsound.BLACKMAN

BLACKMAN_HARRIS = _Nsound.BLACKMAN_HARRIS

GAUSSIAN = _Nsound.GAUSSIAN

GAUSSIAN_05 = _Nsound.GAUSSIAN_05

GAUSSIAN_10 = _Nsound.GAUSSIAN_10

GAUSSIAN_15 = _Nsound.GAUSSIAN_15

GAUSSIAN_20 = _Nsound.GAUSSIAN_20

GAUSSIAN_25 = _Nsound.GAUSSIAN_25

GAUSSIAN_30 = _Nsound.GAUSSIAN_30

GAUSSIAN_33 = _Nsound.GAUSSIAN_33

GAUSSIAN_35 = _Nsound.GAUSSIAN_35

GAUSSIAN_40 = _Nsound.GAUSSIAN_40

GAUSSIAN_45 = _Nsound.GAUSSIAN_45

GAUSSIAN_50 = _Nsound.GAUSSIAN_50

GAUSSIAN_55 = _Nsound.GAUSSIAN_55

GAUSSIAN_60 = _Nsound.GAUSSIAN_60

GAUSSIAN_65 = _Nsound.GAUSSIAN_65

GAUSSIAN_66 = _Nsound.GAUSSIAN_66

GAUSSIAN_70 = _Nsound.GAUSSIAN_70

GAUSSIAN_75 = _Nsound.GAUSSIAN_75

GAUSSIAN_80 = _Nsound.GAUSSIAN_80

GAUSSIAN_85 = _Nsound.GAUSSIAN_85

GAUSSIAN_90 = _Nsound.GAUSSIAN_90

GAUSSIAN_95 = _Nsound.GAUSSIAN_95

GAUSSIAN_99 = _Nsound.GAUSSIAN_99

HAMMING = _Nsound.HAMMING

HANNING = _Nsound.HANNING

KAISER = _Nsound.KAISER

NUTTALL = _Nsound.NUTTALL

PARZEN = _Nsound.PARZEN

RECTANGULAR = _Nsound.RECTANGULAR

BACKEND_TYPE_NONE = _Nsound.BACKEND_TYPE_NONE

BACKEND_TYPE_LIBAO = _Nsound.BACKEND_TYPE_LIBAO

BACKEND_TYPE_LIBPORTAUDIO = _Nsound.BACKEND_TYPE_LIBPORTAUDIO

class AudioBackend(object):
    r"""Proxy of C++ Nsound::AudioBackend class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    BACKEND_NOT_INITIALIZED = _Nsound.AudioBackend_BACKEND_NOT_INITIALIZED
    
    BACKEND_READY = _Nsound.AudioBackend_BACKEND_READY
    
    BACKEND_ERROR = _Nsound.AudioBackend_BACKEND_ERROR
    
    __swig_destroy__ = _Nsound.delete_AudioBackend

    def getBackendType(self):
        r"""getBackendType(AudioBackend self) -> Nsound::AudioBackendType"""
        return _Nsound.AudioBackend_getBackendType(self)

    def getBitsPerSample(self):
        r"""getBitsPerSample(AudioBackend self) -> Nsound::uint32"""
        return _Nsound.AudioBackend_getBitsPerSample(self)

    def getChannels(self):
        r"""getChannels(AudioBackend self) -> Nsound::uint32"""
        return _Nsound.AudioBackend_getChannels(self)

    def getError(self):
        r"""getError(AudioBackend self) -> std::string"""
        return _Nsound.AudioBackend_getError(self)

    def getInfo(self):
        r"""getInfo(AudioBackend self) -> std::string"""
        return _Nsound.AudioBackend_getInfo(self)

    def getSampleRate(self):
        r"""getSampleRate(AudioBackend self) -> Nsound::uint32"""
        return _Nsound.AudioBackend_getSampleRate(self)

    def getState(self):
        r"""getState(AudioBackend self) -> Nsound::AudioBackend::State"""
        return _Nsound.AudioBackend_getState(self)

    @staticmethod
    def getStateString(*args):
        r"""
        getStateString() -> std::string
        getStateString(Nsound::AudioBackend::State const & state) -> std::string
        """
        return _Nsound.AudioBackend_getStateString(*args)

    def initialize(self):
        r"""initialize(AudioBackend self)"""
        return _Nsound.AudioBackend_initialize(self)

    def play(self, data, n_bytes):
        r"""play(AudioBackend self, void * data, Nsound::uint32 n_bytes)"""
        return _Nsound.AudioBackend_play(self, data, n_bytes)

    def scanDevices(self, pb, test_clip):
        r"""scanDevices(AudioBackend self, AudioPlayback pb, AudioStream test_clip)"""
        return _Nsound.AudioBackend_scanDevices(self, pb, test_clip)

    def setOption(self, key, value):
        r"""setOption(AudioBackend self, std::string const & key, std::string const & value)"""
        return _Nsound.AudioBackend_setOption(self, key, value)

    def shutdown(self):
        r"""shutdown(AudioBackend self)"""
        return _Nsound.AudioBackend_shutdown(self)

# Register AudioBackend in _Nsound:
_Nsound.AudioBackend_swigregister(AudioBackend)

def AudioBackend_getStateString(*args):
    r"""
    AudioBackend_getStateString() -> std::string
    AudioBackend_getStateString(Nsound::AudioBackend::State const & state) -> std::string
    """
    return _Nsound.AudioBackend_getStateString(*args)

class AudioPlayback(object):
    r"""Proxy of C++ Nsound::AudioPlayback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate=44100.0, channels=1, bits_per_sample=16):
        r"""__init__(AudioPlayback self, Nsound::float64 const & sample_rate=44100.0, Nsound::uint32 const channels=1, Nsound::uint32 const bits_per_sample=16) -> AudioPlayback"""
        _Nsound.AudioPlayback_swiginit(self, _Nsound.new_AudioPlayback(sample_rate, channels, bits_per_sample))
    __swig_destroy__ = _Nsound.delete_AudioPlayback

    @staticmethod
    def setBackendType(ab):
        r"""setBackendType(Nsound::AudioBackendType const ab)"""
        return _Nsound.AudioPlayback_setBackendType(ab)

    @staticmethod
    def getBackendType():
        r"""getBackendType() -> Nsound::AudioBackendType"""
        return _Nsound.AudioPlayback_getBackendType()

    def getBitsPerSample(self):
        r"""getBitsPerSample(AudioPlayback self) -> Nsound::uint32"""
        return _Nsound.AudioPlayback_getBitsPerSample(self)

    def setBitsPerSample(self, bits_per_sample):
        r"""setBitsPerSample(AudioPlayback self, Nsound::uint32 bits_per_sample)"""
        return _Nsound.AudioPlayback_setBitsPerSample(self, bits_per_sample)

    def getChannels(self):
        r"""getChannels(AudioPlayback self) -> Nsound::uint32"""
        return _Nsound.AudioPlayback_getChannels(self)

    def setChannels(self, channels):
        r"""setChannels(AudioPlayback self, Nsound::uint32 channels)"""
        return _Nsound.AudioPlayback_setChannels(self, channels)

    def getError(self):
        r"""getError(AudioPlayback self) -> std::string"""
        return _Nsound.AudioPlayback_getError(self)

    def getInfo(self):
        r"""getInfo(AudioPlayback self) -> std::string"""
        return _Nsound.AudioPlayback_getInfo(self)

    def getSampleRate(self):
        r"""getSampleRate(AudioPlayback self) -> Nsound::uint32"""
        return _Nsound.AudioPlayback_getSampleRate(self)

    def setSampleRate(self, sample_rate):
        r"""setSampleRate(AudioPlayback self, Nsound::uint32 sample_rate)"""
        return _Nsound.AudioPlayback_setSampleRate(self, sample_rate)

    def getState(self):
        r"""getState(AudioPlayback self) -> Nsound::AudioBackend::State"""
        return _Nsound.AudioPlayback_getState(self)

    def getStateString(self, *args):
        r"""
        getStateString(AudioPlayback self) -> std::string
        getStateString(AudioPlayback self, Nsound::AudioBackend::State const & state) -> std::string
        """
        return _Nsound.AudioPlayback_getStateString(self, *args)

    def initialize(self):
        r"""initialize(AudioPlayback self)"""
        return _Nsound.AudioPlayback_initialize(self)

    def play(self, *args):
        r"""
        play(AudioPlayback self, AudioStream a)
        play(AudioPlayback self, Buffer b)
        """
        return _Nsound.AudioPlayback_play(self, *args)

    def scanDevices(self):
        r"""scanDevices(AudioPlayback self)"""
        return _Nsound.AudioPlayback_scanDevices(self)

    def setOption(self, key, value):
        r"""setOption(AudioPlayback self, std::string const & key, std::string const & value)"""
        return _Nsound.AudioPlayback_setOption(self, key, value)

    def shutdown(self):
        r"""shutdown(AudioPlayback self)"""
        return _Nsound.AudioPlayback_shutdown(self)

# Register AudioPlayback in _Nsound:
_Nsound.AudioPlayback_swigregister(AudioPlayback)

def AudioPlayback_setBackendType(ab):
    r"""AudioPlayback_setBackendType(Nsound::AudioBackendType const ab)"""
    return _Nsound.AudioPlayback_setBackendType(ab)

def AudioPlayback_getBackendType():
    r"""AudioPlayback_getBackendType() -> Nsound::AudioBackendType"""
    return _Nsound.AudioPlayback_getBackendType()


def use(*args):
    r"""
    use(std::string const & backend)
    use(Nsound::AudioBackendType const & type)
    """
    return _Nsound.use(*args)

def getBackends():
    r"""getBackends() -> StringVector"""
    return _Nsound.getBackends()

def getBackendTypes():
    r"""getBackendTypes() -> std::vector< Nsound::AudioBackendType,std::allocator< Nsound::AudioBackendType > >"""
    return _Nsound.getBackendTypes()
BUM_SILENCE = _Nsound.BUM_SILENCE

BUM_NOISE = _Nsound.BUM_NOISE

BUM_TONE = _Nsound.BUM_TONE

class AudioPlaybackRtDebug(object):
    r"""Proxy of C++ Nsound::AudioPlaybackRtDebug class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    unknown_error_count = property(_Nsound.AudioPlaybackRtDebug_unknown_error_count_get, _Nsound.AudioPlaybackRtDebug_unknown_error_count_set, doc=r"""unknown_error_count : Nsound::uint32""")
    overrun_count = property(_Nsound.AudioPlaybackRtDebug_overrun_count_get, _Nsound.AudioPlaybackRtDebug_overrun_count_set, doc=r"""overrun_count : Nsound::uint32""")
    underrun_count = property(_Nsound.AudioPlaybackRtDebug_underrun_count_get, _Nsound.AudioPlaybackRtDebug_underrun_count_set, doc=r"""underrun_count : Nsound::uint32""")
    pa_overrun_count = property(_Nsound.AudioPlaybackRtDebug_pa_overrun_count_get, _Nsound.AudioPlaybackRtDebug_pa_overrun_count_set, doc=r"""pa_overrun_count : Nsound::uint32""")
    pa_underrun_count = property(_Nsound.AudioPlaybackRtDebug_pa_underrun_count_get, _Nsound.AudioPlaybackRtDebug_pa_underrun_count_set, doc=r"""pa_underrun_count : Nsound::uint32""")
    pool_size = property(_Nsound.AudioPlaybackRtDebug_pool_size_get, _Nsound.AudioPlaybackRtDebug_pool_size_set, doc=r"""pool_size : Nsound::uint32""")
    n_ready = property(_Nsound.AudioPlaybackRtDebug_n_ready_get, _Nsound.AudioPlaybackRtDebug_n_ready_set, doc=r"""n_ready : Nsound::uint32""")
    wr_index = property(_Nsound.AudioPlaybackRtDebug_wr_index_get, _Nsound.AudioPlaybackRtDebug_wr_index_set, doc=r"""wr_index : Nsound::uint32""")
    wr_ptr = property(_Nsound.AudioPlaybackRtDebug_wr_ptr_get, _Nsound.AudioPlaybackRtDebug_wr_ptr_set, doc=r"""wr_ptr : Nsound::uint32""")
    rd_ptr = property(_Nsound.AudioPlaybackRtDebug_rd_ptr_get, _Nsound.AudioPlaybackRtDebug_rd_ptr_set, doc=r"""rd_ptr : Nsound::uint32""")
    samplerate = property(_Nsound.AudioPlaybackRtDebug_samplerate_get, _Nsound.AudioPlaybackRtDebug_samplerate_set, doc=r"""samplerate : Nsound::float64""")
    samples_per_buffer = property(_Nsound.AudioPlaybackRtDebug_samples_per_buffer_get, _Nsound.AudioPlaybackRtDebug_samples_per_buffer_set, doc=r"""samples_per_buffer : Nsound::uint32""")
    is_streaming = property(_Nsound.AudioPlaybackRtDebug_is_streaming_get, _Nsound.AudioPlaybackRtDebug_is_streaming_set, doc=r"""is_streaming : bool""")
    n_history = property(_Nsound.AudioPlaybackRtDebug_n_history_get, _Nsound.AudioPlaybackRtDebug_n_history_set, doc=r"""n_history : std::vector<(Nsound::uint32,std::allocator<(Nsound::uint32)>)>""")

    def __str__(self):
        r"""__str__(AudioPlaybackRtDebug self) -> std::string"""
        return _Nsound.AudioPlaybackRtDebug___str__(self)

    def __init__(self):
        r"""__init__(AudioPlaybackRtDebug self) -> AudioPlaybackRtDebug"""
        _Nsound.AudioPlaybackRtDebug_swiginit(self, _Nsound.new_AudioPlaybackRtDebug())
    __swig_destroy__ = _Nsound.delete_AudioPlaybackRtDebug

# Register AudioPlaybackRtDebug in _Nsound:
_Nsound.AudioPlaybackRtDebug_swigregister(AudioPlaybackRtDebug)

class AudioPlaybackRt(object):
    r"""Proxy of C++ Nsound::AudioPlaybackRt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def use_jack(flag):
        r"""use_jack(bool flag)"""
        return _Nsound.AudioPlaybackRt_use_jack(flag)

    def __init__(self, sample_rate=44100.0, channels=1, n_buffers=3, buffer_size_sec=-1.0):
        r"""__init__(AudioPlaybackRt self, Nsound::float64 sample_rate=44100.0, Nsound::uint32 channels=1, Nsound::uint32 n_buffers=3, Nsound::float64 buffer_size_sec=-1.0) -> AudioPlaybackRt"""
        _Nsound.AudioPlaybackRt_swiginit(self, _Nsound.new_AudioPlaybackRt(sample_rate, channels, n_buffers, buffer_size_sec))
    __swig_destroy__ = _Nsound.delete_AudioPlaybackRt

    def getSamplesPerBuffer(self):
        r"""getSamplesPerBuffer(AudioPlaybackRt self) -> Nsound::uint32"""
        return _Nsound.AudioPlaybackRt_getSamplesPerBuffer(self)

    def getActualLatencySeconds(self):
        r"""getActualLatencySeconds(AudioPlaybackRt self) -> Nsound::float64"""
        return _Nsound.AudioPlaybackRt_getActualLatencySeconds(self)

    def setBufferUnderrunMode(self, bum):
        r"""setBufferUnderrunMode(AudioPlaybackRt self, Nsound::BufferUnderrunMode bum)"""
        return _Nsound.AudioPlaybackRt_setBufferUnderrunMode(self, bum)

    def getInfo(self):
        r"""getInfo(AudioPlaybackRt self) -> std::string"""
        return _Nsound.AudioPlaybackRt_getInfo(self)

    def play(self, *args):
        r"""
        play(AudioPlaybackRt self, AudioStream a)
        play(AudioPlaybackRt self, Buffer b)
        play(AudioPlaybackRt self, Nsound::float64 sample)
        play(AudioPlaybackRt self, Nsound::float64 left, Nsound::float64 right)
        """
        return _Nsound.AudioPlaybackRt_play(self, *args)

    def stop(self):
        r"""stop(AudioPlaybackRt self)"""
        return _Nsound.AudioPlaybackRt_stop(self)

    def debug_print(self):
        r"""debug_print(AudioPlaybackRt self) -> std::string"""
        return _Nsound.AudioPlaybackRt_debug_print(self)

    def get_debug_info(self):
        r"""get_debug_info(AudioPlaybackRt self) -> AudioPlaybackRtDebug"""
        return _Nsound.AudioPlaybackRt_get_debug_info(self)


    #------------------------------------------------------------------------------
    # from swig/AudioPlaybackRt.i
    #
    def __lshift__(self, rhs):
        self.play(rhs)

    def __rshift__(self, rhs):
        self.play(rhs)

    def __str__(self):
        return "Nsound.AudioPlaybackRt(): %s\n%s" % (self.getInfo(), self.debug_print())

    __repr__ = __str__

    #
    #------------------------------------------------------------------------------




# Register AudioPlaybackRt in _Nsound:
_Nsound.AudioPlaybackRt_swigregister(AudioPlaybackRt)

def AudioPlaybackRt_use_jack(flag):
    r"""AudioPlaybackRt_use_jack(bool flag)"""
    return _Nsound.AudioPlaybackRt_use_jack(flag)

class BufferWindowSearch(object):
    r"""Proxy of C++ Nsound::BufferWindowSearch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BufferWindowSearch self, Buffer buffer, Nsound::uint32 window_size=2048) -> BufferWindowSearch
        __init__(BufferWindowSearch self, BufferWindowSearch copy) -> BufferWindowSearch
        """
        _Nsound.BufferWindowSearch_swiginit(self, _Nsound.new_BufferWindowSearch(*args))
    __swig_destroy__ = _Nsound.delete_BufferWindowSearch

    def getNextWindow(self):
        r"""getNextWindow(BufferWindowSearch self) -> Buffer"""
        return _Nsound.BufferWindowSearch_getNextWindow(self)

    def getSamplesLeft(self):
        r"""getSamplesLeft(BufferWindowSearch self) -> Nsound::uint32"""
        return _Nsound.BufferWindowSearch_getSamplesLeft(self)

    def reset(self):
        r"""reset(BufferWindowSearch self)"""
        return _Nsound.BufferWindowSearch_reset(self)

    def setBuffer(self, buffer):
        r"""setBuffer(BufferWindowSearch self, Buffer buffer)"""
        return _Nsound.BufferWindowSearch_setBuffer(self, buffer)

# Register BufferWindowSearch in _Nsound:
_Nsound.BufferWindowSearch_swigregister(BufferWindowSearch)

class CircularBuffer(object):
    r"""Proxy of C++ Nsound::CircularBuffer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n_samples):
        r"""__init__(CircularBuffer self, Nsound::uint32 n_samples) -> CircularBuffer"""
        _Nsound.CircularBuffer_swiginit(self, _Nsound.new_CircularBuffer(n_samples))

    def read(self):
        r"""read(CircularBuffer self) -> Buffer"""
        return _Nsound.CircularBuffer_read(self)

    def read_head(self):
        r"""read_head(CircularBuffer self) -> Nsound::float64"""
        return _Nsound.CircularBuffer_read_head(self)

    def write(self, *args):
        r"""
        write(CircularBuffer self, Nsound::float64 d)
        write(CircularBuffer self, AudioStream _as)
        write(CircularBuffer self, Buffer b)
        """
        return _Nsound.CircularBuffer_write(self, *args)
    __swig_destroy__ = _Nsound.delete_CircularBuffer

# Register CircularBuffer in _Nsound:
_Nsound.CircularBuffer_swigregister(CircularBuffer)

class Clarinet(Instrument):
    r"""Proxy of C++ Nsound::Clarinet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(Clarinet self, Nsound::float64 const & sample_rate) -> Clarinet"""
        _Nsound.Clarinet_swiginit(self, _Nsound.new_Clarinet(sample_rate))
    __swig_destroy__ = _Nsound.delete_Clarinet

    def play(self, *args):
        r"""
        play(Clarinet self) -> AudioStream
        play(Clarinet self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(Clarinet self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & presure, Nsound::float64 const & filter, Nsound::float64 const & reed_stiffness) -> AudioStream
        """
        return _Nsound.Clarinet_play(self, *args)

    def getInfo(self):
        r"""getInfo(Clarinet self) -> std::string"""
        return _Nsound.Clarinet_getInfo(self)

# Register Clarinet in _Nsound:
_Nsound.Clarinet_swigregister(Clarinet)

class DelayLine(object):
    r"""Proxy of C++ Nsound::DelayLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, max_delay_in_seconds):
        r"""__init__(DelayLine self, Nsound::float64 sample_rate, Nsound::float64 max_delay_in_seconds) -> DelayLine"""
        _Nsound.DelayLine_swiginit(self, _Nsound.new_DelayLine(sample_rate, max_delay_in_seconds))

    def setRealtime(self, flag):
        r"""setRealtime(DelayLine self, bool flag)"""
        return _Nsound.DelayLine_setRealtime(self, flag)

    def delay(self, *args):
        r"""
        delay(DelayLine self, Buffer x, Buffer delay_time) -> Buffer
        delay(DelayLine self, Nsound::float64 x, Nsound::float64 delay_time) -> Nsound::float64
        """
        return _Nsound.DelayLine_delay(self, *args)

    def read(self, *args):
        r"""
        read(DelayLine self) -> Nsound::float64
        read(DelayLine self, Nsound::float64 delay) -> Nsound::float64
        """
        return _Nsound.DelayLine_read(self, *args)

    def write(self, x):
        r"""write(DelayLine self, Nsound::float64 x)"""
        return _Nsound.DelayLine_write(self, x)

    def reset(self):
        r"""reset(DelayLine self)"""
        return _Nsound.DelayLine_reset(self)
    __swig_destroy__ = _Nsound.delete_DelayLine

# Register DelayLine in _Nsound:
_Nsound.DelayLine_swigregister(DelayLine)

class DrumBD01(Instrument):
    r"""Proxy of C++ Nsound::DrumBD01 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(DrumBD01 self, Nsound::float64 const & sample_rate) -> DrumBD01"""
        _Nsound.DrumBD01_swiginit(self, _Nsound.new_DrumBD01(sample_rate))
    __swig_destroy__ = _Nsound.delete_DrumBD01

    def play(self, *args):
        r"""
        play(DrumBD01 self) -> AudioStream
        play(DrumBD01 self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(DrumBD01 self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & velocity) -> AudioStream
        """
        return _Nsound.DrumBD01_play(self, *args)

    def getInfo(self):
        r"""getInfo(DrumBD01 self) -> std::string"""
        return _Nsound.DrumBD01_getInfo(self)

# Register DrumBD01 in _Nsound:
_Nsound.DrumBD01_swigregister(DrumBD01)

class DrumKickBass(Instrument):
    r"""Proxy of C++ Nsound::DrumKickBass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, high_frequency, low_frequency):
        r"""__init__(DrumKickBass self, Nsound::float64 const & sample_rate, Nsound::float64 const & high_frequency, Nsound::float64 const & low_frequency) -> DrumKickBass"""
        _Nsound.DrumKickBass_swiginit(self, _Nsound.new_DrumKickBass(sample_rate, high_frequency, low_frequency))
    __swig_destroy__ = _Nsound.delete_DrumKickBass

    def play(self, *args):
        r"""
        play(DrumKickBass self) -> AudioStream
        play(DrumKickBass self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(DrumKickBass self, Nsound::float64 const & duration, Nsound::float64 const & high_frequency, Nsound::float64 const & low_frequency) -> AudioStream
        play(DrumKickBass self, Nsound::float64 const & duation, Buffer high_frequency, Buffer low_frequency) -> AudioStream
        """
        return _Nsound.DrumKickBass_play(self, *args)

    def getInfo(self):
        r"""getInfo(DrumKickBass self) -> std::string"""
        return _Nsound.DrumKickBass_getInfo(self)

# Register DrumKickBass in _Nsound:
_Nsound.DrumKickBass_swigregister(DrumKickBass)

class EnvelopeAdsr(object):
    r"""Proxy of C++ Nsound::EnvelopeAdsr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, attack_time, delay_time, sustain_amplitude, release_time):
        r"""__init__(EnvelopeAdsr self, Nsound::float64 const & sample_rate, Nsound::float64 const & attack_time, Nsound::float64 const & delay_time, Nsound::float64 const & sustain_amplitude, Nsound::float64 const & release_time) -> EnvelopeAdsr"""
        _Nsound.EnvelopeAdsr_swiginit(self, _Nsound.new_EnvelopeAdsr(sample_rate, attack_time, delay_time, sustain_amplitude, release_time))

    def reset(self):
        r"""reset(EnvelopeAdsr self)"""
        return _Nsound.EnvelopeAdsr_reset(self)

    def setAttackTime(self, time):
        r"""setAttackTime(EnvelopeAdsr self, Nsound::float64 const & time)"""
        return _Nsound.EnvelopeAdsr_setAttackTime(self, time)

    def setDelayTime(self, time):
        r"""setDelayTime(EnvelopeAdsr self, Nsound::float64 const & time)"""
        return _Nsound.EnvelopeAdsr_setDelayTime(self, time)

    def setSustainAmplitude(self, amp):
        r"""setSustainAmplitude(EnvelopeAdsr self, Nsound::float64 const & amp)"""
        return _Nsound.EnvelopeAdsr_setSustainAmplitude(self, amp)

    def setReleaseTime(self, time):
        r"""setReleaseTime(EnvelopeAdsr self, Nsound::float64 const & time)"""
        return _Nsound.EnvelopeAdsr_setReleaseTime(self, time)

    def shape(self, *args):
        r"""
        shape(EnvelopeAdsr self, AudioStream _as) -> AudioStream
        shape(EnvelopeAdsr self, Buffer buf) -> Buffer
        shape(EnvelopeAdsr self, Nsound::float64 sample, bool key_on) -> Nsound::float64
        """
        return _Nsound.EnvelopeAdsr_shape(self, *args)

    def is_done(self):
        r"""is_done(EnvelopeAdsr self) -> bool"""
        return _Nsound.EnvelopeAdsr_is_done(self)
    __swig_destroy__ = _Nsound.delete_EnvelopeAdsr

# Register EnvelopeAdsr in _Nsound:
_Nsound.EnvelopeAdsr_swigregister(EnvelopeAdsr)

class FFTransform(object):
    r"""Proxy of C++ Nsound::FFTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(FFTransform self, Nsound::float64 const & sample_rate) -> FFTransform"""
        _Nsound.FFTransform_swiginit(self, _Nsound.new_FFTransform(sample_rate))
    __swig_destroy__ = _Nsound.delete_FFTransform

    def fft(self, *args):
        r"""
        fft(FFTransform self, Buffer time_domain) -> Buffer
        fft(FFTransform self, Buffer input, Nsound::int32 n_order, Nsound::int32 n_overlap=0) -> FFTChunkVectorT
        """
        return _Nsound.FFTransform_fft(self, *args)

    def ifft(self, *args):
        r"""
        ifft(FFTransform self, FFTChunkVectorT input) -> Buffer
        ifft(FFTransform self, Buffer frequency_domain) -> Buffer
        """
        return _Nsound.FFTransform_ifft(self, *args)

    @staticmethod
    def roundUp2(raw):
        r"""roundUp2(Nsound::int32 raw) -> Nsound::int32"""
        return _Nsound.FFTransform_roundUp2(raw)

    def setWindow(self, type):
        r"""setWindow(FFTransform self, Nsound::WindowType type)"""
        return _Nsound.FFTransform_setWindow(self, type)

# Register FFTransform in _Nsound:
_Nsound.FFTransform_swigregister(FFTransform)

def FFTransform_roundUp2(raw):
    r"""FFTransform_roundUp2(Nsound::int32 raw) -> Nsound::int32"""
    return _Nsound.FFTransform_roundUp2(raw)

class Filter(object):
    r"""Proxy of C++ Nsound::Filter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_Filter

    def setRealtime(self, flag):
        r"""setRealtime(Filter self, bool flag)"""
        return _Nsound.Filter_setRealtime(self, flag)

    def filter(self, *args):
        r"""
        filter(Filter self, AudioStream x) -> AudioStream
        filter(Filter self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(Filter self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(Filter self, Buffer x) -> Buffer
        filter(Filter self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(Filter self, Buffer x, Buffer frequencies) -> Buffer
        filter(Filter self, Nsound::float64 const & x) -> Nsound::float64
        filter(Filter self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.Filter_filter(self, *args)

    def getFrequencyAxis(self, n_fft=8192):
        r"""getFrequencyAxis(Filter self, Nsound::uint32 const n_fft=8192) -> Buffer"""
        return _Nsound.Filter_getFrequencyAxis(self, n_fft)

    def getFrequencyResponse(self, n_fft=8192):
        r"""getFrequencyResponse(Filter self, Nsound::uint32 const n_fft=8192) -> Buffer"""
        return _Nsound.Filter_getFrequencyResponse(self, n_fft)

    def getImpulseResponse(self, n_samples=8192):
        r"""getImpulseResponse(Filter self, Nsound::uint32 const n_samples=8192) -> Buffer"""
        return _Nsound.Filter_getImpulseResponse(self, n_samples)

    def getKernelSize(self):
        r"""getKernelSize(Filter self) -> Nsound::uint32"""
        return _Nsound.Filter_getKernelSize(self)

    def getPhaseResponse(self):
        r"""getPhaseResponse(Filter self) -> Buffer"""
        return _Nsound.Filter_getPhaseResponse(self)

    def getSampleRate(self):
        r"""getSampleRate(Filter self) -> Nsound::float64"""
        return _Nsound.Filter_getSampleRate(self)

    def plot(self, show_phase=False):
        r"""plot(Filter self, Nsound::boolean show_phase=False)"""
        return _Nsound.Filter_plot(self, show_phase)

    def reset(self):
        r"""reset(Filter self)"""
        return _Nsound.Filter_reset(self)

# Register Filter in _Nsound:
_Nsound.Filter_swigregister(Filter)

class FilterAllPass(Filter):
    r"""Proxy of C++ Nsound::FilterAllPass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterAllPass self, Nsound::float64 const & sample_rate, Nsound::float64 const & max_delay_time_seconds, Nsound::float64 const & gain) -> FilterAllPass
        __init__(FilterAllPass self, FilterAllPass copy) -> FilterAllPass
        """
        _Nsound.FilterAllPass_swiginit(self, _Nsound.new_FilterAllPass(*args))
    __swig_destroy__ = _Nsound.delete_FilterAllPass

    def filter(self, *args):
        r"""
        filter(FilterAllPass self, AudioStream x) -> AudioStream
        filter(FilterAllPass self, AudioStream x, Nsound::float64 const & delay_in_seconds) -> AudioStream
        filter(FilterAllPass self, AudioStream x, Buffer delay_in_seconds) -> AudioStream
        filter(FilterAllPass self, Buffer x) -> Buffer
        filter(FilterAllPass self, Buffer x, Nsound::float64 const & delay_in_seconds) -> Buffer
        filter(FilterAllPass self, Buffer x, Buffer delay_in_seconds) -> Buffer
        filter(FilterAllPass self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterAllPass self, Nsound::float64 const & x, Nsound::float64 const & delay_in_seconds) -> Nsound::float64
        """
        return _Nsound.FilterAllPass_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterAllPass self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterAllPass_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterAllPass self)"""
        return _Nsound.FilterAllPass_reset(self)

# Register FilterAllPass in _Nsound:
_Nsound.FilterAllPass_swigregister(FilterAllPass)

class FilterBandPassVocoder(Filter):
    r"""Proxy of C++ Nsound::FilterBandPassVocoder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, frequency_low, frequency_high):
        r"""__init__(FilterBandPassVocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & frequency_low, Nsound::float64 const & frequency_high) -> FilterBandPassVocoder"""
        _Nsound.FilterBandPassVocoder_swiginit(self, _Nsound.new_FilterBandPassVocoder(sample_rate, frequency_low, frequency_high))
    __swig_destroy__ = _Nsound.delete_FilterBandPassVocoder

    def filter(self, *args):
        r"""
        filter(FilterBandPassVocoder self, AudioStream x) -> AudioStream
        filter(FilterBandPassVocoder self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterBandPassVocoder self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandPassVocoder self, Buffer x) -> Buffer
        filter(FilterBandPassVocoder self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterBandPassVocoder self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandPassVocoder self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandPassVocoder self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandPassVocoder self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandPassVocoder_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterBandPassVocoder self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterBandPassVocoder_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterBandPassVocoder self)"""
        return _Nsound.FilterBandPassVocoder_reset(self)

# Register FilterBandPassVocoder in _Nsound:
_Nsound.FilterBandPassVocoder_swigregister(FilterBandPassVocoder)

class FilterCombLowPassFeedback(Filter):
    r"""Proxy of C++ Nsound::FilterCombLowPassFeedback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterCombLowPassFeedback self, Nsound::float64 const & sample_rate, Nsound::float64 const & delay_time_seconds, Nsound::float64 const & feedback_gain, Nsound::float64 const & low_pass_frequency_Hz) -> FilterCombLowPassFeedback
        __init__(FilterCombLowPassFeedback self, FilterCombLowPassFeedback copy) -> FilterCombLowPassFeedback
        """
        _Nsound.FilterCombLowPassFeedback_swiginit(self, _Nsound.new_FilterCombLowPassFeedback(*args))
    __swig_destroy__ = _Nsound.delete_FilterCombLowPassFeedback

    def filter(self, *args):
        r"""
        filter(FilterCombLowPassFeedback self, AudioStream x) -> AudioStream
        filter(FilterCombLowPassFeedback self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterCombLowPassFeedback self, Buffer x) -> Buffer
        filter(FilterCombLowPassFeedback self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterCombLowPassFeedback self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterCombLowPassFeedback self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterCombLowPassFeedback_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterCombLowPassFeedback self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterCombLowPassFeedback_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterCombLowPassFeedback self)"""
        return _Nsound.FilterCombLowPassFeedback_reset(self)

# Register FilterCombLowPassFeedback in _Nsound:
_Nsound.FilterCombLowPassFeedback_swigregister(FilterCombLowPassFeedback)

class FilterDelay(Filter):
    r"""Proxy of C++ Nsound::FilterDelay class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterDelay self, Nsound::float64 const & sample_rate, Nsound::float64 const & max_delay_time_seconds) -> FilterDelay
        __init__(FilterDelay self, FilterDelay copy) -> FilterDelay
        """
        _Nsound.FilterDelay_swiginit(self, _Nsound.new_FilterDelay(*args))
    __swig_destroy__ = _Nsound.delete_FilterDelay

    def filter(self, *args):
        r"""
        filter(FilterDelay self, AudioStream x) -> AudioStream
        filter(FilterDelay self, AudioStream x, Nsound::float64 const & delay_in_seconds) -> AudioStream
        filter(FilterDelay self, AudioStream x, Buffer delay_in_seconds) -> AudioStream
        filter(FilterDelay self, Buffer x) -> Buffer
        filter(FilterDelay self, Buffer x, Nsound::float64 const & delay_in_seconds) -> Buffer
        filter(FilterDelay self, Buffer x, Buffer delay_in_seconds) -> Buffer
        filter(FilterDelay self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterDelay self, Nsound::float64 const & x, Nsound::float64 const & delay_in_seconds) -> Nsound::float64
        """
        return _Nsound.FilterDelay_filter(self, *args)

    def reset(self):
        r"""reset(FilterDelay self)"""
        return _Nsound.FilterDelay_reset(self)

# Register FilterDelay in _Nsound:
_Nsound.FilterDelay_swigregister(FilterDelay)

class FilterDC(object):
    r"""Proxy of C++ Nsound::FilterDC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, feedback_gain):
        r"""__init__(FilterDC self, Nsound::float64 const & feedback_gain) -> FilterDC"""
        _Nsound.FilterDC_swiginit(self, _Nsound.new_FilterDC(feedback_gain))

    def filter(self, *args):
        r"""
        filter(FilterDC self, AudioStream x) -> AudioStream
        filter(FilterDC self, Buffer x) -> Buffer
        filter(FilterDC self, Nsound::float64 const & x) -> Nsound::float64
        """
        return _Nsound.FilterDC_filter(self, *args)
    __swig_destroy__ = _Nsound.delete_FilterDC

# Register FilterDC in _Nsound:
_Nsound.FilterDC_swigregister(FilterDC)

class FilterIIR(Filter):
    r"""Proxy of C++ Nsound::FilterIIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles) -> FilterIIR
        __init__(FilterIIR self, FilterIIR copy) -> FilterIIR
        """
        _Nsound.FilterIIR_swiginit(self, _Nsound.new_FilterIIR(*args))
    __swig_destroy__ = _Nsound.delete_FilterIIR

    def designFrequencyResponse(self, frequency_response, max_error=0.01, max_iterations=1000):
        r"""designFrequencyResponse(FilterIIR self, Buffer frequency_response, Nsound::float64 const & max_error=0.01, Nsound::int32 const max_iterations=1000) -> Buffer"""
        return _Nsound.FilterIIR_designFrequencyResponse(self, frequency_response, max_error, max_iterations)

    def designImpulseResponse(self, impulse_response, max_error=0.01, max_iterations=1000):
        r"""designImpulseResponse(FilterIIR self, Buffer impulse_response, Nsound::float64 const & max_error=0.01, Nsound::int32 const max_iterations=1000) -> Buffer"""
        return _Nsound.FilterIIR_designImpulseResponse(self, impulse_response, max_error, max_iterations)

    def filter(self, *args):
        r"""
        filter(FilterIIR self, AudioStream x) -> AudioStream
        filter(FilterIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterIIR self, Buffer x) -> Buffer
        filter(FilterIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterIIR_filter(self, *args)

    def getKernelSize(self):
        r"""getKernelSize(FilterIIR self) -> Nsound::uint32"""
        return _Nsound.FilterIIR_getKernelSize(self)

    def getImpulseResponse(self, n_samples=8192):
        r"""getImpulseResponse(FilterIIR self, Nsound::uint32 const n_samples=8192) -> Buffer"""
        return _Nsound.FilterIIR_getImpulseResponse(self, n_samples)

    def reset(self):
        r"""reset(FilterIIR self)"""
        return _Nsound.FilterIIR_reset(self)

# Register FilterIIR in _Nsound:
_Nsound.FilterIIR_swigregister(FilterIIR)

class FilterStageIIR(Filter):
    r"""Proxy of C++ Nsound::FilterStageIIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOW_PASS = _Nsound.FilterStageIIR_LOW_PASS
    
    HIGH_PASS = _Nsound.FilterStageIIR_HIGH_PASS
    

    def __init__(self, *args):
        r"""
        __init__(FilterStageIIR self, Nsound::FilterStageIIR::Type type, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency, Nsound::float64 const & percent_ripple) -> FilterStageIIR
        __init__(FilterStageIIR self, FilterStageIIR copy) -> FilterStageIIR
        """
        _Nsound.FilterStageIIR_swiginit(self, _Nsound.new_FilterStageIIR(*args))
    __swig_destroy__ = _Nsound.delete_FilterStageIIR

    def filter(self, *args):
        r"""
        filter(FilterStageIIR self, AudioStream x) -> AudioStream
        filter(FilterStageIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterStageIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterStageIIR self, Buffer x) -> Buffer
        filter(FilterStageIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterStageIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterStageIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterStageIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterStageIIR_filter(self, *args)

    def makeKernel(self, frequency):
        r"""makeKernel(FilterStageIIR self, Nsound::float64 const & frequency)"""
        return _Nsound.FilterStageIIR_makeKernel(self, frequency)

    def reset(self):
        r"""reset(FilterStageIIR self)"""
        return _Nsound.FilterStageIIR_reset(self)

# Register FilterStageIIR in _Nsound:
_Nsound.FilterStageIIR_swigregister(FilterStageIIR)

class FilterLeastSquaresFIR(Filter):
    r"""Proxy of C++ Nsound::FilterLeastSquaresFIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterLeastSquaresFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Buffer freq_axis, Buffer amplitude_axis, Nsound::float64 const & beta=5.0) -> FilterLeastSquaresFIR
        __init__(FilterLeastSquaresFIR self, FilterLeastSquaresFIR copy) -> FilterLeastSquaresFIR
        """
        _Nsound.FilterLeastSquaresFIR_swiginit(self, _Nsound.new_FilterLeastSquaresFIR(*args))
    __swig_destroy__ = _Nsound.delete_FilterLeastSquaresFIR

    def getKernel(self):
        r"""getKernel(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getKernel(self)

    def setKernel(self, k):
        r"""setKernel(FilterLeastSquaresFIR self, Buffer k)"""
        return _Nsound.FilterLeastSquaresFIR_setKernel(self, k)

    def getKernelFrequencies(self):
        r"""getKernelFrequencies(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getKernelFrequencies(self)

    def getKernelAmplitudes(self):
        r"""getKernelAmplitudes(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getKernelAmplitudes(self)

    def filter(self, *args):
        r"""
        filter(FilterLeastSquaresFIR self, AudioStream x) -> AudioStream
        filter(FilterLeastSquaresFIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterLeastSquaresFIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterLeastSquaresFIR self, Buffer x) -> Buffer
        filter(FilterLeastSquaresFIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterLeastSquaresFIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterLeastSquaresFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLeastSquaresFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        """
        return _Nsound.FilterLeastSquaresFIR_filter(self, *args)

    def getImpulseResponse(self):
        r"""getImpulseResponse(FilterLeastSquaresFIR self) -> Buffer"""
        return _Nsound.FilterLeastSquaresFIR_getImpulseResponse(self)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterLeastSquaresFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterLeastSquaresFIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterLeastSquaresFIR self)"""
        return _Nsound.FilterLeastSquaresFIR_reset(self)

    def setWindow(self, type):
        r"""setWindow(FilterLeastSquaresFIR self, Nsound::WindowType type)"""
        return _Nsound.FilterLeastSquaresFIR_setWindow(self, type)

    def makeKernel(self, freq_axis, amplitude_axis):
        r"""makeKernel(FilterLeastSquaresFIR self, Buffer freq_axis, Buffer amplitude_axis)"""
        return _Nsound.FilterLeastSquaresFIR_makeKernel(self, freq_axis, amplitude_axis)

# Register FilterLeastSquaresFIR in _Nsound:
_Nsound.FilterLeastSquaresFIR_swigregister(FilterLeastSquaresFIR)

class FilterLowPassFIR(Filter):
    r"""Proxy of C++ Nsound::FilterLowPassFIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, kernel_size, cutoff_frequency_Hz):
        r"""__init__(FilterLowPassFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & cutoff_frequency_Hz) -> FilterLowPassFIR"""
        _Nsound.FilterLowPassFIR_swiginit(self, _Nsound.new_FilterLowPassFIR(sample_rate, kernel_size, cutoff_frequency_Hz))
    __swig_destroy__ = _Nsound.delete_FilterLowPassFIR

    def filter(self, *args):
        r"""
        filter(FilterLowPassFIR self, AudioStream x) -> AudioStream
        filter(FilterLowPassFIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterLowPassFIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterLowPassFIR self, Buffer x) -> Buffer
        filter(FilterLowPassFIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterLowPassFIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterLowPassFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLowPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        """
        return _Nsound.FilterLowPassFIR_filter(self, *args)

    def getFrequency(self):
        r"""getFrequency(FilterLowPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterLowPassFIR_getFrequency(self)

    def getImpulseResponse(self):
        r"""getImpulseResponse(FilterLowPassFIR self) -> Buffer"""
        return _Nsound.FilterLowPassFIR_getImpulseResponse(self)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterLowPassFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterLowPassFIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterLowPassFIR self)"""
        return _Nsound.FilterLowPassFIR_reset(self)

    def setCutoff(self, fc):
        r"""setCutoff(FilterLowPassFIR self, Nsound::float64 const & fc)"""
        return _Nsound.FilterLowPassFIR_setCutoff(self, fc)

# Register FilterLowPassFIR in _Nsound:
_Nsound.FilterLowPassFIR_swigregister(FilterLowPassFIR)

class FilterLowPassIIR(FilterStageIIR):
    r"""Proxy of C++ Nsound::FilterLowPassIIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, n_poles, frequency, percent_ripple=0.0):
        r"""__init__(FilterLowPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency, Nsound::float64 const & percent_ripple=0.0) -> FilterLowPassIIR"""
        _Nsound.FilterLowPassIIR_swiginit(self, _Nsound.new_FilterLowPassIIR(sample_rate, n_poles, frequency, percent_ripple))

    def filter(self, *args):
        r"""
        filter(FilterLowPassIIR self, AudioStream x) -> AudioStream
        filter(FilterLowPassIIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterLowPassIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterLowPassIIR self, Buffer x) -> Buffer
        filter(FilterLowPassIIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterLowPassIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterLowPassIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLowPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterLowPassIIR_filter(self, *args)

    def getFrequency(self):
        r"""getFrequency(FilterLowPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterLowPassIIR_getFrequency(self)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterLowPassIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterLowPassIIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterLowPassIIR self)"""
        return _Nsound.FilterLowPassIIR_reset(self)

    def setCutoff(self, fc):
        r"""setCutoff(FilterLowPassIIR self, Nsound::float64 const & fc)"""
        return _Nsound.FilterLowPassIIR_setCutoff(self, fc)
    __swig_destroy__ = _Nsound.delete_FilterLowPassIIR

# Register FilterLowPassIIR in _Nsound:
_Nsound.FilterLowPassIIR_swigregister(FilterLowPassIIR)

class FilterLowPassMoogVcf(Filter):
    r"""Proxy of C++ Nsound::FilterLowPassMoogVcf class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, cutoff_hz, resonance):
        r"""__init__(FilterLowPassMoogVcf self, Nsound::float64 const & sample_rate, Nsound::float64 const & cutoff_hz, Nsound::float64 const & resonance) -> FilterLowPassMoogVcf"""
        _Nsound.FilterLowPassMoogVcf_swiginit(self, _Nsound.new_FilterLowPassMoogVcf(sample_rate, cutoff_hz, resonance))
    __swig_destroy__ = _Nsound.delete_FilterLowPassMoogVcf

    def filter(self, *args):
        r"""
        filter(FilterLowPassMoogVcf self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterLowPassMoogVcf self, Nsound::float64 const & x, Nsound::float64 const & cutoff_hz) -> Nsound::float64
        filter(FilterLowPassMoogVcf self, Nsound::float64 const & x, Nsound::float64 const & cutoff_hz, Nsound::float64 const & resonance) -> Nsound::float64
        """
        return _Nsound.FilterLowPassMoogVcf_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterLowPassMoogVcf self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterLowPassMoogVcf_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterLowPassMoogVcf self)"""
        return _Nsound.FilterLowPassMoogVcf_reset(self)

# Register FilterLowPassMoogVcf in _Nsound:
_Nsound.FilterLowPassMoogVcf_swigregister(FilterLowPassMoogVcf)

class FilterHighPassFIR(FilterLowPassFIR):
    r"""Proxy of C++ Nsound::FilterHighPassFIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, kernel_size, cutoff_frequency_Hz):
        r"""__init__(FilterHighPassFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & cutoff_frequency_Hz) -> FilterHighPassFIR"""
        _Nsound.FilterHighPassFIR_swiginit(self, _Nsound.new_FilterHighPassFIR(sample_rate, kernel_size, cutoff_frequency_Hz))
    __swig_destroy__ = _Nsound.delete_FilterHighPassFIR

    def filter(self, *args):
        r"""
        filter(FilterHighPassFIR self, AudioStream x) -> AudioStream
        filter(FilterHighPassFIR self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterHighPassFIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterHighPassFIR self, Buffer x) -> Buffer
        filter(FilterHighPassFIR self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterHighPassFIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterHighPassFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterHighPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        """
        return _Nsound.FilterHighPassFIR_filter(self, *args)

    def getFrequency(self):
        r"""getFrequency(FilterHighPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterHighPassFIR_getFrequency(self)

    def getImpulseResponse(self):
        r"""getImpulseResponse(FilterHighPassFIR self) -> Buffer"""
        return _Nsound.FilterHighPassFIR_getImpulseResponse(self)

    def makeKernel(self, frequency):
        r"""makeKernel(FilterHighPassFIR self, Nsound::float64 const & frequency)"""
        return _Nsound.FilterHighPassFIR_makeKernel(self, frequency)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterHighPassFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterHighPassFIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterHighPassFIR self)"""
        return _Nsound.FilterHighPassFIR_reset(self)

# Register FilterHighPassFIR in _Nsound:
_Nsound.FilterHighPassFIR_swigregister(FilterHighPassFIR)

class FilterHighPassIIR(FilterStageIIR):
    r"""Proxy of C++ Nsound::FilterHighPassIIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, n_poles, frequency, percent_ripple=0.0):
        r"""__init__(FilterHighPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency, Nsound::float64 const & percent_ripple=0.0) -> FilterHighPassIIR"""
        _Nsound.FilterHighPassIIR_swiginit(self, _Nsound.new_FilterHighPassIIR(sample_rate, n_poles, frequency, percent_ripple))

    def filter(self, *args):
        r"""
        filter(FilterHighPassIIR self, AudioStream x) -> AudioStream
        filter(FilterHighPassIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterHighPassIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterHighPassIIR self, Buffer x) -> Buffer
        filter(FilterHighPassIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterHighPassIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterHighPassIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterHighPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterHighPassIIR_filter(self, *args)

    def getFrequency(self):
        r"""getFrequency(FilterHighPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterHighPassIIR_getFrequency(self)

    def makeKernel(self, frequency):
        r"""makeKernel(FilterHighPassIIR self, Nsound::float64 const & frequency)"""
        return _Nsound.FilterHighPassIIR_makeKernel(self, frequency)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterHighPassIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterHighPassIIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterHighPassIIR self)"""
        return _Nsound.FilterHighPassIIR_reset(self)
    __swig_destroy__ = _Nsound.delete_FilterHighPassIIR

# Register FilterHighPassIIR in _Nsound:
_Nsound.FilterHighPassIIR_swigregister(FilterHighPassIIR)

class FilterBandRejectFIR(FilterHighPassFIR):
    r"""Proxy of C++ Nsound::FilterBandRejectFIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, kernel_size, frequency_Hz_low, frequency_Hz_high):
        r"""__init__(FilterBandRejectFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> FilterBandRejectFIR"""
        _Nsound.FilterBandRejectFIR_swiginit(self, _Nsound.new_FilterBandRejectFIR(sample_rate, kernel_size, frequency_Hz_low, frequency_Hz_high))
    __swig_destroy__ = _Nsound.delete_FilterBandRejectFIR

    def getFrequencyLow(self):
        r"""getFrequencyLow(FilterBandRejectFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectFIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        r"""getFrequencyHigh(FilterBandRejectFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectFIR_getFrequencyHigh(self)

    def filter(self, *args):
        r"""
        filter(FilterBandRejectFIR self, AudioStream x) -> AudioStream
        filter(FilterBandRejectFIR self, AudioStream x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> AudioStream
        filter(FilterBandRejectFIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandRejectFIR self, Buffer x) -> Buffer
        filter(FilterBandRejectFIR self, Buffer x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> Buffer
        filter(FilterBandRejectFIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandRejectFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandRejectFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandRejectFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandRejectFIR_filter(self, *args)

    def makeKernel(self, frequency_Hz_low, frequency_Hz_high):
        r"""makeKernel(FilterBandRejectFIR self, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high)"""
        return _Nsound.FilterBandRejectFIR_makeKernel(self, frequency_Hz_low, frequency_Hz_high)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterBandRejectFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterBandRejectFIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterBandRejectFIR self)"""
        return _Nsound.FilterBandRejectFIR_reset(self)

# Register FilterBandRejectFIR in _Nsound:
_Nsound.FilterBandRejectFIR_swigregister(FilterBandRejectFIR)

class FilterBandRejectIIR(Filter):
    r"""Proxy of C++ Nsound::FilterBandRejectIIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, n_poles, frequency_Hz_low, frequency_Hz_high, percent_ripple=0.0):
        r"""__init__(FilterBandRejectIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 n_poles, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high, Nsound::float64 const & percent_ripple=0.0) -> FilterBandRejectIIR"""
        _Nsound.FilterBandRejectIIR_swiginit(self, _Nsound.new_FilterBandRejectIIR(sample_rate, n_poles, frequency_Hz_low, frequency_Hz_high, percent_ripple))
    __swig_destroy__ = _Nsound.delete_FilterBandRejectIIR

    def getFrequencyLow(self):
        r"""getFrequencyLow(FilterBandRejectIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectIIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        r"""getFrequencyHigh(FilterBandRejectIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandRejectIIR_getFrequencyHigh(self)

    def filter(self, *args):
        r"""
        filter(FilterBandRejectIIR self, AudioStream x) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> AudioStream
        filter(FilterBandRejectIIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandRejectIIR self, Buffer x) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> Buffer
        filter(FilterBandRejectIIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandRejectIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandRejectIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandRejectIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandRejectIIR_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterBandRejectIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterBandRejectIIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterBandRejectIIR self)"""
        return _Nsound.FilterBandRejectIIR_reset(self)

# Register FilterBandRejectIIR in _Nsound:
_Nsound.FilterBandRejectIIR_swigregister(FilterBandRejectIIR)

class FilterBandPassFIR(Filter):
    r"""Proxy of C++ Nsound::FilterBandPassFIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, kernel_size, frequency_Hz_low, frequency_Hz_high):
        r"""__init__(FilterBandPassFIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> FilterBandPassFIR"""
        _Nsound.FilterBandPassFIR_swiginit(self, _Nsound.new_FilterBandPassFIR(sample_rate, kernel_size, frequency_Hz_low, frequency_Hz_high))
    __swig_destroy__ = _Nsound.delete_FilterBandPassFIR

    def getFrequencyLow(self):
        r"""getFrequencyLow(FilterBandPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassFIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        r"""getFrequencyHigh(FilterBandPassFIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassFIR_getFrequencyHigh(self)

    def filter(self, *args):
        r"""
        filter(FilterBandPassFIR self, AudioStream x) -> AudioStream
        filter(FilterBandPassFIR self, AudioStream x, Nsound::float64 const & low_frequencies, Nsound::float64 const & high_frequencies) -> AudioStream
        filter(FilterBandPassFIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandPassFIR self, Buffer x) -> Buffer
        filter(FilterBandPassFIR self, Buffer x, Nsound::float64 const & frequencies_Hz_low, Nsound::float64 const & frequencies_Hz_high) -> Buffer
        filter(FilterBandPassFIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandPassFIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandPassFIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandPassFIR_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterBandPassFIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterBandPassFIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterBandPassFIR self)"""
        return _Nsound.FilterBandPassFIR_reset(self)

# Register FilterBandPassFIR in _Nsound:
_Nsound.FilterBandPassFIR_swigregister(FilterBandPassFIR)

class FilterBandPassIIR(Filter):
    r"""Proxy of C++ Nsound::FilterBandPassIIR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, kernel_size, frequency_Hz_low, frequency_Hz_high, percent_ripple=0.0):
        r"""__init__(FilterBandPassIIR self, Nsound::float64 const & sample_rate, Nsound::uint32 kernel_size, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high, Nsound::float64 const & percent_ripple=0.0) -> FilterBandPassIIR"""
        _Nsound.FilterBandPassIIR_swiginit(self, _Nsound.new_FilterBandPassIIR(sample_rate, kernel_size, frequency_Hz_low, frequency_Hz_high, percent_ripple))
    __swig_destroy__ = _Nsound.delete_FilterBandPassIIR

    def getFrequencyLow(self):
        r"""getFrequencyLow(FilterBandPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassIIR_getFrequencyLow(self)

    def getFrequencyHigh(self):
        r"""getFrequencyHigh(FilterBandPassIIR self) -> Nsound::float64"""
        return _Nsound.FilterBandPassIIR_getFrequencyHigh(self)

    def filter(self, *args):
        r"""
        filter(FilterBandPassIIR self, AudioStream x) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Nsound::float64 const & f) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> AudioStream
        filter(FilterBandPassIIR self, AudioStream x, Buffer low_frequencies, Buffer high_frequencies) -> AudioStream
        filter(FilterBandPassIIR self, Buffer x) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Nsound::float64 const & f) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Nsound::float64 const & f_low, Nsound::float64 const & f_high) -> Buffer
        filter(FilterBandPassIIR self, Buffer x, Buffer frequencies_Hz_low, Buffer frequencies_Hz_high) -> Buffer
        filter(FilterBandPassIIR self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterBandPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz) -> Nsound::float64
        filter(FilterBandPassIIR self, Nsound::float64 const & x, Nsound::float64 const & frequency_Hz_low, Nsound::float64 const & frequency_Hz_high) -> Nsound::float64
        """
        return _Nsound.FilterBandPassIIR_filter(self, *args)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterBandPassIIR self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterBandPassIIR_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterBandPassIIR self)"""
        return _Nsound.FilterBandPassIIR_reset(self)

# Register FilterBandPassIIR in _Nsound:
_Nsound.FilterBandPassIIR_swigregister(FilterBandPassIIR)

class FilterMedian(object):
    r"""Proxy of C++ Nsound::FilterMedian class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n_samples_in_pool):
        r"""__init__(FilterMedian self, Nsound::uint32 n_samples_in_pool) -> FilterMedian"""
        _Nsound.FilterMedian_swiginit(self, _Nsound.new_FilterMedian(n_samples_in_pool))

    def filter(self, *args):
        r"""
        filter(FilterMedian self, AudioStream x) -> AudioStream
        filter(FilterMedian self, Buffer b) -> Buffer
        filter(FilterMedian self, Nsound::float64 const & x) -> Nsound::float64
        """
        return _Nsound.FilterMedian_filter(self, *args)

    def fill(self, x):
        r"""fill(FilterMedian self, Nsound::float64 x)"""
        return _Nsound.FilterMedian_fill(self, x)
    __swig_destroy__ = _Nsound.delete_FilterMedian

# Register FilterMedian in _Nsound:
_Nsound.FilterMedian_swigregister(FilterMedian)

class FilterMovingAverage(Filter):
    r"""Proxy of C++ Nsound::FilterMovingAverage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterMovingAverage self, Nsound::uint32 n_samples_to_average) -> FilterMovingAverage
        __init__(FilterMovingAverage self, FilterMovingAverage copy) -> FilterMovingAverage
        """
        _Nsound.FilterMovingAverage_swiginit(self, _Nsound.new_FilterMovingAverage(*args))
    __swig_destroy__ = _Nsound.delete_FilterMovingAverage

    def filter(self, *args):
        r"""
        filter(FilterMovingAverage self, AudioStream x) -> AudioStream
        filter(FilterMovingAverage self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterMovingAverage self, Buffer x) -> Buffer
        filter(FilterMovingAverage self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterMovingAverage self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterMovingAverage self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterMovingAverage_filter(self, *args)

    def reset(self):
        r"""reset(FilterMovingAverage self)"""
        return _Nsound.FilterMovingAverage_reset(self)

# Register FilterMovingAverage in _Nsound:
_Nsound.FilterMovingAverage_swigregister(FilterMovingAverage)

class FilterFlanger(Filter):
    r"""Proxy of C++ Nsound::FilterFlanger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterFlanger self, Nsound::float64 const & sample_rate, Nsound::float64 const & frequency, Nsound::float64 const & max_delay_time_seconds) -> FilterFlanger
        __init__(FilterFlanger self, FilterFlanger copy) -> FilterFlanger
        """
        _Nsound.FilterFlanger_swiginit(self, _Nsound.new_FilterFlanger(*args))
    __swig_destroy__ = _Nsound.delete_FilterFlanger

    def filter(self, *args):
        r"""
        filter(FilterFlanger self, AudioStream x) -> AudioStream
        filter(FilterFlanger self, AudioStream x, Nsound::float64 const & frequency) -> AudioStream
        filter(FilterFlanger self, AudioStream x, Nsound::float64 const & frequency, Nsound::float64 const & delay) -> AudioStream
        filter(FilterFlanger self, AudioStream x, Buffer frequency, Buffer delay) -> AudioStream
        filter(FilterFlanger self, Buffer x) -> Buffer
        filter(FilterFlanger self, Buffer x, Nsound::float64 const & frequency) -> Buffer
        filter(FilterFlanger self, Buffer x, Nsound::float64 const & frequency, Nsound::float64 const & delay) -> Buffer
        filter(FilterFlanger self, Buffer x, Buffer frequency, Buffer delay) -> Buffer
        filter(FilterFlanger self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterFlanger self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        filter(FilterFlanger self, Nsound::float64 const & x, Nsound::float64 const & frequency, Nsound::float64 const & delay) -> Nsound::float64
        """
        return _Nsound.FilterFlanger_filter(self, *args)

    def plot(self, show_fc=False, show_phase=False):
        r"""plot(FilterFlanger self, Nsound::boolean show_fc=False, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterFlanger_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterFlanger self)"""
        return _Nsound.FilterFlanger_reset(self)

# Register FilterFlanger in _Nsound:
_Nsound.FilterFlanger_swigregister(FilterFlanger)

class FilterParametricEqualizer(Filter):
    r"""Proxy of C++ Nsound::FilterParametricEqualizer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PEAKING = _Nsound.FilterParametricEqualizer_PEAKING
    
    LOW_SHELF = _Nsound.FilterParametricEqualizer_LOW_SHELF
    
    HIGH_SHELF = _Nsound.FilterParametricEqualizer_HIGH_SHELF
    

    def __init__(self, type, sample_rate, frequency, resonance=0.707106781187, boost_dB=0.0):
        r"""__init__(FilterParametricEqualizer self, Nsound::FilterParametricEqualizer::Type const & type, Nsound::float64 const & sample_rate, Nsound::float64 const & frequency, Nsound::float64 const & resonance=0.707106781187, Nsound::float64 const & boost_dB=0.0) -> FilterParametricEqualizer"""
        _Nsound.FilterParametricEqualizer_swiginit(self, _Nsound.new_FilterParametricEqualizer(type, sample_rate, frequency, resonance, boost_dB))
    __swig_destroy__ = _Nsound.delete_FilterParametricEqualizer

    def filter(self, *args):
        r"""
        filter(FilterParametricEqualizer self, AudioStream x) -> AudioStream
        filter(FilterParametricEqualizer self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterParametricEqualizer self, AudioStream x, Buffer frequencies, Buffer resonance) -> AudioStream
        filter(FilterParametricEqualizer self, AudioStream x, Buffer frequencies, Buffer resonance, Buffer boost_dB) -> AudioStream
        filter(FilterParametricEqualizer self, Buffer x) -> Buffer
        filter(FilterParametricEqualizer self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterParametricEqualizer self, Buffer x, Buffer frequencies, Buffer resonance) -> Buffer
        filter(FilterParametricEqualizer self, Buffer x, Buffer frequencies, Buffer resonance, Buffer boost_dB) -> Buffer
        filter(FilterParametricEqualizer self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterParametricEqualizer self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        filter(FilterParametricEqualizer self, Nsound::float64 const & x, Nsound::float64 const & frequency, Nsound::float64 const & resonance) -> Nsound::float64
        filter(FilterParametricEqualizer self, Nsound::float64 const & x, Nsound::float64 const & frequency, Nsound::float64 const & resonance, Nsound::float64 const & boost_dB) -> Nsound::float64
        """
        return _Nsound.FilterParametricEqualizer_filter(self, *args)

    def makeKernel(self, frequency, resonance, boost):
        r"""makeKernel(FilterParametricEqualizer self, Nsound::float64 const & frequency, Nsound::float64 const & resonance, Nsound::float64 const & boost)"""
        return _Nsound.FilterParametricEqualizer_makeKernel(self, frequency, resonance, boost)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterParametricEqualizer self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterParametricEqualizer_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterParametricEqualizer self)"""
        return _Nsound.FilterParametricEqualizer_reset(self)

# Register FilterParametricEqualizer in _Nsound:
_Nsound.FilterParametricEqualizer_swigregister(FilterParametricEqualizer)

class FilterPhaser(Filter):
    r"""Proxy of C++ Nsound::FilterPhaser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterPhaser self, Nsound::float64 const & sample_rate, Nsound::uint32 const n_stages, Nsound::float64 const & frequency, Nsound::float64 const & frequency_step_per_stage, Nsound::float64 const & max_delay_in_seconds) -> FilterPhaser
        __init__(FilterPhaser self, FilterPhaser copy) -> FilterPhaser
        """
        _Nsound.FilterPhaser_swiginit(self, _Nsound.new_FilterPhaser(*args))
    __swig_destroy__ = _Nsound.delete_FilterPhaser

    def filter(self, *args):
        r"""
        filter(FilterPhaser self, AudioStream x) -> AudioStream
        filter(FilterPhaser self, Buffer x) -> Buffer
        filter(FilterPhaser self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterPhaser self, Nsound::float64 const & x, Nsound::float64 const & ignored) -> Nsound::float64
        """
        return _Nsound.FilterPhaser_filter(self, *args)

    def plot(self, show_fc=False, show_phase=False):
        r"""plot(FilterPhaser self, Nsound::boolean show_fc=False, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterPhaser_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterPhaser self)"""
        return _Nsound.FilterPhaser_reset(self)

# Register FilterPhaser in _Nsound:
_Nsound.FilterPhaser_swigregister(FilterPhaser)

class FilterSlinky(Filter):
    r"""Proxy of C++ Nsound::FilterSlinky class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, delay_time, frequency_window):
        r"""__init__(FilterSlinky self, Nsound::float64 const & sample_rate, Nsound::float64 const & delay_time, Nsound::float64 const & frequency_window) -> FilterSlinky"""
        _Nsound.FilterSlinky_swiginit(self, _Nsound.new_FilterSlinky(sample_rate, delay_time, frequency_window))
    __swig_destroy__ = _Nsound.delete_FilterSlinky

    def filter(self, *args):
        r"""
        filter(FilterSlinky self, AudioStream x) -> AudioStream
        filter(FilterSlinky self, AudioStream x, Buffer frequencies) -> AudioStream
        filter(FilterSlinky self, Buffer x) -> Buffer
        filter(FilterSlinky self, Buffer x, Buffer frequencies) -> Buffer
        filter(FilterSlinky self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterSlinky self, Nsound::float64 const & x, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.FilterSlinky_filter(self, *args)

    def reset(self):
        r"""reset(FilterSlinky self)"""
        return _Nsound.FilterSlinky_reset(self)

# Register FilterSlinky in _Nsound:
_Nsound.FilterSlinky_swigregister(FilterSlinky)

class FilterTone(Filter):
    r"""Proxy of C++ Nsound::FilterTone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, half_power_frequency):
        r"""__init__(FilterTone self, Nsound::float64 const & sample_rate, Nsound::float64 const & half_power_frequency) -> FilterTone"""
        _Nsound.FilterTone_swiginit(self, _Nsound.new_FilterTone(sample_rate, half_power_frequency))
    __swig_destroy__ = _Nsound.delete_FilterTone

    def filter(self, *args):
        r"""
        filter(FilterTone self, AudioStream x) -> AudioStream
        filter(FilterTone self, AudioStream x, Buffer hp_frequencies) -> AudioStream
        filter(FilterTone self, Buffer x) -> Buffer
        filter(FilterTone self, Buffer x, Buffer hp_frequencies) -> Buffer
        filter(FilterTone self, Nsound::float64 const & x) -> Nsound::float64
        filter(FilterTone self, Nsound::float64 const & x, Nsound::float64 const & hp_frequency) -> Nsound::float64
        """
        return _Nsound.FilterTone_filter(self, *args)

    def getFrequency(self):
        r"""getFrequency(FilterTone self) -> Nsound::float64"""
        return _Nsound.FilterTone_getFrequency(self)

    def getKernelSize(self):
        r"""getKernelSize(FilterTone self) -> Nsound::uint32"""
        return _Nsound.FilterTone_getKernelSize(self)

    def plot(self, show_fc=True, show_phase=False):
        r"""plot(FilterTone self, Nsound::boolean show_fc=True, Nsound::boolean show_phase=False)"""
        return _Nsound.FilterTone_plot(self, show_fc, show_phase)

    def reset(self):
        r"""reset(FilterTone self)"""
        return _Nsound.FilterTone_reset(self)

    def makeKernel(self, half_power_frequency):
        r"""makeKernel(FilterTone self, Nsound::float64 const & half_power_frequency)"""
        return _Nsound.FilterTone_makeKernel(self, half_power_frequency)

# Register FilterTone in _Nsound:
_Nsound.FilterTone_swigregister(FilterTone)

class FluteSlide(Instrument):
    r"""Proxy of C++ Nsound::FluteSlide class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(FluteSlide self, Nsound::float64 const & sample_rate) -> FluteSlide"""
        _Nsound.FluteSlide_swiginit(self, _Nsound.new_FluteSlide(sample_rate))
    __swig_destroy__ = _Nsound.delete_FluteSlide

    def play(self, *args):
        r"""
        play(FluteSlide self) -> AudioStream
        play(FluteSlide self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(FluteSlide self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & presure, Nsound::float64 const & breath) -> AudioStream
        """
        return _Nsound.FluteSlide_play(self, *args)

    def getInfo(self):
        r"""getInfo(FluteSlide self) -> std::string"""
        return _Nsound.FluteSlide_getInfo(self)

# Register FluteSlide in _Nsound:
_Nsound.FluteSlide_swigregister(FluteSlide)

class Generator(object):
    r"""Proxy of C++ Nsound::Generator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Generator self, Nsound::float64 const & sample_rate) -> Generator
        __init__(Generator self, Nsound::float64 const & sample_rate, Buffer waveform) -> Generator
        __init__(Generator self, std::string const & wave_filename) -> Generator
        __init__(Generator self, Generator gen) -> Generator
        """
        _Nsound.Generator_swiginit(self, _Nsound.new_Generator(*args))
    __swig_destroy__ = _Nsound.delete_Generator

    def setRealtime(self, flag):
        r"""setRealtime(Generator self, bool flag)"""
        return _Nsound.Generator_setRealtime(self, flag)

    def addSlaveSync(self, slave):
        r"""addSlaveSync(Generator self, Generator slave)"""
        return _Nsound.Generator_addSlaveSync(self, slave)

    def buzzInit(self, max_harmonics):
        r"""buzzInit(Generator self, Nsound::uint32 const & max_harmonics)"""
        return _Nsound.Generator_buzzInit(self, max_harmonics)

    def buzz(self, *args):
        r"""
        buzz(Generator self, Nsound::float64 const & frequency, Nsound::float64 const & n_harmonics, Nsound::float64 const & delay) -> Nsound::float64
        buzz(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & n_harmonics, Nsound::float64 const & delay) -> Buffer
        buzz(Generator self, Nsound::float64 const & duration, Buffer frequency, Buffer n_harmonics, Buffer delay) -> Buffer
        """
        return _Nsound.Generator_buzz(self, *args)

    def setChorus(self, n_voices, sigma=0.02):
        r"""setChorus(Generator self, Nsound::uint32 const n_voices, Nsound::float64 const & sigma=0.02)"""
        return _Nsound.Generator_setChorus(self, n_voices, sigma)

    def drawDecay(self, *args):
        r"""drawDecay(Generator self, Nsound::float64 const & duration, Nsound::float64 const & alpha=2.0*3.1415926535897932846) -> Buffer"""
        return _Nsound.Generator_drawDecay(self, *args)

    def drawGaussian(self, duration, mu, sigma, normalize=True):
        r"""drawGaussian(Generator self, Nsound::float64 const & duration, Nsound::float64 const & mu, Nsound::float64 const & sigma, Nsound::boolean const & normalize=True) -> Buffer"""
        return _Nsound.Generator_drawGaussian(self, duration, mu, sigma, normalize)

    def drawFatGaussian(self, duration, pass_band_percent=0.01):
        r"""drawFatGaussian(Generator self, Nsound::float64 const & duration, Nsound::float64 const & pass_band_percent=0.01) -> Buffer"""
        return _Nsound.Generator_drawFatGaussian(self, duration, pass_band_percent)

    def drawLine(self, duration, amplitude_start, amplitude_finish):
        r"""drawLine(Generator self, Nsound::float64 const & duration, Nsound::float64 const & amplitude_start, Nsound::float64 const & amplitude_finish) -> Buffer"""
        return _Nsound.Generator_drawLine(self, duration, amplitude_start, amplitude_finish)

    def drawParabola(self, duration, y1, x2, y2, y3):
        r"""drawParabola(Generator self, Nsound::float64 const & duration, Nsound::float64 const & y1, Nsound::float64 const & x2, Nsound::float64 const & y2, Nsound::float64 const & y3) -> Buffer"""
        return _Nsound.Generator_drawParabola(self, duration, y1, x2, y2, y3)

    def drawSine(self, *args):
        r"""
        drawSine(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        drawSine(Generator self, Nsound::float64 const & duration, Buffer frequency) -> Buffer
        drawSine(Generator self, Nsound::float64 const & frequency) -> Nsound::float64
        """
        return _Nsound.Generator_drawSine(self, *args)

    def drawSine2(self, *args):
        r"""
        drawSine2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Buffer frequency, Buffer phase) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Buffer frequency, Nsound::float64 const & phase=0.0) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer phase) -> Buffer
        drawSine2(Generator self, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Nsound::float64
        """
        return _Nsound.Generator_drawSine2(self, *args)

    def drawWindow(self, duration, type):
        r"""drawWindow(Generator self, Nsound::float64 const & duration, Nsound::WindowType type) -> Buffer"""
        return _Nsound.Generator_drawWindow(self, duration, type)

    def drawWindowBartlett(self, duration):
        r"""drawWindowBartlett(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowBartlett(self, duration)

    def drawWindowBlackman(self, duration):
        r"""drawWindowBlackman(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowBlackman(self, duration)

    def drawWindowBlackmanHarris(self, duration):
        r"""drawWindowBlackmanHarris(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowBlackmanHarris(self, duration)

    def drawWindowHamming(self, duration):
        r"""drawWindowHamming(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowHamming(self, duration)

    def drawWindowHanning(self, duration):
        r"""drawWindowHanning(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowHanning(self, duration)

    def drawWindowKaiser(self, duration, beta=5.0):
        r"""drawWindowKaiser(Generator self, Nsound::float64 const & duration, Nsound::float64 const & beta=5.0) -> Buffer"""
        return _Nsound.Generator_drawWindowKaiser(self, duration, beta)

    def drawWindowNuttall(self, duration):
        r"""drawWindowNuttall(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowNuttall(self, duration)

    def drawWindowParzen(self, duration):
        r"""drawWindowParzen(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowParzen(self, duration)

    def drawWindowRectangular(self, duration):
        r"""drawWindowRectangular(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_drawWindowRectangular(self, duration)

    def generate(self, *args):
        r"""
        generate(Generator self, Nsound::float64 const & frequency) -> Nsound::float64
        generate(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        generate(Generator self, Nsound::float64 const & duration, Buffer frequencies) -> Buffer
        """
        return _Nsound.Generator_generate(self, *args)

    def generate2(self, *args):
        r"""
        generate2(Generator self, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Nsound::float64
        generate2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & phase) -> Buffer
        generate2(Generator self, Nsound::float64 const & duration, Nsound::float64 const & frequencies, Buffer phase) -> Buffer
        generate2(Generator self, Nsound::float64 const & duration, Buffer frequencies, Nsound::float64 const & phase) -> Buffer
        generate2(Generator self, Nsound::float64 const & duration, Buffer frequencies, Buffer phase) -> Buffer
        """
        return _Nsound.Generator_generate2(self, *args)

    def removeSlaveSync(self, slave):
        r"""removeSlaveSync(Generator self, Generator slave)"""
        return _Nsound.Generator_removeSlaveSync(self, slave)

    def reset(self):
        r"""reset(Generator self)"""
        return _Nsound.Generator_reset(self)

    def getRandomNumberGenerator(self):
        r"""getRandomNumberGenerator(Generator self) -> RandomNumberGenerator"""
        return _Nsound.Generator_getRandomNumberGenerator(self)

    def setSeed(self, seed):
        r"""setSeed(Generator self, Nsound::uint32 const seed)"""
        return _Nsound.Generator_setSeed(self, seed)

    def silence(self, duration):
        r"""silence(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_silence(self, duration)

    def tell(self):
        r"""tell(Generator self) -> Nsound::float64"""
        return _Nsound.Generator_tell(self)

    def whiteNoise(self, duration):
        r"""whiteNoise(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_whiteNoise(self, duration)

    def gaussianNoise(self, duration, mu, sigma):
        r"""gaussianNoise(Generator self, Nsound::float64 const & duration, Nsound::float64 const & mu, Nsound::float64 const & sigma) -> Buffer"""
        return _Nsound.Generator_gaussianNoise(self, duration, mu, sigma)

    def tanh(self, duration):
        r"""tanh(Generator self, Nsound::float64 const & duration) -> Buffer"""
        return _Nsound.Generator_tanh(self, duration)

# Register Generator in _Nsound:
_Nsound.Generator_swigregister(Generator)

class GeneratorDecay(Generator):
    r"""Proxy of C++ Nsound::GeneratorDecay class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(GeneratorDecay self, Nsound::float64 const & sample_rate) -> GeneratorDecay"""
        _Nsound.GeneratorDecay_swiginit(self, _Nsound.new_GeneratorDecay(sample_rate))

    def generate(self, frequency):
        r"""generate(GeneratorDecay self, Nsound::float64 const & frequency) -> Nsound::float64"""
        return _Nsound.GeneratorDecay_generate(self, frequency)

    def generate2(self, *args):
        r"""
        generate2(GeneratorDecay self, Nsound::float64 const & frequency, Nsound::float64 const & alpha) -> Nsound::float64
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & alpha) -> Buffer
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer alpha) -> Buffer
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Buffer frequencies, Nsound::float64 const & alpha) -> Buffer
        generate2(GeneratorDecay self, Nsound::float64 const & duration, Buffer frequencies, Buffer alpha) -> Buffer
        """
        return _Nsound.GeneratorDecay_generate2(self, *args)
    __swig_destroy__ = _Nsound.delete_GeneratorDecay

# Register GeneratorDecay in _Nsound:
_Nsound.GeneratorDecay_swigregister(GeneratorDecay)

class Granulator(object):
    r"""Proxy of C++ Nsound::Granulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CUSTOM = _Nsound.Granulator_CUSTOM
    
    GAUSSIAN = _Nsound.Granulator_GAUSSIAN
    
    GAUSSIAN_90 = _Nsound.Granulator_GAUSSIAN_90
    
    GAUSSIAN_70 = _Nsound.Granulator_GAUSSIAN_70
    
    GAUSSIAN_50 = _Nsound.Granulator_GAUSSIAN_50
    
    GAUSSIAN_30 = _Nsound.Granulator_GAUSSIAN_30
    
    GAUSSIAN_10 = _Nsound.Granulator_GAUSSIAN_10
    
    DECAY = _Nsound.Granulator_DECAY
    
    REVERSE_DECAY = _Nsound.Granulator_REVERSE_DECAY
    

    def __init__(self, *args):
        r"""
        __init__(Granulator self, Nsound::float64 const & sample_rate, Nsound::Granulator::EnvelopeType_e env_type, Nsound::float64 const & envelope_noise=0.0, Buffer custom_envelope=None) -> Granulator
        __init__(Granulator self, Granulator gran) -> Granulator
        """
        _Nsound.Granulator_swiginit(self, _Nsound.new_Granulator(*args))
    __swig_destroy__ = _Nsound.delete_Granulator

    def generate(self, *args):
        r"""
        generate(Granulator self, Nsound::float64 const & duration, Nsound::float64 const & grain_frequency, Nsound::float64 const & waves_per_grain, Nsound::float64 const & grains_per_second) -> Buffer
        generate(Granulator self, Nsound::float64 const & duration, Buffer grain_frequency, Buffer waves_per_grain, Buffer grains_per_second) -> Buffer
        """
        return _Nsound.Granulator_generate(self, *args)

# Register Granulator in _Nsound:
_Nsound.Granulator_swigregister(Granulator)

class GuitarBass(Instrument):
    r"""Proxy of C++ Nsound::GuitarBass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(GuitarBass self, Nsound::float64 const & sample_rate) -> GuitarBass"""
        _Nsound.GuitarBass_swiginit(self, _Nsound.new_GuitarBass(sample_rate))
    __swig_destroy__ = _Nsound.delete_GuitarBass

    def play(self, *args):
        r"""
        play(GuitarBass self) -> AudioStream
        play(GuitarBass self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        """
        return _Nsound.GuitarBass_play(self, *args)

    def getInfo(self):
        r"""getInfo(GuitarBass self) -> std::string"""
        return _Nsound.GuitarBass_getInfo(self)

# Register GuitarBass in _Nsound:
_Nsound.GuitarBass_swigregister(GuitarBass)

class Hat(Instrument):
    r"""Proxy of C++ Nsound::Hat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Hat self, Nsound::float64 const & sample_rate) -> Hat
        __init__(Hat self, Hat copy) -> Hat
        """
        _Nsound.Hat_swiginit(self, _Nsound.new_Hat(*args))
    __swig_destroy__ = _Nsound.delete_Hat

    def play(self, *args):
        r"""
        play(Hat self) -> AudioStream
        play(Hat self, Nsound::float64 const & duration, Nsound::float64 const & tune) -> AudioStream
        play(Hat self, Nsound::float64 const & duration, Nsound::float64 const & tune, Nsound::boolean is_closed) -> AudioStream
        """
        return _Nsound.Hat_play(self, *args)

    def getInfo(self):
        r"""getInfo(Hat self) -> std::string"""
        return _Nsound.Hat_getInfo(self)

# Register Hat in _Nsound:
_Nsound.Hat_swigregister(Hat)

class Mesh2D(object):
    r"""Proxy of C++ Nsound::Mesh2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Mesh2D self, Nsound::float64 const & sample_rate, Nsound::uint32 width, Nsound::uint32 height, Nsound::float64 const & leak_gain, Nsound::float64 const & tau, Nsound::float64 const & delta=6.0, Nsound::float64 const & gamma=8.0) -> Mesh2D
        __init__(Mesh2D self, Mesh2D copy) -> Mesh2D
        """
        _Nsound.Mesh2D_swiginit(self, _Nsound.new_Mesh2D(*args))
    __swig_destroy__ = _Nsound.delete_Mesh2D

    def clear(self):
        r"""clear(Mesh2D self)"""
        return _Nsound.Mesh2D_clear(self)

    def getEnergy(self):
        r"""getEnergy(Mesh2D self) -> Nsound::float64"""
        return _Nsound.Mesh2D_getEnergy(self)

    def strike(self, *args):
        r"""
        strike(Mesh2D self, Buffer x_pos, Buffer y_pos, Buffer velocity) -> Buffer
        strike(Mesh2D self, Nsound::float64 const & x_pos, Nsound::float64 const & y_pos, Nsound::float64 const & velocity) -> Buffer
        """
        return _Nsound.Mesh2D_strike(self, *args)

    def setMeshDumping(self, *args):
        r"""setMeshDumping(Mesh2D self, Nsound::boolean flag, std::string const & dirname=".", std::string const & prefix="mesh")"""
        return _Nsound.Mesh2D_setMeshDumping(self, *args)

# Register Mesh2D in _Nsound:
_Nsound.Mesh2D_swigregister(Mesh2D)

class Mixer(object):
    r"""Proxy of C++ Nsound::Mixer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Mixer self) -> Mixer"""
        _Nsound.Mixer_swiginit(self, _Nsound.new_Mixer())
    __swig_destroy__ = _Nsound.delete_Mixer

    def add(self, first_beat_time, beats_per_minute, audio_stream):
        r"""add(Mixer self, Nsound::float64 first_beat_time, Nsound::float64 beats_per_minute, AudioStream audio_stream)"""
        return _Nsound.Mixer_add(self, first_beat_time, beats_per_minute, audio_stream)

    def getStream(self, *args):
        r"""
        getStream(Mixer self, Nsound::float64 end_time) -> AudioStream
        getStream(Mixer self, Nsound::float64 start_time, Nsound::float64 end_time) -> AudioStream
        """
        return _Nsound.Mixer_getStream(self, *args)

    def clear(self):
        r"""clear(Mixer self)"""
        return _Nsound.Mixer_clear(self)

    def size(self):
        r"""size(Mixer self) -> Nsound::uint32"""
        return _Nsound.Mixer_size(self)

# Register Mixer in _Nsound:
_Nsound.Mixer_swigregister(Mixer)

class OrganPipe(Instrument):
    r"""Proxy of C++ Nsound::OrganPipe class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(OrganPipe self, Nsound::float64 const & sample_rate) -> OrganPipe"""
        _Nsound.OrganPipe_swiginit(self, _Nsound.new_OrganPipe(sample_rate))
    __swig_destroy__ = _Nsound.delete_OrganPipe

    def play(self, *args):
        r"""
        play(OrganPipe self) -> AudioStream
        play(OrganPipe self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> AudioStream
        play(OrganPipe self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & pan) -> AudioStream
        """
        return _Nsound.OrganPipe_play(self, *args)

    def getInfo(self):
        r"""getInfo(OrganPipe self) -> std::string"""
        return _Nsound.OrganPipe_getInfo(self)

# Register OrganPipe in _Nsound:
_Nsound.OrganPipe_swigregister(OrganPipe)

class Axes(object):
    r"""Proxy of C++ Nsound::Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Axes self, PyObject * axes_ptr) -> Axes
        __init__(Axes self, Axes copy) -> Axes
        """
        _Nsound.Axes_swiginit(self, _Nsound.new_Axes(*args))
    __swig_destroy__ = _Nsound.delete_Axes

    def get_axes(self):
        r"""get_axes(Axes self) -> PyObject *"""
        return _Nsound.Axes_get_axes(self)

# Register Axes in _Nsound:
_Nsound.Axes_swigregister(Axes)

class Plotter(object):
    r"""Proxy of C++ Nsound::Plotter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Plotter self) -> Plotter"""
        _Nsound.Plotter_swiginit(self, _Nsound.new_Plotter())
    __swig_destroy__ = _Nsound.delete_Plotter

    def axhline(self, *args):
        r"""axhline(Plotter self, Nsound::float64 const & y_pos=0.0, std::string const & kwargs="")"""
        return _Nsound.Plotter_axhline(self, *args)

    def axvline(self, *args):
        r"""axvline(Plotter self, Nsound::float64 const & x_pos=0.0, std::string const & kwargs="")"""
        return _Nsound.Plotter_axvline(self, *args)

    def xlim(self, xmin, xmax):
        r"""xlim(Plotter self, Nsound::float64 const & xmin, Nsound::float64 const & xmax)"""
        return _Nsound.Plotter_xlim(self, xmin, xmax)

    def ylim(self, ymin, ymax):
        r"""ylim(Plotter self, Nsound::float64 const & ymin, Nsound::float64 const & ymax)"""
        return _Nsound.Plotter_ylim(self, ymin, ymax)

    def figure(self, *args):
        r"""figure(Plotter self, std::string const & kwargs="")"""
        return _Nsound.Plotter_figure(self, *args)

    def grid(self, flag):
        r"""grid(Plotter self, Nsound::boolean flag)"""
        return _Nsound.Plotter_grid(self, flag)

    def hide(self):
        r"""hide(Plotter self)"""
        return _Nsound.Plotter_hide(self)

    def imagesc(self, *args):
        r"""
        imagesc(Plotter self, AudioStream Z, std::string const & kwargs="")
        imagesc(Plotter self, Buffer x_axis, Buffer y_axis, AudioStream Z, std::string const & kwargs="")
        """
        return _Nsound.Plotter_imagesc(self, *args)

    def legend(self, *args):
        r"""legend(Plotter self, std::string const & kwargs="")"""
        return _Nsound.Plotter_legend(self, *args)

    def plot(self, *args):
        r"""
        plot(Plotter self, Buffer y, std::string const & fmt="", std::string const & kwargs="")
        plot(Plotter self, Buffer x, Buffer y, std::string const & fmt="", std::string const & kwargs="")
        plot(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y, std::string const & fmt="", std::string const & kwargs="")
        """
        return _Nsound.Plotter_plot(self, *args)

    def run_string(self, command):
        r"""run_string(Plotter self, std::string const & command)"""
        return _Nsound.Plotter_run_string(self, command)

    def savefig(self, *args):
        r"""savefig(Plotter self, std::string const & filename, std::string const & kwargs="")"""
        return _Nsound.Plotter_savefig(self, *args)

    def set_xscale(self, s):
        r"""set_xscale(Plotter self, std::string const & s)"""
        return _Nsound.Plotter_set_xscale(self, s)

    def set_yscale(self, s):
        r"""set_yscale(Plotter self, std::string const & s)"""
        return _Nsound.Plotter_set_yscale(self, s)

    def subplot(self, *args):
        r"""subplot(Plotter self, Nsound::uint32 const n_rows, Nsound::uint32 const n_cols, Nsound::uint32 const n, std::string const & kwargs="", Axes sharex=None, Axes sharey=None) -> Axes"""
        return _Nsound.Plotter_subplot(self, *args)

    def text(self, *args):
        r"""text(Plotter self, Nsound::float64 const & x, Nsound::float64 const & y, std::string const & text, std::string const & kwargs="")"""
        return _Nsound.Plotter_text(self, *args)

    def title(self, *args):
        r"""title(Plotter self, std::string const & title, std::string const & kwargs="")"""
        return _Nsound.Plotter_title(self, *args)

    def xlabel(self, *args):
        r"""xlabel(Plotter self, std::string const & label, std::string const & kwargs="")"""
        return _Nsound.Plotter_xlabel(self, *args)

    def ylabel(self, *args):
        r"""ylabel(Plotter self, std::string const & label, std::string const & kwargs="")"""
        return _Nsound.Plotter_ylabel(self, *args)


    #------------------------------------------------------------------------------
    # from swig/Plotter.i
    #
    def show():
        try:
            matplotlib.pylab.show()
        except:
            pass

    show = staticmethod(show)
    #
    #------------------------------------------------------------------------------




# Register Plotter in _Nsound:
_Nsound.Plotter_swigregister(Plotter)

class Pluck(Generator):
    r"""Proxy of C++ Nsound::Pluck class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, n_smooth_samples):
        r"""__init__(Pluck self, Nsound::float64 const & sample_rate, Nsound::uint32 n_smooth_samples) -> Pluck"""
        _Nsound.Pluck_swiginit(self, _Nsound.new_Pluck(sample_rate, n_smooth_samples))
    __swig_destroy__ = _Nsound.delete_Pluck

    def generate(self, *args):
        r"""
        generate(Pluck self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        generate(Pluck self, Nsound::float64 const & f) -> Nsound::float64
        generate(Pluck self, Nsound::float64 const & d, Buffer f) -> Buffer
        """
        return _Nsound.Pluck_generate(self, *args)

    def generate2(self, *args):
        r"""
        generate2(Pluck self, Nsound::float64 const & f, Nsound::float64 const & p) -> Nsound::float64
        generate2(Pluck self, Nsound::float64 const & d, Nsound::float64 const & f, Nsound::float64 const & p) -> Buffer
        generate2(Pluck self, Nsound::float64 const & d, Nsound::float64 const & f, Buffer p) -> Buffer
        generate2(Pluck self, Nsound::float64 const & d, Buffer f, Nsound::float64 const & p) -> Buffer
        generate2(Pluck self, Nsound::float64 const & d, Buffer f, Buffer p) -> Buffer
        """
        return _Nsound.Pluck_generate2(self, *args)

# Register Pluck in _Nsound:
_Nsound.Pluck_swigregister(Pluck)

class Pulse(Generator):
    r"""Proxy of C++ Nsound::Pulse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PULSE_SECONDS = _Nsound.Pulse_PULSE_SECONDS
    
    PULSE_PERCENT = _Nsound.Pulse_PULSE_PERCENT
    

    def __init__(self, *args):
        r"""__init__(Pulse self, Nsound::float64 const & sample_rate, Nsound::float64 const & pulse_width, Nsound::Pulse::PulseUnits const & units=PULSE_PERCENT) -> Pulse"""
        _Nsound.Pulse_swiginit(self, _Nsound.new_Pulse(*args))
    __swig_destroy__ = _Nsound.delete_Pulse

    def setUnits(self, units):
        r"""setUnits(Pulse self, Nsound::Pulse::PulseUnits const & units)"""
        return _Nsound.Pulse_setUnits(self, units)

    def generate(self, *args):
        r"""
        generate(Pulse self, Nsound::float64 const & frequency) -> Nsound::float64
        generate(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Buffer frequencies) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & pulse_width) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer pulse_widths) -> Buffer
        generate(Pulse self, Nsound::float64 const & duration, Buffer frequencies, Buffer pulse_widths) -> Buffer
        """
        return _Nsound.Pulse_generate(self, *args)

    def generate2(self, *args):
        r"""
        generate2(Pulse self, Nsound::float64 const & frequency, Nsound::float64 const & pulse_width) -> Nsound::float64
        generate2(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Nsound::float64 const & pulse_width) -> Buffer
        generate2(Pulse self, Nsound::float64 const & duration, Nsound::float64 const & frequency, Buffer pulse_width) -> Buffer
        generate2(Pulse self, Nsound::float64 const & duration, Buffer frequency, Nsound::float64 const & pulse_width) -> Buffer
        generate2(Pulse self, Nsound::float64 const & duration, Buffer frequency, Buffer pulse_width) -> Buffer
        """
        return _Nsound.Pulse_generate2(self, *args)

    def reset(self):
        r"""reset(Pulse self)"""
        return _Nsound.Pulse_reset(self)

    def riseTime(self):
        r"""riseTime(Pulse self) -> Nsound::float64"""
        return _Nsound.Pulse_riseTime(self)

    def fallTime(self):
        r"""fallTime(Pulse self) -> Nsound::float64"""
        return _Nsound.Pulse_fallTime(self)

# Register Pulse in _Nsound:
_Nsound.Pulse_swigregister(Pulse)

class RandomNumberGenerator(object):
    r"""Proxy of C++ Nsound::RandomNumberGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Nsound.delete_RandomNumberGenerator

    def get(self, *args):
        r"""
        get(RandomNumberGenerator self) -> Nsound::uint32
        get(RandomNumberGenerator self, Nsound::float64 const & min, Nsound::float64 const & max) -> Nsound::float64
        """
        return _Nsound.RandomNumberGenerator_get(self, *args)

    def setSeed(self, seed):
        r"""setSeed(RandomNumberGenerator self, Nsound::uint32 seed)"""
        return _Nsound.RandomNumberGenerator_setSeed(self, seed)

# Register RandomNumberGenerator in _Nsound:
_Nsound.RandomNumberGenerator_swigregister(RandomNumberGenerator)

class ReverberationRoom(object):
    r"""Proxy of C++ Nsound::ReverberationRoom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ReverberationRoom self, Nsound::float64 const & sample_rate, Nsound::float64 const & room_feedback, Nsound::float64 const & wet_percent=0.5, Nsound::float64 const & dry_percent=1.0, Nsound::float64 const & low_pass_frequency_Hz=7644.9, Nsound::float64 const & stereo_spread_seconds=0.0005215) -> ReverberationRoom
        __init__(ReverberationRoom self, ReverberationRoom copy) -> ReverberationRoom
        """
        _Nsound.ReverberationRoom_swiginit(self, _Nsound.new_ReverberationRoom(*args))
    __swig_destroy__ = _Nsound.delete_ReverberationRoom

    def filter(self, *args):
        r"""
        filter(ReverberationRoom self, AudioStream x) -> AudioStream
        filter(ReverberationRoom self, Buffer x) -> AudioStream
        filter(ReverberationRoom self, Nsound::float64 & out_left, Nsound::float64 & out_right, Nsound::float64 const & in_left, Nsound::float64 const & in_right)
        """
        return _Nsound.ReverberationRoom_filter(self, *args)

    def getSampleRate(self):
        r"""getSampleRate(ReverberationRoom self) -> Nsound::float64"""
        return _Nsound.ReverberationRoom_getSampleRate(self)

    def reset(self):
        r"""reset(ReverberationRoom self)"""
        return _Nsound.ReverberationRoom_reset(self)

# Register ReverberationRoom in _Nsound:
_Nsound.ReverberationRoom_swigregister(ReverberationRoom)

class RngTausworthe(RandomNumberGenerator):
    r"""Proxy of C++ Nsound::RngTausworthe class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RngTausworthe self) -> RngTausworthe"""
        _Nsound.RngTausworthe_swiginit(self, _Nsound.new_RngTausworthe())

    def get(self, *args):
        r"""
        get(RngTausworthe self) -> Nsound::uint32
        get(RngTausworthe self, Nsound::int32 const min, Nsound::int32 const max) -> Nsound::int32
        get(RngTausworthe self, Nsound::float64 const & min, Nsound::float64 const & max) -> Nsound::float64
        """
        return _Nsound.RngTausworthe_get(self, *args)

    def setSeed(self, seed):
        r"""setSeed(RngTausworthe self, Nsound::uint32 seed)"""
        return _Nsound.RngTausworthe_setSeed(self, seed)
    __swig_destroy__ = _Nsound.delete_RngTausworthe

# Register RngTausworthe in _Nsound:
_Nsound.RngTausworthe_swigregister(RngTausworthe)

class Sawtooth(Generator):
    r"""Proxy of C++ Nsound::Sawtooth class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, n_harmonics=100):
        r"""__init__(Sawtooth self, Nsound::float64 const & sample_rate, Nsound::int32 const n_harmonics=100) -> Sawtooth"""
        _Nsound.Sawtooth_swiginit(self, _Nsound.new_Sawtooth(sample_rate, n_harmonics))
    __swig_destroy__ = _Nsound.delete_Sawtooth

# Register Sawtooth in _Nsound:
_Nsound.Sawtooth_swigregister(Sawtooth)

class Sine(Generator):
    r"""Proxy of C++ Nsound::Sine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(Sine self, Nsound::float64 const & sample_rate) -> Sine"""
        _Nsound.Sine_swiginit(self, _Nsound.new_Sine(sample_rate))
    __swig_destroy__ = _Nsound.delete_Sine

# Register Sine in _Nsound:
_Nsound.Sine_swigregister(Sine)

class Spectrogram(object):
    r"""Proxy of C++ Nsound::Spectrogram class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Spectrogram self, Buffer x, Nsound::float64 const & sample_rate, Nsound::float64 const & time_window, Nsound::float64 const & time_step, Nsound::WindowType const & type) -> Spectrogram
        __init__(Spectrogram self, Spectrogram copy) -> Spectrogram
        """
        _Nsound.Spectrogram_swiginit(self, _Nsound.new_Spectrogram(*args))
    __swig_destroy__ = _Nsound.delete_Spectrogram

    def getFrequencyAxis(self):
        r"""getFrequencyAxis(Spectrogram self) -> Buffer"""
        return _Nsound.Spectrogram_getFrequencyAxis(self)

    def getMagnitude(self):
        r"""getMagnitude(Spectrogram self) -> AudioStream"""
        return _Nsound.Spectrogram_getMagnitude(self)

    def getTimeAxis(self):
        r"""getTimeAxis(Spectrogram self) -> Buffer"""
        return _Nsound.Spectrogram_getTimeAxis(self)

    def plot(self, *args):
        r"""plot(Spectrogram self, std::string const & title="", Nsound::boolean const & use_dB=True, Nsound::float64 const & squash=0.5)"""
        return _Nsound.Spectrogram_plot(self, *args)

    def computeMagnitude(self, x):
        r"""computeMagnitude(Spectrogram self, Buffer x) -> Buffer"""
        return _Nsound.Spectrogram_computeMagnitude(self, x)

# Register Spectrogram in _Nsound:
_Nsound.Spectrogram_swigregister(Spectrogram)

class Cosine(Generator):
    r"""Proxy of C++ Nsound::Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate):
        r"""__init__(Cosine self, Nsound::float64 const & sample_rate) -> Cosine"""
        _Nsound.Cosine_swiginit(self, _Nsound.new_Cosine(sample_rate))
    __swig_destroy__ = _Nsound.delete_Cosine

# Register Cosine in _Nsound:
_Nsound.Cosine_swigregister(Cosine)

class Square(Generator):
    r"""Proxy of C++ Nsound::Square class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Square self, Nsound::float64 const & sample_rate) -> Square
        __init__(Square self, Nsound::float64 const & sample_rate, Nsound::int32 const n_harmonics) -> Square
        __init__(Square self, Nsound::float64 const & sample_rate, Nsound::float64 const & percent_lambda_1, Nsound::float64 const & amplitude_1, Nsound::float64 const & percent_lambda_2, Nsound::float64 const & percent_lambda_3, Nsound::float64 const & amplitude_3, Nsound::float64 const & percent_lambda_4) -> Square
        """
        _Nsound.Square_swiginit(self, _Nsound.new_Square(*args))
    __swig_destroy__ = _Nsound.delete_Square

# Register Square in _Nsound:
_Nsound.Square_swigregister(Square)

class Stretcher(object):
    r"""Proxy of C++ Nsound::Stretcher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Stretcher self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_size_seconds=0.08, Nsound::float64 const & max_delta_window=0.25) -> Stretcher
        __init__(Stretcher self, Stretcher copy) -> Stretcher
        """
        _Nsound.Stretcher_swiginit(self, _Nsound.new_Stretcher(*args))
    __swig_destroy__ = _Nsound.delete_Stretcher

    def pitchShift(self, *args):
        r"""
        pitchShift(Stretcher self, AudioStream x, Nsound::float64 const & factor) -> AudioStream
        pitchShift(Stretcher self, AudioStream x, Buffer factor) -> AudioStream
        pitchShift(Stretcher self, Buffer x, Nsound::float64 const & factor) -> Buffer
        pitchShift(Stretcher self, Buffer x, Buffer factor) -> Buffer
        """
        return _Nsound.Stretcher_pitchShift(self, *args)

    def showProgress(self, flag):
        r"""showProgress(Stretcher self, Nsound::boolean flag)"""
        return _Nsound.Stretcher_showProgress(self, flag)

    def timeShift(self, *args):
        r"""
        timeShift(Stretcher self, AudioStream x, Nsound::float64 const & factor) -> AudioStream
        timeShift(Stretcher self, AudioStream x, Buffer factor) -> AudioStream
        timeShift(Stretcher self, Buffer x, Nsound::float64 const & factor) -> Buffer
        timeShift(Stretcher self, Buffer x, Buffer factor) -> Buffer
        """
        return _Nsound.Stretcher_timeShift(self, *args)

# Register Stretcher in _Nsound:
_Nsound.Stretcher_swigregister(Stretcher)


def Tic():
    r"""Tic()"""
    return _Nsound.Tic()

def Toc():
    r"""Toc() -> Nsound::float64"""
    return _Nsound.Toc()
class Triangle(Generator):
    r"""Proxy of C++ Nsound::Triangle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Triangle self, Nsound::float64 const & sample_rate) -> Triangle
        __init__(Triangle self, Nsound::float64 const & sample_rate, Nsound::float64 const & attack_time, Nsound::float64 const & release_time) -> Triangle
        __init__(Triangle self, Nsound::float64 const & sample_rate, Nsound::float64 const & percent_lambda_1, Nsound::float64 const & percent_lambda_2, Nsound::float64 const & amplitude_2, Nsound::float64 const & percent_lambda_3, Nsound::float64 const & percent_lambda_4, Nsound::float64 const & percent_lambda_5, Nsound::float64 const & amplitude_5, Nsound::float64 const & percent_lambda_6) -> Triangle
        """
        _Nsound.Triangle_swiginit(self, _Nsound.new_Triangle(*args))
    __swig_destroy__ = _Nsound.delete_Triangle

# Register Triangle in _Nsound:
_Nsound.Triangle_swigregister(Triangle)


def getFrequencyOffset(f1, octaves=0.0, cents=0.0):
    r"""getFrequencyOffset(Nsound::float64 const & f1, Nsound::float64 const & octaves=0.0, Nsound::float64 const & cents=0.0) -> Nsound::float64"""
    return _Nsound.getFrequencyOffset(f1, octaves, cents)
class Vocoder(object):
    r"""Proxy of C++ Nsound::Vocoder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sample_rate, window_length, n_bands, freq_max=4000.0, use_mel_scale=True, plot_filter_bank=False):
        r"""__init__(Vocoder self, Nsound::float64 const & sample_rate, Nsound::float64 const & window_length, Nsound::uint32 const & n_bands, Nsound::float64 const & freq_max=4000.0, bool const use_mel_scale=True, bool const plot_filter_bank=False) -> Vocoder"""
        _Nsound.Vocoder_swiginit(self, _Nsound.new_Vocoder(sample_rate, window_length, n_bands, freq_max, use_mel_scale, plot_filter_bank))
    __swig_destroy__ = _Nsound.delete_Vocoder

    def filter(self, *args):
        r"""
        filter(Vocoder self, Buffer voice, Buffer carrier) -> Buffer
        filter(Vocoder self, Nsound::float64 const & voice, Nsound::float64 const & carrier) -> Nsound::float64
        """
        return _Nsound.Vocoder_filter(self, *args)

    def getSampleRate(self):
        r"""getSampleRate(Vocoder self) -> Nsound::float64"""
        return _Nsound.Vocoder_getSampleRate(self)

    def reset(self):
        r"""reset(Vocoder self)"""
        return _Nsound.Vocoder_reset(self)

# Register Vocoder in _Nsound:
_Nsound.Vocoder_swigregister(Vocoder)

class Wavefile(object):
    r"""Proxy of C++ Nsound::Wavefile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DATA_ = _Nsound.Wavefile_DATA_
    
    FACT_ = _Nsound.Wavefile_FACT_
    
    FMT_ = _Nsound.Wavefile_FMT_
    
    PEAK_ = _Nsound.Wavefile_PEAK_
    
    RIFF_ = _Nsound.Wavefile_RIFF_
    
    WAVE_ = _Nsound.Wavefile_WAVE_
    
    WAVE_FORMAT_PCM_ = _Nsound.Wavefile_WAVE_FORMAT_PCM_
    
    WAVE_FORMAT_IEEE_FLOAT_ = _Nsound.Wavefile_WAVE_FORMAT_IEEE_FLOAT_
    
    UNSIGNED_64_BIT_ = _Nsound.Wavefile_UNSIGNED_64_BIT_
    
    UNSIGNED_48_BIT_ = _Nsound.Wavefile_UNSIGNED_48_BIT_
    
    UNSIGNED_32_BIT_ = _Nsound.Wavefile_UNSIGNED_32_BIT_
    
    UNSIGNED_24_BIT_ = _Nsound.Wavefile_UNSIGNED_24_BIT_
    
    UNSIGNED_16_BIT_ = _Nsound.Wavefile_UNSIGNED_16_BIT_
    
    UNSIGNED_8_BIT_ = _Nsound.Wavefile_UNSIGNED_8_BIT_
    

    @staticmethod
    def decodeFormatTag(format_tag):
        r"""decodeFormatTag(Nsound::uint16 const format_tag) -> std::string"""
        return _Nsound.Wavefile_decodeFormatTag(format_tag)

    @staticmethod
    def getDefaultSampleRate():
        r"""getDefaultSampleRate() -> Nsound::uint32"""
        return _Nsound.Wavefile_getDefaultSampleRate()

    @staticmethod
    def getDefaultSampleSize():
        r"""getDefaultSampleSize() -> Nsound::uint32"""
        return _Nsound.Wavefile_getDefaultSampleSize()

    @staticmethod
    def setDefaultSampleRate(*args):
        r"""
        setDefaultSampleRate(Nsound::int32 const rate)
        setDefaultSampleRate(Nsound::float64 const & rate)
        """
        return _Nsound.Wavefile_setDefaultSampleRate(*args)

    @staticmethod
    def setDefaultSampleSize(size):
        r"""setDefaultSampleSize(Nsound::uint32 size)"""
        return _Nsound.Wavefile_setDefaultSampleSize(size)

    @staticmethod
    def setIEEEFloat(flag):
        r"""setIEEEFloat(Nsound::boolean flag)"""
        return _Nsound.Wavefile_setIEEEFloat(flag)

    @staticmethod
    def setDefaults(sample_rate=44100.0, sample_bits=16.0, use_ieee_floats=False):
        r"""setDefaults(Nsound::float64 const & sample_rate=44100.0, Nsound::float64 const & sample_bits=16.0, Nsound::boolean const & use_ieee_floats=False)"""
        return _Nsound.Wavefile_setDefaults(sample_rate, sample_bits, use_ieee_floats)

    @staticmethod
    def read(fileName, astream):
        r"""read(std::string const & fileName, AudioStream astream) -> Nsound::boolean"""
        return _Nsound.Wavefile_read(fileName, astream)

    @staticmethod
    def readHeader(filename, info):
        r"""readHeader(std::string const & filename, std::string & info) -> Nsound::boolean"""
        return _Nsound.Wavefile_readHeader(filename, info)

    @staticmethod
    def write(*args):
        r"""
        write(std::string const & fileName, AudioStream _as, Nsound::uint32 bits_per_sample=16) -> Nsound::boolean
        write(std::string const & fileName, Buffer _as, Nsound::uint32 bits_per_sample, Nsound::uint32 sample_rate) -> Nsound::boolean
        """
        return _Nsound.Wavefile_write(*args)

    def __init__(self):
        r"""__init__(Wavefile self) -> Wavefile"""
        _Nsound.Wavefile_swiginit(self, _Nsound.new_Wavefile())
    __swig_destroy__ = _Nsound.delete_Wavefile

# Register Wavefile in _Nsound:
_Nsound.Wavefile_swigregister(Wavefile)
cvar = _Nsound.cvar
Wavefile.SIGNED_64_BIT_ = _Nsound.cvar.Wavefile_SIGNED_64_BIT_
Wavefile.SIGNED_48_BIT_ = _Nsound.cvar.Wavefile_SIGNED_48_BIT_
Wavefile.SIGNED_32_BIT_ = _Nsound.cvar.Wavefile_SIGNED_32_BIT_
Wavefile.SIGNED_24_BIT_ = _Nsound.cvar.Wavefile_SIGNED_24_BIT_
Wavefile.SIGNED_16_BIT_ = _Nsound.cvar.Wavefile_SIGNED_16_BIT_
Wavefile.SIGNED_8_BIT_ = _Nsound.cvar.Wavefile_SIGNED_8_BIT_

def Wavefile_decodeFormatTag(format_tag):
    r"""Wavefile_decodeFormatTag(Nsound::uint16 const format_tag) -> std::string"""
    return _Nsound.Wavefile_decodeFormatTag(format_tag)

def Wavefile_getDefaultSampleRate():
    r"""Wavefile_getDefaultSampleRate() -> Nsound::uint32"""
    return _Nsound.Wavefile_getDefaultSampleRate()

def Wavefile_getDefaultSampleSize():
    r"""Wavefile_getDefaultSampleSize() -> Nsound::uint32"""
    return _Nsound.Wavefile_getDefaultSampleSize()

def Wavefile_setDefaultSampleRate(*args):
    r"""
    Wavefile_setDefaultSampleRate(Nsound::int32 const rate)
    Wavefile_setDefaultSampleRate(Nsound::float64 const & rate)
    """
    return _Nsound.Wavefile_setDefaultSampleRate(*args)

def Wavefile_setDefaultSampleSize(size):
    r"""Wavefile_setDefaultSampleSize(Nsound::uint32 size)"""
    return _Nsound.Wavefile_setDefaultSampleSize(size)

def Wavefile_setIEEEFloat(flag):
    r"""Wavefile_setIEEEFloat(Nsound::boolean flag)"""
    return _Nsound.Wavefile_setIEEEFloat(flag)

def Wavefile_setDefaults(sample_rate=44100.0, sample_bits=16.0, use_ieee_floats=False):
    r"""Wavefile_setDefaults(Nsound::float64 const & sample_rate=44100.0, Nsound::float64 const & sample_bits=16.0, Nsound::boolean const & use_ieee_floats=False)"""
    return _Nsound.Wavefile_setDefaults(sample_rate, sample_bits, use_ieee_floats)

def Wavefile_read(fileName, astream):
    r"""Wavefile_read(std::string const & fileName, AudioStream astream) -> Nsound::boolean"""
    return _Nsound.Wavefile_read(fileName, astream)

def Wavefile_readHeader(filename, info):
    r"""Wavefile_readHeader(std::string const & filename, std::string & info) -> Nsound::boolean"""
    return _Nsound.Wavefile_readHeader(filename, info)

def Wavefile_write(*args):
    r"""
    Wavefile_write(std::string const & fileName, AudioStream _as, Nsound::uint32 bits_per_sample=16) -> Nsound::boolean
    Wavefile_write(std::string const & fileName, Buffer _as, Nsound::uint32 bits_per_sample, Nsound::uint32 sample_rate) -> Nsound::boolean
    """
    return _Nsound.Wavefile_write(*args)


def __rshift__(*args):
    r"""
    __rshift__(AudioStream lhs, AudioPlayback rhs)
    __rshift__(Buffer lhs, AudioPlayback rhs)
    __rshift__(AudioStream lhs, AudioPlaybackRt rhs)
    __rshift__(Buffer lhs, AudioPlaybackRt rhs)
    __rshift__(Nsound::float64 sample, AudioPlaybackRt rhs)
    __rshift__(Buffer lhs, char const * rhs)
    __rshift__(AudioStream lhs, char const * rhs)
    """
    return _Nsound.__rshift__(*args)
class ID3v1Tag(object):
    r"""Proxy of C++ Nsound::ID3v1Tag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ID3v1Tag self, std::string const & filename="", Nsound::boolean show_warnings=True) -> ID3v1Tag"""
        _Nsound.ID3v1Tag_swiginit(self, _Nsound.new_ID3v1Tag(*args))

    def read(self, filename, show_warnings=True):
        r"""read(ID3v1Tag self, std::string const & filename, Nsound::boolean show_warnings=True) -> Nsound::boolean"""
        return _Nsound.ID3v1Tag_read(self, filename, show_warnings)

    def write(self, filename, show_warnings=True):
        r"""write(ID3v1Tag self, std::string const & filename, Nsound::boolean show_warnings=True) -> Nsound::boolean"""
        return _Nsound.ID3v1Tag_write(self, filename, show_warnings)
    title = property(_Nsound.ID3v1Tag_title_get, _Nsound.ID3v1Tag_title_set, doc=r"""title : std::string""")
    artist = property(_Nsound.ID3v1Tag_artist_get, _Nsound.ID3v1Tag_artist_set, doc=r"""artist : std::string""")
    album = property(_Nsound.ID3v1Tag_album_get, _Nsound.ID3v1Tag_album_set, doc=r"""album : std::string""")
    year = property(_Nsound.ID3v1Tag_year_get, _Nsound.ID3v1Tag_year_set, doc=r"""year : std::string""")
    comment = property(_Nsound.ID3v1Tag_comment_get, _Nsound.ID3v1Tag_comment_set, doc=r"""comment : std::string""")
    genre = property(_Nsound.ID3v1Tag_genre_get, _Nsound.ID3v1Tag_genre_set, doc=r"""genre : char""")
    __swig_destroy__ = _Nsound.delete_ID3v1Tag

# Register ID3v1Tag in _Nsound:
_Nsound.ID3v1Tag_swigregister(ID3v1Tag)


def __lshift__(*args):
    r"""
    __lshift__(std::ostream & out, Buffer rhs) -> std::ostream
    __lshift__(std::ostream & out, FilterIIR rhs) -> std::ostream
    __lshift__(Buffer lhs, char const * rhs) -> Buffer
    __lshift__(AudioStream lhs, char const * rhs) -> AudioStream
    __lshift__(std::ostream & out, ID3v1Tag rhs) -> std::ostream &
    """
    return _Nsound.__lshift__(*args)


#------------------------------------------------------------------------------
# from nsound.i

# python modules
import inspect
import os.path
import types
import sys
import warnings

try:
    import matplotlib
    import matplotlib.pyplot
except ImportError:
    warnings.warn("Nsound couldn't import matplotlib, plotting will be disabled")

__package__ = "%s" % PACKAGE_RELEASE
__version__ = "%s" % PACKAGE_VERSION
__author__ = "%s" % NSOUND_AUTHORS
__copyright__ = "%s" % NSOUND_COPYRIGHT
__license__ = "GNU General Public License 2.0 or later"

def get_caller(offset = 0, basename = False):

    filename, line_number = inspect.stack()[1 + offset][1:3]

    if basename:
        filename = os.path.basename(filename)

    return filename, line_number

def rel_to_abs(path):

    if os.path.isabs(path):
        return path

    caller, line_no = get_caller(offset = 1)
    caller = os.path.abspath(caller)
    prefix = os.path.dirname(caller)

    return os.path.abspath(os.path.join(prefix, path))

# The one and only plotter.
_plotter = Plotter()




