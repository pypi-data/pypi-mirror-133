# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['mpan', 'mpan.generation']

package_data = \
{'': ['*']}

install_requires = \
['coverage[toml]>=6.2,<7.0']

extras_require = \
{'faker': ['Faker>=10.0.0,<11.0.0'], 'mimesis': ['mimesis>=5.1.0,<6.0.0']}

setup_kwargs = {
    'name': 'mpan',
    'version': '1.1.0',
    'description': "A parsing library for the UK's MPAN energy standard",
    'long_description': '[![Limejump logo](https://raw.githubusercontent.com/limejump/mpan/master/logo.png)](https://limejump.com/)\n\n\n# mpan\n\n[![PyPI](https://img.shields.io/pypi/pyversions/mpan)](https://pypi.org/project/mpan)\n[![PyPI](https://img.shields.io/pypi/wheel/mpan)](https://pypi.org/project/mpan)\n[![License](https://img.shields.io/pypi/l/mpan)](https://mit-license.org/)\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n![100% Coverage](https://img.shields.io/badge/coverage-100%25-4ec820.svg)\n\nA library to help you parse the UK energy industry\'s MPAN number format.\n\n\n## Parsing & Validation\n\n```python\nfrom mpan.mpan import MPAN\n\n\nmpan = MPAN("A valid MPAN")\n```\n\nJust import the library and pass it the MPAN you want to parse.  In response\nyou get a handy `MPAN` object with a number of convenient properties:\n\n\n### The Basics\n\nThe most common use is likely to be in examining the "core":\n\n```python\nmpan = MPAN("001112221312345678907")\n\nmpan.top_line    # "00111222"\nmpan.core        # "1312345678907"\nmpan.identifier  # "12345678"\nmpan.is_short    # False\nmpan.is_long     # True\nmpan.as_short    # "1312345678907"\n\nmpan = MPAN("1312345678907")\n\nmpan.top_line    # None\nmpan.core        # "1312345678907"\nmpan.identifier  # "12345678"\nmpan.is_short    # True\nmpan.is_long     # False\nmpan.as_short    # "1312345678907"\n```\n\n\n### The Top Line\n\nYou can also go deeper though, and interrogate the top line:\n\n```python\nmpan = MPAN("001112221312345678907")\n\nmpan.profile_class                       # A ProfileClass instance\nmpan.profile_class.identifier            # "00"\nmpan.profile_class.description           # "Half-hourly supply (import and export)"\nmpan.profile_class.is_valid              # True\n\nmpan.meter_time_switch_code              # A MeterTimeSwitchCode instance\nmpan.meter_time_switch_code.identifier   # "111"\nmpan.meter_time_switch_code.description  # "DNO specific"\nmpan.meter_time_switch_code.is_valid     # True\n\nmpan.line_loss_factor_class              # "222"\n```\n\nNote however that if you don\'t supply a long MPAN, this library can\'t help you:\n\n```python\nmpan = MPAN("1312345678907")\n\nmpan.profile_class           # None\nmpan.meter_time_switch_code  # None\nmpan.line_loss_factor_class  # None\n```\n\n\n### The Distributor\n\nThe `core` can also be broken up to look into the `distributor`, which is a\nlittle tricky, since the distributor id can either refer to a DNO (which has a\nknown set of properties) or an IDNO (which has a different set).  We handle\nthis discrepancy by returning `None` in cases where the requested information\nis unavailable:\n\n```python\nmpan = MPAN("2099999999993")\n\nmpan.distributor                   # A Distributor instance\nmpan.distributor.identifier        # "20"\nmpan.distributor.area              # "Southern England"\nmpan.distributor.gsp_group_id      # "_H"\nmpan.distributor.operator          # "Scottish & Southern Electricity Networks"\nmpan.distributor.participant_id    # "SOUT"\nmpan.distributor.is_dno            # True\nmpan.distributor.is_idno           # False\nmpan.distributor.is_valid          # True\nmpan.distributor.licensee          # None\nmpan.distributor.mpas_operator_id  # None\nmpan.distributor.name              # None\n\nmpan = MPAN("2499999999991")\n\nmpan.distributor                   # A Distributor instance\nmpan.distributor.identifier        # "24"\nmpan.distributor.area              # None\nmpan.distributor.gsp_group_id      # None\nmpan.distributor.operator          # None\nmpan.distributor.participant_id    # None\nmpan.distributor.is_dno            # False\nmpan.distributor.is_idno           # True\nmpan.distributor.is_valid          # True\nmpan.distributor.licensee          # "Independent Power Networks"\nmpan.distributor.mpas_operator_id  # "IPNL"\nmpan.distributor.name              # "Envoy"\n```\n\n\n### Aliases\n\nFor people who want to limit the number of characters they\'re typing, we\nrecognise a few standard acronyms:\n\n```python\nmpan.pc    # Profile Class\nmpan.mtc   # Meter Time Switch Code\nmpan.llfc  # Line Loss Factor Class\n```\n\n\n### Validation Options\n\nYou\'ve got choices for validation.  `.is_valid()` will check your MPAN string\nand return a boolean value indicating whether it\'s valid or not, while you can\ncall `.check()` on an `MPAN` instance, which will explode with an\n`InvalidMpanError` if your string doesn\'t check out.\n\n> An important note about validation\n>\n> There are four aspects of validation performed by the validation checks\n> below: the profile class and meter time switch code (if provided as part of\n> the top line in a long MPAN) will be checked against a list of known values,\n> the distributor from the core will be similarly checked, and finally the\n> formula for the check digit will be applied.\n\n```python\nfrom mpan.exceptions import InvalidMPANError\nfrom mpan.mpan import MPAN\n\n\nMPAN("2499999999991").is_valid          # True\nMPAN("2499999999990").is_valid          # False  (bad checksum)\nMPAN("8699999999991").is_valid          # False  (bad distributor)\nMPAN("001112221312345678907").is_valid  # True\nMPAN("991112221312345678907").is_valid  # False  (bad profile class)\nMPAN("000002221312345678907").is_valid  # False  (bad meter time switch code)\n\nMPAN("I am not an MPAN")                # InvalidMPANError\n\ntry:\n    MPAN("2499999999991").check()  # Returns None\n    MPAN("2499999999990").check()  # Raises an InvalidMPANError\nexcept InvalidMPANError:\n    print("This MPAN is broken")\n```\n\nThere\'s also a shortcut if you just want validation:\n\n```python\nfrom mpan.helpers import is_valid\n\n\nis_valid("2499999999991")     # True\nis_valid("2499999999990")     # False\nis_valid("I am not an MPAN")  # False\n```\n\n### Generation\n\nYou can also use this library to generate valid MPANs via [Faker](https://github.com/joke2k/faker)\nor [Mimesis](https://mimesis.name/):\n\n\n#### Faker\n\n```python\nfrom faker import Faker\n\nfrom mpan.generation.faker import MPANProvider\n\n\nfake = Faker()\nfake.add_provider(MPANProvider)\nfake.mpan()\n```\n\n\n#### Mimesis\n\n```python\nfrom mimesis import Generic\nfrom mimesis.locales import Locale\n\nfrom mpan.generation.mimesis import MPANProvider\n\n\ngeneric = Generic(locale=Locale.DEFAULT)\ngeneric.add_provider(MPANProvider)\ngeneric.mpan.generate()\n```\n\n\n## Generation\n\nYou may not be interested in parsing an MPAN, but rather would just like a way\nto reliably generate a valid one a few thousand times.  For that, this library\nhas a provider fo both the [Faker](https://pypi.org/project/Faker/) and\n[Mimesis](https://mimesis.name/) libraries:\n\n\n### Faker\n\nFaker support is available via the optional extra `faker`, so you must install\n`mpan` like this to use it:\n\n```shell\n$ pip install mpan[faker]\n```\n\n\n#### Example\n\n```python\nfrom faker import Faker\n\nfrom mpan.generation.faker import MPANProvider\n\n\nfake = Faker()\nfake.add_provider(MPANProvider)\n\nprint(fake.mpan())\n```\n\n\n### Mimesis\n\nMimesis support is available via the optional extra `mimesis`, so you must\ninstall `mpan` like this to use it:\n\n```shell\n$ pip install mpan[mimesis]\n```\n\n\n#### Example\n\n```python\nfrom mimesis import Generic\nfrom mimesis.locales import Locale\n\nfrom mpan.generation.mimesis import MPANProvider\n\n\ngeneric = Generic(locale=Locale.DEFAULT)\ngeneric.add_provider(MPANProvider)\n\nprint(generic.mpan.generate())\n```\n\n\n## Installation\n\nIt\'s on PyPI, so you can install it with `pip`:\n\n```shell\n$ pip install mpan\n```\n\nThis will give you the base version of the library which can only do parsing\nand validation.  If you also want support for generation, you need to specify\n*which* generation method you want to use.  It will be rolled in as a dependency:\n\n```shell\n$ pip install mpan[faker]\n```\n\nor\n\n```shell\n$ pip install mpan[mimesis]\n```\n\n\n## Requirements\n\nThis is a pure-python module with no external dependencies.  However, you\'ll\nneed to be running Python 3.8 or higher.\n\n\n## Development\n\n### Setting up a Local Development Environment\n\nWe\'re using [Poetry](https://python-poetry.org/), so if you want to make some\nchanges, you should install that and then just run `poetry install`.  This will\npull in all the development dependencies like `pytest`, `isort`, etc.\n\n\n## Testing\n\nWhen inside your virtualenv, just run:\n\n```shell\n$ pytest\n```\n\n\n### Deployment/Releases\n\nTo build, use Poetry:\n\n```shell\n$ poetry build\n```\n\nTo publish a new release, use Poetry for that too:\n\n```shell\n$ poetry publish\n```\n\n\n## External Documentation\n\nThis is based largely on the [Wikipedia article](https://en.wikipedia.org/wiki/Meter_Point_Administration_Number)\non the MPAN standard.  The validation code for example is cribbed right from\nthere.\n\n\n## Changelog\n\n\n### 1.1.0\n\n* Added support for automatic generation of valid MPANs with either Faker or\n  Mimesis.\n\n\n### 1.0.4\n\n* Minor update to the validation error message.\n\n\n### 1.0.3\n\n* Bugfix: Comparing two identical MPAN objects now returns boolean `True`,\n  while comparing an MPAN object to a string of the same value returns `False`.\n* Added lots more documentation to the README.\n\n\n### 1.0.2\n\n* `.is_valid()` was amended to validate the top row as well.\n* `is_valid()` now returns a boolean rather than potentially throwing an\n  `InvalidMPANError`.\n\n\n### 1.0.1\n\n* Minor change to use a new contact email\n\n\n### 1.0.0\n\n* Initial release\n',
    'author': 'Limejump Developers',
    'author_email': 'opensource@limejump.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/limejump/mpan',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
