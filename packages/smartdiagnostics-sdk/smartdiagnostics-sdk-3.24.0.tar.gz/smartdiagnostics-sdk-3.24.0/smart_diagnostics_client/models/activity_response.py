# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'location': 'LocationChild',
        'date_occurred': 'datetime',
        'description': 'str',
        'activity_category': 'CaseContentType',
        'group': 'GroupChild',
        'indicator': 'IndicatorChild',
        'activity_codes': 'list[ActivityCodeChild]',
        'activity_document': 'DocumentChild',
        'title': 'str',
        'evidence_indicator': 'IndicatorChild',
        'created': 'datetime',
        'created_by': 'str',
        'modified': 'datetime',
        'modified_by': 'str',
        'savings': 'float',
        'hierarchy': 'list[HierarchyChild]'
    }

    attribute_map = {
        'id': 'Id',
        'location': 'Location',
        'date_occurred': 'DateOccurred',
        'description': 'Description',
        'activity_category': 'ActivityCategory',
        'group': 'Group',
        'indicator': 'Indicator',
        'activity_codes': 'ActivityCodes',
        'activity_document': 'ActivityDocument',
        'title': 'Title',
        'evidence_indicator': 'EvidenceIndicator',
        'created': 'Created',
        'created_by': 'CreatedBy',
        'modified': 'Modified',
        'modified_by': 'ModifiedBy',
        'savings': 'Savings',
        'hierarchy': 'Hierarchy'
    }

    def __init__(self, id=None, location=None, date_occurred=None, description=None, activity_category=None, group=None, indicator=None, activity_codes=None, activity_document=None, title=None, evidence_indicator=None, created=None, created_by=None, modified=None, modified_by=None, savings=None, hierarchy=None):  # noqa: E501
        """ActivityResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._location = None
        self._date_occurred = None
        self._description = None
        self._activity_category = None
        self._group = None
        self._indicator = None
        self._activity_codes = None
        self._activity_document = None
        self._title = None
        self._evidence_indicator = None
        self._created = None
        self._created_by = None
        self._modified = None
        self._modified_by = None
        self._savings = None
        self._hierarchy = None
        self.discriminator = None
        self.id = id
        self.location = location
        self.date_occurred = date_occurred
        self.description = description
        self.activity_category = activity_category
        if group is not None:
            self.group = group
        if indicator is not None:
            self.indicator = indicator
        self.activity_codes = activity_codes
        self.activity_document = activity_document
        self.title = title
        if evidence_indicator is not None:
            self.evidence_indicator = evidence_indicator
        self.created = created
        self.created_by = created_by
        self.modified = modified
        self.modified_by = modified_by
        self.savings = savings
        self.hierarchy = hierarchy

    @property
    def id(self):
        """Gets the id of this ActivityResponse.  # noqa: E501


        :return: The id of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityResponse.


        :param id: The id of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def location(self):
        """Gets the location of this ActivityResponse.  # noqa: E501


        :return: The location of this ActivityResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ActivityResponse.


        :param location: The location of this ActivityResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def date_occurred(self):
        """Gets the date_occurred of this ActivityResponse.  # noqa: E501


        :return: The date_occurred of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_occurred

    @date_occurred.setter
    def date_occurred(self, date_occurred):
        """Sets the date_occurred of this ActivityResponse.


        :param date_occurred: The date_occurred of this ActivityResponse.  # noqa: E501
        :type: datetime
        """
        if date_occurred is None:
            raise ValueError("Invalid value for `date_occurred`, must not be `None`")  # noqa: E501

        self._date_occurred = date_occurred

    @property
    def description(self):
        """Gets the description of this ActivityResponse.  # noqa: E501


        :return: The description of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityResponse.


        :param description: The description of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def activity_category(self):
        """Gets the activity_category of this ActivityResponse.  # noqa: E501


        :return: The activity_category of this ActivityResponse.  # noqa: E501
        :rtype: CaseContentType
        """
        return self._activity_category

    @activity_category.setter
    def activity_category(self, activity_category):
        """Sets the activity_category of this ActivityResponse.


        :param activity_category: The activity_category of this ActivityResponse.  # noqa: E501
        :type: CaseContentType
        """
        if activity_category is None:
            raise ValueError("Invalid value for `activity_category`, must not be `None`")  # noqa: E501

        self._activity_category = activity_category

    @property
    def group(self):
        """Gets the group of this ActivityResponse.  # noqa: E501


        :return: The group of this ActivityResponse.  # noqa: E501
        :rtype: GroupChild
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ActivityResponse.


        :param group: The group of this ActivityResponse.  # noqa: E501
        :type: GroupChild
        """

        self._group = group

    @property
    def indicator(self):
        """Gets the indicator of this ActivityResponse.  # noqa: E501


        :return: The indicator of this ActivityResponse.  # noqa: E501
        :rtype: IndicatorChild
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this ActivityResponse.


        :param indicator: The indicator of this ActivityResponse.  # noqa: E501
        :type: IndicatorChild
        """

        self._indicator = indicator

    @property
    def activity_codes(self):
        """Gets the activity_codes of this ActivityResponse.  # noqa: E501


        :return: The activity_codes of this ActivityResponse.  # noqa: E501
        :rtype: list[ActivityCodeChild]
        """
        return self._activity_codes

    @activity_codes.setter
    def activity_codes(self, activity_codes):
        """Sets the activity_codes of this ActivityResponse.


        :param activity_codes: The activity_codes of this ActivityResponse.  # noqa: E501
        :type: list[ActivityCodeChild]
        """
        if activity_codes is None:
            raise ValueError("Invalid value for `activity_codes`, must not be `None`")  # noqa: E501

        self._activity_codes = activity_codes

    @property
    def activity_document(self):
        """Gets the activity_document of this ActivityResponse.  # noqa: E501


        :return: The activity_document of this ActivityResponse.  # noqa: E501
        :rtype: DocumentChild
        """
        return self._activity_document

    @activity_document.setter
    def activity_document(self, activity_document):
        """Sets the activity_document of this ActivityResponse.


        :param activity_document: The activity_document of this ActivityResponse.  # noqa: E501
        :type: DocumentChild
        """
        if activity_document is None:
            raise ValueError("Invalid value for `activity_document`, must not be `None`")  # noqa: E501

        self._activity_document = activity_document

    @property
    def title(self):
        """Gets the title of this ActivityResponse.  # noqa: E501


        :return: The title of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivityResponse.


        :param title: The title of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def evidence_indicator(self):
        """Gets the evidence_indicator of this ActivityResponse.  # noqa: E501


        :return: The evidence_indicator of this ActivityResponse.  # noqa: E501
        :rtype: IndicatorChild
        """
        return self._evidence_indicator

    @evidence_indicator.setter
    def evidence_indicator(self, evidence_indicator):
        """Sets the evidence_indicator of this ActivityResponse.


        :param evidence_indicator: The evidence_indicator of this ActivityResponse.  # noqa: E501
        :type: IndicatorChild
        """

        self._evidence_indicator = evidence_indicator

    @property
    def created(self):
        """Gets the created of this ActivityResponse.  # noqa: E501


        :return: The created of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ActivityResponse.


        :param created: The created of this ActivityResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this ActivityResponse.  # noqa: E501


        :return: The created_by of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ActivityResponse.


        :param created_by: The created_by of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def modified(self):
        """Gets the modified of this ActivityResponse.  # noqa: E501


        :return: The modified of this ActivityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ActivityResponse.


        :param modified: The modified of this ActivityResponse.  # noqa: E501
        :type: datetime
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def modified_by(self):
        """Gets the modified_by of this ActivityResponse.  # noqa: E501


        :return: The modified_by of this ActivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ActivityResponse.


        :param modified_by: The modified_by of this ActivityResponse.  # noqa: E501
        :type: str
        """
        if modified_by is None:
            raise ValueError("Invalid value for `modified_by`, must not be `None`")  # noqa: E501

        self._modified_by = modified_by

    @property
    def savings(self):
        """Gets the savings of this ActivityResponse.  # noqa: E501


        :return: The savings of this ActivityResponse.  # noqa: E501
        :rtype: float
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this ActivityResponse.


        :param savings: The savings of this ActivityResponse.  # noqa: E501
        :type: float
        """
        if savings is None:
            raise ValueError("Invalid value for `savings`, must not be `None`")  # noqa: E501

        self._savings = savings

    @property
    def hierarchy(self):
        """Gets the hierarchy of this ActivityResponse.  # noqa: E501


        :return: The hierarchy of this ActivityResponse.  # noqa: E501
        :rtype: list[HierarchyChild]
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """Sets the hierarchy of this ActivityResponse.


        :param hierarchy: The hierarchy of this ActivityResponse.  # noqa: E501
        :type: list[HierarchyChild]
        """
        if hierarchy is None:
            raise ValueError("Invalid value for `hierarchy`, must not be `None`")  # noqa: E501

        self._hierarchy = hierarchy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
