# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_occurred': 'datetime',
        'activity_category': 'CaseContentType',
        'title': 'str',
        'description': 'str',
        'activity_document': 'DocumentChild',
        'group_id': 'str',
        'indicator_id': 'str',
        'activity_code_ids': 'list[str]',
        'evidence_indicator_id': 'str',
        'savings': 'float'
    }

    attribute_map = {
        'date_occurred': 'DateOccurred',
        'activity_category': 'ActivityCategory',
        'title': 'Title',
        'description': 'Description',
        'activity_document': 'ActivityDocument',
        'group_id': 'GroupId',
        'indicator_id': 'IndicatorId',
        'activity_code_ids': 'ActivityCodeIds',
        'evidence_indicator_id': 'EvidenceIndicatorId',
        'savings': 'Savings'
    }

    def __init__(self, date_occurred=None, activity_category=None, title=None, description=None, activity_document=None, group_id=None, indicator_id=None, activity_code_ids=None, evidence_indicator_id=None, savings=None):  # noqa: E501
        """ActivityCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._date_occurred = None
        self._activity_category = None
        self._title = None
        self._description = None
        self._activity_document = None
        self._group_id = None
        self._indicator_id = None
        self._activity_code_ids = None
        self._evidence_indicator_id = None
        self._savings = None
        self.discriminator = None
        self.date_occurred = date_occurred
        self.activity_category = activity_category
        self.title = title
        if description is not None:
            self.description = description
        if activity_document is not None:
            self.activity_document = activity_document
        if group_id is not None:
            self.group_id = group_id
        if indicator_id is not None:
            self.indicator_id = indicator_id
        if activity_code_ids is not None:
            self.activity_code_ids = activity_code_ids
        if evidence_indicator_id is not None:
            self.evidence_indicator_id = evidence_indicator_id
        if savings is not None:
            self.savings = savings

    @property
    def date_occurred(self):
        """Gets the date_occurred of this ActivityCreateRequest.  # noqa: E501


        :return: The date_occurred of this ActivityCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_occurred

    @date_occurred.setter
    def date_occurred(self, date_occurred):
        """Sets the date_occurred of this ActivityCreateRequest.


        :param date_occurred: The date_occurred of this ActivityCreateRequest.  # noqa: E501
        :type: datetime
        """
        if date_occurred is None:
            raise ValueError("Invalid value for `date_occurred`, must not be `None`")  # noqa: E501

        self._date_occurred = date_occurred

    @property
    def activity_category(self):
        """Gets the activity_category of this ActivityCreateRequest.  # noqa: E501


        :return: The activity_category of this ActivityCreateRequest.  # noqa: E501
        :rtype: CaseContentType
        """
        return self._activity_category

    @activity_category.setter
    def activity_category(self, activity_category):
        """Sets the activity_category of this ActivityCreateRequest.


        :param activity_category: The activity_category of this ActivityCreateRequest.  # noqa: E501
        :type: CaseContentType
        """
        if activity_category is None:
            raise ValueError("Invalid value for `activity_category`, must not be `None`")  # noqa: E501

        self._activity_category = activity_category

    @property
    def title(self):
        """Gets the title of this ActivityCreateRequest.  # noqa: E501


        :return: The title of this ActivityCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivityCreateRequest.


        :param title: The title of this ActivityCreateRequest.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ActivityCreateRequest.  # noqa: E501


        :return: The description of this ActivityCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityCreateRequest.


        :param description: The description of this ActivityCreateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def activity_document(self):
        """Gets the activity_document of this ActivityCreateRequest.  # noqa: E501


        :return: The activity_document of this ActivityCreateRequest.  # noqa: E501
        :rtype: DocumentChild
        """
        return self._activity_document

    @activity_document.setter
    def activity_document(self, activity_document):
        """Sets the activity_document of this ActivityCreateRequest.


        :param activity_document: The activity_document of this ActivityCreateRequest.  # noqa: E501
        :type: DocumentChild
        """

        self._activity_document = activity_document

    @property
    def group_id(self):
        """Gets the group_id of this ActivityCreateRequest.  # noqa: E501


        :return: The group_id of this ActivityCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ActivityCreateRequest.


        :param group_id: The group_id of this ActivityCreateRequest.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def indicator_id(self):
        """Gets the indicator_id of this ActivityCreateRequest.  # noqa: E501


        :return: The indicator_id of this ActivityCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._indicator_id

    @indicator_id.setter
    def indicator_id(self, indicator_id):
        """Sets the indicator_id of this ActivityCreateRequest.


        :param indicator_id: The indicator_id of this ActivityCreateRequest.  # noqa: E501
        :type: str
        """

        self._indicator_id = indicator_id

    @property
    def activity_code_ids(self):
        """Gets the activity_code_ids of this ActivityCreateRequest.  # noqa: E501


        :return: The activity_code_ids of this ActivityCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_code_ids

    @activity_code_ids.setter
    def activity_code_ids(self, activity_code_ids):
        """Sets the activity_code_ids of this ActivityCreateRequest.


        :param activity_code_ids: The activity_code_ids of this ActivityCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._activity_code_ids = activity_code_ids

    @property
    def evidence_indicator_id(self):
        """Gets the evidence_indicator_id of this ActivityCreateRequest.  # noqa: E501


        :return: The evidence_indicator_id of this ActivityCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._evidence_indicator_id

    @evidence_indicator_id.setter
    def evidence_indicator_id(self, evidence_indicator_id):
        """Sets the evidence_indicator_id of this ActivityCreateRequest.


        :param evidence_indicator_id: The evidence_indicator_id of this ActivityCreateRequest.  # noqa: E501
        :type: str
        """

        self._evidence_indicator_id = evidence_indicator_id

    @property
    def savings(self):
        """Gets the savings of this ActivityCreateRequest.  # noqa: E501


        :return: The savings of this ActivityCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this ActivityCreateRequest.


        :param savings: The savings of this ActivityCreateRequest.  # noqa: E501
        :type: float
        """

        self._savings = savings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
