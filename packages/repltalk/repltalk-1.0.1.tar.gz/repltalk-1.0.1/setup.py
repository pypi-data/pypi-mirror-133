# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['repltalk']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.6,<4.0']

setup_kwargs = {
    'name': 'repltalk',
    'version': '1.0.1',
    'description': 'Allows you to do various things with the kind of unofficial Replit Repl Talk API',
    'long_description': "# Examples\n```py\n# Getting the newest posts on Repl Talk and printing their titles\nasync for post in client.boards.all.get_posts():\n\tprint(post.title)\n```\n\n# API Reference\nHow to use the `repltalk` lib for Python. The functions are pretty self explanatory but I've added a short description for each of them.\n***\n> *The following functions are all coroutines unless specifically specified because asyncio is cool*\n\n## Client\n`class repltalk.Client()`\n+ `await login(username, password)`\nLogs in to Repl.it with your username and password. Your bot must be verified in order to use this function.\n+ `await get_post(post_id)`\nGets the post with that id. \n*returns Post*\n+ `await get_comment(comment_id)`\nGets the comment with that id. \n*returns Comment*\n+ `await post_exists(post_id)`\nReturns whether or not the post exists.\n+ `await get_leaderboard(limit=30)`\nGets the top users from the Repl Talk leaderboard. \n*returns list of `User`s*\n+ `await get_all_comments()`\nGets all the recent comments from Repl Talk. \n*returns list of `Comment`s\n+ `await get_user(username)`\nGets the user with that username. \n*returns User*\n+ `await get_reports(resolved=False)`\nGets a list of reports. Only works for moderators or admins. See *Report List*\n+ `boards`\nSee *Board*.\n\n***\n## Board\n`class client.boards`\n***\n+ `all`\nThe *All* board on Repl Talk.\n+ `share`\nThe *Share* board on Repl Talk.\n+ `ask`\nThe *Ask* board on Repl Talk.\n+ `announcements`\nThe *Announcements* board on Repl Talk.\n+ `challenge`\nThe *Challenge* board on Repl Talk.\n+ `learn`\nThe *Learn* board on Repl Talk.\n***\n+ `async for post in get_posts(sort='top', search='')`\nGets the most recent posts from that board.\nSort is the sorting order (top|hot|new) and search is the search query.\n*returns AsyncPostList*\n### RichBoard\nA board that contains all the information from *Board*, and more.\nYou can get this by doing `await client.boards.get(board_name)` (NOT YET ADDED)\n+ `name`\nThe name of the board.\n+ `title_cta`\nTitle call to action\n+ `body_cta`\nBody call to action\n+ `button_cta`\nButton call to action\n+ `repl_required`\nWhether a Repl is required to be submitted.\n+\n\n***\n## Post\n+ `id`\nThe post ID.\n+ `title`\nThe post title.\n+ `content`\nThe post content.\n+ `board`\nThe board the post was made on.\n+ `votes`\nThe amount of upvotes the post has.\n+ `author`\nThe post author. Will be a User object.\n+ `timestamp`\nThe time the post was created at. (datetime.datetime object)\n+ `url`\nThe post url in Repl Talk.\n+ `repl`\nThe repl attached to the post.\n+ `language`\nThe *Language* that the Repl attached to the post uses.\n+ `show_hosted`\nIndicates whether the post has a hosted repl linked to it.\n+ `is_announcement`\nWhether the post is marked as an announcement.\n+ `pinned`\nWhether the post has been pinned to the top of the board.\n+ `can_edit`\nIndicates if the user can edit the post. This will be *False* unless you created the post.\n+ `can_comment`\nIf the user can comment on the post.\n+ `can_vote`\nIndicates if the user can upvote the post.\n+ `has_voted`\nIndicates if the user has already voted on the post.\n+ `is_locked`\nIndicates if the post is locked.\n+ `can_answer`\nWhether or not the user can answer the post.\n+ `answered`\nIf the post has been answered (will always be False if it's not a question).\n+ `comment_count`\nThe amount of comments the post has\n+ `await get_comments()`\nGets the comments on the post.\n+ `await post_comment(content)`\nPosts a comment on the post.\n+ `await report(reason)`\nReport the post\n+ `await delete()`\nDelete the Post\n\n\n***\n## Comment\n+ `id`\nThe comment ID.\n+ `content`\nThe comment body.\n+ `timestamp`\nThe time the comment was created at. (datetime.datetime object)\n+ `can_edit`\nIndicates if the user can edit the comment.\n+ `can_comment`\nWhether or not the user can post a comment.\n+ `url`\nThe comment's url.\n+ `votes`\nGets the amount of upvotes the comment has.\n+ `can_vote`\nIndicates if the user can vote on the comment.\n+ `has_voted`\nIndicates if the user has already upvoted the post.\n+ `author`\nThe *User* for the author of the post.\n+ `post`\nThe post that the comment was made on.\n+ `replies`\nA list of replies that the comment received.\n+ `parent`\nThe parent comment, if any.\n+ `await reply(content)`\nReplies to the comment with the content.\n+ `await report(reason)`\nReport the comment\n+ `await delete()`\nDelete the comment\n\n***\n## User\n+ `id`\nThe user ID. Pretty useless since you can't get the user from their id.\n+ `name`\nThe user's username.\n+ `avatar`\nThe user's avatar url.\n+ `url`\nThe user's profile link.\n+ `cycles`\nThe amount of cycles/karma that user has.\n+ `roles`\nThe roles the user has set on their profile.\n+ `bio` \nThe short description written by a user on their profile.\n+ `first_name`\nWhat the user set as their first name in their profile\n+ `last_name`\nWhat the user set as their last name in their profile\n+ `languages`\nThe *Language*s that the user uses most often.\n+ `timestamp`\nThe time when the user account was created. (datetime.datetime object)\n+ `is_hacker`\nWhether the user has the hacker plan\n+ `await get_comments(limit=30, order='new')`\nGet a list of up to 1100 of the users comments. See *Comment*\n+ `await get_posts(limit=30, order='new')`\nGet a list of up to 100 of the user's posts. See *Post*\n+ `await ban(reason)`\nBan the user\n\n\n***\n## PostList/AsyncPostList\nActs like a normal list, except you can iterate over it\n+ `await next()`\nGets the next page of posts. Not present in *AsyncPostList* because it's done automatically.\n+ `board`\nGets the board of the repls it's getting from\n\n***\n## Repl\n+ `id`\nThe Repl ID.\n+ `embed_url`\nThe url for embedding the Repl on a web page.\n+ `url`\nThe url of the Repl.\n+ `title`\nThe title of the Repl.\n+ `language`\nThe *Language* of the Repl.\n\n***\n## Language\nRepresents a programming language on Repl.it.\n+ `id`\nGets the ID of the language (ie python3).\n+ `display_name`\nGets the display name of the language (ie Python).\n+ `icon`\nGets the url for the language icon.\n+ `category`\nGets the category that the language is listed as.\n+ `is_new`\nWhether the language was recently added to Repl.it.\n+ `tagline`\nA short description of the language.\n\n***\n## Report List\nList of reports. *see Report* If linked post/comment is deleted is lazy report, *See lazyReport*\n+ `for report in get_reports`\nCycles through the reports, with lazy posts/comments.\n+ `async for report in get_reports`\nCycles through the reports with full posts, if there is a post.\n\n***\n## Report\nA report on a comment or post\n+ `id`\nThe report id\n+ `type`\nThe type of the report. (`'post'` or `'comment'`)\n+ `reason`\nWhy the report was made\n+ `timestamp`\nWhen the report was created\n+ `creator`\nWho created the report\n+ `await get_attached()`\nGet the attached post/comment\n\n***\n## Lazy Report\nA less complete report\n+ `id`\nThe report id\n+ `reason`\nWhy the report was made\n+ `creator`\nWho created the report\n\n***\n## Lazy Post\nA less complete post\n+ `url`\nThe url to the post\n+ `id`\nThe post's id\n+ `author`\nThe post's author\n+ `content`\nThe post's content\n+ `title`\nThe post's title\n+ `await delete()`\nDelete the post\n+ `await get_full_post()`\nReturns the full post\n\n***\n## Lazy Comment\nA less complete comment\n+ `url`\nThe url to the comment\n+ `id`\nThe comment's id\n+ `author`\nThe comment's author\n+ `content`\nThe comment's content\n+ `await delete()`\nDelete the comment\n+ `await get_full_comment()`\nReturns the full comment\n\n\n",
    'author': 'mat',
    'author_email': 'pypirepltalk@matdoes.dev',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/mat-1/repl-talk-api',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
