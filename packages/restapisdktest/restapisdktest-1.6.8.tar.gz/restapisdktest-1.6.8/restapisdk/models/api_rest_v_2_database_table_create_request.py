# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ApiRestV2DatabaseTableCreateRequest(object):

    """Implementation of the 'Api Rest V2 Database Table Create Request' model.

    TODO: type model description here.

    Attributes:
        create_database (bool): Flag to indicate if the database and schema
            should be created if they do not exist in Falcon. (Valid values:
            True/False)
        schema (string): DDL of the table to be created.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "create_database": 'createDatabase',
        "schema": 'schema'
    }

    def __init__(self,
                 create_database=True,
                 schema=None):
        """Constructor for the ApiRestV2DatabaseTableCreateRequest class"""

        # Initialize members of the class
        self.create_database = create_database
        self.schema = schema

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        create_database = dictionary.get("createDatabase") if dictionary.get("createDatabase") else True
        schema = dictionary.get('schema')

        # Return an object of this model
        return cls(create_database,
                   schema)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
